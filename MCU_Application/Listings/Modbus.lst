C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN .\Objects\Modbus.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Modbus\Modbus.c OPTIMIZE(8,SPEED) REGFILE(.\Objects\dwLaser_F020.ORC) BR
                    -OWSE ORDER INCDIR(.\Lib;.\Driver;.\MainApp;.\Modbus) DEFINE(C8051F580) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT
                    -(.\Listings\Modbus.lst) PREPRINT(.\Listings\Modbus.i) OBJECT(.\Objects\Modbus.obj)

line level    source

   1          #include "modbus.h"
   1      =1  #ifndef __MODBUS__H__
   2      =1  #define __MODBUS__H__
   3      =1  /*****************************************************************************/
   4      =1  #include "appConfig.h"
   1      =2  #ifndef __APPCONFIG_H__
   2      =2  #define __APPCONFIG_H__
   3      =2  /*****************************************************************************/
   4      =2  #define CONFIG_SYSCLK                       (22118400L)
   5      =2  #ifdef C8051F020
           =2 #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
           =2 #endif
   8      =2  #define CONFIG_DEBUG                        0//调试功能
   9      =2  #define CONFIG_USING_WDT                                        0//使能看门狗
  10      =2  #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
  11      =2  #define CONFIG_LADDER_SECTORS_START                     64//指令起始地址
  12      =2  #define CONFIG_LADDER_SECTORS_END                       128//指令结束地址
  13      =2  #define CONFIG_LASERTIMER_OVERFLOW_US           1000L//定时器周期 1mS
  14      =2  #define CONFIG_VERSION                                          0x0001
  15      =2  #define CONFIG_CHECK_CODE                                       0x5A00
  16      =2  
  17      =2  /*****************************************************************************/
  18      =2  #define CONFIG_UART0_BAUDRATE                           57600//串口波特率
  19      =2  #define CONFIG_UART0_PARITY                                     NONE
  20      =2  #define CONFIG_UART0_STOPBIT                            1
  21      =2  #define CONFIG_UART0_DATABIT                            8
  22      =2  
  23      =2  #define CONFIG_UART1_BAUDRATE                           115200//串口波特率
  24      =2  #define CONFIG_UART1_PARITY                                     NONE
  25      =2  #define CONFIG_UART1_STOPBIT                            1
  26      =2  #define CONFIG_UART1_DATABIT                            8
  27      =2  /*****************************************************************************/
  28      =2  #define CONFIG_I2C0_FREQ                                        (100000L)               
  29      =2  #define CONFIG_I2C1_FREQ                                        (100000L)
  30      =2  #define CONFIG_I2C2_FREQ                                        (100000L)
  31      =2  #define CONFIG_I2C3_FREQ                                        (100000L)
  32      =2  #define CONFIG_I2C4_FREQ                                        (100000L)
  33      =2  /*****************************************************************************/
  34      =2  #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
  35      =2  #define CONFIG_AT24C02_SIZE                             256
  36      =2  #define CONFIG_AT24C04_SIZE                             512
  37      =2  #define CONFIG_AT24C08_SIZE                             1024
  38      =2  #define CONFIG_AT24C16_SIZE                             2048
  39      =2  #define CONFIG_AT24C32_SIZE                             4096
  40      =2  #define CONFIG_AT24C64_SIZE                                     8192
  41      =2  #define CONFIG_AT24C128_SIZE                            16384
  42      =2  #define CONFIG_AT24C256_SIZE                            32768
  43      =2  #define CONFIG_EPROM_ADDRESS                            0x50
  44      =2  #define CONFIG_EPROM_FRAM                                       0//铁电存储体无写入等待
  45      =2  #define CONFIG_EPROM_FREQ                                       1//
  46      =2  /*****************************************************************************/
  47      =2  #define CONFIG_USE_IPID                                         1//使能IPID温度控制
  48      =2  /*****************************************************************************/
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 2   

  49      =2  #define CONFIG_USE_HWVER_SHOW                           1//使能固件版本显示
  50      =2  #define CONFIG_USE_MPD1_SHOW                            1//使能MPD1测量显示
  51      =2  #define CONFIG_USE_MPD2_SHOW                            1//使能MPD2测量显示
  52      =2  #define CONFIG_USE_FBS1                                         1//使能FBS1检测
  53      =2  #define CONFIG_USE_FBS2                                         1//使能FBS2检测
  54      =2  #define CONFIG_USE_LASER_TEMP                           1//使能激光器温度显示
  55      =2  #define CONFIG_USE_RADIATOR_TEMP                        1//使能散热器温度显示
  56      =2  #define CONFIG_USE_ENVI_TEMP                            1//使能环境温度显示
  57      =2  #define CONFIG_USE_IPID_UPDATE                          1//使能IPID参数更新功能
  58      =2  #define CONFIG_USE_IPID_OUTSHOW                         1//使能IPID输出显示
  59      =2  /*****************************************************************************/
  60      =2  //SPLC设置
  61      =2  #define CONFIG_SPLC_IO_INPUT_NUM                        16//硬件输入点数
  62      =2  #define CONFIG_SPLC_IO_OUTPUT_NUM                       16//硬件输出点数
  63      =2  #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
  64      =2  #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
  65      =2  #define CONFIG_IPID_RUN_CYCLE                           40//IPID运行周期 默认 40 * 100mS
  66      =2  #define CONFIG_IPID_PWM_CYCLE                           20//IPID输出周期 默认 20 * 100mS
  67      =2  /*****************************************************************************/
  68      =2  #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
  69      =2  /*****************************************************************************/
  70      =2  #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
  71      =2  /*****************************************************************************/
  72      =2  #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
  73      =2  /*****************************************************************************/
  74      =2  #define CONFIG_SPLC_USING_EPROM                         0//EPROM掉电存储启用
  75      =2  /*****************************************************************************/
  76      =2  #define CONFIG_SPLC_USING_ADC                           0//使能ADC模块
  77      =2  #define CONFIG_SPLC_ADC_FILTER_TAP                      48//ADC位移滤波次数
  78      =2  #define CONFIG_SPLC_ADC_CHANNLE                         9//ADC通道数
  79      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
  80      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
  81      =2  #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
  82      =2  #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
  83      =2  /*****************************************************************************/
  84      =2  #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
  85      =2  /*****************************************************************************/
  86      =2  #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
  87      =2  #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
  88      =2  #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
  89      =2  #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
  90      =2  #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
  91      =2  #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
  92      =2  /*****************************************************************************/
  93      =2  
  94      =2  /*****************************************************************************/
  95      =2  #define ID_ONLY_1_CHANNEL                                       4321
  96      =2  #define ID_ONLY_2_CHANNEL                                       8765
  97      =2  #define ID_BOTH_CHANNEL                                         9431
  98      =2  #define ID_LASER_MODE_CW                                        7631
  99      =2  #define ID_LASER_MODE_SP                                        8934
 100      =2  #define ID_LASER_MODE_MP                                        2453
 101      =2  #define ID_LASER_MODE_GP                                        3876
 102      =2  /*****************************************************************************/
 103      =2  #define FBS1_IN_PORT                                            3
 104      =2  #define FBS2_IN_PORT                                            2
 105      =2  #define COOLON_OUT_PORT                                         (1 * 8 + 3)
 106      =2  /*****************************************************************************/
 107      =2  //PID FUZZY 模糊PID配置
 108      =2  #define CONFIG_TECOUT_CYCLE                                     4000//PID输出转PWM周期
 109      =2  /*****************************************************************************/
 110      =2  /*****************************************************************************/
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 3   

 111      =2  #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
 112      =2  #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
 113      =2  #define DISABLE_INTERRUPT                                       EA = 0;
 114      =2  #define ENABLE_INTERRUPT                                        EA = 1;
 115      =2  /*****************************************************************************/
 116      =2  #include "stdint.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDINT_H
   8      =3  #define STDINT_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef unsigned char uint8_t;
  13      =3  typedef unsigned short uint16_t;
  14      =3  typedef unsigned long uint32_t;
  15      =3  typedef uint32_t uint64_t[2];
  16      =3  
  17      =3  typedef signed char int8_t;
  18      =3  typedef short int16_t;
  19      =3  typedef long int32_t;
  20      =3  typedef int32_t int64_t[2];
  21      =3  typedef float fp32_t;
  22      =3  typedef double fp64_t;
  23      =3  
  24      =3  #elif defined __ICC8051__
           =3 
           =3 /* Fixed size types. These are all optional. */
           =3 #ifdef __INT8_T_TYPE__
           =3   typedef __INT8_T_TYPE__   int8_t;
           =3   typedef __UINT8_T_TYPE__ uint8_t;
           =3 #endif /* __INT8_T_TYPE__ */
           =3 
           =3 #ifdef __INT16_T_TYPE__
           =3   typedef __INT16_T_TYPE__   int16_t;
           =3   typedef __UINT16_T_TYPE__ uint16_t;
           =3 #endif /* __INT16_T_TYPE__ */
           =3 
           =3 #ifdef __INT32_T_TYPE__
           =3   typedef __INT32_T_TYPE__   int32_t;
           =3   typedef __UINT32_T_TYPE__ uint32_t;
           =3 #endif /* __INT32_T_TYPE__ */
           =3 
           =3 #ifdef __INT64_T_TYPE__
           =3   #pragma language=save
           =3   #pragma language=extended
           =3   typedef __INT64_T_TYPE__   int64_t;
           =3   typedef __UINT64_T_TYPE__ uint64_t;
           =3   #pragma language=restore
           =3 #endif /* __INT64_T_TYPE__ */
           =3 
           =3 #endif
  51      =3  
  52      =3  #endif
 117      =2  #include "stdbool.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 4   

   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDBOOL_H
   8      =3  #define STDBOOL_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef bit bool;
  13      =3  enum{
  14      =3    false = 0,
  15      =3    true = 1,
  16      =3  };
  17      =3  
  18      =3  #elif defined __ICC8051__
           =3 
           =3 #ifndef _SYSTEM_BUILD
           =3   #pragma system_include
           =3 #endif
           =3 
           =3 #ifndef __cplusplus
           =3 
           =3 #define bool _Bool
           =3 #define true 1
           =3 #define false 0
           =3 
           =3 #define __bool_true_false_are_defined 1
           =3 
           =3 #endif /* !__cplusplus */
           =3 
           =3 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 
           =3 typedef bit bool;
           =3 enum{
           =3   false = 0,
           =3   true = 1,
           =3 };
           =3 
           =3 #endif
  43      =3  
  44      =3  #endif //STDBOOL_H
  45      =3  
 118      =2  #include "endian.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __ENDIAN_H__
   8      =3  #define __ENDIAN_H__
   9      =3  
  10      =3  #define bswapu16(x) (((x) >> 8) | ((x) << 8))
  11      =3  #define bswapu32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) \
  12      =3                    | (((x) & 0x0000FF00) << 8) | ((x) << 24))
  13      =3  
  14      =3  #define bswap16(x) bswapu16((uint16_t)(x))
  15      =3  #define bswap32(x) bswapu32((uint32_t)(x))
  16      =3  
  17      =3  // Big Endian Compilers
  18      =3  #if ((defined __C51__) || (defined __RC51__) || (defined _CC51))
  19      =3  
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 5   

  20      =3  #define htobe16(x) (x)
  21      =3  #define htobe32(x) (x)
  22      =3  #define be16toh(x) (x)
  23      =3  #define be32toh(x) (x)
  24      =3  
  25      =3  #define htole16(x) bswap16(x)
  26      =3  #define htole32(x) bswap32(x)
  27      =3  #define le16toh(x) bswap16(x)
  28      =3  #define le32toh(x) bswap32(x)
  29      =3  
  30      =3  #elif ((defined SDCC) || (defined HI_TECH_C) || (defined __ICC8051__))
           =3 
           =3 #define htobe16(x) bswap16(x)
           =3 #define htobe32(x) bswap32(x)
           =3 #define be16toh(x) bswap16(x)
           =3 #define be32toh(x) bswap32(x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #else
           =3 
           =3 #define htobe16(x) (x)
           =3 #define htobe32(x) (x)
           =3 #define be16toh(x) (x)
           =3 #define be32toh(x) (x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #endif  // Compiler Definitions
  55      =3  
  56      =3  #endif  // __ENDIAN_H__
 119      =2  #include "si_toolchain.h"
   1      =3  /******************************************************************************
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __SI_TOOLCHAIN_H__
   8      =3  #define __SI_TOOLCHAIN_H__
   9      =3  
  10      =3  #include <stdint.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 6   

           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
  11      =3  #include <stdbool.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 7   

           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
  12      =3  
  13      =3  /**************************************************************************//**
  14      =3   *
  15      =3   * @addtogroup toolchain_group Toolchain Abstraction
  16      =3   *
  17      =3   * @brief Macros for toolchain abstraction.
  18      =3   *
  19      =3   * # Introduction #
  20      =3   *
  21      =3   * This header file contains macros that are used to provide an abstraction
  22      =3   * for toolchain use in source code.  The 8051 compiler requires C-language
  23      =3   * extensions in order to fully use features of the 8051 architecture.  All
  24      =3   * compilers for 8051 implement a set of extensions but use different names
  25      =3   * and ways of implementing those extensions.  This header file provides
  26      =3   * macros that are defined for each supported toolchain and can be used in
  27      =3   * the source code.  This allows the source code to use 8051 extensions and
  28      =3   * remain independent of which toolchain is used for compilation.
  29      =3   *
  30      =3   * ## Variable and Pointer Declarations ##
  31      =3   *
  32      =3   * It is often useful to specify the memory area (or segment) of a variable,
  33      =3   * pointer, or pointer target.  For example, you may wish to place all
  34      =3   * variables in XDATA by default, but for variables used in time-sensitive
  35      =3   * code you use DATA for efficient access.  In this case you declare the
  36      =3   * XDATA variable in the normal C way, but declare the variables to be located
  37      =3   * in the DATA segment using @ref SI_SEGMENT_VARIABLE.
  38      =3   *
  39      =3   * Pointers are more complicated because there are two memory spaces
  40      =3   * associated with a pointer, the pointer target, and the pointer variable
  41      =3   * itself.  When using default memory segment for the pointer location and
  42      =3   * target, then no special macro is needed.  But if you wish to specify the
  43      =3   * pointer variable location, or target memory segment, then you can use one
  44      =3   * of the following macros to do this in a toolchain-independent way.
  45      =3   *
  46      =3   * |Pointer segment|Target segment|Macro                                   |
  47      =3   * |---------------|--------------|----------------------------------------|
  48      =3   * |default        |generic       |None                                    |
  49      =3   * |default        |specific      |@ref SI_VARIABLE_SEGMENT_POINTER        |
  50      =3   * |specific       |generic       |@ref SI_SEGMENT_POINTER                 |
  51      =3   * |specific       |specific      |@ref SI_SEGMENT_VARIABLE_SEGMENT_POINTER|
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 8   

  52      =3   *
  53      =3   * ## Prior Toolchain Abstraction Header File ##
  54      =3   *
  55      =3   * This file supercedes an earlier header file named `compiler_defs.h`.  We
  56      =3   * are deprecating the use of compiler_defs.h, however it will remain for
  57      =3   * backwards compatibility.  This file was created to normalize macro names,
  58      =3   * remove unused macros, and to provide documentation.
  59      =3   *
  60      =3   * ## Supported Toolchains ##
  61      =3   *
  62      =3   * - Keil/ARM C51
  63      =3   *
  64      =3   * @{
  65      =3   *
  66      =3   *****************************************************************************/
  67      =3  
  68      =3  // Make sure there is a NULL defined if the toolchain does not provide it.
  69      =3  #ifndef NULL
  70      =3  #define NULL ((void *)0)
  71      =3  #endif
  72      =3  
  73      =3  // -------------------------------
  74      =3  // Keil/ARM C51
  75      =3  //
  76      =3  #if defined(__C51__)
  77      =3  
  78      =3  /// Used with pointers, declares a generic pointer.  Generic pointers
  79      =3  /// work with any memory space but are inefficient.
  80      =3  #define SI_SEG_GENERIC
  81      =3  
  82      =3  /// Declares a variable to be located in 8051 DATA space.
  83      =3  #define SI_SEG_DATA data
  84      =3  
  85      =3  /// Declares a variable to be located in 8051 IDATA space.
  86      =3  #define SI_SEG_IDATA idata
  87      =3  
  88      =3  /// Declares a variable to be located in 8051 XDATA space.
  89      =3  #define SI_SEG_XDATA xdata
  90      =3  
  91      =3  /// Declares a variable to be located in 8051 PDATA space.
  92      =3  #define SI_SEG_PDATA pdata
  93      =3  
  94      =3  /// Declares a variable to be located in 8051 BDATA (bit-addressable) space.
  95      =3  #define SI_SEG_BDATA bdata
  96      =3  
  97      =3  /// Declares a variable to be located in 8051 CODE space.
  98      =3  #define SI_SEG_CODE code
  99      =3  
 100      =3  /**************************************************************************//**
 101      =3   * Declares a bit variable in a bit-addressable memory space.
 102      =3   *
 103      =3   * @param name The name of the bit variable.
 104      =3   *****************************************************************************/
 105      =3  #define SI_BIT(name) bit name
 106      =3  
 107      =3  /**************************************************************************//**
 108      =3   * Declares a bit variable in a bit-addressable SFR or memory space.
 109      =3   *
 110      =3   * @param name The name of the bit variable.
 111      =3   * @param address The address of the byte containing the bit.
 112      =3   * @param bitnum The bit number (0-7) within the byte.
 113      =3   *
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 9   

 114      =3   * This cannot be used to make any arbitrary SFR or variable into
 115      =3   * a bit variable.  The underlying memory must support bit-addressability.
 116      =3   *****************************************************************************/
 117      =3  #define SI_SBIT(name, address, bitnum) sbit name = address^bitnum
 118      =3  
 119      =3  /**************************************************************************//**
 120      =3   * Declares an 8-bit special function register (SFR) variable.
 121      =3   *
 122      =3   * @param name The name of the SFR variable.
 123      =3   * @param address The address of the SFR.
 124      =3   *
 125      =3   * This creates a C variable (8-bit) that maps to a physical special function
 126      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 127      =3   * location into an SFR.  The _address_ must map to a real SFR in the memory
 128      =3   * map.
 129      =3   *****************************************************************************/
 130      =3  #define SI_SFR(name, address) sfr name = address
 131      =3  
 132      =3  /**************************************************************************//**
 133      =3   * Declares a 16-bit special function register (SFR) variable.
 134      =3   *
 135      =3   * @param name The name of the SFR variable.
 136      =3   * @param address The address of the 16-bit SFR.
 137      =3   *
 138      =3   * This creates a C variable (16-bit) that maps to a physical special function
 139      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 140      =3   * location into an SFR.  The _address_ must map to a real 16-bit SFR in the
 141      =3   * memory map.
 142      =3   *****************************************************************************/
 143      =3  #define SI_SFR16(name, address) sfr16 name = address
 144      =3  
 145      =3  #ifndef __SLS_IDE__
 146      =3  /**************************************************************************//**
 147      =3   * Define an interrupt handler function for an interrupt vector.
 148      =3   *
 149      =3   * @param name The name of the interrupt handler function.
 150      =3   * @param vector The interrupt vector number.
 151      =3   *
 152      =3   * This macro defines a function to be an interrupt handler.  The _vector_
 153      =3   * parameter is the 8051 interrupt vector number, not the address.  This
 154      =3   * will cause the compiler to treat the function as the interrupt handler
 155      =3   * and generate the appropriate prolog/epilog code.
 156      =3   *
 157      =3   * @note This macro is used to define the function implementation.  To declare
 158      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO.
 159      =3   *****************************************************************************/
 160      =3  #define SI_INTERRUPT(name, vector) void name (void) interrupt vector
 161      =3  
 162      =3  /**************************************************************************//**
 163      =3   * Define an interrupt handler function using a specific register bank.
 164      =3   *
 165      =3   * @param name The name of the interrupt handler function.
 166      =3   * @param vector The interrupt vector number.
 167      =3   * @param regnum The register bank number (0-3).
 168      =3   *
 169      =3   * This macro defines a function to be an interrupt handler, using a specific
 170      =3   * register bank for the interrupt code.  The _vector_ parameter is the 8051
 171      =3   * interrupt vector number, not the address.  The _regnum_ parameter is the
 172      =3   * register bank number (0-3) that will be used as general purpose registers
 173      =3   * for the instructions in the compiled code.  Using dedicated register banks
 174      =3   * for interrupt handlers allows the prolog code to just switch banks instead
 175      =3   * of saving and restoring all the general purpose registers.  This can make
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 10  

 176      =3   * interrupt entry/exit faster but requires dedicating a register bank for
 177      =3   * the interrupt handler.
 178      =3   *
 179      =3   * @note This macro is used to define the function implementation.  To declare
 180      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO_USING.
 181      =3   *****************************************************************************/
 182      =3  #define SI_INTERRUPT_USING(name, vector, regnum)                             \
 183      =3               void name (void) interrupt vector using regnum
 184      =3  
 185      =3  /**************************************************************************//**
 186      =3   * Declare an interrupt handler prototype for an interrupt vector.
 187      =3   *
 188      =3   * @param name The name of the interrupt handler function.
 189      =3   * @param vector The interrupt vector number.
 190      =3   *
 191      =3   * This macro declares a function prototype for an interrupt handler.  The
 192      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 193      =3   * Declaring the function prototype this way will cause the compiler to
 194      =3   * recognize that the function is an interrupt handler and not a normal C
 195      =3   * function.
 196      =3   *
 197      =3   * @note This macro is used to declare a prototype for the interrupt function.
 198      =3   * To define the interrupt function implementation, use @ref SI_INTERRUPT.
 199      =3   *****************************************************************************/
 200      =3  #define SI_INTERRUPT_PROTO(name, vector) void name (void)
 201      =3  
 202      =3  /**************************************************************************//**
 203      =3   * Declare an interrupt handler prototype using a specific register bank.
 204      =3   *
 205      =3   * @param name The name of the interrupt handler function.
 206      =3   * @param vector The interrupt vector number.
 207      =3   * @param regnum The register bank number (0-3).
 208      =3   *
 209      =3   * This macro declares a function prototype for an interrupt handler, for a
 210      =3   * function that uses a specific register bank for the interrupt code.  The
 211      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 212      =3   * The _regnum_ parameter is the register bank number (0-3) that will be used
 213      =3   * as general purpose registers in the function.  Declaring the function
 214      =3   * prototype this way will cause the compiler to recognize that the function
 215      =3   * is an interrupt handler and is not a normal C function.
 216      =3   *
 217      =3   * @note This macro is used to declare a prototype for the interrupt function.
 218      =3   * To define the interrupt function implementation,
 219      =3   * use @ref SI_INTERRUPT_USING.
 220      =3   *****************************************************************************/
 221      =3  #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 222      =3  
 223      =3  /**************************************************************************//**
 224      =3   * Define a function to be reentrant (store local variables on the stack).
 225      =3   *
 226      =3   * @param name The name of the function.
 227      =3   * @param return_type The data type of the function return value
 228      =3   * (void, int, etc).
 229      =3   * @param parameter One C function parameter (or "void") (type and name).
 230      =3   *
 231      =3   * This macro defines a function to be reentrant.
 232      =3   *
 233      =3   * You must specify the _return_type_ which is the type of the function.  It
 234      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 235      =3   * is the list of function parameters.  It can be `void` or else it must be
 236      =3   * a parameter data type and name.  It can also be multiple parameters but
 237      =3   * they must be enclosed in parentheses and separated by commas.
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 11  

 238      =3   *
 239      =3   * __Example__
 240      =3   *
 241      =3   * ~~~~~~~~.c
 242      =3   * // The following is used to implement a function with the following
 243      =3   * // signature...
 244      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 245      =3   *
 246      =3   * SI_REENTRANT_FUNCTION(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2))
 247      =3   * {
 248      =3   *   // Function implementation body
 249      =3   * }
 250      =3   * ~~~~~~~~
 251      =3   *
 252      =3   * @note This macro is used to define the function implementation.  To declare
 253      =3   * the function prototype, use @ref SI_REENTRANT_FUNCTION_PROTO.
 254      =3   *****************************************************************************/
 255      =3  #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
 256      =3    return_type name parameter reentrant
 257      =3  
 258      =3  /**************************************************************************//**
 259      =3   * Declare a function to be reentrant (store local variables on the stack).
 260      =3   *
 261      =3   * @param name The name of the function.
 262      =3   * @param return_type The data type of the function return value
 263      =3   * (void, int, etc).
 264      =3   * @param parameter One C function parameter (or "void") (type and name).
 265      =3   *
 266      =3   * This macro declares a function prototype for a C function that is reentrant.
 267      =3   * See the documentation for @ref SI_REENTRANT_FUNCTION for an explanation of
 268      =3   * the macro arguments.  This is an advanced feature.
 269      =3   *
 270      =3   * @note This macro is used to declare a prototype for the function.  To
 271      =3   * define the function implementation, use @ref SI_REENTRANT_FUNCTION.
 272      =3   *****************************************************************************/
 273      =3  #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
 274      =3    return_type name parameter reentrant
 275      =3                 
 276      =3  /**************************************************************************//**
 277      =3   * Define a function to use a specific register bank.
 278      =3   *
 279      =3   * @param name The name of the function.
 280      =3   * @param return_value The data type of the function return value
 281      =3   * (void, int, etc).
 282      =3   * @param parameter One C function parameter (or "void") (type and name).
 283      =3   * @param regnum The register bank number (0-3).
 284      =3   *
 285      =3   * This macro defines a function that uses a specific register bank.  The
 286      =3   * _regnum_ parameter is the register bank number (0-3) that will be used as
 287      =3   * general purpose registers for the instructions in the compiled function
 288      =3   * code.  Using dedicated register banks for a function can reduce the amount
 289      =3   * of registers saving and restoring needed on entry and exit to the
 290      =3   * function.  However, this is an advanced feature and you should not use it
 291      =3   * unless you fully understand how and when to use register banking.
 292      =3   *
 293      =3   * You must specify the _return_value_ which is the type of the function.  It
 294      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 295      =3   * is the list of function parameters.  It can be `void` or else it must be
 296      =3   * a parameter data type and name.  It can also be multiple parameters but
 297      =3   * they must be enclosed in parentheses and separated by commas.
 298      =3   *
 299      =3   * __Example__
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 12  

 300      =3   *
 301      =3   * ~~~~~~~~.c
 302      =3   * // The following is used to implement a function with the following
 303      =3   * // signature, and that uses register bank 3 ...
 304      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 305      =3   *
 306      =3   * SI_FUNCTION_USING(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2), 3)
 307      =3   * {
 308      =3   *   // Function implementation body
 309      =3   * }
 310      =3   * ~~~~~~~~
 311      =3   *
 312      =3   * @note This macro is used to define the function implementation.  To declare
 313      =3   * the function prototype, use @ref SI_FUNCTION_PROTO_USING.
 314      =3   *****************************************************************************/
 315      =3  #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
 316      =3               return_value name parameter using regnum
 317      =3  
 318      =3  /**************************************************************************//**
 319      =3   * Declare a function that uses a specific register bank.
 320      =3   *
 321      =3   * @param name The name of the function.
 322      =3   * @param return_value The data type of the function return value
 323      =3   * (void, int, etc).
 324      =3   * @param parameter One C function parameter (or "void") (type and name).
 325      =3   * @param regnum The register bank number (0-3).
 326      =3   *
 327      =3   * This macro declares a function prototype for a C function that uses a
 328      =3   * specific register its working registers.  See the documentation for
 329      =3   * @ref SI_FUNCTION_USING for an explanation of the macro arguments.  This is
 330      =3   * an advanced feature.
 331      =3   *
 332      =3   * @note This macro is used to declare a prototype for the function.  To
 333      =3   * define the function implementation, use @ref SI_FUNCTION_USING.
 334      =3   *****************************************************************************/
 335      =3  #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
 336      =3               return_value name parameter
 337      =3  
 338      =3  /**************************************************************************//**
 339      =3   * Declare a variable to be located in a specific memory segment.
 340      =3   *
 341      =3   * @param name The variable name.
 342      =3   * @param vartype The variable data type.* @param memseg The memory segment to use for the variable.
 343      =3   *
 344      =3   * This macro declares a variable to be located in a specific memory area
 345      =3   * (or segment) of the 8051 memory space.  It is only necessary to use this
 346      =3   * macro if you want to force the variable into a specific memory space instead
 347      =3   * of the default memory space used by the compiler.  The segment can be
 348      =3   * one of the following:
 349      =3   *
 350      =3   * - @ref SI_SEG_DATA
 351      =3   * - @ref SI_SEG_IDATA
 352      =3   * - @ref SI_SEG_BDATA
 353      =3   * - @ref SI_SEG_PDATA
 354      =3   * - @ref SI_SEG_XDATA
 355      =3   * - @ref SI_SEG_CODE
 356      =3   *
 357      =3   * __Example__
 358      =3   *
 359      =3   * ~~~~~~~~.c
 360      =3   * // The following macro can be used to create a variable located in
 361      =3   * // XDATA with the following signature:
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 13  

 362      =3   * uint8_t myVar;
 363      =3   *
 364      =3   * SI_SEGMENT_VARIABLE(myVar, uint8_t, SEG_XDATA);
 365      =3   * ~~~~~~~~
 366      =3   *****************************************************************************/
 367      =3  #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype memseg name
 368      =3  
 369      =3  /**************************************************************************//**
 370      =3   * Declare a memory segment specific pointer variable.
 371      =3   *
 372      =3   * @param name The pointer variable name.
 373      =3   * @param vartype The pointer data type.
 374      =3   * @param targseg The target memory segment for the pointer.
 375      =3   *
 376      =3   * This macro declares a pointer that points at a specific memory area
 377      =3   * (or segment).  The memory segment of the pointer variable itself is not
 378      =3   * specified and the default is used.  The segment can be one of the following:
 379      =3   *
 380      =3   * - @ref SI_SEG_DATA
 381      =3   * - @ref SI_SEG_IDATA
 382      =3   * - @ref SI_SEG_BDATA
 383      =3   * - @ref SI_SEG_PDATA
 384      =3   * - @ref SI_SEG_XDATA
 385      =3   * - @ref SI_SEG_CODE
 386      =3   *
 387      =3   * __Example__
 388      =3   *
 389      =3   * ~~~~~~~~.c
 390      =3   * // The following macro can be used to create a pointer that points to
 391      =3   * // a location in XDATA with the following signature:
 392      =3   * uint8_t *pVar; // where pVar is pointing at XDATA
 393      =3   *
 394      =3   * SI_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA);
 395      =3   * ~~~~~~~~
 396      =3   *****************************************************************************/
 397      =3  #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
 398      =3               vartype targseg * name
 399      =3  
 400      =3  /**************************************************************************//**
 401      =3   * Declare a memory segment specific pointer variable, in a specific segment.
 402      =3   *
 403      =3   * @param name The pointer variable name.
 404      =3   * @param vartype The pointer data type.
 405      =3   * @param targseg The target memory segment for the pointer.
 406      =3   * @param memseg The memory segment to use for the pointer variable.
 407      =3   *
 408      =3   * This macro declares a pointer that points at a specific memory area
 409      =3   * (or segment).  The pointer variable itself is also located in a specified
 410      =3   * memory segment by _memseg_.  The arguments _targseg_ and _memseg_ can be
 411      =3   * one of the following:
 412      =3   *
 413      =3   * - @ref SI_SEG_DATA
 414      =3   * - @ref SI_SEG_IDATA
 415      =3   * - @ref SI_SEG_BDATA
 416      =3   * - @ref SI_SEG_PDATA
 417      =3   * - @ref SI_SEG_XDATA
 418      =3   * - @ref SI_SEG_CODE
 419      =3   *
 420      =3   * __Example__
 421      =3   *
 422      =3   * ~~~~~~~~.c
 423      =3   * // The following macro can be used to create a pointer that points to
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 14  

 424      =3   * // a location in XDATA while the pointer itself is located in DATA, with
 425      =3   * // the following signature:
 426      =3   * uint8_t *pVar; // where pVar is located in DATA and is pointing at XDATA
 427      =3   *
 428      =3   * SI_SEGMENT_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA, SEG_DATA);
 429      =3   * ~~~~~~~~
 430      =3   *****************************************************************************/
 431      =3  #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
 432      =3               vartype targseg * memseg name
 433      =3  
 434      =3  /**************************************************************************//**
 435      =3   * Declare a generic pointer variable that is located in a specific segment.
 436      =3   *
 437      =3   * @param name The pointer variable name.
 438      =3   * @param vartype The pointer data type.
 439      =3   * @param memseg The memory segment to use for the pointer variable.
 440      =3   *
 441      =3   * This macro declares a pointer that is a generic pointer.  This means it can
 442      =3   * point at any kind of memory location.  However the pointer variable itself
 443      =3   * is located in a specific memory segment by _memseg_, which can be one of
 444      =3   * the following:
 445      =3   *
 446      =3   * - @ref SI_SEG_DATA
 447      =3   * - @ref SI_SEG_IDATA
 448      =3   * - @ref SI_SEG_BDATA
 449      =3   * - @ref SI_SEG_PDATA
 450      =3   * - @ref SI_SEG_XDATA
 451      =3   * - @ref SI_SEG_CODE
 452      =3   *
 453      =3   * __Example__
 454      =3   *
 455      =3   * ~~~~~~~~.c
 456      =3   * // The following macro can be used to create a generic pointer that
 457      =3   * // is located in DATA and points at any memory type, with the
 458      =3   * // following signature:
 459      =3   * uint8_t *pVar; // where pVar is located in DATA and is a generic pointer
 460      =3   *
 461      =3   * SI_SEGMENT_POINTER(pVar, uint8_t, SEG_DATA);
 462      =3   * ~~~~~~~~
 463      =3   *****************************************************************************/
 464      =3  #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * memseg name
 465      =3  
 466      =3  /**************************************************************************//**
 467      =3   * Declare an uninitialized variable that is located at a specific address.
 468      =3   *
 469      =3   * @param name The variable name.
 470      =3   * @param vartype The variable data type.
 471      =3   * @param memseg The memory segment to use for the variable.
 472      =3   * @param address The memory address of the variable.
 473      =3   *
 474      =3   * This macro allows declaring a variable that can be placed at a specific
 475      =3   * location in memory.  This can only be used for variables that do not need
 476      =3   * initializers.  The _address_ is the memory address within the specified
 477      =3   * segment.  The memory segment, _memseg_, can be one of the following:
 478      =3   *
 479      =3   * - @ref SI_SEG_DATA
 480      =3   * - @ref SI_SEG_IDATA
 481      =3   * - @ref SI_SEG_BDATA
 482      =3   * - @ref SI_SEG_PDATA
 483      =3   * - @ref SI_SEG_XDATA
 484      =3   * - @ref SI_SEG_CODE
 485      =3   *
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 15  

 486      =3   * __Example__
 487      =3   *
 488      =3   * ~~~~~~~~.c
 489      =3   * // The following declares a variable located at 0x4000 in XDATA with
 490      =3   * // the following signature:
 491      =3   * uint8_t myMemVar;
 492      =3   *
 493      =3   * SI_LOCATED_VARIABLE_NO_INIT(myMemVar, uint8_t, SEG_DATA, 0x4000);
 494      =3   * ~~~~~~~~
 495      =3   *****************************************************************************/
 496      =3  #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
 497      =3               vartype memseg name _at_ address
 498      =3  
 499      =3  
 500      =3  #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 #define SI_REENTRANT_FUNCTION(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_value, parameter, regnum) return_value name (parameter)
           =3 
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 #endif // __SLS_IDE__
 519      =3  
 520      =3  // The following are used for byte ordering when referring to individual
 521      =3  // bytes within a SI_UU32_t.  B0 is the least significant byte.
 522      =3  #define B0 3 ///< Least significant byte of a 4 byte word
 523      =3  #define B1 2 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
 524      =3  #define B2 1 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
 525      =3  #define B3 0 ///< Most significant byte of a 4-byte word
 526      =3  
 527      =3  #define LSB 1 ///< Index to least significant bit of a 2 byte word
 528      =3  #define MSB 0 ///< Index to most significant bit of a 2 byte word
 529      =3  
 530      =3  /// A union type to make it easier to access individual bytes of a 16-bit
 531      =3  /// word, and to use as signed or unsigned type.
 532      =3  typedef union SI_UU16
 533      =3  {
 534      =3    uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
 535      =3    int16_t s16;    ///< The two byte value as a 16-bit signed integer.
 536      =3    uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
 537      =3    int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
 538      =3  } SI_UU16_t;
 539      =3  
 540      =3  /// A union type to make it easier to access individual bytes within a
 541      =3  /// 32-bit word, or to access it as variations of 16-bit words, or to
 542      =3  /// use as signed or unsigned type.
 543      =3  typedef union SI_UU32
 544      =3  {
 545      =3    uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
 546      =3    int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
 547      =3    SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 16  

 548      =3    uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
 549      =3    int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
 550      =3    uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
 551      =3    int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
 552      =3  } SI_UU32_t;
 553      =3  
 554      =3  // Generic pointer memory segment constants.
 555      =3  #define SI_GPTR                   ///< Generic pointer indeterminate type.
 556      =3  #define SI_GPTR_MTYPE_DATA  0x00  ///< Generic pointer for DATA segment.
 557      =3  #define SI_GPTR_MTYPE_IDATA 0x00  ///< Generic pointer for IDATA segment.
 558      =3  #define SI_GPTR_MTYPE_BDATA 0x00  ///< Generic pointer for BDATA segment.
 559      =3  #define SI_GPTR_MTYPE_PDATA 0xFE  ///< Generic pointer for PDATA segment.
 560      =3  #define SI_GPTR_MTYPE_XDATA 0x01  ///< Generic pointer for XDATA segment.
 561      =3  #define SI_GPTR_MTYPE_CODE  0xFF  ///< Generic pointer for CODE segment.
 562      =3  
 563      =3  /// Generic pointer structure containing the type and address.
 564      =3  typedef struct
 565      =3  {
 566      =3    uint8_t memtype;    ///< The type of memory of the generic pointer.
 567      =3    SI_UU16_t address;  ///< The address of the generic pointer.
 568      =3  } GPTR_t;
 569      =3  
 570      =3  /// A union type to allow access to the fields of a generic pointer.
 571      =3  /// A generic pointer has a field indicating the type of memory and an
 572      =3  /// address within the memory.
 573      =3  typedef union SI_GEN_PTR
 574      =3  {
 575      =3    uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
 576      =3    GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
 577      =3  } SI_GEN_PTR_t;
 578      =3  
 579      =3  // Declaration of Keil intrinisc
 580      =3  extern void _nop_(void);
 581      =3  /// Macro to insert a no-operation (NOP) instruction.
 582      =3  #define NOP() _nop_()
 583      =3  
 584      =3  // -------------------------------
 585      =3  // GCC for ARM Cortex-M
 586      =3  // Provides support for code that can be compiled for 8 or 32-bit
 587      =3  //
 588      =3  #elif defined (__GNUC__)
           =3 #if defined(__ARMEL__) && ((__ARMEL__ == 1) && ((__ARM_ARCH == 6) || (__ARM_ARCH == 7)))
           =3 
           =3 // these ignore any memory segment directives
           =3 #define SI_SEG_GENERIC
           =3 #define SI_SEG_DATA
           =3 #define SI_SEG_IDATA
           =3 #define SI_SEG_XDATA
           =3 #define SI_SEG_PDATA
           =3 #define SI_SEG_BDATA
           =3 #define SI_SEG_CODE
           =3 
           =3 // the following create a variable of the specified name but ignore the
           =3 // address and bit number.  If the using-code cares about the actual
           =3 // address or bit number, this probably will break it
           =3 #define SI_SBIT(name, address, bitnum) uint8_t name
           =3 #define SI_SFR(name, address) uint8_t name
           =3 #define SI_SFR16(name, address) uint16_t name
           =3 
           =3 // the following create function and variable names of the specified types
           =3 // but the 8051-specific aspects (like memory segment) are ignored
           =3 #define SI_INTERRUPT(name, vector) void name (void)
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 17  

           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name (parameter)
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =3              vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =3              vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =3              vartype name
           =3 
           =3 #define B0 0
           =3 #define B1 1
           =3 #define B2 2
           =3 #define B3 3
           =3 #define LSB 0
           =3 #define MSB 1
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;
           =3   int16_t s16;
           =3   uint8_t u8[2];
           =3   int8_t s8[2];
           =3 } SI_UU16_t;
           =3 
           =3 typedef union SI_UU32
           =3 {
           =3   uint32_t u32;
           =3   int32_t s32;
           =3   SI_UU16_t uu16[2];
           =3   uint16_t u16[2];
           =3   int16_t s16[2];
           =3   uint8_t u8[4];
           =3   int8_t s8[4];
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer stuff is left out because if you are accessing
           =3 // generic pointer fields then it will need to be rewritten for 32-bit
           =3 
           =3 // __NOP should be declared in cmsis header core_cmInstr.h
           =3 extern void __NOP(void);
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __NOP()
           =3 
           =3 #else // ARM_ARCH 6 | 7
           =3 #error unsupported ARM arch
           =3 #endif
           =3 
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <intrinsics.h>
           =3 
           =3 #define SI_BIT(name)              __no_init bool __bit name
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 18  

           =3 #define SI_SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 #define SI_SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 #define SI_SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 
           =3 #define SI_SEG_GENERIC __generic
           =3 #define SI_SEG_FAR  __xdata
           =3 #define SI_SEG_DATA __data
           =3 #define SI_SEG_NEAR __data
           =3 #define SI_SEG_IDATA __idata
           =3 #define SI_SEG_XDATA __xdata
           =3 #define SI_SEG_PDATA __pdata
           =3 #define SI_SEG_CODE  __code
           =3 #define SI_SEG_BDATA __bdata
           =3 
           =3 #define _PPTOSTR_(x) #x
           =3 #define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 #define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 #define SI_INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __in
             -terrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 #if (__DATA_MODEL__ == 0) /* TINY */ || \
           =3     (__DATA_MODEL__ == 1) /* SMALL */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #elif (__DATA_MODEL__ == 2) /* LARGE */ || \
           =3       (__DATA_MODEL__ == 3) /* GENERIC */ || \
           =3       (__DATA_MODEL__ == 4) /* FAR */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name (parameter)
           =3 #else
           =3 #error "Illegal memory model setting."
           =3 #endif
           =3 
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name parameter
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name parameter
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment)  vartype locsegment name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * 
             -locsegment name
           =3                
           =3 #define SI_SEGMENT_POINTER(name, vartype, ptrseg) vartype __generic * ptrseg name
           =3 
           =3 #define SI_LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ add
             -r
           =3 
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment __no_init vartype name @ a
             -ddr
           =3 
           =3 // The following are used for byte ordering when referring to individual
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 19  

           =3 // bytes within a SI_UU32_t.  B0 is the least significant byte.
           =3 #define B0 0 ///< Least significant byte of a 4 byte word
           =3 #define B1 1 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
           =3 #define B2 2 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
           =3 #define B3 3 ///< Most significant byte of a 4-byte word
           =3 
           =3 #define LSB 0 ///< Index to least significant bit of a 2 byte word
           =3 #define MSB 1 ///< Index to most significant bit of a 2 byte word
           =3 
           =3 /// A union type to make it easier to access individual bytes of a 16-bit
           =3 /// word, and to use as signed or unsigned type.
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
           =3   int16_t s16;    ///< The two byte value as a 16-bit signed integer.
           =3   uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
           =3   int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
           =3 } SI_UU16_t;
           =3 
           =3 /// A union type to make it easier to access individual bytes within a
           =3 /// 32-bit word, or to access it as variations of 16-bit words, or to
           =3 /// use as signed or unsigned type.
           =3 typedef union SI_UU32
           =3 {
           =3   uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
           =3   int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
           =3   SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
           =3   uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
           =3   int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
           =3   uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
           =3   int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer memory segment constants.
           =3 #define SI_GPTR                   ///< Generic pointer indeterminate type.
           =3 #define SI_GPTR_MTYPE_DATA  0x01  ///< Generic pointer for DATA segment.
           =3 #define SI_GPTR_MTYPE_IDATA 0x01  ///< Generic pointer for IDATA segment.
           =3 #define SI_GPTR_MTYPE_BDATA 0x01  ///< Generic pointer for BDATA segment.
           =3 #define SI_GPTR_MTYPE_PDATA 0x00  ///< Generic pointer for PDATA segment.
           =3 #define SI_GPTR_MTYPE_XDATA 0x00  ///< Generic pointer for XDATA segment.
           =3 #define SI_GPTR_MTYPE_CODE  0x80  ///< Generic pointer for CODE segment.
           =3 
           =3 /// Generic pointer structure containing the type and address.
           =3 typedef struct
           =3 {
           =3   SI_UU16_t address;  ///< The address of the generic pointer.
           =3   uint8_t memtype;    ///< The type of memory of the generic pointer.  
           =3 } GPTR_t;
           =3 
           =3 /// A union type to allow access to the fields of a generic pointer.
           =3 /// A generic pointer has a field indicating the type of memory and an
           =3 /// address within the memory.
           =3 typedef union SI_GEN_PTR
           =3 {
           =3   uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
           =3   GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
           =3 } SI_GEN_PTR_t;
           =3 
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __no_operation()
           =3 
           =3 #else // unknown toolchain
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 20  

           =3 #error Unrecognized toolchain in si_toolchain.h
           =3 #endif
 794      =3  
 795      =3  /** @} */
 796      =3  
 797      =3  #endif
 120      =2  #include "compiler_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // compiler_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Portions of this file are copyright Maarten Brock
   5      =3  // http://sdcc.sourceforge.net
   6      =3  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
   7      =3  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =3  //
   9      =3  // GNU LGPL boilerplate:
  10      =3  /** This library is free software; you can redistribute it and/or
  11      =3    * modify it under the terms of the GNU Lesser General Public
  12      =3    * License as published by the Free Software Foundation; either
  13      =3    * version 2.1 of the License, or (at your option) any later version.
  14      =3    *
  15      =3    * This library is distributed in the hope that it will be useful,
  16      =3    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =3    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  18      =3    * Lesser General Public License for more details.
  19      =3    *
  20      =3    * You should have received a copy of the GNU Lesser General Public
  21      =3    * License along with this library; if not, write to the Free Software
  22      =3    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =3    *
  24      =3    * In other words, you are welcome to use, share and improve this program.
  25      =3    * You are forbidden to forbid anyone else to use, share and improve
  26      =3    * what you give them. Help stamp out software-hoarding!
  27      =3  **/
  28      =3  // Program Description:
  29      =3  //
  30      =3  // **Important Note**: This header file should be included before including
  31      =3  // a device-specific header file such as C8051F300_defs.h.
  32      =3  //
  33      =3  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =3  // special function registers and other 8051-specific features such as NOP
  35      =3  // generation, and locating variables in memory-specific segments.  The
  36      =3  // compilers are identified by their unique predefined macros. See also:
  37      =3  // http://predef.sourceforge.net/precomp.html
  38      =3  //
  39      =3  // SBIT and SFR define special bit and special function registers at the given
  40      =3  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =3  // little-endian format. SFR16E and SFR32E define sfr combinations without
  42      =3  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =3  // combinations will guarantee the order in which they are accessed when read
  44      =3  // or written.
  45      =3  //
  46      =3  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
  47      =3  // to avoid portability issues because of compiler endianness.
  48      =3  //
  49      =3  // Example:
  50      =3  // // my_mcu.c: main 'c' file for my mcu
  51      =3  // #include <compiler_defs.h>  // this file
  52      =3  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =3  //
  54      =3  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =3  // SFR   (P0, 0x80);           // Port 0
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 21  

  56      =3  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
  57      =3  //                             // xdata memory at 0xE600
  58      =3  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =3  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =3  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =3  //                             // lsb at 0x93, msb at 0x96
  62      =3  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =3  //                             // lsb at 0xE2, msb at 0xE5
  64      =3  //
  65      =3  // Target:         C8051xxxx
  66      =3  // Tool chain:     Generic
  67      =3  // Command Line:   None
  68      =3  // 
  69      =3  // Release 2.7 - 25 JUN 2014 (JM)
  70      =3  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =3  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =3  //     pointed at by a generic poitner
  73      =3  // Release 2.6 - 14 DEC 2012 (GO)
  74      =3  //        -Added define for deprecated SDCC keyword 'at'
  75      =3  // Release 2.5 - 12 SEP 2012 (TP)
  76      =3  //    -Added defines for deprecated SDCC keywords bit and code
  77      =3  // Release 2.4 - 27 AUG 2012 (TP)
  78      =3  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =3  // Release 2.3 - 27 MAY 2010 (DM)
  80      =3  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =3  // Release 2.2 - 06 APR 2010 (ES)
  82      =3  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =3  // Release 2.1 - 16 JUL 2009 (ES)
  84      =3  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =3  // Release 2.0 - 19 MAY 2009 (ES)
  87      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
  88      =3  // Release 1.9 - 23 OCT 2008 (ES)
  89      =3  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =3  //    -Added SFR16 macro defintion for Hi-Tech
  91      =3  // Release 1.8 - 31 JUL 2008 (ES)
  92      =3  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =3  //    -Added macro's for IAR
  94      =3  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =3  // Release 1.7 - 11 SEP 2007 (BW)
  96      =3  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =3  // Release 1.6 - 27 AUG 2007 (BW)
  98      =3  //    -Updated copyright notice per agreement with Maartin Brock
  99      =3  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =3  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =3  // Release 1.5 - 24 AUG 2007 (BW)
 102      =3  //    -Added support for NOP () macro
 103      =3  //    -Added support for Hi-Tech ver 9.01
 104      =3  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =3  //    -Removed FID and fixed formatting.
 106      =3  // Release 1.3 - 30 SEP 2007 (TP)
 107      =3  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =3  //     under SDCC.
 109      =3  // Release 1.2 - (BW)
 110      =3  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =3  // Release 1.1 - (BW)
 112      =3  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =3  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =3  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =3  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =3  //    -Initial revision
 117      =3  
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 22  

 118      =3  //-----------------------------------------------------------------------------
 119      =3  // Header File Preprocessor Directive
 120      =3  //-----------------------------------------------------------------------------
 121      =3  
 122      =3  #ifndef COMPILER_DEFS_H
 123      =3  #define COMPILER_DEFS_H
 124      =3  
 125      =3  #include "stdbool.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
 126      =3  #include "stdint.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 23  

           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
 127      =3  
 128      =3  //-----------------------------------------------------------------------------
 129      =3  // Macro definitions
 130      =3  //-----------------------------------------------------------------------------
 131      =3  
 132      =3  //SDK Version
 133      =3  #define SDK_VERSION   2
 134      =3  
 135      =3  #ifndef NULL
           =3 #define NULL ((void*) 0)
           =3 #endif
 138      =3  
 139      =3  
 140      =3  // SDCC - Small Device C Compiler
 141      =3  // http://sdcc.sourceforge.net
 142      =3  
 143      =3  #if defined SDCC
           =3 
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 24  

           =3 #if (SDCC >= 300)
           =3 
           =3 #define interrupt __interrupt
           =3 #define _asm __asm
           =3 #define _endasm __endasm
           =3 #define bit __bit
           =3 #define code __code
           =3 #define at __at
           =3 
           =3 #endif
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   __xdata
           =3 # define SEG_DATA  __data
           =3 # define SEG_NEAR  __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =3 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =3 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
           =3 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =3 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
           =3 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =3 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
             -regnum)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 25  

           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() _asm NOP _endasm
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x40
           =3 #define SI_GPTR_MTYPE_IDATA      0x40
           =3 #define SI_GPTR_MTYPE_BDATA      0x40
           =3 #define SI_GPTR_MTYPE_PDATA      0x60
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Raisonance (must be placed before Keil C51)
           =3 // http://www.raisonance.com
           =3 
           =3 #elif defined __RC51__
           =3 
           =3 //#error Raisonance C51 detected.
           =3 
           =3 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =3 # define SEG_FAR   xdata
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  data
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 26  

           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =3 # define SFR(name, addr)        sfr at addr                name
           =3 # define SFR16(name, addr)      sfr16 at addr              name
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =3 
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 27  

           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support -- NOP is opcode 0x00
           =3 #define NOP() asm { 0x00 }
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x04
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x04
           =3 #define SI_GPTR_MTYPE_PDATA      0x03
           =3 #define SI_GPTR_MTYPE_XDATA      0x02
           =3 #define SI_GPTR_MTYPE_CODE       0x05
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         U8 MTYPE;
           =3         UU16 ADDR;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // Keil C51
           =3 // http://www.keil.com
           =3 
           =3 #elif defined __C51__
 360      =3  
 361      =3  //#error Keil C51 detected.
 362      =3  
 363      =3  # define SEG_GENERIC
 364      =3  # define SEG_FAR   xdata
 365      =3  # define SEG_DATA  data
 366      =3  # define SEG_NEAR  data
 367      =3  # define SEG_IDATA idata
 368      =3  # define SEG_XDATA xdata
 369      =3  # define SEG_PDATA pdata
 370      =3  # define SEG_CODE  code
 371      =3  # define SEG_BDATA bdata
 372      =3  
 373      =3  # define SBIT(name, addr, bit)  sbit  name = addr^bit
 374      =3  # define SFR(name, addr)        sfr   name = addr
 375      =3  # define SFR16(name, addr)      sfr16 name = addr
 376      =3  # define SFR16E(name, fulladdr) /* not supported */
 377      =3  # define SFR32(name, fulladdr)  /* not supported */
 378      =3  # define SFR32E(name, fulladdr) /* not supported */
 379      =3  
 380      =3  # ifndef __SLS_IDE__
 381      =3  
 382      =3  # define INTERRUPT(name, vector) void name (void) interrupt vector
 383      =3  # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
 384      =3  # define INTERRUPT_PROTO(name, vector) void name (void)
 385      =3  # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 386      =3  
 387      =3  # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 28  

 388      =3  # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
 389      =3  // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
 390      =3  
 391      =3  # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
 392      =3  # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
 393      =3  # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
 394      =3  # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
 395      =3  # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
 396      =3  
 397      =3  # else  // __SLS_IDE__
           =3 
           =3 # define INTERRUPT(name, vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 
           =3 # endif // __SLS_IDE__
 415      =3  
 416      =3  // used with UU16
 417      =3  # define LSB 1
 418      =3  # define MSB 0
 419      =3  
 420      =3  // used with UU32 (b0 is least-significant byte)
 421      =3  # define b0 3
 422      =3  # define b1 2
 423      =3  # define b2 1
 424      =3  # define b3 0
 425      =3  
 426      =3  typedef unsigned char U8;
 427      =3  typedef unsigned int U16;
 428      =3  typedef unsigned long U32;
 429      =3  
 430      =3  typedef signed char S8;
 431      =3  typedef signed int S16;
 432      =3  typedef signed long S32;
 433      =3  
 434      =3  typedef union UU16
 435      =3  {
 436      =3     U16 U16;
 437      =3     S16 S16;
 438      =3     U8 U8[2];
 439      =3     S8 S8[2];
 440      =3  } UU16;
 441      =3  
 442      =3  typedef union UU32
 443      =3  {
 444      =3     U32 U32;
 445      =3     S32 S32;
 446      =3     UU16 UU16[2];
 447      =3     U16 U16[2];
 448      =3     S16 S16[2];
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 29  

 449      =3     U8 U8[4];
 450      =3     S8 S8[4];
 451      =3  } UU32;
 452      =3  
 453      =3  // NOP () macro support
 454      =3  extern void _nop_ (void);
 455      =3  #define NOP() _nop_()
 456      =3  
 457      =3  // generic pointer memory type specifiers
 458      =3  #define SI_GPTR
 459      =3  #define SI_GPTR_MTYPE_DATA      0x00
 460      =3  #define SI_GPTR_MTYPE_IDATA     0x00
 461      =3  #define SI_GPTR_MTYPE_BDATA     0x00
 462      =3  #define SI_GPTR_MTYPE_PDATA     0xFE
 463      =3  #define SI_GPTR_MTYPE_XDATA     0x01
 464      =3  #define SI_GPTR_MTYPE_CODE      0xFF
 465      =3  
 466      =3  // generic pointer access struct
 467      =3  typedef union SI_GENERIC_PTR
 468      =3  {
 469      =3      U8 U8[3];
 470      =3      struct
 471      =3      {
 472      =3          U8 MTYPE;
 473      =3          UU16 ADDR;
 474      =3      } GPTR;
 475      =3  } SI_GENERIC_PTR;
 476      =3  
 477      =3  //-----------------------------------------------------------------------------
 478      =3  
 479      =3  // Hi-Tech 8051
 480      =3  // http://www.htsoft.com
 481      =3  
 482      =3  #elif defined HI_TECH_C
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   far
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  near
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 
           =3 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =3 # define SFR(name, addr)          static volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =3 # define INTERRUPT_PROTO(name, vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: Hi-Tech does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 30  

           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() asm(" nop ")
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Tasking / Altium
           =3 // http://www.altium.com/tasking
           =3 
           =3 
           =3 #elif defined _CC51
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   _xdat
           =3 # define SEG_DATA  _data
           =3 # define SEG_NEAR  _data
           =3 # define SEG_IDATA _idat
           =3 # define SEG_XDATA _xdat
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 31  

           =3 # define SEG_PDATA _pdat
           =3 # define SEG_CODE  _rom
           =3 # define SEG_BDATA _bdat
           =3 
           =3 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =3 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =3 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =3 #if _CC51 > 71
           =3 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =3 #else
           =3 # define SFR16(name, addr)      /* not supported */
           =3 #endif
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 
           =3 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =3 // is also using the same register bank. If not, the compiler will generate an error.
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
             -ameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 32  

           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 extern void _nop (void);
           =3 #define NOP() _nop()
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <stdbool.h>
           =3 #include <intrinsics.h>
           =3 
           =3 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr) /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define SEG_GENERIC __generic
           =3 # define SEG_FAR  __xdata
           =3 # define SEG_DATA __data
           =3 # define SEG_NEAR __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 #define bit bool
           =3 
           =3 # define _PPTOSTR_(x) #x
           =3 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 33  

           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 
           =3 #define NOP() __no_operation();
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x01
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x01
           =3 #define SI_GPTR_MTYPE_PDATA      0x00
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 34  

           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Crossware
           =3 // http://www.crossware.com
           =3 
           =3 #elif defined _XC51_VER
           =3 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =3 # define SFR(name, addr)        _sfr     name = addr
           =3 # define SFR16(name, addr)      _sfrword name = addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Wickenh盲user
           =3 // http://www.wickenhaeuser.de
           =3 
           =3 #elif defined __UC__
           =3 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =3 # define SFR(name, addr)        near unsigned char name @ addr
           =3 # define SFR16(name, addr)      /* not supported */
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Default
           =3 // Unknown compiler
           =3 
           =3 #else
           =3 # warning unrecognized compiler
           =3 # define SBIT(name, addr, bit)  volatile bool           name
           =3 # define SFR(name, addr)        volatile unsigned char  name
           =3 # define SFRX(name, addr)       volatile unsigned char  name
           =3 # define SFR16(name, addr)      volatile unsigned short name
           =3 # define SFR16E(name, fulladdr) volatile unsigned short name
           =3 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =3 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =3 
           =3 #endif
 798      =3  
 799      =3  //-----------------------------------------------------------------------------
 800      =3  // Header File PreProcessor Directive
 801      =3  //-----------------------------------------------------------------------------
 802      =3  
 803      =3  #endif                                 // #define COMPILER_DEFS_H
 804      =3  
 805      =3  //-----------------------------------------------------------------------------
 806      =3  // End Of File
 807      =3  //-----------------------------------------------------------------------------
 121      =2  #ifdef C8051F020
           =2 #include "C8051F020_defs.h"
           =2 #endif
 124      =2  #ifdef C8051F340
           =2 #include "C8051F340_defs.h"
           =2 #endif
 127      =2  #ifdef C8051F580
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 35  

 128      =2  #include "C8051F580_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // C8051F580_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Copyright 2008, Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Register/bit definitions for the C8051F58x family.
  10      =3  // **Important Note**: The compiler_defs.h header file should be included
  11      =3  // before including this header file.
  12      =3  //
  13      =3  // Target:         C8051F580/1/2/3/4/5/6/7,8/9-F590/1
  14      =3  // Tool chain:     Generic
  15      =3  // Command Line:   None
  16      =3  //
  17      =3  // Release 0.6 - 20 AUG 2012 (TP)
  18      =3  //    -Added #define for _XPAGE to provide support for SDCC memory paging
  19      =3  //     (pdata)
  20      =3  //
  21      =3  // Release 0.5 - 10 SEP 2011 (GP)
  22      =3  //    - Fixed SFR16 definition for CAN0IF2MC
  23      =3  //
  24      =3  // Release 0.4 - 08 OCT 2010 (TP)
  25      =3  //    - Fixed bit definitions for SCON0
  26      =3  //
  27      =3  // Release 0.3 - 01 APR 2009 (GP)
  28      =3  //    - Added SN0-SN3
  29      =3  //
  30      =3  // Release 0.2 - 29 JUL 2008 (ADT)
  31      =3  //    - Added Timer 4 bit definitions
  32      =3  //
  33      =3  // Release 0.1 - 09 JUL 2008 (GP)
  34      =3  //    - Initial Revision
  35      =3  //
  36      =3  //-----------------------------------------------------------------------------
  37      =3  // Header File Preprocessor Directive
  38      =3  //-----------------------------------------------------------------------------
  39      =3  
  40      =3  #ifndef C8051F580_DEFS_H
  41      =3  #define C8051F580_DEFS_H
  42      =3  
  43      =3  //-----------------------------------------------------------------------------
  44      =3  // Page 0, Page 1 and Page F Registers
  45      =3  //-----------------------------------------------------------------------------
  46      =3  
  47      =3  SFR (P0, 0x80);                        // Port 0 Latch
  48      =3  SFR (SP, 0x81);                        // Stack Pointer
  49      =3  SFR (DPL, 0x82);                       // Data Pointer Low
  50      =3  SFR (DPH, 0x83);                       // Data Pointer High
  51      =3  SFR (SFR0CN, 0x84);                    // SFR Page Control
  52      =3  SFR (SFRNEXT, 0x85);                   // SFR stack next page
  53      =3  SFR (SFRLAST, 0x86);                   // SFR stack last page
  54      =3  SFR (PCON, 0x87);                      // Power Control
  55      =3  SFR (TCON, 0x88);                      // Timer/Counter Control
  56      =3  SFR (TMOD, 0x89);                      // Timer/Counter Mode
  57      =3  SFR (TL0, 0x8A);                       // Timer/Counter 0 Low
  58      =3  SFR (TL1, 0x8B);                       // Timer/Counter 1 Low
  59      =3  SFR (TH0, 0x8C);                       // Timer/Counter 0 High
  60      =3  SFR (TH1, 0x8D);                       // Timer/Counter 1 High
  61      =3  SFR (CKCON, 0x8E);                     // Clock Control
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 36  

  62      =3  SFR (PSCTL, 0x8F);                     // Program Store R/W Control
  63      =3  SFR (CLKSEL, 0x8F);                    // System clock select
  64      =3  SFR (P1, 0x90);                        // Port 1 Latch
  65      =3  SFR (TMR3CN, 0x91);                    // Timer/Counter 3 Control
  66      =3  SFR (TMR5CN, 0x91);                    // Timer/Counter 5 Control
  67      =3  SFR (TMR3RLL, 0x92);                   // Timer/Counter 3 Reload Low
  68      =3  SFR (TMR5CAPL, 0x92);                  // Timer/Counter 5 Capture Low
  69      =3  SFR (TMR3RLH, 0x93);                   // Timer/Counter 3 Reload High
  70      =3  SFR (TMR5CAPH, 0x93);                  // Timer/Counter 5 Capture High
  71      =3  SFR (TMR3L, 0x94);                     // Timer/Counter 3 Low
  72      =3  SFR (TMR5L, 0x94);                     // Timer/Counter 5 Low
  73      =3  SFR (TMR3H, 0x95);                     // Timer/Counter 3 High
  74      =3  SFR (TMR5H, 0x95);                     // Timer/Counter 5 High
  75      =3  SFR (TMR5CF, 0x96);                    // Timer/Counter 5 Configuration
  76      =3  SFR (CLKMUL, 0x97);                    // Clock Multiplier
  77      =3  SFR (SCON0, 0x98);                     // UART0 Control
  78      =3  SFR (SCON1, 0x98);                     // UART1 Control
  79      =3  SFR (SBUF0, 0x99);                     // UART0 Data Buffer
  80      =3  SFR (SBUF1, 0x99);                     // UART1 Data Buffer
  81      =3  SFR (CPT0CN, 0x9A);                    // Comparator 0 Control
  82      =3  SFR (CPT2CN, 0x9A);                    // Comparator 2 Control
  83      =3  SFR (CPT0MD, 0x9B);                    // Comparator 0 Mode
  84      =3  SFR (CPT2MD, 0x9B);                    // Comparator 2 Mode
  85      =3  SFR (CPT0MX, 0x9C);                    // Comparator 0 Mux
  86      =3  SFR (CPT2MX, 0x9C);                    // Comparator 2 Mux
  87      =3  SFR (CPT1CN, 0x9D);                    // Comparator 1 Control
  88      =3  SFR (CPT1MD, 0x9E);                    // Comparator 0 Mode
  89      =3  SFR (OSCIFIN, 0x9E);                   // Internal Oscillator Fine Control
  90      =3  SFR (CPT1MX, 0x9F);                    // Comparator 1 Mux
  91      =3  SFR (OSCXCN, 0x9F);                    // External Oscillator Control
  92      =3  SFR (P2, 0xA0);                        // Port 2 Latch
  93      =3  SFR (SPI0CFG, 0xA1);                   // SPI0 Configuration
  94      =3  SFR (OSCICN, 0xA1);                    // Internal Oscillator Control
  95      =3  SFR (SPI0CKR, 0xA2);                   // SPI0 Clock rate control
  96      =3  SFR (OSCICRS, 0xA2);                   // Internal Oscillator Coarse Control
  97      =3  SFR (SPI0DAT, 0xA3);                   // SPI0 Data Buffer
  98      =3  SFR (P0MDOUT, 0xA4);                   // Port 0 Output Mode
  99      =3  SFR (P1MDOUT, 0xA5);                   // Port 1 Output Mode
 100      =3  SFR (P2MDOUT, 0xA6);                   // Port 2 Output Mode
 101      =3  SFR (SFRPAGE, 0xA7);                   // SFR Page Select
 102      =3  SFR (IE, 0xA8);                        // Interrupt Enable
 103      =3  SFR (SMOD0, 0xA9);                     // Serial Port 0 Control
 104      =3  SFR (EMI0CN, 0xAA);                    // EMIF Control
 105      =3  SFR (EMI0TC, 0xAA);                    // EMIF Timing control
 106      =3  SFR (SBCON0, 0xAB);                    // UART0 Baud Rate Generator Control
 107      =3  SFR (SBRLL0, 0xAC);                    // UART0 Baud Rate Generator Low
 108      =3  SFR (SBRLH0, 0xAD);                    // UART0 Baud Rate Generator High
 109      =3  SFR (P3MAT, 0xAE);                     // Port 3 Match
 110      =3  SFR (P3MDOUT, 0xAE);                   // Port 3 Mode
 111      =3  SFR (P3MASK, 0xAF);                    // Port 3 Mask
 112      =3  SFR (P4MDOUT, 0xAF);                   // Port 4 Mode
 113      =3  SFR (P3, 0xB0);                        // Port 3 Latch
 114      =3  SFR (P2MAT, 0xB1);                     // Port 2 Match
 115      =3  SFR (P2MASK, 0xB2);                    // Port 2 Mask
 116      =3  SFR (EMI0CF, 0xB2);                    // EMIF Configuration
 117      =3  SFR (P4, 0xB5);                        // Port 4 Latch
 118      =3  SFR (FLSCL, 0xB6);                     // Flash Scale
 119      =3  SFR (FLKEY, 0xB7);                     // Flash access limit
 120      =3  SFR (IP, 0xB8);                        // Interrupt Priority
 121      =3  SFR (SMB0ADR, 0xB9);                   // SMBus0 Slave address
 122      =3  SFR (ADC0TK, 0xBA);                    // ADC0 Tracking Mode Select
 123      =3  SFR (SMB0ADM, 0xBA);                   // SMBus0 Address Mask
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 37  

 124      =3  SFR (ADC0MX, 0xBB);                    // AMUX0 Channel select
 125      =3  SFR (ADC0CF, 0xBC);                    // AMUX0 Channel configuration
 126      =3  SFR (ADC0L, 0xBD);                     // ADC0 Data Low
 127      =3  SFR (ADC0H, 0xBE);                     // ADC0 Data High
 128      =3  SFR (SMB0CN, 0xC0);                    // SMBus0 Control
 129      =3  SFR (SMB0CF, 0xC1);                    // SMBus0 Configuration
 130      =3  SFR (SMB0DAT, 0xC2);                   // SMBus0 Data
 131      =3  SFR (ADC0GTL, 0xC3);                   // ADC0 Greater-Than Compare Low
 132      =3  SFR (ADC0GTH, 0xC4);                   // ADC0 Greater-Than Compare High
 133      =3  SFR (ADC0LTL, 0xC5);                   // ADC0 Less-Than Compare Word Low
 134      =3  SFR (ADC0LTH, 0xC6);                   // ADC0 Less-Than Compare Word High
 135      =3  SFR (XBR3, 0xC6);                      // Port I/O Crossbar Control 3
 136      =3  SFR (XBR2, 0xC7);                      // Port I/O Crossbar Control 2
 137      =3  SFR (TMR2CN, 0xC8);                    // Timer/Counter 2 Control
 138      =3  SFR (TMR4CN, 0xC8);                    // Timer/Counter 4 Control
 139      =3  SFR (REG0CN, 0xC9);                    // Regulator Control
 140      =3  SFR (LIN0CF, 0xC9);                    // LIN 0 Configuration
 141      =3  SFR (TMR4CF, 0xC9);                    // Timer/Counter 4 Configuration
 142      =3  SFR (TMR2RLL, 0xCA);                   // Timer/Counter 2 Reload Low
 143      =3  SFR (TMR4CAPL, 0xCA);                  // Timer/Counter 4 Capture Low
 144      =3  SFR (TMR2RLH, 0xCB);                   // Timer/Counter 2 Reload High
 145      =3  SFR (TMR4CAPH, 0xCB);                  // Timer/Counter 4 Capture High
 146      =3  SFR (TMR2L, 0xCC);                     // Timer/Counter 2 Low
 147      =3  SFR (TMR4L, 0xCC);                     // Timer/Counter 4 Low
 148      =3  SFR (TMR2H, 0xCD);                     // Timer/Counter 2 High
 149      =3  SFR (TMR4H, 0xCD);                     // Timer/Counter 4 High
 150      =3  SFR (PCA0CPL5, 0xCE);                  // PCA0 Capture 5 Low
 151      =3  SFR (PCA1CPL11, 0xCE);                 // PCA1 Capture 11 Low
 152      =3  SFR (PCA0CPH5, 0xCF);                  // PCA0 Capture 5 High
 153      =3  SFR (PCA1CPH11, 0xCF);                 // PCA1 Capture 11 High
 154      =3  SFR (PSW, 0xD0);                       // Program Status Word
 155      =3  SFR (REF0CN, 0xD1);                    // Voltage Reference Control
 156      =3  SFR (LIN0DAT, 0xD2);                   // LIN0 Data
 157      =3  SFR (LIN0ADR, 0xD3);                   // LIN0 Address
 158      =3  SFR (P0SKIP, 0xD4);                    // Port 0 Skip
 159      =3  SFR (P1SKIP, 0xD5);                    // Port 1 Skip
 160      =3  SFR (P2SKIP, 0xD6);                    // Port 2 Skip
 161      =3  SFR (P3SKIP, 0xD7);                    // Port 3 Skip
 162      =3  SFR (PCA0CN, 0xD8);                    // PCA0 Control
 163      =3  SFR (PCA1CN, 0xD8);                    // PCA1 Control
 164      =3  SFR (PCA0MD, 0xD9);                    // PCA0 Mode
 165      =3  SFR (PCA1MD, 0xD9);                    // PCA1 Mode
 166      =3  SFR (PCA0PWM, 0xD9);                   // PCA0 PWM Control
 167      =3  SFR (PCA0CPM0, 0xDA);                  // PCA0 Module 0 Mode
 168      =3  SFR (PCA1CPM6, 0xDA);                  // PCA1 Module 6 Mode
 169      =3  SFR (PCA1PWM, 0xDA);                   // PCA1 PWM Control
 170      =3  SFR (PCA0CPM1, 0xDB);                  // PCA0 Module 1  Mode
 171      =3  SFR (PCA1CPM7, 0xDB);                  // PCA1 Module 7  Mode
 172      =3  SFR (PCA0CPM2, 0xDC);                  // PCA0 Module 2  Mode
 173      =3  SFR (PCA1CPM8, 0xDC);                  // PCA1 Module 8  Mode
 174      =3  SFR (PCA0CPM3, 0xDD);                  // PCA0 Module 3  Mode
 175      =3  SFR (PCA1CPM9, 0xDD);                  // PCA1 Module 9  Mode
 176      =3  SFR (PCA0CPM4, 0xDE);                  // PCA0 Module 4  Mode
 177      =3  SFR (PCA1CPM10, 0xDE);                  // PCA1 Module 10 Mode
 178      =3  SFR (PCA0CPM5, 0xDF);                  // PCA0 Module 5  Mode
 179      =3  SFR (PCA1CPM11, 0xDF);                  // PCA1 Module 11 Mode
 180      =3  SFR (ACC, 0xE0);                       // Accumulator
 181      =3  SFR (XBR0, 0xE1);                      // Port I/O Crossbar Control 0
 182      =3  SFR (XBR1, 0xE2);                      // Port I/O Crossbar Control 1
 183      =3  SFR (CCH0CN, 0xE3);                    // Cache control
 184      =3  SFR (IT01CF, 0xE4);                    // INT0/INT1 Configuration
 185      =3  SFR (EIE1, 0xE6);                      // Extended Interrupt Enable 2
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 38  

 186      =3  SFR (EIE2, 0xE7);                      // Extended Interrupt Enable 2
 187      =3  SFR (ADC0CN, 0xE8);                    // ADC0 Control
 188      =3  SFR (PCA0CPL1, 0xE9);                  // PCA0 Capture 1 Low
 189      =3  SFR (PCA1CPL1, 0xE9);                  // PCA1 Capture 7 Low
 190      =3  SFR (PCA0CPH1, 0xEA);                  // PCA0 Capture 1 High
 191      =3  SFR (PCA1CPH1, 0xEA);                  // PCA1 Capture 7 High
 192      =3  SFR (PCA0CPL2, 0xEB);                  // PCA0 Capture 2 Low
 193      =3  SFR (PCA1CPL2, 0xEB);                  // PCA1 Capture 8 Low
 194      =3  SFR (PCA0CPH2, 0xEC);                  // PCA0 Capture 2 High
 195      =3  SFR (PCA1CPH2, 0xEC);                  // PCA1 Capture 8 High
 196      =3  SFR (PCA0CPL3, 0xED);                  // PCA0 Capture 3 Low
 197      =3  SFR (PCA1CPL3, 0xED);                  // PCA1 Capture 9 Low
 198      =3  SFR (PCA0CPH3, 0xEE);                  // PCA0 Capture 3 High
 199      =3  SFR (PCA1CPH3, 0xEE);                  // PCA1 Capture 9 High
 200      =3  SFR (RSTSRC, 0xEF);                    // Reset Source Configuration/Status
 201      =3  SFR (B, 0xF0);                         // B Register
 202      =3  SFR (P0MAT, 0xF1);                     // Port 0 Match
 203      =3  SFR (P0MDIN, 0xF1);                    // Port 0 Input Mode
 204      =3  SFR (P0MASK, 0xF2);                    // Port 0 Mask
 205      =3  SFR (P1MDIN, 0xF2);                    // Port 1 Input Mode
 206      =3  SFR (P1MAT, 0xF3);                     // Port 1 Match
 207      =3  SFR (P2MDIN, 0xF3);                    // Port 2 Input Mode
 208      =3  SFR (P1MASK, 0xF4);                    // Port 1 Mask
 209      =3  SFR (P3MDIN, 0xF4);                    // Port 3 Input Mode
 210      =3  SFR (PSBANK, 0xF5);                    // Program Space Bank Select
 211      =3  SFR (EIP1, 0xF6);                      // External Interrupt Priority 1
 212      =3  SFR (EIP2, 0xF7);                      // External Interrupt Priority 2
 213      =3  SFR (SPI0CN, 0xF8);                    // SPI0 Control
 214      =3  SFR (PCA0L, 0xF9);                     // PCA0 Counter Low
 215      =3  SFR (PCA1L, 0xF9);                     // PCA1 Counter Low
 216      =3  SFR (SN0, 0xF9);                       // Serial Number 0
 217      =3  SFR (PCA0H, 0xFA);                     // PCA0 Counter High
 218      =3  SFR (PCA1H, 0xFA);                     // PCA1 Counter High
 219      =3  SFR (SN1, 0xFA);                       // Serial Number 1
 220      =3  SFR (PCA0CPL0, 0xFB);                  // PCA0 Capture 0 Low
 221      =3  SFR (PCA1CPL6, 0xFB);                  // PCA1 Capture 6 Low
 222      =3  SFR (SN2, 0xFB);                       // Serial Number 2
 223      =3  SFR (PCA0CPH0, 0xFC);                  // PCA0 Capture 0 High
 224      =3  SFR (PCA1CPH6, 0xFC);                  // PCA1 Capture 6 High
 225      =3  SFR (SN3, 0xFC);                       // Serial Number 3
 226      =3  SFR (PCA0CPL4, 0xFD);                  // PCA0 Capture 4 Low
 227      =3  SFR (PCA1CPL10, 0xFD);                 // PCA1 Capture 10 Low
 228      =3  SFR (PCA0CPH4, 0xFE);                  // PCA0 Capture 4 High
 229      =3  SFR (PCA1CPH10, 0xFE);                 // PCA1 Capture 10 High
 230      =3  SFR (VDM0CN, 0xFF);                    // VDD Monitor Control
 231      =3  
 232      =3  //-----------------------------------------------------------------------------
 233      =3  // Page C (CAN0) Registers
 234      =3  //-----------------------------------------------------------------------------
 235      =3  
 236      =3  SFR (CAN0CFG, 0x92);                   // CAN0 Clock Configuration
 237      =3  SFR (CAN0STAT, 0x94);                  // Status Register Low Byte
 238      =3  SFR (CAN0ERRL, 0x96);                  // Error Counter Low Byte
 239      =3  SFR (CAN0ERRH, 0x97);                  // Error Counter High Byte
 240      =3  SFR (CAN0BTL, 0x9A);                   // Bit Timing Register Low Byte
 241      =3  SFR (CAN0BTH, 0x9B);                   // Bit Timing Register High Byte
 242      =3  SFR (CAN0IIDL, 0x9C);                  // Interrupt Register Low Byte
 243      =3  SFR (CAN0IIDH, 0x9D);                  // Interrupt Register High Byte
 244      =3  SFR (CAN0TST, 0x9E);                   // Test Register Low Byte
 245      =3  SFR (CAN0BRPE, 0xA1);                  // BRP Extension Register Low Byte
 246      =3  SFR (CAN0TR1L, 0xA2);                  // Transmission Request 1 Low Byte
 247      =3  SFR (CAN0TR1H, 0xA3);                  // Transmission Request 1 High Byte
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 39  

 248      =3  SFR (CAN0TR2L, 0xA4);                  // Transmission Request 2 Low Byte
 249      =3  SFR (CAN0TR2H, 0xA5);                  // Transmission Request 2 High Byte
 250      =3  SFR (CAN0ND1L, 0xAA);                  // New Data 1 Low Byte
 251      =3  SFR (CAN0ND1H, 0xAB);                  // New Data 1 High Byte
 252      =3  SFR (CAN0ND2L, 0xAC);                  // New Data 2 Low Byte
 253      =3  SFR (CAN0ND2H, 0xAD);                  // New Data 2 High Byte
 254      =3  SFR (CAN0IP1L, 0xAE);                  // Interrupt Pending 1 Low Byte
 255      =3  SFR (CAN0IP1H, 0xAF);                  // Interrupt Pending 1 High Byte
 256      =3  SFR (CAN0IP2L, 0xB2);                  // Interrupt Pending 2 Low Byte
 257      =3  SFR (CAN0IP2H, 0xB3);                  // Interrupt Pending 2 High Byte
 258      =3  SFR (CAN0MV1L, 0xBA);                  // Message Valid 1 Low Byte
 259      =3  SFR (CAN0MV1H, 0xBB);                  // Message Valid 1 High Byte
 260      =3  SFR (CAN0MV2L, 0xBC);                  // Message Valid 2 Low Byte
 261      =3  SFR (CAN0MV2H, 0xBD);                  // Message Valid 2 High Byte
 262      =3  SFR (CAN0IF1CRL, 0xBE);                // IF1 Command Request Low Byte
 263      =3  SFR (CAN0IF1CRH, 0xBF);                // IF1 Command Request High Byte
 264      =3  SFR (CAN0CN, 0xC0);                    // CAN Control Register Low Byte
 265      =3  SFR (CAN0IF1CML, 0xC2);                // IF1 Command Mask Low Byte
 266      =3  SFR (CAN0IF1CMH, 0xC3);                // IF1 Command Mask High Byte
 267      =3  SFR (CAN0IF1M1L, 0xC4);                // IF1 Mask 1 Low Byte
 268      =3  SFR (CAN0IF1M1H, 0xC5);                // IF1 Mask 1 High Byte
 269      =3  SFR (CAN0IF1M2L, 0xC6);                // IF1 Mask 2 Low Byte
 270      =3  SFR (CAN0IF1M2H, 0xC7);                // IF1 Mask 2 High Byte
 271      =3  SFR (CAN0IF1A1L, 0xCA);                // IF1 Arbitration 1 Low Byte
 272      =3  SFR (CAN0IF1A1H, 0xCB);                // IF1 Arbitration 1 High Byte
 273      =3  SFR (CAN0IF1A2L, 0xCC);                // IF1 Arbitration 2 Low Byte
 274      =3  SFR (CAN0IF1A2H, 0xCD);                // IF1 Arbitration 2 High Byte
 275      =3  SFR (CAN0IF2MCL, 0xCE);                // IF2 Message Control Low Byte
 276      =3  SFR (CAN0IF2MCH, 0xCF);                // IF2 Message Control High Byte
 277      =3  SFR (CAN0IF1MCL, 0xD2);                // IF1 Message Control Low Byte
 278      =3  SFR (CAN0IF1MCH, 0xD3);                // IF1 Message Control High Byte
 279      =3  SFR (CAN0IF1DA1L, 0xD4);               // IF1 Data A 1 Low Byte
 280      =3  SFR (CAN0IF1DA1H, 0xD5);               // IF1 Data A 1 High Byte
 281      =3  SFR (CAN0IF1DA2L, 0xD6);               // IF1 Data A 2 Low Byte
 282      =3  SFR (CAN0IF1DA2H, 0xD7);               // IF1 Data A 2 High Byte
 283      =3  SFR (CAN0IF1DB1L, 0xDA);               // IF1 Data B 1 Low Byte
 284      =3  SFR (CAN0IF1DB1H, 0xDB);               // IF1 Data B 1 High Byte
 285      =3  SFR (CAN0IF1DB2L, 0xDC);               // IF1 Data B 2 Low Byte
 286      =3  SFR (CAN0IF1DB2H, 0xDD);               // IF1 Data B 2 High Byte
 287      =3  SFR (CAN0IF2CRL, 0xDE);                // IF2 Command Request Low Byte
 288      =3  SFR (CAN0IF2CRH, 0xDF);                // IF2 Command Request High Byte
 289      =3  SFR (CAN0IF2CML, 0xE2);                // IF2 Command Mask Low Byte
 290      =3  SFR (CAN0IF2CMH, 0xE3);                // IF2 Command Mask High Byte
 291      =3  SFR (CAN0IF2M1L, 0xEA);                // IF2 Mask 1 Low Byte
 292      =3  SFR (CAN0IF2M1H, 0xEB);                // IF2 Mask 1 High Byte
 293      =3  SFR (CAN0IF2M2L, 0xEC);                // IF2 Mask 2 Low Byte
 294      =3  SFR (CAN0IF2M2H, 0xED);                // IF2 Mask 2 High Byte
 295      =3  SFR (CAN0IF2A1L, 0xEE);                // IF2 Arbitration 1 Low Byte
 296      =3  SFR (CAN0IF2A1H, 0xEF);                // IF2 Arbitration 1 High Byte
 297      =3  SFR (CAN0IF2A2L, 0xF2);                // IF2 Arbitration 2 Low Byte
 298      =3  SFR (CAN0IF2A2H, 0xF3);                // IF2 Arbitration 2 High Byte
 299      =3  SFR (CAN0IF2DA1L, 0xF6);               // IF2 Data A 1 Low Byte
 300      =3  SFR (CAN0IF2DA1H, 0xF7);               // IF2 Data A 1 High Byte
 301      =3  SFR (CAN0IF2DA2L, 0xFA);               // IF2 Data A 2 Low Byte
 302      =3  SFR (CAN0IF2DA2H, 0xFB);               // IF2 Data A 2 High Byte
 303      =3  SFR (CAN0IF2DB1L, 0xFC);               // IF2 Data B 1 Low Byte
 304      =3  SFR (CAN0IF2DB1H, 0xFD);               // IF2 Data B 1 High Byte
 305      =3  SFR (CAN0IF2DB2L, 0xFE);               // IF2 Data B 2 Low Byte
 306      =3  SFR (CAN0IF2DB2H, 0xFF);               // IF2 Data B 2 High Byte
 307      =3  
 308      =3  
 309      =3  //-----------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 40  

 310      =3  // 16-bit Register Definitions (might not be supported by all compilers)
 311      =3  //-----------------------------------------------------------------------------
 312      =3  
 313      =3  SFR16 (DP, 0x82);                      // Data Pointer
 314      =3  SFR16 (TMR3RL, 0x92);                  // Timer 3 Reload
 315      =3  SFR16 (TMR5CAP, 0x92);                 // Timer 5 Capture
 316      =3  SFR16 (TMR3, 0x94);                    // Timer 3 Capture / Reload
 317      =3  SFR16 (TMR5, 0x94);                    // Timer 5
 318      =3  SFR16 (SBRL0, 0xAC);                   // UART0 Reload
 319      =3  SFR16 (ADC0, 0xBD);                    // ADC0 data
 320      =3  SFR16 (ADC0GT, 0xC3);                  // ADC0 Greater Than Window
 321      =3  SFR16 (ADC0LT, 0xC5);                  // ADC0 Less Than Window
 322      =3  SFR16 (TMR2RL, 0xCA);                  // Timer 2 Reload
 323      =3  SFR16 (TMR4CAP, 0xCA);                 // Timer 4 Capture
 324      =3  SFR16 (TMR2, 0xCC);                    // Timer 2 Capture / Reload
 325      =3  SFR16 (TMR4, 0xCC);                    // Timer 4
 326      =3  SFR16 (PCA0CP5, 0xCE);                 // PCA0 Module 5 Capture
 327      =3  SFR16 (PCA1CP11, 0xCE);                // PCA1 Module 11 Capture
 328      =3  SFR16 (PCA0CP1, 0xE9);                 // PCA0 Module 1 Capture
 329      =3  SFR16 (PCA1CP7, 0xE9);                 // PCA1 Module 7 Capture
 330      =3  SFR16 (PCA0CP2, 0xEB);                 // PCA0 Module 2 Capture
 331      =3  SFR16 (PCA1CP8, 0xEB);                 // PCA1 Module 8 Capture
 332      =3  SFR16 (PCA0CP3, 0xED);                 // PCA0 Module 3 Capture
 333      =3  SFR16 (PCA1CP9, 0xED);                 // PCA1 Module 9 Capture
 334      =3  SFR16 (PCA0, 0xF9);                    // PCA0 Counter
 335      =3  SFR16 (PCA1, 0xF9);                    // PCA1 Counter
 336      =3  SFR16 (PCA0CP0, 0xFB);                 // PCA0 Module 0 Capture
 337      =3  SFR16 (PCA1CP6, 0xFB);                 // PCA1 Module 6 Capture
 338      =3  SFR16 (PCA0CP4, 0xFD);                 // PCA0 Module 4 Capture
 339      =3  SFR16 (PCA1CP10, 0xFD);                 // PCA1 Module 10 Capture
 340      =3  
 341      =3  SFR16 (CAN0ERR, 0x96);                 // Error Counter
 342      =3  SFR16 (CAN0BT, 0x9A);                  // Bit Timing Register
 343      =3  SFR16 (CAN0IID, 0x9C);                 // Interrupt Register
 344      =3  SFR16 (CAN0TR1, 0xA2);                 // Transmission Request 1
 345      =3  SFR16 (CAN0TR2, 0xA4);                 // Transmission Request 2
 346      =3  SFR16 (CAN0ND1, 0xAA);                 // New Data 1
 347      =3  SFR16 (CAN0ND2, 0xAC);                 // New Data 2
 348      =3  SFR16 (CAN0IP1, 0xAE);                 // Interrupt Pending 1
 349      =3  SFR16 (CAN0IP2, 0xB2);                 // Interrupt Pending 2
 350      =3  SFR16 (CAN0MV1, 0xBA);                 // Message Valid 1
 351      =3  SFR16 (CAN0MV2, 0xBC);                 // Message Valid 2
 352      =3  SFR16 (CAN0IF1CR, 0xBE);               // IF1 Command Request
 353      =3  SFR16 (CAN0IF1CM, 0xC2);               // IF1 Command Mask
 354      =3  SFR16 (CAN0IF1M1, 0xC4);               // IF1 Mask 1
 355      =3  SFR16 (CAN0IF1M2, 0xC6);               // IF1 Mask 2
 356      =3  SFR16 (CAN0IF1A1, 0xCA);               // IF1 Arbitration 1
 357      =3  SFR16 (CAN0IF1A2, 0xCC);               // IF1 Arbitration 2
 358      =3  SFR16 (CAN0IF1MC, 0xD2);               // IF1 Message Control
 359      =3  SFR16 (CAN0IF1DA1, 0xD4);              // IF1 Data A 1
 360      =3  SFR16 (CAN0IF1DA2, 0xD6);              // IF1 Data A 2
 361      =3  SFR16 (CAN0IF1DB1, 0xDA);              // IF1 Data B 1
 362      =3  SFR16 (CAN0IF1DB2, 0xDC);              // IF1 Data B 2
 363      =3  SFR16 (CAN0IF2CR, 0xDE);               // IF2 Command Request
 364      =3  SFR16 (CAN0IF2CM, 0xE2);               // IF2 Command Mask
 365      =3  SFR16 (CAN0IF2M1, 0xEA);               // IF2 Mask 1
 366      =3  SFR16 (CAN0IF2M2, 0xEC);               // IF2 Mask 2
 367      =3  SFR16 (CAN0IF2A1, 0xEE);               // IF2 Arbitration 1
 368      =3  SFR16 (CAN0IF2A2, 0xF2);               // IF2 Arbitration 2
 369      =3  SFR16 (CAN0IF2MC, 0xCE);               // IF2 Message Control
 370      =3  SFR16 (CAN0IF2DA1, 0xF6);              // IF2 Data A 1
 371      =3  SFR16 (CAN0IF2DA2, 0xFA);              // IF2 Data A 2
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 41  

 372      =3  SFR16 (CAN0IF2DB1, 0xFC);              // IF2 Data B 1
 373      =3  SFR16 (CAN0IF2DB2, 0xFE);              // IF2 Data B 2
 374      =3  
 375      =3  //-----------------------------------------------------------------------------
 376      =3  // LIN0 Indirect Registers
 377      =3  //-----------------------------------------------------------------------------
 378      =3  
 379      =3  #define  LIN0DT1   0x00                // LIN0 Data Byte 1
 380      =3  #define  LIN0DT2   0x01                // LIN0 Data Byte 2
 381      =3  #define  LIN0DT3   0x02                // LIN0 Data Byte 3
 382      =3  #define  LIN0DT4   0x03                // LIN0 Data Byte 4
 383      =3  #define  LIN0DT5   0x04                // LIN0 Data Byte 5
 384      =3  #define  LIN0DT6   0x05                // LIN0 Data Byte 6
 385      =3  #define  LIN0DT7   0x06                // LIN0 Data Byte 7
 386      =3  #define  LIN0DT8   0x07                // LIN0 Data Byte 8
 387      =3  #define  LIN0CTRL  0x08                // LIN0 Control
 388      =3  #define  LIN0ST    0x09                // LIN0 Status
 389      =3  #define  LIN0ERR   0x0A                // LIN0 Error
 390      =3  #define  LIN0SIZE  0x0B                // LIN0 Message Size
 391      =3  #define  LIN0DIV   0x0C                // LIN0 Divider
 392      =3  #define  LIN0MUL   0x0D                // LIN0 Multiplier
 393      =3  #define  LIN0ID    0x0E                // LIN0 Identifier
 394      =3  
 395      =3  //-----------------------------------------------------------------------------
 396      =3  // Address Definitions for Bit-addressable Registers
 397      =3  //-----------------------------------------------------------------------------
 398      =3  
 399      =3  #define SFR_P0       0x80
 400      =3  #define SFR_TCON     0x88
 401      =3  #define SFR_P1       0x90
 402      =3  #define SFR_SCON0    0x98
 403      =3  #define SFR_SCON1    0x98
 404      =3  #define SFR_P2       0xA0
 405      =3  #define SFR_IE       0xA8
 406      =3  #define SFR_P3       0xB0
 407      =3  #define SFR_IP       0xB8
 408      =3  #define SFR_SMB0CN   0xC0
 409      =3  #define SFR_TMR2CN   0xC8
 410      =3  #define SFR_TMR4CN   0xC8
 411      =3  #define SFR_PSW      0xD0
 412      =3  #define SFR_PCA0CN   0xD8
 413      =3  #define SFR_PCA1CN   0xD8
 414      =3  #define SFR_ACC      0xE0
 415      =3  #define SFR_ADC0CN   0xE8
 416      =3  #define SFR_B        0xF0
 417      =3  #define SFR_SPI0CN   0xF8
 418      =3  
 419      =3  //-----------------------------------------------------------------------------
 420      =3  // Bit Definitions
 421      =3  //-----------------------------------------------------------------------------
 422      =3  
 423      =3  // TCON 0x88
 424      =3  SBIT (TF1, SFR_TCON, 7);               // Timer 1 Overflow Flag
 425      =3  SBIT (TR1, SFR_TCON, 6);               // Timer 1 On/Off Control
 426      =3  SBIT (TF0, SFR_TCON, 5);               // Timer 0 Overflow Flag
 427      =3  SBIT (TR0, SFR_TCON, 4);               // Timer 0 On/Off Control
 428      =3  SBIT (IE1, SFR_TCON, 3);               // Ext. Interrupt 1 Edge Flag
 429      =3  SBIT (IT1, SFR_TCON, 2);               // Ext. Interrupt 1 Type
 430      =3  SBIT (IE0, SFR_TCON, 1);               // Ext. Interrupt 0 Edge Flag
 431      =3  SBIT (IT0, SFR_TCON, 0);               // Ext. Interrupt 0 Type
 432      =3  
 433      =3  // SCON0 0x98
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 42  

 434      =3  SBIT (OVR0, SFR_SCON0, 7);             // UART0 Receive FIFO Overrun Flag
 435      =3  SBIT (PERR0, SFR_SCON0, 6);            // UART0 Parity Error Flag
 436      =3  SBIT (THRE0, SFR_SCON0, 5);            // UART0 Transmit Register Empty Flag
 437      =3  SBIT (REN0, SFR_SCON0, 4);             // UART0 RX Enable
 438      =3  SBIT (TBX0, SFR_SCON0, 3);             // UART0 Extra Transmission Bit
 439      =3  SBIT (RBX0, SFR_SCON0, 2);             // UART0 Extra Receive Bit
 440      =3  SBIT (TI0, SFR_SCON0, 1);              // UART0 TX Interrupt Flag
 441      =3  SBIT (RI0, SFR_SCON0, 0);              // UART0 RX Interrupt Flag
 442      =3  
 443      =3  // SCON1 0x98
 444      =3  SBIT (S1MODE, SFR_SCON1, 7);           // UART1 Mode 0
 445      =3                                         // Bit 6 UNUSED
 446      =3  SBIT (MCE1, SFR_SCON1, 5);             // UART1 Multiprocessor enable
 447      =3  SBIT (REN1, SFR_SCON1, 4);             // UART1 RX Enable
 448      =3  SBIT (TB81, SFR_SCON1, 3);             // UART1 TX Bit 8
 449      =3  SBIT (RB81, SFR_SCON1, 2);             // UART1 RX Bit 8
 450      =3  SBIT (TI1, SFR_SCON1, 1);              // UART1 TX Interrupt Flag
 451      =3  SBIT (RI1, SFR_SCON1, 0);              // UART1 RX Interrupt Flag
 452      =3  
 453      =3  // IE 0xA8
 454      =3  SBIT (EA, SFR_IE, 7);                  // Global Interrupt Enable
 455      =3  SBIT (ESPI0, SFR_IE, 6);               // SPI0 Interrupt Enable
 456      =3  SBIT (ET2, SFR_IE, 5);                 // Timer 2 Interrupt Enable
 457      =3  SBIT (ES0, SFR_IE, 4);                 // UART0 Interrupt Enable
 458      =3  SBIT (ET1, SFR_IE, 3);                 // Timer 1 Interrupt Enable
 459      =3  SBIT (EX1, SFR_IE, 2);                 // External Interrupt 1 Enable
 460      =3  SBIT (ET0, SFR_IE, 1);                 // Timer 0 Interrupt Enable
 461      =3  SBIT (EX0, SFR_IE, 0);                 // External Interrupt 0 Enable
 462      =3  
 463      =3  // IP 0xB8
 464      =3                                         // Bit 7 unused
 465      =3  SBIT (PSPI0, SFR_IP, 6);               // SPI0 Interrupt Priority
 466      =3  SBIT (PT2, SFR_IP, 5);                 // Timer 2 Priority
 467      =3  SBIT (PS0, SFR_IP, 4);                 // UART0 Priority
 468      =3  SBIT (PS, SFR_IP, 4);                  // UART0 Priority
 469      =3  SBIT (PT1, SFR_IP, 3);                 // Timer 1 Priority
 470      =3  SBIT (PX1, SFR_IP, 2);                 // External Interrupt 1 Priority
 471      =3  SBIT (PT0, SFR_IP, 1);                 // Timer 0 Priority
 472      =3  SBIT (PX0, SFR_IP, 0);                 // External Interrupt 0 Priority
 473      =3  
 474      =3  // SMB0CN 0xC0
 475      =3  SBIT (MASTER, SFR_SMB0CN, 7);          // SMBus0 Master/Slave Indicator
 476      =3  SBIT (TXMODE, SFR_SMB0CN, 6);          // SMBus0 Transmit Mode Indicator
 477      =3  SBIT (STA, SFR_SMB0CN, 5);             // SMBus0 Start Flag
 478      =3  SBIT (STO, SFR_SMB0CN, 4);             // SMBus0 Stop Flag
 479      =3  SBIT (ACKRQ, SFR_SMB0CN, 3);           // SMBus0 Acknowledge Request
 480      =3  SBIT (ARBLOST, SFR_SMB0CN, 2);         // SMBus0 Arbitration Lost Indicator
 481      =3  SBIT (ACK, SFR_SMB0CN, 1);             // SMBus0 Acknowledge
 482      =3  SBIT (SI, SFR_SMB0CN, 0);              // SMBus0 Interrupt Flag
 483      =3  
 484      =3  // TMR2CN 0xC8
 485      =3  SBIT (TF2H, SFR_TMR2CN, 7);            // Timer 2 High-Byte Overflow Flag
 486      =3  SBIT (TF2L, SFR_TMR2CN, 6);            // Timer 2 Low-Byte  Overflow Flag
 487      =3  SBIT (TF2LEN, SFR_TMR2CN, 5);          // Timer 2 Low-Byte Flag Enable
 488      =3  SBIT (TF2CEN, SFR_TMR2CN, 4);          // Timer 2 Capture Enable
 489      =3  SBIT (T2SPLIT, SFR_TMR2CN, 3);         // Timer 2 Split-Mode Enable
 490      =3  SBIT (TR2, SFR_TMR2CN, 2);             // Timer 2 Run Enable
 491      =3  SBIT (T2RCLK, SFR_TMR2CN, 1);          // Timer 2 Xclk/Rclk Select
 492      =3  SBIT (T2XCLK, SFR_TMR2CN, 0);          // Timer 2 Clk/8 Clock Source
 493      =3  
 494      =3  // TMR4CN 0xC8
 495      =3  SBIT (TF4, SFR_TMR4CN, 7);             // Timer 4 Overflow/Underflow Flag
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 43  

 496      =3  SBIT (EXF4, SFR_TMR4CN, 6);            // Timer 4 External Flag
 497      =3                                         // Bit 5 unused
 498      =3                                         // Bit 4 unused
 499      =3  SBIT (EXE4, SFR_TMR4CN, 3);            // Timer 4 External Enable
 500      =3  SBIT (TR4, SFR_TMR4CN, 2);             // Timer 4 Run Enable
 501      =3  SBIT (CT4, SFR_TMR4CN, 1);             // Timer 4 Counter/Timer Select
 502      =3  SBIT (CPRL4, SFR_TMR4CN, 0);           // Timer 4 Capture/Reload Select
 503      =3  
 504      =3  // PSW 0xD0
 505      =3  SBIT (CY, SFR_PSW, 7);                 // Carry Flag
 506      =3  SBIT (AC, SFR_PSW, 6);                 // Auxiliary Carry Flag
 507      =3  SBIT (F0, SFR_PSW, 5);                 // User Flag 0
 508      =3  SBIT (RS1, SFR_PSW, 4);                // Register Bank Select 1
 509      =3  SBIT (RS0, SFR_PSW, 3);                // Register Bank Select 0
 510      =3  SBIT (OV, SFR_PSW, 2);                 // Overflow Flag
 511      =3  SBIT (F1, SFR_PSW, 1);                 // User Flag 1
 512      =3  SBIT (P, SFR_PSW, 0);                  // Accumulator Parity Flag
 513      =3  
 514      =3  // PCA0CN 0xD8
 515      =3  SBIT (CF, SFR_PCA0CN, 7);              // PCA0 Counter Overflow Flag
 516      =3  SBIT (CR, SFR_PCA0CN, 6);              // PCA0 Counter Run Control Bit
 517      =3  SBIT (CCF5, SFR_PCA0CN, 5);            // PCA0 Module 5 Interrupt Flag
 518      =3  SBIT (CCF4, SFR_PCA0CN, 4);            // PCA0 Module 4 Interrupt Flag
 519      =3  SBIT (CCF3, SFR_PCA0CN, 3);            // PCA0 Module 3 Interrupt Flag
 520      =3  SBIT (CCF2, SFR_PCA0CN, 2);            // PCA0 Module 2 Interrupt Flag
 521      =3  SBIT (CCF1, SFR_PCA0CN, 1);            // PCA0 Module 1 Interrupt Flag
 522      =3  SBIT (CCF0, SFR_PCA0CN, 0);            // PCA0 Module 0 Interrupt Flag
 523      =3  
 524      =3  // PCA1CN 0xD8
 525      =3  SBIT (CF1, SFR_PCA1CN, 7);             // PCA1 Counter Overflow Flag
 526      =3  SBIT (CR1, SFR_PCA1CN, 6);             // PCA1 Counter Run Control Bit
 527      =3  SBIT (CCF11, SFR_PCA1CN, 5);           // PCA1 Module 11 Interrupt Flag
 528      =3  SBIT (CCF10, SFR_PCA1CN, 4);           // PCA1 Module 10 Interrupt Flag
 529      =3  SBIT (CCF9, SFR_PCA1CN, 3);            // PCA1 Module 9 Interrupt Flag
 530      =3  SBIT (CCF8, SFR_PCA1CN, 2);            // PCA1 Module 8 Interrupt Flag
 531      =3  SBIT (CCF7, SFR_PCA1CN, 1);            // PCA1 Module 7 Interrupt Flag
 532      =3  SBIT (CCF6, SFR_PCA1CN, 0);            // PCA1 Module 6 Interrupt Flag
 533      =3  
 534      =3  // ADC0CN 0xE8
 535      =3  SBIT (AD0EN, SFR_ADC0CN, 7);           // ADC0 Enable
 536      =3  SBIT (BURSTEN, SFR_ADC0CN, 6);         // ADC0 Burst Enable
 537      =3  SBIT (AD0INT, SFR_ADC0CN, 5);          // ADC0 EOC Interrupt Flag
 538      =3  SBIT (AD0BUSY, SFR_ADC0CN, 4);         // ADC0 Busy Flag
 539      =3  SBIT (AD0WINT, SFR_ADC0CN, 3);         // ADC0 Window Compare Interrupt Flag
 540      =3  SBIT (AD0LJST, SFR_ADC0CN, 2);         // ADC0 Left Justified
 541      =3  SBIT (AD0CM1, SFR_ADC0CN, 1);          // ADC0 Start Of Conversion Mode Bit 1
 542      =3  SBIT (AD0CM0, SFR_ADC0CN, 0);          // ADC0 Start Of Conversion Mode Bit 0
 543      =3  
 544      =3  // SPI0CN 0xF8
 545      =3  SBIT (SPIF, SFR_SPI0CN, 7);            // SPI0 Interrupt Flag
 546      =3  SBIT (WCOL, SFR_SPI0CN, 6);            // SPI0 Write Collision Flag
 547      =3  SBIT (MODF, SFR_SPI0CN, 5);            // SPI0 Mode Fault Flag
 548      =3  SBIT (RXOVRN, SFR_SPI0CN, 4);          // SPI0 RX Overrun Flag
 549      =3  SBIT (NSSMD1, SFR_SPI0CN, 3);          // SPI0 Slave Select Mode 1
 550      =3  SBIT (NSSMD0, SFR_SPI0CN, 2);          // SPI0 Slave Select Mode 0
 551      =3  SBIT (TXBMT, SFR_SPI0CN, 1);           // SPI0 TX Buffer Empty Flag
 552      =3  SBIT (SPIEN, SFR_SPI0CN, 0);           // SPI0 Enable
 553      =3  
 554      =3  //-----------------------------------------------------------------------------
 555      =3  // Interrupt Priorities
 556      =3  //-----------------------------------------------------------------------------
 557      =3  
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 44  

 558      =3  #define INTERRUPT_INT0             0   // External Interrupt 0
 559      =3  #define INTERRUPT_TIMER0           1   // Timer 0 Overflow
 560      =3  #define INTERRUPT_INT1             2   // External Interrupt 1
 561      =3  #define INTERRUPT_TIMER1           3   // Timer 1 Overflow
 562      =3  #define INTERRUPT_UART0            4   // UART0
 563      =3  #define INTERRUPT_TIMER2           5   // Timer 2 Overflow
 564      =3  #define INTERRUPT_SPI0             6   // SPI0
 565      =3  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 566      =3  #define INTERRUPT_ADC0_WINDOW      8   // ADC0 Window Comparison
 567      =3  #define INTERRUPT_ADC0_EOC         9   // ADC0 End Of Conversion
 568      =3  #define INTERRUPT_PCA0            10   // PCA0 Peripheral
 569      =3  #define INTERRUPT_COMPARATOR0     11   // Comparator 0 Comparison
 570      =3  #define INTERRUPT_COMPARATOR1     12   // Comparator 1 Comparison
 571      =3  #define INTERRUPT_TIMER3          13   // Timer 3 Overflow
 572      =3  #define INTERRUPT_LIN0            14   // LIN Bus Interrupt
 573      =3  #define INTERRUPT_VREG            15   // Voltage Regulator
 574      =3  #define INTERRUPT_CAN0            16   // CAN Bus Interrupt
 575      =3  #define INTERRUPT_PORT_MATCH      17   // Port Match
 576      =3  #define INTERRUPT_UART1           18   // UART1
 577      =3  #define INTERRUPT_PCA1            19   // PCA1 Peripheral
 578      =3  #define INTERRUPT_COMPARATOR2     20   // Comparator 2 Comparison
 579      =3  #define INTERRUPT_TIMER4          21   // Timer 4 Overflow
 580      =3  #define INTERRUPT_TIMER5          22   // Timer 5 Overflow
 581      =3  
 582      =3  
 583      =3  //-----------------------------------------------------------------------------
 584      =3  // SFR Page Definitions
 585      =3  //-----------------------------------------------------------------------------
 586      =3  
 587      =3  #define  CONFIG_PAGE       0x0F        // System and Port Configuration Page
 588      =3  #define  ACTIVE_PAGE       0x00        // Active Use Page
 589      =3  #define  ACTIVE2_PAGE      0x10        // Active Use Page 2
 590      =3  #define  CAN0_PAGE         0x0C        // CAN0 Registers
 591      =3  
 592      =3  //-----------------------------------------------------------------------------
 593      =3  // SDCC PDATA External Memory Paging Support
 594      =3  //-----------------------------------------------------------------------------
 595      =3  
 596      =3  #if defined SDCC
           =3 
           =3 SFR(_XPAGE, 0xAA); // Point to the EMI0CN register
           =3 
           =3 #endif
 601      =3  
 602      =3  //-----------------------------------------------------------------------------
 603      =3  // Header File PreProcessor Directive
 604      =3  //-----------------------------------------------------------------------------
 605      =3  
 606      =3  #endif                                 // #define C8051F580_DEFS_H
 607      =3  
 608      =3  //-----------------------------------------------------------------------------
 609      =3  // End Of File
 610      =3  //-----------------------------------------------------------------------------
 129      =2  #endif
 130      =2  /*****************************************************************************/
 131      =2  #include <stdio.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDIO.H
   3      =3  
   4      =3  Prototypes for standard I/O functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 45  

   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __STDIO_H__
  10      =3  #define __STDIO_H__
  11      =3  
  12      =3  #ifndef EOF
  13      =3   #define EOF -1
  14      =3  #endif
  15      =3  
  16      =3  #ifndef NULL
           =3  #define NULL ((void *) 0)
           =3 #endif
  19      =3  
  20      =3  #ifndef _SIZE_T
  21      =3   #define _SIZE_T
  22      =3   typedef unsigned int size_t;
  23      =3  #endif
  24      =3  
  25      =3  #pragma SAVE
  26      =3  #pragma REGPARMS
  27      =3  extern char _getkey (void);
  28      =3  extern char getchar (void);
  29      =3  extern char ungetchar (char);
  30      =3  extern char putchar (char);
  31      =3  extern int printf   (const char *, ...);
  32      =3  extern int sprintf  (char *, const char *, ...);
  33      =3  extern int vprintf  (const char *, char *);
  34      =3  extern int vsprintf (char *, const char *, char *);
  35      =3  extern char *gets (char *, int n);
  36      =3  extern int scanf (const char *, ...);
  37      =3  extern int sscanf (char *, const char *, ...);
  38      =3  extern int puts (const char *);
  39      =3  
  40      =3  #pragma RESTORE
  41      =3  
  42      =3  #endif
  43      =3  
 132      =2  #include <stdlib.h> 
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDLIB.H
   3      =3  
   4      =3  Standard functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STDLIB_H__
  11      =3  #define __STDLIB_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #ifndef _WCHAR_T_DEFINED_
  23      =3  #define _WCHAR_T_DEFINED_
  24      =3  typedef char wchar_t;
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 46  

  25      =3  #endif
  26      =3  
  27      =3  #if defined (__CX2__)
           =3 #ifndef _DIV_T_DEFINED
           =3 typedef struct _div_t {
           =3         int quot;
           =3         int rem;
           =3 } div_t;
           =3 typedef struct _ldiv_t {
           =3         long quot;
           =3         long rem;
           =3 } ldiv_t;
           =3 #define _DIV_T_DEFINED
           =3 #endif // _DIV_T_DEFINED
           =3 #endif // __CX2__
  40      =3  
  41      =3  #ifndef RAND_MAX
  42      =3   #define RAND_MAX  32767u
  43      =3  #endif
  44      =3  
  45      =3  #if defined (__CX2__)
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif // __CX2__
  52      =3  
  53      =3  #pragma SAVE
  54      =3  #pragma REGPARMS
  55      =3  
  56      =3  extern char   cabs (char  val);
  57      =3  #if !defined (__CX2__)
  58      =3  extern int    abs  (int   val);
  59      =3  #endif // __CX2__
  60      =3  extern long   labs (long  val);
  61      =3  
  62      =3  extern float  atof (const char *s1);
  63      =3  extern long   atol (const char *s1);
  64      =3  extern int    atoi (const char *s1);
  65      =3  extern int    rand (void);
  66      =3  extern void   srand (unsigned int seed);
  67      =3  
  68      =3  #ifdef _DIV_T_DEFINED
           =3 extern div_t  __div (int numer, int denom);
           =3 #define div(numer,denom)  __div((numer),(denom));
           =3 extern ldiv_t ldiv (long numer, long denom);
           =3 #endif // _DIV_T_DEFINED
  73      =3  
  74      =3  extern float         strtod  (const char *nptr, char **endptr);
  75      =3  extern long          strtol  (const char *nptr, char **endptr, unsigned char base);
  76      =3  extern unsigned long strtoul (const char *nptr, char **endptr, unsigned char base);
  77      =3  
  78      =3  #define _MALLOC_MEM_    xdata
  79      =3  
  80      =3  extern void init_mempool          (void _MALLOC_MEM_ *p, size_t size);
  81      =3  extern void _MALLOC_MEM_ *malloc  (size_t size);
  82      =3  extern void free                  (void _MALLOC_MEM_ *p);
  83      =3  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, size_t size);
  84      =3  extern void _MALLOC_MEM_ *calloc  (size_t nmemb, size_t size);
  85      =3  
  86      =3  #if defined (__CX2__)
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 47  

           =3 extern void abort(void);
           =3 #endif // __CX2__
  89      =3  
  90      =3  #pragma RESTORE
  91      =3  
  92      =3  #endif // __STDLIB_H__
 133      =2  #include <string.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STRING.H
   3      =3  
   4      =3  String functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STRING_H__
  11      =3  #define __STRING_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #pragma SAVE
  23      =3  #pragma REGPARMS
  24      =3  extern char  *strcat  (char *s1, const char *s2);
  25      =3  extern char  *strncat (char *s1, const char *s2, size_t n);
  26      =3  
  27      =3  extern char   strcmp  (const char *s1, const char *s2);
  28      =3  extern char   strncmp (const char *s1, const char *s2, size_t n);
  29      =3  
  30      =3  extern char  *strcpy  (char *s1, const char *s2);
  31      =3  extern char  *strncpy (char *s1, const char *s2, size_t n);
  32      =3  
  33      =3  extern size_t strlen  (const char *);
  34      =3  
  35      =3  extern char  *strchr  (const char *s, char c);
  36      =3  extern int    strpos  (const char *s, char c);
  37      =3  extern char  *strrchr (const char *s, char c);
  38      =3  extern int    strrpos (const char *s, char c);
  39      =3  
  40      =3  extern size_t strspn  (const char *s, const char *set);
  41      =3  extern size_t strcspn (const char *s, const char *set);
  42      =3  extern char  *strpbrk (const char *s, const char *set);
  43      =3  extern char  *strrpbrk(const char *s, const char *set);
  44      =3  extern char  *strstr  (const char *s, const char *sub);
  45      =3  extern char  *strtok  (char *str, const char *set);
  46      =3  
  47      =3  extern char   memcmp  (const void *s1, const void *s2, size_t n);
  48      =3  extern void  *memcpy  (void *s1, const void *s2, size_t n);
  49      =3  extern void  *memchr  (const void *s, char val, size_t n);
  50      =3  extern void  *memccpy (void *s1, const void *s2, char val, size_t n);
  51      =3  extern void  *memmove (void *s1, const void *s2, size_t n);
  52      =3  extern void  *memset  (void *s, char val, size_t n);
  53      =3  #pragma RESTORE
  54      =3  
  55      =3  #endif
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 48  

 134      =2  #include <INTRINS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  INTRINS.H
   3      =3  
   4      =3  Intrinsic functions for C51.
   5      =3  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __INTRINS_H__
  10      =3  #define __INTRINS_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  
  14      =3  #if defined (__CX2__)
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 #endif
  18      =3  
  19      =3  extern void          _nop_     (void);
  20      =3  extern bit           _testbit_ (bit);
  21      =3  extern unsigned char _cror_    (unsigned char, unsigned char);
  22      =3  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  23      =3  extern unsigned long _lror_    (unsigned long, unsigned char);
  24      =3  extern unsigned char _crol_    (unsigned char, unsigned char);
  25      =3  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  26      =3  extern unsigned long _lrol_    (unsigned long, unsigned char);
  27      =3  extern unsigned char _chkfloat_(float);
  28      =3  #if defined (__CX2__)
           =3 extern int           abs       (int);
           =3 extern void          _illop_   (void);
           =3 #endif
  32      =3  #if !defined (__CX2__)
  33      =3  extern void          _push_    (unsigned char _sfr);
  34      =3  extern void          _pop_     (unsigned char _sfr);
  35      =3  #endif
  36      =3  
  37      =3  #pragma RESTORE
  38      =3  
  39      =3  #endif
  40      =3  
 135      =2  #include <ctype.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  CTYPE.H
   3      =3  
   4      =3  Prototypes for character functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __CTYPE_H__
  10      =3  #define __CTYPE_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  #pragma REGPARMS
  14      =3  extern bit isalpha (unsigned char);
  15      =3  extern bit isalnum (unsigned char);
  16      =3  extern bit iscntrl (unsigned char);
  17      =3  extern bit isdigit (unsigned char);
  18      =3  extern bit isgraph (unsigned char);
  19      =3  extern bit isprint (unsigned char);
  20      =3  extern bit ispunct (unsigned char);
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 49  

  21      =3  extern bit islower (unsigned char);
  22      =3  extern bit isupper (unsigned char);
  23      =3  extern bit isspace (unsigned char);
  24      =3  extern bit isxdigit (unsigned char);
  25      =3  extern unsigned char tolower (unsigned char);
  26      =3  extern unsigned char toupper (unsigned char);
  27      =3  extern unsigned char toint (unsigned char);
  28      =3  
  29      =3  #define _tolower(c) ( (c)-'A'+'a' )
  30      =3  #define _toupper(c) ( (c)-'a'+'A' )
  31      =3  #define toascii(c)  ( (c) & 0x7F )
  32      =3  #pragma RESTORE
  33      =3  
  34      =3  #endif
 136      =2  #include <LIMITS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  LIMITS.H
   3      =3  
   4      =3  ANSI standard include file.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2009 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __LIMITS_H__
  11      =3  #define __LIMITS_H__
  12      =3  
  13      =3  #define CHAR_BIT         8              /* Number of bits in any "char" */
  14      =3  #define CHAR_MAX         127            /* Max             "char" value */
  15      =3  #define CHAR_MIN       (-128)           /* Min             "char" value */
  16      =3  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  17      =3  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
  18      =3  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  19      =3  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  20      =3  #define SHRT_MIN       (-32767-1)       /* Min ("signed") "short" value */
  21      =3  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  22      =3  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  23      =3  #define INT_MIN        (-32767-1)       /* Min ("signed")   "int" value */
  24      =3  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  25      =3  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  26      =3  #define LONG_MIN   (-2147483647L-1L)    /* Min ("signed")  "long" value */
  27      =3  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
  28      =3  
  29      =3  #endif
 137      =2  #include <math.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  MATH.H
   3      =3  
   4      =3  Prototypes for mathematic functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __MATH_H__
  11      =3  #define __MATH_H__
  12      =3  
  13      =3  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
           =3 #ifndef HUGE_VAL
           =3 #define HUGE_VAL __inf__
           =3 #endif // HUGE_VAL
           =3 
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 50  

           =3 #ifndef NAN
           =3 #define NAN __nan__
           =3 #endif // NAN
           =3 
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif
  28      =3  
  29      =3  #pragma SAVE
  30      =3  #pragma REGPARMS
  31      =3  #if !defined (__CX2__)
  32      =3  extern char  cabs  (char  val);
  33      =3  extern int    abs  (int   val);
  34      =3  extern long  labs  (long  val);
  35      =3  #endif
  36      =3  
  37      =3  extern float fabs  (float val);
  38      =3  extern float sqrt  (float val);
  39      =3  extern float exp   (float val);
  40      =3  extern float log   (float val);
  41      =3  extern float log10 (float val);
  42      =3  extern float sin   (float val);
  43      =3  extern float cos   (float val);
  44      =3  extern float tan   (float val);
  45      =3  extern float asin  (float val);
  46      =3  extern float acos  (float val);
  47      =3  extern float atan  (float val);
  48      =3  extern float sinh  (float val);
  49      =3  extern float cosh  (float val);
  50      =3  extern float tanh  (float val);
  51      =3  extern float atan2 (float y, float x);
  52      =3  
  53      =3  extern float ceil  (float val);
  54      =3  extern float floor (float val);
  55      =3  extern float modf  (float val, float *n);
  56      =3  extern float fmod  (float x, float y);
  57      =3  extern float pow   (float x, float y);
  58      =3  
  59      =3  #if defined (__CX2__)
           =3 extern float frexp (float val, int *exp);
           =3 extern float ldexp (float val, int exp);
           =3 #endif
  63      =3  
  64      =3  #pragma RESTORE
  65      =3  
  66      =3  #endif
 138      =2  #include "crc32.h"
   1      =3  #ifndef __CRC32_H__
   2      =3  #define __CRC32_H__
   3      =3  
   4      =3  //#ifdef __cplusplus
   5      =3  //extern "C" {
   6      =3  //#endif
   7      =3  /*****************************************************************************/
   8      =3  #include "AppConfig.h"
   1      =4  #ifndef __APPCONFIG_H__
           =4 #define __APPCONFIG_H__
           =4 /*****************************************************************************/
           =4 #define CONFIG_SYSCLK                       (22118400L)
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 51  

           =4 #ifdef C8051F020
           =4 #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
           =4 #endif
           =4 #define CONFIG_DEBUG                        0//调试功能
           =4 #define CONFIG_USING_WDT                                        0//使能看门狗
           =4 #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
           =4 #define CONFIG_LADDER_SECTORS_START                     64//指令起始地址
           =4 #define CONFIG_LADDER_SECTORS_END                       128//指令结束地址
           =4 #define CONFIG_LASERTIMER_OVERFLOW_US           1000L//定时器周期 1mS
           =4 #define CONFIG_VERSION                                          0x0001
           =4 #define CONFIG_CHECK_CODE                                       0x5A00
           =4 
           =4 /*****************************************************************************/
           =4 #define CONFIG_UART0_BAUDRATE                           57600//串口波特率
           =4 #define CONFIG_UART0_PARITY                                     NONE
           =4 #define CONFIG_UART0_STOPBIT                            1
           =4 #define CONFIG_UART0_DATABIT                            8
           =4 
           =4 #define CONFIG_UART1_BAUDRATE                           115200//串口波特率
           =4 #define CONFIG_UART1_PARITY                                     NONE
           =4 #define CONFIG_UART1_STOPBIT                            1
           =4 #define CONFIG_UART1_DATABIT                            8
           =4 /*****************************************************************************/
           =4 #define CONFIG_I2C0_FREQ                                        (100000L)               
           =4 #define CONFIG_I2C1_FREQ                                        (100000L)
           =4 #define CONFIG_I2C2_FREQ                                        (100000L)
           =4 #define CONFIG_I2C3_FREQ                                        (100000L)
           =4 #define CONFIG_I2C4_FREQ                                        (100000L)
           =4 /*****************************************************************************/
           =4 #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
           =4 #define CONFIG_AT24C02_SIZE                             256
           =4 #define CONFIG_AT24C04_SIZE                             512
           =4 #define CONFIG_AT24C08_SIZE                             1024
           =4 #define CONFIG_AT24C16_SIZE                             2048
           =4 #define CONFIG_AT24C32_SIZE                             4096
           =4 #define CONFIG_AT24C64_SIZE                                     8192
           =4 #define CONFIG_AT24C128_SIZE                            16384
           =4 #define CONFIG_AT24C256_SIZE                            32768
           =4 #define CONFIG_EPROM_ADDRESS                            0x50
           =4 #define CONFIG_EPROM_FRAM                                       0//铁电存储体无写入等待
           =4 #define CONFIG_EPROM_FREQ                                       1//
           =4 /*****************************************************************************/
           =4 #define CONFIG_USE_IPID                                         1//使能IPID温度控制
           =4 /*****************************************************************************/
           =4 #define CONFIG_USE_HWVER_SHOW                           1//使能固件版本显示
           =4 #define CONFIG_USE_MPD1_SHOW                            1//使能MPD1测量显示
           =4 #define CONFIG_USE_MPD2_SHOW                            1//使能MPD2测量显示
           =4 #define CONFIG_USE_FBS1                                         1//使能FBS1检测
           =4 #define CONFIG_USE_FBS2                                         1//使能FBS2检测
           =4 #define CONFIG_USE_LASER_TEMP                           1//使能激光器温度显示
           =4 #define CONFIG_USE_RADIATOR_TEMP                        1//使能散热器温度显示
           =4 #define CONFIG_USE_ENVI_TEMP                            1//使能环境温度显示
           =4 #define CONFIG_USE_IPID_UPDATE                          1//使能IPID参数更新功能
           =4 #define CONFIG_USE_IPID_OUTSHOW                         1//使能IPID输出显示
           =4 /*****************************************************************************/
           =4 //SPLC设置
           =4 #define CONFIG_SPLC_IO_INPUT_NUM                        16//硬件输入点数
           =4 #define CONFIG_SPLC_IO_OUTPUT_NUM                       16//硬件输出点数
           =4 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =4 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =4 #define CONFIG_IPID_RUN_CYCLE                           40//IPID运行周期 默认 40 * 100mS
           =4 #define CONFIG_IPID_PWM_CYCLE                           20//IPID输出周期 默认 20 * 100mS
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 52  

           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_EPROM                         0//EPROM掉电存储启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_ADC                           0//使能ADC模块
           =4 #define CONFIG_SPLC_ADC_FILTER_TAP                      48//ADC位移滤波次数
           =4 #define CONFIG_SPLC_ADC_CHANNLE                         9//ADC通道数
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =4 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
           =4 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
           =4 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =4 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =4 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =4 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =4 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =4 /*****************************************************************************/
           =4 
           =4 /*****************************************************************************/
           =4 #define ID_ONLY_1_CHANNEL                                       4321
           =4 #define ID_ONLY_2_CHANNEL                                       8765
           =4 #define ID_BOTH_CHANNEL                                         9431
           =4 #define ID_LASER_MODE_CW                                        7631
           =4 #define ID_LASER_MODE_SP                                        8934
           =4 #define ID_LASER_MODE_MP                                        2453
           =4 #define ID_LASER_MODE_GP                                        3876
           =4 /*****************************************************************************/
           =4 #define FBS1_IN_PORT                                            3
           =4 #define FBS2_IN_PORT                                            2
           =4 #define COOLON_OUT_PORT                                         (1 * 8 + 3)
           =4 /*****************************************************************************/
           =4 //PID FUZZY 模糊PID配置
           =4 #define CONFIG_TECOUT_CYCLE                                     4000//PID输出转PWM周期
           =4 /*****************************************************************************/
           =4 /*****************************************************************************/
           =4 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =4 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =4 #define DISABLE_INTERRUPT                                       EA = 0;
           =4 #define ENABLE_INTERRUPT                                        EA = 1;
           =4 /*****************************************************************************/
           =4 #include "stdint.h"
           =4 #include "stdbool.h"
           =4 #include "endian.h"
           =4 #include "si_toolchain.h"
           =4 #include "compiler_defs.h"
           =4 #ifdef C8051F020
           =4 #include "C8051F020_defs.h"
           =4 #endif
           =4 #ifdef C8051F340
           =4 #include "C8051F340_defs.h"
           =4 #endif
           =4 #ifdef C8051F580
           =4 #include "C8051F580_defs.h"
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 53  

           =4 #endif
           =4 /*****************************************************************************/
           =4 #include <stdio.h>
           =4 #include <stdlib.h> 
           =4 #include <string.h>
           =4 #include <INTRINS.H>
           =4 #include <ctype.h>
           =4 #include <LIMITS.H>
           =4 #include <math.h>
           =4 #include "crc32.h"
           =4 /*****************************************************************************/
           =4 #ifdef C8051F020
           =4 #include "InitDeviceF020.h"
           =4 #endif
           =4 #ifdef C8051F580
           =4 #include "InitDeviceF580.h"
           =4 #endif
           =4 
           =4 #include "delay.h"
           =4 #include "i2c0.h"
           =4 #include "i2c1.h"
           =4 #include "i2c2.h"
           =4 #include "i2c3.h"
           =4 #include "i2c4.h"
           =4 #include "i2c5.h"
           =4 #include "i2c6.h"
           =4 #include "eprom.h"
           =4 //#include "mcp47x6.h"
           =4 //#include "inPca9554.h"
           =4 //#include "outPca9554.h"
           =4 /*****************************************************************************/
           =4 #include "Modbus.h"
           =4 #include "ModbusPort.h"
           =4 /*****************************************************************************/
           =4 #include "sPLC.h"
           =4 //#include "pidFuzzy.h"
           =4 /*****************************************************************************/
           =4 //#include "AppMath.h"
           =4 //#include "chipAdc.h"
           =4 //#include "ad5621.h"
           =4 //#include "chipBeem.h"
           =4 
           =4 /*****************************************************************************/
           =4 #endif
   9      =3  /*****************************************************************************/
  10      =3  uint32_t crc32Calculate(uint8_t *buf, uint32_t len);//CRC32 计算数组
  11      =3  uint32_t crc32CalculateAdd(uint8_t dat);//CRC32 计算连续字节
  12      =3  void crc32Clear(void);//清空旧CRC32结果
  13      =3  void crc32SetCrcOld(uint32_t old);
  14      =3  /*****************************************************************************/
  15      =3  //#ifdef __cplusplus
  16      =3  //}
  17      =3  //#endif
  18      =3  #endif
  19      =3  
  20      =3  
  21      =3  
 139      =2  /*****************************************************************************/
 140      =2  #ifdef C8051F020
           =2 #include "InitDeviceF020.h"
           =2 #endif
 143      =2  #ifdef C8051F580
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 54  

 144      =2  #include "InitDeviceF580.h"
   1      =3  #ifndef __INITDEVICEF020_H__
   2      =3  #define __INITDEVICEF020_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "compiler_defs.h"
   1      =4  //-----------------------------------------------------------------------------
   2      =4  // compiler_defs.h
   3      =4  //-----------------------------------------------------------------------------
   4      =4  // Portions of this file are copyright Maarten Brock
   5      =4  // http://sdcc.sourceforge.net
   6      =4  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
   7      =4  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =4  //
   9      =4  // GNU LGPL boilerplate:
  10      =4  /** This library is free software; you can redistribute it and/or
  11      =4    * modify it under the terms of the GNU Lesser General Public
  12      =4    * License as published by the Free Software Foundation; either
  13      =4    * version 2.1 of the License, or (at your option) any later version.
  14      =4    *
  15      =4    * This library is distributed in the hope that it will be useful,
  16      =4    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =4    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  18      =4    * Lesser General Public License for more details.
  19      =4    *
  20      =4    * You should have received a copy of the GNU Lesser General Public
  21      =4    * License along with this library; if not, write to the Free Software
  22      =4    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =4    *
  24      =4    * In other words, you are welcome to use, share and improve this program.
  25      =4    * You are forbidden to forbid anyone else to use, share and improve
  26      =4    * what you give them. Help stamp out software-hoarding!
  27      =4  **/
  28      =4  // Program Description:
  29      =4  //
  30      =4  // **Important Note**: This header file should be included before including
  31      =4  // a device-specific header file such as C8051F300_defs.h.
  32      =4  //
  33      =4  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =4  // special function registers and other 8051-specific features such as NOP
  35      =4  // generation, and locating variables in memory-specific segments.  The
  36      =4  // compilers are identified by their unique predefined macros. See also:
  37      =4  // http://predef.sourceforge.net/precomp.html
  38      =4  //
  39      =4  // SBIT and SFR define special bit and special function registers at the given
  40      =4  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =4  // little-endian format. SFR16E and SFR32E define sfr combinations without
  42      =4  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =4  // combinations will guarantee the order in which they are accessed when read
  44      =4  // or written.
  45      =4  //
  46      =4  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
  47      =4  // to avoid portability issues because of compiler endianness.
  48      =4  //
  49      =4  // Example:
  50      =4  // // my_mcu.c: main 'c' file for my mcu
  51      =4  // #include <compiler_defs.h>  // this file
  52      =4  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =4  //
  54      =4  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =4  // SFR   (P0, 0x80);           // Port 0
  56      =4  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
  57      =4  //                             // xdata memory at 0xE600
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 55  

  58      =4  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =4  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =4  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =4  //                             // lsb at 0x93, msb at 0x96
  62      =4  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =4  //                             // lsb at 0xE2, msb at 0xE5
  64      =4  //
  65      =4  // Target:         C8051xxxx
  66      =4  // Tool chain:     Generic
  67      =4  // Command Line:   None
  68      =4  // 
  69      =4  // Release 2.7 - 25 JUN 2014 (JM)
  70      =4  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =4  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =4  //     pointed at by a generic poitner
  73      =4  // Release 2.6 - 14 DEC 2012 (GO)
  74      =4  //        -Added define for deprecated SDCC keyword 'at'
  75      =4  // Release 2.5 - 12 SEP 2012 (TP)
  76      =4  //    -Added defines for deprecated SDCC keywords bit and code
  77      =4  // Release 2.4 - 27 AUG 2012 (TP)
  78      =4  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =4  // Release 2.3 - 27 MAY 2010 (DM)
  80      =4  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =4  // Release 2.2 - 06 APR 2010 (ES)
  82      =4  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =4  // Release 2.1 - 16 JUL 2009 (ES)
  84      =4  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =4  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =4  // Release 2.0 - 19 MAY 2009 (ES)
  87      =4  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
  88      =4  // Release 1.9 - 23 OCT 2008 (ES)
  89      =4  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =4  //    -Added SFR16 macro defintion for Hi-Tech
  91      =4  // Release 1.8 - 31 JUL 2008 (ES)
  92      =4  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =4  //    -Added macro's for IAR
  94      =4  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =4  // Release 1.7 - 11 SEP 2007 (BW)
  96      =4  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =4  // Release 1.6 - 27 AUG 2007 (BW)
  98      =4  //    -Updated copyright notice per agreement with Maartin Brock
  99      =4  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =4  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =4  // Release 1.5 - 24 AUG 2007 (BW)
 102      =4  //    -Added support for NOP () macro
 103      =4  //    -Added support for Hi-Tech ver 9.01
 104      =4  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =4  //    -Removed FID and fixed formatting.
 106      =4  // Release 1.3 - 30 SEP 2007 (TP)
 107      =4  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =4  //     under SDCC.
 109      =4  // Release 1.2 - (BW)
 110      =4  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =4  // Release 1.1 - (BW)
 112      =4  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =4  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =4  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =4  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =4  //    -Initial revision
 117      =4  
 118      =4  //-----------------------------------------------------------------------------
 119      =4  // Header File Preprocessor Directive
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 56  

 120      =4  //-----------------------------------------------------------------------------
 121      =4  
 122      =4  #ifndef COMPILER_DEFS_H
           =4 #define COMPILER_DEFS_H
           =4 
           =4 #include "stdbool.h"
           =4 #include "stdint.h"
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Macro definitions
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 //SDK Version
           =4 #define SDK_VERSION   2
           =4 
           =4 #ifndef NULL
           =4 #define NULL ((void*) 0)
           =4 #endif
           =4 
           =4 
           =4 // SDCC - Small Device C Compiler
           =4 // http://sdcc.sourceforge.net
           =4 
           =4 #if defined SDCC
           =4 
           =4 #if (SDCC >= 300)
           =4 
           =4 #define interrupt __interrupt
           =4 #define _asm __asm
           =4 #define _endasm __endasm
           =4 #define bit __bit
           =4 #define code __code
           =4 #define at __at
           =4 
           =4 #endif
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   __xdata
           =4 # define SEG_DATA  __data
           =4 # define SEG_NEAR  __data
           =4 # define SEG_IDATA __idata
           =4 # define SEG_XDATA __xdata
           =4 # define SEG_PDATA __pdata
           =4 # define SEG_CODE  __code
           =4 # define SEG_BDATA __bdata
           =4 
           =4 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =4 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =4 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
           =4 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =4 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
           =4 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =4 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =4 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
             -)
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 57  

           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
             -regnum)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 #define NOP() _asm NOP _endasm
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x40
           =4 #define SI_GPTR_MTYPE_IDATA      0x40
           =4 #define SI_GPTR_MTYPE_BDATA      0x40
           =4 #define SI_GPTR_MTYPE_PDATA      0x60
           =4 #define SI_GPTR_MTYPE_XDATA      0x00
           =4 #define SI_GPTR_MTYPE_CODE       0x80
           =4 
           =4 // generic pointer access struct
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 58  

           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         UU16 ADDR;
           =4         U8 MTYPE;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Raisonance (must be placed before Keil C51)
           =4 // http://www.raisonance.com
           =4 
           =4 #elif defined __RC51__
           =4 
           =4 //#error Raisonance C51 detected.
           =4 
           =4 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =4 # define SEG_FAR   xdata
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  data
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =4 # define SFR(name, addr)        sfr at addr                name
           =4 # define SFR16(name, addr)      sfr16 at addr              name
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =4 
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 59  

           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support -- NOP is opcode 0x00
           =4 #define NOP() asm { 0x00 }
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x04
           =4 #define SI_GPTR_MTYPE_IDATA      0x01
           =4 #define SI_GPTR_MTYPE_BDATA      0x04
           =4 #define SI_GPTR_MTYPE_PDATA      0x03
           =4 #define SI_GPTR_MTYPE_XDATA      0x02
           =4 #define SI_GPTR_MTYPE_CODE       0x05
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         U8 MTYPE;
           =4         UU16 ADDR;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 
           =4 // Keil C51
           =4 // http://www.keil.com
           =4 
           =4 #elif defined __C51__
           =4 
           =4 //#error Keil C51 detected.
           =4 
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 60  

           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   xdata
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  data
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 # define SBIT(name, addr, bit)  sbit  name = addr^bit
           =4 # define SFR(name, addr)        sfr   name = addr
           =4 # define SFR16(name, addr)      sfr16 name = addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # ifndef __SLS_IDE__
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
           =4 
           =4 # else  // __SLS_IDE__
           =4 
           =4 # define INTERRUPT(name, vector) void name (void)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =4 
           =4 # endif // __SLS_IDE__
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 61  

           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 extern void _nop_ (void);
           =4 #define NOP() _nop_()
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA      0x00
           =4 #define SI_GPTR_MTYPE_IDATA     0x00
           =4 #define SI_GPTR_MTYPE_BDATA     0x00
           =4 #define SI_GPTR_MTYPE_PDATA     0xFE
           =4 #define SI_GPTR_MTYPE_XDATA     0x01
           =4 #define SI_GPTR_MTYPE_CODE      0xFF
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         U8 MTYPE;
           =4         UU16 ADDR;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Hi-Tech 8051
           =4 // http://www.htsoft.com
           =4 
           =4 #elif defined HI_TECH_C
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   far
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 62  

           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  near
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 
           =4 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =4 # define SFR(name, addr)          static volatile unsigned char name @ addr
           =4 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =4 # define INTERRUPT_PROTO(name, vector)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =4 // Note: Hi-Tech does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 63  

           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 #define NOP() asm(" nop ")
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Tasking / Altium
           =4 // http://www.altium.com/tasking
           =4 
           =4 
           =4 #elif defined _CC51
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   _xdat
           =4 # define SEG_DATA  _data
           =4 # define SEG_NEAR  _data
           =4 # define SEG_IDATA _idat
           =4 # define SEG_XDATA _xdat
           =4 # define SEG_PDATA _pdat
           =4 # define SEG_CODE  _rom
           =4 # define SEG_BDATA _bdat
           =4 
           =4 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =4 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =4 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =4 #if _CC51 > 71
           =4 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =4 #else
           =4 # define SFR16(name, addr)      /* not supported */
           =4 #endif
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =4 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =4 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =4 
           =4 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =4 // is also using the same register bank. If not, the compiler will generate an error.
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
             -)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
             -ameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =4 
           =4 // used with UU16
           =4 # define LSB 1
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 64  

           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 extern void _nop (void);
           =4 #define NOP() _nop()
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 
           =4 // IAR 8051
           =4 // http://www.iar.com
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #include <stdbool.h>
           =4 #include <intrinsics.h>
           =4 
           =4 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =4 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =4 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =4 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr) /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define SEG_GENERIC __generic
           =4 # define SEG_FAR  __xdata
           =4 # define SEG_DATA __data
           =4 # define SEG_NEAR __data
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 65  

           =4 # define SEG_IDATA __idata
           =4 # define SEG_XDATA __xdata
           =4 # define SEG_PDATA __pdata
           =4 # define SEG_CODE  __code
           =4 # define SEG_BDATA __bdata
           =4 
           =4 #define bit bool
           =4 
           =4 # define _PPTOSTR_(x) #x
           =4 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =4 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =4 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =4 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =4 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =4 // Note: IAR does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 66  

           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 
           =4 #define NOP() __no_operation();
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x01
           =4 #define SI_GPTR_MTYPE_IDATA      0x01
           =4 #define SI_GPTR_MTYPE_BDATA      0x01
           =4 #define SI_GPTR_MTYPE_PDATA      0x00
           =4 #define SI_GPTR_MTYPE_XDATA      0x00
           =4 #define SI_GPTR_MTYPE_CODE       0x80
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         UU16 ADDR;
           =4         U8 MTYPE;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Crossware
           =4 // http://www.crossware.com
           =4 
           =4 #elif defined _XC51_VER
           =4 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =4 # define SFR(name, addr)        _sfr     name = addr
           =4 # define SFR16(name, addr)      _sfrword name = addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Wickenh盲user
           =4 // http://www.wickenhaeuser.de
           =4 
           =4 #elif defined __UC__
           =4 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =4 # define SFR(name, addr)        near unsigned char name @ addr
           =4 # define SFR16(name, addr)      /* not supported */
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Default
           =4 // Unknown compiler
           =4 
           =4 #else
           =4 # warning unrecognized compiler
           =4 # define SBIT(name, addr, bit)  volatile bool           name
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 67  

           =4 # define SFR(name, addr)        volatile unsigned char  name
           =4 # define SFRX(name, addr)       volatile unsigned char  name
           =4 # define SFR16(name, addr)      volatile unsigned short name
           =4 # define SFR16E(name, fulladdr) volatile unsigned short name
           =4 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =4 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =4 
           =4 #endif
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Header File PreProcessor Directive
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #endif                                 // #define COMPILER_DEFS_H
 804      =4  
 805      =4  //-----------------------------------------------------------------------------
 806      =4  // End Of File
 807      =4  //-----------------------------------------------------------------------------
   5      =3  #include "C8051F580_defs.h"
   1      =4  //-----------------------------------------------------------------------------
   2      =4  // C8051F580_defs.h
   3      =4  //-----------------------------------------------------------------------------
   4      =4  // Copyright 2008, Silicon Laboratories, Inc.
   5      =4  // http://www.silabs.com
   6      =4  //
   7      =4  // Program Description:
   8      =4  //
   9      =4  // Register/bit definitions for the C8051F58x family.
  10      =4  // **Important Note**: The compiler_defs.h header file should be included
  11      =4  // before including this header file.
  12      =4  //
  13      =4  // Target:         C8051F580/1/2/3/4/5/6/7,8/9-F590/1
  14      =4  // Tool chain:     Generic
  15      =4  // Command Line:   None
  16      =4  //
  17      =4  // Release 0.6 - 20 AUG 2012 (TP)
  18      =4  //    -Added #define for _XPAGE to provide support for SDCC memory paging
  19      =4  //     (pdata)
  20      =4  //
  21      =4  // Release 0.5 - 10 SEP 2011 (GP)
  22      =4  //    - Fixed SFR16 definition for CAN0IF2MC
  23      =4  //
  24      =4  // Release 0.4 - 08 OCT 2010 (TP)
  25      =4  //    - Fixed bit definitions for SCON0
  26      =4  //
  27      =4  // Release 0.3 - 01 APR 2009 (GP)
  28      =4  //    - Added SN0-SN3
  29      =4  //
  30      =4  // Release 0.2 - 29 JUL 2008 (ADT)
  31      =4  //    - Added Timer 4 bit definitions
  32      =4  //
  33      =4  // Release 0.1 - 09 JUL 2008 (GP)
  34      =4  //    - Initial Revision
  35      =4  //
  36      =4  //-----------------------------------------------------------------------------
  37      =4  // Header File Preprocessor Directive
  38      =4  //-----------------------------------------------------------------------------
  39      =4  
  40      =4  #ifndef C8051F580_DEFS_H
           =4 #define C8051F580_DEFS_H
           =4 
           =4 //-----------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 68  

           =4 // Page 0, Page 1 and Page F Registers
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 SFR (P0, 0x80);                        // Port 0 Latch
           =4 SFR (SP, 0x81);                        // Stack Pointer
           =4 SFR (DPL, 0x82);                       // Data Pointer Low
           =4 SFR (DPH, 0x83);                       // Data Pointer High
           =4 SFR (SFR0CN, 0x84);                    // SFR Page Control
           =4 SFR (SFRNEXT, 0x85);                   // SFR stack next page
           =4 SFR (SFRLAST, 0x86);                   // SFR stack last page
           =4 SFR (PCON, 0x87);                      // Power Control
           =4 SFR (TCON, 0x88);                      // Timer/Counter Control
           =4 SFR (TMOD, 0x89);                      // Timer/Counter Mode
           =4 SFR (TL0, 0x8A);                       // Timer/Counter 0 Low
           =4 SFR (TL1, 0x8B);                       // Timer/Counter 1 Low
           =4 SFR (TH0, 0x8C);                       // Timer/Counter 0 High
           =4 SFR (TH1, 0x8D);                       // Timer/Counter 1 High
           =4 SFR (CKCON, 0x8E);                     // Clock Control
           =4 SFR (PSCTL, 0x8F);                     // Program Store R/W Control
           =4 SFR (CLKSEL, 0x8F);                    // System clock select
           =4 SFR (P1, 0x90);                        // Port 1 Latch
           =4 SFR (TMR3CN, 0x91);                    // Timer/Counter 3 Control
           =4 SFR (TMR5CN, 0x91);                    // Timer/Counter 5 Control
           =4 SFR (TMR3RLL, 0x92);                   // Timer/Counter 3 Reload Low
           =4 SFR (TMR5CAPL, 0x92);                  // Timer/Counter 5 Capture Low
           =4 SFR (TMR3RLH, 0x93);                   // Timer/Counter 3 Reload High
           =4 SFR (TMR5CAPH, 0x93);                  // Timer/Counter 5 Capture High
           =4 SFR (TMR3L, 0x94);                     // Timer/Counter 3 Low
           =4 SFR (TMR5L, 0x94);                     // Timer/Counter 5 Low
           =4 SFR (TMR3H, 0x95);                     // Timer/Counter 3 High
           =4 SFR (TMR5H, 0x95);                     // Timer/Counter 5 High
           =4 SFR (TMR5CF, 0x96);                    // Timer/Counter 5 Configuration
           =4 SFR (CLKMUL, 0x97);                    // Clock Multiplier
           =4 SFR (SCON0, 0x98);                     // UART0 Control
           =4 SFR (SCON1, 0x98);                     // UART1 Control
           =4 SFR (SBUF0, 0x99);                     // UART0 Data Buffer
           =4 SFR (SBUF1, 0x99);                     // UART1 Data Buffer
           =4 SFR (CPT0CN, 0x9A);                    // Comparator 0 Control
           =4 SFR (CPT2CN, 0x9A);                    // Comparator 2 Control
           =4 SFR (CPT0MD, 0x9B);                    // Comparator 0 Mode
           =4 SFR (CPT2MD, 0x9B);                    // Comparator 2 Mode
           =4 SFR (CPT0MX, 0x9C);                    // Comparator 0 Mux
           =4 SFR (CPT2MX, 0x9C);                    // Comparator 2 Mux
           =4 SFR (CPT1CN, 0x9D);                    // Comparator 1 Control
           =4 SFR (CPT1MD, 0x9E);                    // Comparator 0 Mode
           =4 SFR (OSCIFIN, 0x9E);                   // Internal Oscillator Fine Control
           =4 SFR (CPT1MX, 0x9F);                    // Comparator 1 Mux
           =4 SFR (OSCXCN, 0x9F);                    // External Oscillator Control
           =4 SFR (P2, 0xA0);                        // Port 2 Latch
           =4 SFR (SPI0CFG, 0xA1);                   // SPI0 Configuration
           =4 SFR (OSCICN, 0xA1);                    // Internal Oscillator Control
           =4 SFR (SPI0CKR, 0xA2);                   // SPI0 Clock rate control
           =4 SFR (OSCICRS, 0xA2);                   // Internal Oscillator Coarse Control
           =4 SFR (SPI0DAT, 0xA3);                   // SPI0 Data Buffer
           =4 SFR (P0MDOUT, 0xA4);                   // Port 0 Output Mode
           =4 SFR (P1MDOUT, 0xA5);                   // Port 1 Output Mode
           =4 SFR (P2MDOUT, 0xA6);                   // Port 2 Output Mode
           =4 SFR (SFRPAGE, 0xA7);                   // SFR Page Select
           =4 SFR (IE, 0xA8);                        // Interrupt Enable
           =4 SFR (SMOD0, 0xA9);                     // Serial Port 0 Control
           =4 SFR (EMI0CN, 0xAA);                    // EMIF Control
           =4 SFR (EMI0TC, 0xAA);                    // EMIF Timing control
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 69  

           =4 SFR (SBCON0, 0xAB);                    // UART0 Baud Rate Generator Control
           =4 SFR (SBRLL0, 0xAC);                    // UART0 Baud Rate Generator Low
           =4 SFR (SBRLH0, 0xAD);                    // UART0 Baud Rate Generator High
           =4 SFR (P3MAT, 0xAE);                     // Port 3 Match
           =4 SFR (P3MDOUT, 0xAE);                   // Port 3 Mode
           =4 SFR (P3MASK, 0xAF);                    // Port 3 Mask
           =4 SFR (P4MDOUT, 0xAF);                   // Port 4 Mode
           =4 SFR (P3, 0xB0);                        // Port 3 Latch
           =4 SFR (P2MAT, 0xB1);                     // Port 2 Match
           =4 SFR (P2MASK, 0xB2);                    // Port 2 Mask
           =4 SFR (EMI0CF, 0xB2);                    // EMIF Configuration
           =4 SFR (P4, 0xB5);                        // Port 4 Latch
           =4 SFR (FLSCL, 0xB6);                     // Flash Scale
           =4 SFR (FLKEY, 0xB7);                     // Flash access limit
           =4 SFR (IP, 0xB8);                        // Interrupt Priority
           =4 SFR (SMB0ADR, 0xB9);                   // SMBus0 Slave address
           =4 SFR (ADC0TK, 0xBA);                    // ADC0 Tracking Mode Select
           =4 SFR (SMB0ADM, 0xBA);                   // SMBus0 Address Mask
           =4 SFR (ADC0MX, 0xBB);                    // AMUX0 Channel select
           =4 SFR (ADC0CF, 0xBC);                    // AMUX0 Channel configuration
           =4 SFR (ADC0L, 0xBD);                     // ADC0 Data Low
           =4 SFR (ADC0H, 0xBE);                     // ADC0 Data High
           =4 SFR (SMB0CN, 0xC0);                    // SMBus0 Control
           =4 SFR (SMB0CF, 0xC1);                    // SMBus0 Configuration
           =4 SFR (SMB0DAT, 0xC2);                   // SMBus0 Data
           =4 SFR (ADC0GTL, 0xC3);                   // ADC0 Greater-Than Compare Low
           =4 SFR (ADC0GTH, 0xC4);                   // ADC0 Greater-Than Compare High
           =4 SFR (ADC0LTL, 0xC5);                   // ADC0 Less-Than Compare Word Low
           =4 SFR (ADC0LTH, 0xC6);                   // ADC0 Less-Than Compare Word High
           =4 SFR (XBR3, 0xC6);                      // Port I/O Crossbar Control 3
           =4 SFR (XBR2, 0xC7);                      // Port I/O Crossbar Control 2
           =4 SFR (TMR2CN, 0xC8);                    // Timer/Counter 2 Control
           =4 SFR (TMR4CN, 0xC8);                    // Timer/Counter 4 Control
           =4 SFR (REG0CN, 0xC9);                    // Regulator Control
           =4 SFR (LIN0CF, 0xC9);                    // LIN 0 Configuration
           =4 SFR (TMR4CF, 0xC9);                    // Timer/Counter 4 Configuration
           =4 SFR (TMR2RLL, 0xCA);                   // Timer/Counter 2 Reload Low
           =4 SFR (TMR4CAPL, 0xCA);                  // Timer/Counter 4 Capture Low
           =4 SFR (TMR2RLH, 0xCB);                   // Timer/Counter 2 Reload High
           =4 SFR (TMR4CAPH, 0xCB);                  // Timer/Counter 4 Capture High
           =4 SFR (TMR2L, 0xCC);                     // Timer/Counter 2 Low
           =4 SFR (TMR4L, 0xCC);                     // Timer/Counter 4 Low
           =4 SFR (TMR2H, 0xCD);                     // Timer/Counter 2 High
           =4 SFR (TMR4H, 0xCD);                     // Timer/Counter 4 High
           =4 SFR (PCA0CPL5, 0xCE);                  // PCA0 Capture 5 Low
           =4 SFR (PCA1CPL11, 0xCE);                 // PCA1 Capture 11 Low
           =4 SFR (PCA0CPH5, 0xCF);                  // PCA0 Capture 5 High
           =4 SFR (PCA1CPH11, 0xCF);                 // PCA1 Capture 11 High
           =4 SFR (PSW, 0xD0);                       // Program Status Word
           =4 SFR (REF0CN, 0xD1);                    // Voltage Reference Control
           =4 SFR (LIN0DAT, 0xD2);                   // LIN0 Data
           =4 SFR (LIN0ADR, 0xD3);                   // LIN0 Address
           =4 SFR (P0SKIP, 0xD4);                    // Port 0 Skip
           =4 SFR (P1SKIP, 0xD5);                    // Port 1 Skip
           =4 SFR (P2SKIP, 0xD6);                    // Port 2 Skip
           =4 SFR (P3SKIP, 0xD7);                    // Port 3 Skip
           =4 SFR (PCA0CN, 0xD8);                    // PCA0 Control
           =4 SFR (PCA1CN, 0xD8);                    // PCA1 Control
           =4 SFR (PCA0MD, 0xD9);                    // PCA0 Mode
           =4 SFR (PCA1MD, 0xD9);                    // PCA1 Mode
           =4 SFR (PCA0PWM, 0xD9);                   // PCA0 PWM Control
           =4 SFR (PCA0CPM0, 0xDA);                  // PCA0 Module 0 Mode
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 70  

           =4 SFR (PCA1CPM6, 0xDA);                  // PCA1 Module 6 Mode
           =4 SFR (PCA1PWM, 0xDA);                   // PCA1 PWM Control
           =4 SFR (PCA0CPM1, 0xDB);                  // PCA0 Module 1  Mode
           =4 SFR (PCA1CPM7, 0xDB);                  // PCA1 Module 7  Mode
           =4 SFR (PCA0CPM2, 0xDC);                  // PCA0 Module 2  Mode
           =4 SFR (PCA1CPM8, 0xDC);                  // PCA1 Module 8  Mode
           =4 SFR (PCA0CPM3, 0xDD);                  // PCA0 Module 3  Mode
           =4 SFR (PCA1CPM9, 0xDD);                  // PCA1 Module 9  Mode
           =4 SFR (PCA0CPM4, 0xDE);                  // PCA0 Module 4  Mode
           =4 SFR (PCA1CPM10, 0xDE);                  // PCA1 Module 10 Mode
           =4 SFR (PCA0CPM5, 0xDF);                  // PCA0 Module 5  Mode
           =4 SFR (PCA1CPM11, 0xDF);                  // PCA1 Module 11 Mode
           =4 SFR (ACC, 0xE0);                       // Accumulator
           =4 SFR (XBR0, 0xE1);                      // Port I/O Crossbar Control 0
           =4 SFR (XBR1, 0xE2);                      // Port I/O Crossbar Control 1
           =4 SFR (CCH0CN, 0xE3);                    // Cache control
           =4 SFR (IT01CF, 0xE4);                    // INT0/INT1 Configuration
           =4 SFR (EIE1, 0xE6);                      // Extended Interrupt Enable 2
           =4 SFR (EIE2, 0xE7);                      // Extended Interrupt Enable 2
           =4 SFR (ADC0CN, 0xE8);                    // ADC0 Control
           =4 SFR (PCA0CPL1, 0xE9);                  // PCA0 Capture 1 Low
           =4 SFR (PCA1CPL1, 0xE9);                  // PCA1 Capture 7 Low
           =4 SFR (PCA0CPH1, 0xEA);                  // PCA0 Capture 1 High
           =4 SFR (PCA1CPH1, 0xEA);                  // PCA1 Capture 7 High
           =4 SFR (PCA0CPL2, 0xEB);                  // PCA0 Capture 2 Low
           =4 SFR (PCA1CPL2, 0xEB);                  // PCA1 Capture 8 Low
           =4 SFR (PCA0CPH2, 0xEC);                  // PCA0 Capture 2 High
           =4 SFR (PCA1CPH2, 0xEC);                  // PCA1 Capture 8 High
           =4 SFR (PCA0CPL3, 0xED);                  // PCA0 Capture 3 Low
           =4 SFR (PCA1CPL3, 0xED);                  // PCA1 Capture 9 Low
           =4 SFR (PCA0CPH3, 0xEE);                  // PCA0 Capture 3 High
           =4 SFR (PCA1CPH3, 0xEE);                  // PCA1 Capture 9 High
           =4 SFR (RSTSRC, 0xEF);                    // Reset Source Configuration/Status
           =4 SFR (B, 0xF0);                         // B Register
           =4 SFR (P0MAT, 0xF1);                     // Port 0 Match
           =4 SFR (P0MDIN, 0xF1);                    // Port 0 Input Mode
           =4 SFR (P0MASK, 0xF2);                    // Port 0 Mask
           =4 SFR (P1MDIN, 0xF2);                    // Port 1 Input Mode
           =4 SFR (P1MAT, 0xF3);                     // Port 1 Match
           =4 SFR (P2MDIN, 0xF3);                    // Port 2 Input Mode
           =4 SFR (P1MASK, 0xF4);                    // Port 1 Mask
           =4 SFR (P3MDIN, 0xF4);                    // Port 3 Input Mode
           =4 SFR (PSBANK, 0xF5);                    // Program Space Bank Select
           =4 SFR (EIP1, 0xF6);                      // External Interrupt Priority 1
           =4 SFR (EIP2, 0xF7);                      // External Interrupt Priority 2
           =4 SFR (SPI0CN, 0xF8);                    // SPI0 Control
           =4 SFR (PCA0L, 0xF9);                     // PCA0 Counter Low
           =4 SFR (PCA1L, 0xF9);                     // PCA1 Counter Low
           =4 SFR (SN0, 0xF9);                       // Serial Number 0
           =4 SFR (PCA0H, 0xFA);                     // PCA0 Counter High
           =4 SFR (PCA1H, 0xFA);                     // PCA1 Counter High
           =4 SFR (SN1, 0xFA);                       // Serial Number 1
           =4 SFR (PCA0CPL0, 0xFB);                  // PCA0 Capture 0 Low
           =4 SFR (PCA1CPL6, 0xFB);                  // PCA1 Capture 6 Low
           =4 SFR (SN2, 0xFB);                       // Serial Number 2
           =4 SFR (PCA0CPH0, 0xFC);                  // PCA0 Capture 0 High
           =4 SFR (PCA1CPH6, 0xFC);                  // PCA1 Capture 6 High
           =4 SFR (SN3, 0xFC);                       // Serial Number 3
           =4 SFR (PCA0CPL4, 0xFD);                  // PCA0 Capture 4 Low
           =4 SFR (PCA1CPL10, 0xFD);                 // PCA1 Capture 10 Low
           =4 SFR (PCA0CPH4, 0xFE);                  // PCA0 Capture 4 High
           =4 SFR (PCA1CPH10, 0xFE);                 // PCA1 Capture 10 High
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 71  

           =4 SFR (VDM0CN, 0xFF);                    // VDD Monitor Control
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Page C (CAN0) Registers
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 SFR (CAN0CFG, 0x92);                   // CAN0 Clock Configuration
           =4 SFR (CAN0STAT, 0x94);                  // Status Register Low Byte
           =4 SFR (CAN0ERRL, 0x96);                  // Error Counter Low Byte
           =4 SFR (CAN0ERRH, 0x97);                  // Error Counter High Byte
           =4 SFR (CAN0BTL, 0x9A);                   // Bit Timing Register Low Byte
           =4 SFR (CAN0BTH, 0x9B);                   // Bit Timing Register High Byte
           =4 SFR (CAN0IIDL, 0x9C);                  // Interrupt Register Low Byte
           =4 SFR (CAN0IIDH, 0x9D);                  // Interrupt Register High Byte
           =4 SFR (CAN0TST, 0x9E);                   // Test Register Low Byte
           =4 SFR (CAN0BRPE, 0xA1);                  // BRP Extension Register Low Byte
           =4 SFR (CAN0TR1L, 0xA2);                  // Transmission Request 1 Low Byte
           =4 SFR (CAN0TR1H, 0xA3);                  // Transmission Request 1 High Byte
           =4 SFR (CAN0TR2L, 0xA4);                  // Transmission Request 2 Low Byte
           =4 SFR (CAN0TR2H, 0xA5);                  // Transmission Request 2 High Byte
           =4 SFR (CAN0ND1L, 0xAA);                  // New Data 1 Low Byte
           =4 SFR (CAN0ND1H, 0xAB);                  // New Data 1 High Byte
           =4 SFR (CAN0ND2L, 0xAC);                  // New Data 2 Low Byte
           =4 SFR (CAN0ND2H, 0xAD);                  // New Data 2 High Byte
           =4 SFR (CAN0IP1L, 0xAE);                  // Interrupt Pending 1 Low Byte
           =4 SFR (CAN0IP1H, 0xAF);                  // Interrupt Pending 1 High Byte
           =4 SFR (CAN0IP2L, 0xB2);                  // Interrupt Pending 2 Low Byte
           =4 SFR (CAN0IP2H, 0xB3);                  // Interrupt Pending 2 High Byte
           =4 SFR (CAN0MV1L, 0xBA);                  // Message Valid 1 Low Byte
           =4 SFR (CAN0MV1H, 0xBB);                  // Message Valid 1 High Byte
           =4 SFR (CAN0MV2L, 0xBC);                  // Message Valid 2 Low Byte
           =4 SFR (CAN0MV2H, 0xBD);                  // Message Valid 2 High Byte
           =4 SFR (CAN0IF1CRL, 0xBE);                // IF1 Command Request Low Byte
           =4 SFR (CAN0IF1CRH, 0xBF);                // IF1 Command Request High Byte
           =4 SFR (CAN0CN, 0xC0);                    // CAN Control Register Low Byte
           =4 SFR (CAN0IF1CML, 0xC2);                // IF1 Command Mask Low Byte
           =4 SFR (CAN0IF1CMH, 0xC3);                // IF1 Command Mask High Byte
           =4 SFR (CAN0IF1M1L, 0xC4);                // IF1 Mask 1 Low Byte
           =4 SFR (CAN0IF1M1H, 0xC5);                // IF1 Mask 1 High Byte
           =4 SFR (CAN0IF1M2L, 0xC6);                // IF1 Mask 2 Low Byte
           =4 SFR (CAN0IF1M2H, 0xC7);                // IF1 Mask 2 High Byte
           =4 SFR (CAN0IF1A1L, 0xCA);                // IF1 Arbitration 1 Low Byte
           =4 SFR (CAN0IF1A1H, 0xCB);                // IF1 Arbitration 1 High Byte
           =4 SFR (CAN0IF1A2L, 0xCC);                // IF1 Arbitration 2 Low Byte
           =4 SFR (CAN0IF1A2H, 0xCD);                // IF1 Arbitration 2 High Byte
           =4 SFR (CAN0IF2MCL, 0xCE);                // IF2 Message Control Low Byte
           =4 SFR (CAN0IF2MCH, 0xCF);                // IF2 Message Control High Byte
           =4 SFR (CAN0IF1MCL, 0xD2);                // IF1 Message Control Low Byte
           =4 SFR (CAN0IF1MCH, 0xD3);                // IF1 Message Control High Byte
           =4 SFR (CAN0IF1DA1L, 0xD4);               // IF1 Data A 1 Low Byte
           =4 SFR (CAN0IF1DA1H, 0xD5);               // IF1 Data A 1 High Byte
           =4 SFR (CAN0IF1DA2L, 0xD6);               // IF1 Data A 2 Low Byte
           =4 SFR (CAN0IF1DA2H, 0xD7);               // IF1 Data A 2 High Byte
           =4 SFR (CAN0IF1DB1L, 0xDA);               // IF1 Data B 1 Low Byte
           =4 SFR (CAN0IF1DB1H, 0xDB);               // IF1 Data B 1 High Byte
           =4 SFR (CAN0IF1DB2L, 0xDC);               // IF1 Data B 2 Low Byte
           =4 SFR (CAN0IF1DB2H, 0xDD);               // IF1 Data B 2 High Byte
           =4 SFR (CAN0IF2CRL, 0xDE);                // IF2 Command Request Low Byte
           =4 SFR (CAN0IF2CRH, 0xDF);                // IF2 Command Request High Byte
           =4 SFR (CAN0IF2CML, 0xE2);                // IF2 Command Mask Low Byte
           =4 SFR (CAN0IF2CMH, 0xE3);                // IF2 Command Mask High Byte
           =4 SFR (CAN0IF2M1L, 0xEA);                // IF2 Mask 1 Low Byte
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 72  

           =4 SFR (CAN0IF2M1H, 0xEB);                // IF2 Mask 1 High Byte
           =4 SFR (CAN0IF2M2L, 0xEC);                // IF2 Mask 2 Low Byte
           =4 SFR (CAN0IF2M2H, 0xED);                // IF2 Mask 2 High Byte
           =4 SFR (CAN0IF2A1L, 0xEE);                // IF2 Arbitration 1 Low Byte
           =4 SFR (CAN0IF2A1H, 0xEF);                // IF2 Arbitration 1 High Byte
           =4 SFR (CAN0IF2A2L, 0xF2);                // IF2 Arbitration 2 Low Byte
           =4 SFR (CAN0IF2A2H, 0xF3);                // IF2 Arbitration 2 High Byte
           =4 SFR (CAN0IF2DA1L, 0xF6);               // IF2 Data A 1 Low Byte
           =4 SFR (CAN0IF2DA1H, 0xF7);               // IF2 Data A 1 High Byte
           =4 SFR (CAN0IF2DA2L, 0xFA);               // IF2 Data A 2 Low Byte
           =4 SFR (CAN0IF2DA2H, 0xFB);               // IF2 Data A 2 High Byte
           =4 SFR (CAN0IF2DB1L, 0xFC);               // IF2 Data B 1 Low Byte
           =4 SFR (CAN0IF2DB1H, 0xFD);               // IF2 Data B 1 High Byte
           =4 SFR (CAN0IF2DB2L, 0xFE);               // IF2 Data B 2 Low Byte
           =4 SFR (CAN0IF2DB2H, 0xFF);               // IF2 Data B 2 High Byte
           =4 
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // 16-bit Register Definitions (might not be supported by all compilers)
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 SFR16 (DP, 0x82);                      // Data Pointer
           =4 SFR16 (TMR3RL, 0x92);                  // Timer 3 Reload
           =4 SFR16 (TMR5CAP, 0x92);                 // Timer 5 Capture
           =4 SFR16 (TMR3, 0x94);                    // Timer 3 Capture / Reload
           =4 SFR16 (TMR5, 0x94);                    // Timer 5
           =4 SFR16 (SBRL0, 0xAC);                   // UART0 Reload
           =4 SFR16 (ADC0, 0xBD);                    // ADC0 data
           =4 SFR16 (ADC0GT, 0xC3);                  // ADC0 Greater Than Window
           =4 SFR16 (ADC0LT, 0xC5);                  // ADC0 Less Than Window
           =4 SFR16 (TMR2RL, 0xCA);                  // Timer 2 Reload
           =4 SFR16 (TMR4CAP, 0xCA);                 // Timer 4 Capture
           =4 SFR16 (TMR2, 0xCC);                    // Timer 2 Capture / Reload
           =4 SFR16 (TMR4, 0xCC);                    // Timer 4
           =4 SFR16 (PCA0CP5, 0xCE);                 // PCA0 Module 5 Capture
           =4 SFR16 (PCA1CP11, 0xCE);                // PCA1 Module 11 Capture
           =4 SFR16 (PCA0CP1, 0xE9);                 // PCA0 Module 1 Capture
           =4 SFR16 (PCA1CP7, 0xE9);                 // PCA1 Module 7 Capture
           =4 SFR16 (PCA0CP2, 0xEB);                 // PCA0 Module 2 Capture
           =4 SFR16 (PCA1CP8, 0xEB);                 // PCA1 Module 8 Capture
           =4 SFR16 (PCA0CP3, 0xED);                 // PCA0 Module 3 Capture
           =4 SFR16 (PCA1CP9, 0xED);                 // PCA1 Module 9 Capture
           =4 SFR16 (PCA0, 0xF9);                    // PCA0 Counter
           =4 SFR16 (PCA1, 0xF9);                    // PCA1 Counter
           =4 SFR16 (PCA0CP0, 0xFB);                 // PCA0 Module 0 Capture
           =4 SFR16 (PCA1CP6, 0xFB);                 // PCA1 Module 6 Capture
           =4 SFR16 (PCA0CP4, 0xFD);                 // PCA0 Module 4 Capture
           =4 SFR16 (PCA1CP10, 0xFD);                 // PCA1 Module 10 Capture
           =4 
           =4 SFR16 (CAN0ERR, 0x96);                 // Error Counter
           =4 SFR16 (CAN0BT, 0x9A);                  // Bit Timing Register
           =4 SFR16 (CAN0IID, 0x9C);                 // Interrupt Register
           =4 SFR16 (CAN0TR1, 0xA2);                 // Transmission Request 1
           =4 SFR16 (CAN0TR2, 0xA4);                 // Transmission Request 2
           =4 SFR16 (CAN0ND1, 0xAA);                 // New Data 1
           =4 SFR16 (CAN0ND2, 0xAC);                 // New Data 2
           =4 SFR16 (CAN0IP1, 0xAE);                 // Interrupt Pending 1
           =4 SFR16 (CAN0IP2, 0xB2);                 // Interrupt Pending 2
           =4 SFR16 (CAN0MV1, 0xBA);                 // Message Valid 1
           =4 SFR16 (CAN0MV2, 0xBC);                 // Message Valid 2
           =4 SFR16 (CAN0IF1CR, 0xBE);               // IF1 Command Request
           =4 SFR16 (CAN0IF1CM, 0xC2);               // IF1 Command Mask
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 73  

           =4 SFR16 (CAN0IF1M1, 0xC4);               // IF1 Mask 1
           =4 SFR16 (CAN0IF1M2, 0xC6);               // IF1 Mask 2
           =4 SFR16 (CAN0IF1A1, 0xCA);               // IF1 Arbitration 1
           =4 SFR16 (CAN0IF1A2, 0xCC);               // IF1 Arbitration 2
           =4 SFR16 (CAN0IF1MC, 0xD2);               // IF1 Message Control
           =4 SFR16 (CAN0IF1DA1, 0xD4);              // IF1 Data A 1
           =4 SFR16 (CAN0IF1DA2, 0xD6);              // IF1 Data A 2
           =4 SFR16 (CAN0IF1DB1, 0xDA);              // IF1 Data B 1
           =4 SFR16 (CAN0IF1DB2, 0xDC);              // IF1 Data B 2
           =4 SFR16 (CAN0IF2CR, 0xDE);               // IF2 Command Request
           =4 SFR16 (CAN0IF2CM, 0xE2);               // IF2 Command Mask
           =4 SFR16 (CAN0IF2M1, 0xEA);               // IF2 Mask 1
           =4 SFR16 (CAN0IF2M2, 0xEC);               // IF2 Mask 2
           =4 SFR16 (CAN0IF2A1, 0xEE);               // IF2 Arbitration 1
           =4 SFR16 (CAN0IF2A2, 0xF2);               // IF2 Arbitration 2
           =4 SFR16 (CAN0IF2MC, 0xCE);               // IF2 Message Control
           =4 SFR16 (CAN0IF2DA1, 0xF6);              // IF2 Data A 1
           =4 SFR16 (CAN0IF2DA2, 0xFA);              // IF2 Data A 2
           =4 SFR16 (CAN0IF2DB1, 0xFC);              // IF2 Data B 1
           =4 SFR16 (CAN0IF2DB2, 0xFE);              // IF2 Data B 2
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // LIN0 Indirect Registers
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #define  LIN0DT1   0x00                // LIN0 Data Byte 1
           =4 #define  LIN0DT2   0x01                // LIN0 Data Byte 2
           =4 #define  LIN0DT3   0x02                // LIN0 Data Byte 3
           =4 #define  LIN0DT4   0x03                // LIN0 Data Byte 4
           =4 #define  LIN0DT5   0x04                // LIN0 Data Byte 5
           =4 #define  LIN0DT6   0x05                // LIN0 Data Byte 6
           =4 #define  LIN0DT7   0x06                // LIN0 Data Byte 7
           =4 #define  LIN0DT8   0x07                // LIN0 Data Byte 8
           =4 #define  LIN0CTRL  0x08                // LIN0 Control
           =4 #define  LIN0ST    0x09                // LIN0 Status
           =4 #define  LIN0ERR   0x0A                // LIN0 Error
           =4 #define  LIN0SIZE  0x0B                // LIN0 Message Size
           =4 #define  LIN0DIV   0x0C                // LIN0 Divider
           =4 #define  LIN0MUL   0x0D                // LIN0 Multiplier
           =4 #define  LIN0ID    0x0E                // LIN0 Identifier
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Address Definitions for Bit-addressable Registers
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #define SFR_P0       0x80
           =4 #define SFR_TCON     0x88
           =4 #define SFR_P1       0x90
           =4 #define SFR_SCON0    0x98
           =4 #define SFR_SCON1    0x98
           =4 #define SFR_P2       0xA0
           =4 #define SFR_IE       0xA8
           =4 #define SFR_P3       0xB0
           =4 #define SFR_IP       0xB8
           =4 #define SFR_SMB0CN   0xC0
           =4 #define SFR_TMR2CN   0xC8
           =4 #define SFR_TMR4CN   0xC8
           =4 #define SFR_PSW      0xD0
           =4 #define SFR_PCA0CN   0xD8
           =4 #define SFR_PCA1CN   0xD8
           =4 #define SFR_ACC      0xE0
           =4 #define SFR_ADC0CN   0xE8
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 74  

           =4 #define SFR_B        0xF0
           =4 #define SFR_SPI0CN   0xF8
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Bit Definitions
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // TCON 0x88
           =4 SBIT (TF1, SFR_TCON, 7);               // Timer 1 Overflow Flag
           =4 SBIT (TR1, SFR_TCON, 6);               // Timer 1 On/Off Control
           =4 SBIT (TF0, SFR_TCON, 5);               // Timer 0 Overflow Flag
           =4 SBIT (TR0, SFR_TCON, 4);               // Timer 0 On/Off Control
           =4 SBIT (IE1, SFR_TCON, 3);               // Ext. Interrupt 1 Edge Flag
           =4 SBIT (IT1, SFR_TCON, 2);               // Ext. Interrupt 1 Type
           =4 SBIT (IE0, SFR_TCON, 1);               // Ext. Interrupt 0 Edge Flag
           =4 SBIT (IT0, SFR_TCON, 0);               // Ext. Interrupt 0 Type
           =4 
           =4 // SCON0 0x98
           =4 SBIT (OVR0, SFR_SCON0, 7);             // UART0 Receive FIFO Overrun Flag
           =4 SBIT (PERR0, SFR_SCON0, 6);            // UART0 Parity Error Flag
           =4 SBIT (THRE0, SFR_SCON0, 5);            // UART0 Transmit Register Empty Flag
           =4 SBIT (REN0, SFR_SCON0, 4);             // UART0 RX Enable
           =4 SBIT (TBX0, SFR_SCON0, 3);             // UART0 Extra Transmission Bit
           =4 SBIT (RBX0, SFR_SCON0, 2);             // UART0 Extra Receive Bit
           =4 SBIT (TI0, SFR_SCON0, 1);              // UART0 TX Interrupt Flag
           =4 SBIT (RI0, SFR_SCON0, 0);              // UART0 RX Interrupt Flag
           =4 
           =4 // SCON1 0x98
           =4 SBIT (S1MODE, SFR_SCON1, 7);           // UART1 Mode 0
           =4                                        // Bit 6 UNUSED
           =4 SBIT (MCE1, SFR_SCON1, 5);             // UART1 Multiprocessor enable
           =4 SBIT (REN1, SFR_SCON1, 4);             // UART1 RX Enable
           =4 SBIT (TB81, SFR_SCON1, 3);             // UART1 TX Bit 8
           =4 SBIT (RB81, SFR_SCON1, 2);             // UART1 RX Bit 8
           =4 SBIT (TI1, SFR_SCON1, 1);              // UART1 TX Interrupt Flag
           =4 SBIT (RI1, SFR_SCON1, 0);              // UART1 RX Interrupt Flag
           =4 
           =4 // IE 0xA8
           =4 SBIT (EA, SFR_IE, 7);                  // Global Interrupt Enable
           =4 SBIT (ESPI0, SFR_IE, 6);               // SPI0 Interrupt Enable
           =4 SBIT (ET2, SFR_IE, 5);                 // Timer 2 Interrupt Enable
           =4 SBIT (ES0, SFR_IE, 4);                 // UART0 Interrupt Enable
           =4 SBIT (ET1, SFR_IE, 3);                 // Timer 1 Interrupt Enable
           =4 SBIT (EX1, SFR_IE, 2);                 // External Interrupt 1 Enable
           =4 SBIT (ET0, SFR_IE, 1);                 // Timer 0 Interrupt Enable
           =4 SBIT (EX0, SFR_IE, 0);                 // External Interrupt 0 Enable
           =4 
           =4 // IP 0xB8
           =4                                        // Bit 7 unused
           =4 SBIT (PSPI0, SFR_IP, 6);               // SPI0 Interrupt Priority
           =4 SBIT (PT2, SFR_IP, 5);                 // Timer 2 Priority
           =4 SBIT (PS0, SFR_IP, 4);                 // UART0 Priority
           =4 SBIT (PS, SFR_IP, 4);                  // UART0 Priority
           =4 SBIT (PT1, SFR_IP, 3);                 // Timer 1 Priority
           =4 SBIT (PX1, SFR_IP, 2);                 // External Interrupt 1 Priority
           =4 SBIT (PT0, SFR_IP, 1);                 // Timer 0 Priority
           =4 SBIT (PX0, SFR_IP, 0);                 // External Interrupt 0 Priority
           =4 
           =4 // SMB0CN 0xC0
           =4 SBIT (MASTER, SFR_SMB0CN, 7);          // SMBus0 Master/Slave Indicator
           =4 SBIT (TXMODE, SFR_SMB0CN, 6);          // SMBus0 Transmit Mode Indicator
           =4 SBIT (STA, SFR_SMB0CN, 5);             // SMBus0 Start Flag
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 75  

           =4 SBIT (STO, SFR_SMB0CN, 4);             // SMBus0 Stop Flag
           =4 SBIT (ACKRQ, SFR_SMB0CN, 3);           // SMBus0 Acknowledge Request
           =4 SBIT (ARBLOST, SFR_SMB0CN, 2);         // SMBus0 Arbitration Lost Indicator
           =4 SBIT (ACK, SFR_SMB0CN, 1);             // SMBus0 Acknowledge
           =4 SBIT (SI, SFR_SMB0CN, 0);              // SMBus0 Interrupt Flag
           =4 
           =4 // TMR2CN 0xC8
           =4 SBIT (TF2H, SFR_TMR2CN, 7);            // Timer 2 High-Byte Overflow Flag
           =4 SBIT (TF2L, SFR_TMR2CN, 6);            // Timer 2 Low-Byte  Overflow Flag
           =4 SBIT (TF2LEN, SFR_TMR2CN, 5);          // Timer 2 Low-Byte Flag Enable
           =4 SBIT (TF2CEN, SFR_TMR2CN, 4);          // Timer 2 Capture Enable
           =4 SBIT (T2SPLIT, SFR_TMR2CN, 3);         // Timer 2 Split-Mode Enable
           =4 SBIT (TR2, SFR_TMR2CN, 2);             // Timer 2 Run Enable
           =4 SBIT (T2RCLK, SFR_TMR2CN, 1);          // Timer 2 Xclk/Rclk Select
           =4 SBIT (T2XCLK, SFR_TMR2CN, 0);          // Timer 2 Clk/8 Clock Source
           =4 
           =4 // TMR4CN 0xC8
           =4 SBIT (TF4, SFR_TMR4CN, 7);             // Timer 4 Overflow/Underflow Flag
           =4 SBIT (EXF4, SFR_TMR4CN, 6);            // Timer 4 External Flag
           =4                                        // Bit 5 unused
           =4                                        // Bit 4 unused
           =4 SBIT (EXE4, SFR_TMR4CN, 3);            // Timer 4 External Enable
           =4 SBIT (TR4, SFR_TMR4CN, 2);             // Timer 4 Run Enable
           =4 SBIT (CT4, SFR_TMR4CN, 1);             // Timer 4 Counter/Timer Select
           =4 SBIT (CPRL4, SFR_TMR4CN, 0);           // Timer 4 Capture/Reload Select
           =4 
           =4 // PSW 0xD0
           =4 SBIT (CY, SFR_PSW, 7);                 // Carry Flag
           =4 SBIT (AC, SFR_PSW, 6);                 // Auxiliary Carry Flag
           =4 SBIT (F0, SFR_PSW, 5);                 // User Flag 0
           =4 SBIT (RS1, SFR_PSW, 4);                // Register Bank Select 1
           =4 SBIT (RS0, SFR_PSW, 3);                // Register Bank Select 0
           =4 SBIT (OV, SFR_PSW, 2);                 // Overflow Flag
           =4 SBIT (F1, SFR_PSW, 1);                 // User Flag 1
           =4 SBIT (P, SFR_PSW, 0);                  // Accumulator Parity Flag
           =4 
           =4 // PCA0CN 0xD8
           =4 SBIT (CF, SFR_PCA0CN, 7);              // PCA0 Counter Overflow Flag
           =4 SBIT (CR, SFR_PCA0CN, 6);              // PCA0 Counter Run Control Bit
           =4 SBIT (CCF5, SFR_PCA0CN, 5);            // PCA0 Module 5 Interrupt Flag
           =4 SBIT (CCF4, SFR_PCA0CN, 4);            // PCA0 Module 4 Interrupt Flag
           =4 SBIT (CCF3, SFR_PCA0CN, 3);            // PCA0 Module 3 Interrupt Flag
           =4 SBIT (CCF2, SFR_PCA0CN, 2);            // PCA0 Module 2 Interrupt Flag
           =4 SBIT (CCF1, SFR_PCA0CN, 1);            // PCA0 Module 1 Interrupt Flag
           =4 SBIT (CCF0, SFR_PCA0CN, 0);            // PCA0 Module 0 Interrupt Flag
           =4 
           =4 // PCA1CN 0xD8
           =4 SBIT (CF1, SFR_PCA1CN, 7);             // PCA1 Counter Overflow Flag
           =4 SBIT (CR1, SFR_PCA1CN, 6);             // PCA1 Counter Run Control Bit
           =4 SBIT (CCF11, SFR_PCA1CN, 5);           // PCA1 Module 11 Interrupt Flag
           =4 SBIT (CCF10, SFR_PCA1CN, 4);           // PCA1 Module 10 Interrupt Flag
           =4 SBIT (CCF9, SFR_PCA1CN, 3);            // PCA1 Module 9 Interrupt Flag
           =4 SBIT (CCF8, SFR_PCA1CN, 2);            // PCA1 Module 8 Interrupt Flag
           =4 SBIT (CCF7, SFR_PCA1CN, 1);            // PCA1 Module 7 Interrupt Flag
           =4 SBIT (CCF6, SFR_PCA1CN, 0);            // PCA1 Module 6 Interrupt Flag
           =4 
           =4 // ADC0CN 0xE8
           =4 SBIT (AD0EN, SFR_ADC0CN, 7);           // ADC0 Enable
           =4 SBIT (BURSTEN, SFR_ADC0CN, 6);         // ADC0 Burst Enable
           =4 SBIT (AD0INT, SFR_ADC0CN, 5);          // ADC0 EOC Interrupt Flag
           =4 SBIT (AD0BUSY, SFR_ADC0CN, 4);         // ADC0 Busy Flag
           =4 SBIT (AD0WINT, SFR_ADC0CN, 3);         // ADC0 Window Compare Interrupt Flag
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 76  

           =4 SBIT (AD0LJST, SFR_ADC0CN, 2);         // ADC0 Left Justified
           =4 SBIT (AD0CM1, SFR_ADC0CN, 1);          // ADC0 Start Of Conversion Mode Bit 1
           =4 SBIT (AD0CM0, SFR_ADC0CN, 0);          // ADC0 Start Of Conversion Mode Bit 0
           =4 
           =4 // SPI0CN 0xF8
           =4 SBIT (SPIF, SFR_SPI0CN, 7);            // SPI0 Interrupt Flag
           =4 SBIT (WCOL, SFR_SPI0CN, 6);            // SPI0 Write Collision Flag
           =4 SBIT (MODF, SFR_SPI0CN, 5);            // SPI0 Mode Fault Flag
           =4 SBIT (RXOVRN, SFR_SPI0CN, 4);          // SPI0 RX Overrun Flag
           =4 SBIT (NSSMD1, SFR_SPI0CN, 3);          // SPI0 Slave Select Mode 1
           =4 SBIT (NSSMD0, SFR_SPI0CN, 2);          // SPI0 Slave Select Mode 0
           =4 SBIT (TXBMT, SFR_SPI0CN, 1);           // SPI0 TX Buffer Empty Flag
           =4 SBIT (SPIEN, SFR_SPI0CN, 0);           // SPI0 Enable
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Interrupt Priorities
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #define INTERRUPT_INT0             0   // External Interrupt 0
           =4 #define INTERRUPT_TIMER0           1   // Timer 0 Overflow
           =4 #define INTERRUPT_INT1             2   // External Interrupt 1
           =4 #define INTERRUPT_TIMER1           3   // Timer 1 Overflow
           =4 #define INTERRUPT_UART0            4   // UART0
           =4 #define INTERRUPT_TIMER2           5   // Timer 2 Overflow
           =4 #define INTERRUPT_SPI0             6   // SPI0
           =4 #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
           =4 #define INTERRUPT_ADC0_WINDOW      8   // ADC0 Window Comparison
           =4 #define INTERRUPT_ADC0_EOC         9   // ADC0 End Of Conversion
           =4 #define INTERRUPT_PCA0            10   // PCA0 Peripheral
           =4 #define INTERRUPT_COMPARATOR0     11   // Comparator 0 Comparison
           =4 #define INTERRUPT_COMPARATOR1     12   // Comparator 1 Comparison
           =4 #define INTERRUPT_TIMER3          13   // Timer 3 Overflow
           =4 #define INTERRUPT_LIN0            14   // LIN Bus Interrupt
           =4 #define INTERRUPT_VREG            15   // Voltage Regulator
           =4 #define INTERRUPT_CAN0            16   // CAN Bus Interrupt
           =4 #define INTERRUPT_PORT_MATCH      17   // Port Match
           =4 #define INTERRUPT_UART1           18   // UART1
           =4 #define INTERRUPT_PCA1            19   // PCA1 Peripheral
           =4 #define INTERRUPT_COMPARATOR2     20   // Comparator 2 Comparison
           =4 #define INTERRUPT_TIMER4          21   // Timer 4 Overflow
           =4 #define INTERRUPT_TIMER5          22   // Timer 5 Overflow
           =4 
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // SFR Page Definitions
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #define  CONFIG_PAGE       0x0F        // System and Port Configuration Page
           =4 #define  ACTIVE_PAGE       0x00        // Active Use Page
           =4 #define  ACTIVE2_PAGE      0x10        // Active Use Page 2
           =4 #define  CAN0_PAGE         0x0C        // CAN0 Registers
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // SDCC PDATA External Memory Paging Support
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #if defined SDCC
           =4 
           =4 SFR(_XPAGE, 0xAA); // Point to the EMI0CN register
           =4 
           =4 #endif
           =4 
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 77  

           =4 //-----------------------------------------------------------------------------
           =4 // Header File PreProcessor Directive
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #endif                                 // #define C8051F580_DEFS_H
 607      =4  
 608      =4  //-----------------------------------------------------------------------------
 609      =4  // End Of File
 610      =4  //-----------------------------------------------------------------------------
   6      =3  /*****************************************************************************/
   7      =3  void initDeviceF580(void);
   8      =3  #endif
 145      =2  #endif
 146      =2  
 147      =2  #include "delay.h"
   1      =3  #ifndef __DELAY_H__
   2      =3  #define __DELAY_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
           =2 #include "i2c0.h"
           =2 #include "i2c1.h"
           =2 #include "i2c2.h"
           =2 #include "i2c3.h"
           =2 #include "i2c4.h"
           =2 #include "i2c5.h"
           =2 #include "i2c6.h"
           =2 #include "eprom.h"
           =2 //#include "mcp47x6.h"
           =2 //#include "inPca9554.h"
           =2 //#include "outPca9554.h"
           =2 /*****************************************************************************/
           =2 #include "Modbus.h"
           =2 #include "ModbusPort.h"
           =2 /*****************************************************************************/
           =2 #include "sPLC.h"
           =2 //#include "pidFuzzy.h"
           =2 /*****************************************************************************/
           =2 //#include "AppMath.h"
           =2 //#include "chipAdc.h"
           =2 //#include "ad5621.h"
           =2 //#include "chipBeem.h"
           =2 
           =2 /*****************************************************************************/
           =2 #endif
   4      =3  #ifndef __DELAY_H__
   4      =3  #define __DELAY_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void delayMs(uint8_t ms) reentrant;
   7      =3  void delayUs(uint8_t us) reentrant;
   8      =3  void hwDelayInit(uint8_t reload_h, uint8_t reload_l);
   9      =3  void hwDelay(uint8_t control, uint8_t reload_h, uint8_t reload_l);
  10      =3  /*****************************************************************************/
  11      =3  #endif
  12      =3  
   1      =3  #ifndef __I2C0_H__
   2      =3  #define __I2C0_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C0_H__
   4      =3  #define __I2C0_H__
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 78  

   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic0Init(void);
   9      =3  void iic0Start(void);
  10      =3  void iic0Stop(void);
  11      =3  uint8_t iic0WaitAck(void);
  12      =3  void iic0Ack(void);
  13      =3  void iic0NAck(void);
  14      =3  void iic0SendByte(uint8_t txd);
  15      =3  uint8_t iic0ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C1_H__
   2      =3  #define __I2C1_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C1_H__
   4      =3  #define __I2C1_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic1Init(void);
   9      =3  void iic1Start(void);
  10      =3  void iic1Stop(void);
  11      =3  uint8_t iic1WaitAck(void);
  12      =3  void iic1Ack(void);
  13      =3  void iic1NAck(void);
  14      =3  void iic1SendByte(uint8_t txd);
  15      =3  uint8_t iic1ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C2_H__
   2      =3  #define __I2C2_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C2_H__
   4      =3  #define __I2C2_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic2Init(void);
   9      =3  void iic2Start(void);
  10      =3  void iic2Stop(void);
  11      =3  uint8_t iic2WaitAck(void);
  12      =3  void iic2Ack(void);
  13      =3  void iic2NAck(void);
  14      =3  void iic2SendByte(uint8_t txd);
  15      =3  uint8_t iic2ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 79  

  19      =3  
   1      =3  #ifndef __I2C3_H__
   2      =3  #define __I2C3_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C3_H__
   4      =3  #define __I2C3_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic3Init(void);
   9      =3  void iic3Start(void);
  10      =3  void iic3Stop(void);
  11      =3  uint8_t iic3WaitAck(void);
  12      =3  void iic3Ack(void);
  13      =3  void iic3NAck(void);
  14      =3  void iic3SendByte(uint8_t txd);
  15      =3  uint8_t iic3ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C4_H__
   2      =3  #define __I2C4_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C4_H__
   4      =3  #define __I2C4_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic4Init(void);
   9      =3  void iic4Start(void);
  10      =3  void iic4Stop(void);
  11      =3  uint8_t iic4WaitAck(void);
  12      =3  void iic4Ack(void);
  13      =3  void iic4NAck(void);
  14      =3  void iic4SendByte(uint8_t txd);
  15      =3  uint8_t iic4ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C5_H__
   2      =3  #define __I2C5_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C5_H__
   4      =3  #define __I2C5_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic5Init(void);
   9      =3  void iic5Start(void);
  10      =3  void iic5Stop(void);
  11      =3  uint8_t iic5WaitAck(void);
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 80  

  12      =3  void iic5Ack(void);
  13      =3  void iic5NAck(void);
  14      =3  void iic5SendByte(uint8_t txd);
  15      =3  uint8_t iic5ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C6_H__
   2      =3  #define __I2C6_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C6_H__
   4      =3  #define __I2C6_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic6Init(void);
   9      =3  void iic6Start(void);
  10      =3  void iic6Stop(void);
  11      =3  uint8_t iic6WaitAck(void);
  12      =3  void iic6Ack(void);
  13      =3  void iic6NAck(void);
  14      =3  void iic6SendByte(uint8_t txd);
  15      =3  uint8_t iic6ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __EPROM_H__
   2      =3  #define __EPROM_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __EPROM_H__
   4      =3  #define __EPROM_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  /*****************************************************************************/
   7      =3  void epromInit(void);
   8      =3  uint8_t epromReadOneByte(uint16_t ReadAddr);
   9      =3  void epromWriteOneByte(uint16_t WriteAddr, uint8_t DataToWrite);
  10      =3  void epromWriteLenByte(uint16_t WriteAddr, uint32_t DataToWrite, uint8_t Len);
  11      =3  uint32_t epromReadLenByte(uint16_t ReadAddr, uint8_t Len);
  12      =3  void epromRead(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead);
  13      =3  void epromWrite(uint16_t WriteAddr, uint8_t *pBuffer, uint16_t NumToWrite);
  14      =3  void epromTest(void);
  15      =3  #endif
   1      =3  #ifndef __MODBUS__H__
           =3 #define __MODBUS__H__
           =3 /*****************************************************************************/
           =3 #include "appConfig.h"
           =3 /*****************************************************************************/
           =3 extern volatile uint16_t modbusTimerValue;
           =3 extern volatile uint8_t modbusReceiveCounter;// Collected data number
           =3 extern xdata volatile uint8_t modbusReceiveBuffer[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];
           =3 /*****************************************************************************/
           =3 extern void initModbus(uint8_t modbusSlaveAddress, uint32_t bd);
           =3 extern void modbusPorcess(void);
           =3 #endif
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 81  

   1      =3  #ifndef __MODBUSPORT__H__
   2      =3  #define __MODBUSPORT__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUSPORT__H__
   4      =3  #define __MODBUSPORT__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern void modBusUartInitialise(uint32_t baudrate);
   7      =3  extern void modBusTimerInitialise(void);
   8      =3  extern void modBusUartPutch(uint8_t c);
   9      =3  extern uint8_t modBusUartString(uint8_t *s, uint16_t Length);
  10      =3  extern void receiveInterrupt(uint8_t Data);
  11      =3  /*****************************************************************************/
  12      =3  #endif
   1      =3  #ifndef __SPLC_H__
   2      =3  #define __SPLC_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   1      =4  #ifndef __APPCONFIG_H__
           =4 #define __APPCONFIG_H__
           =4 /*****************************************************************************/
           =4 #define CONFIG_SYSCLK                       (22118400L)
           =4 #ifdef C8051F020
           =4 #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
           =4 #endif
           =4 #define CONFIG_DEBUG                        0//调试功能
           =4 #define CONFIG_USING_WDT                                        0//使能看门狗
           =4 #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
           =4 #define CONFIG_LADDER_SECTORS_START                     64//指令起始地址
           =4 #define CONFIG_LADDER_SECTORS_END                       128//指令结束地址
           =4 #define CONFIG_LASERTIMER_OVERFLOW_US           1000L//定时器周期 1mS
           =4 #define CONFIG_VERSION                                          0x0001
           =4 #define CONFIG_CHECK_CODE                                       0x5A00
           =4 
           =4 /*****************************************************************************/
           =4 #define CONFIG_UART0_BAUDRATE                           57600//串口波特率
           =4 #define CONFIG_UART0_PARITY                                     NONE
           =4 #define CONFIG_UART0_STOPBIT                            1
           =4 #define CONFIG_UART0_DATABIT                            8
           =4 
           =4 #define CONFIG_UART1_BAUDRATE                           115200//串口波特率
           =4 #define CONFIG_UART1_PARITY                                     NONE
           =4 #define CONFIG_UART1_STOPBIT                            1
           =4 #define CONFIG_UART1_DATABIT                            8
           =4 /*****************************************************************************/
           =4 #define CONFIG_I2C0_FREQ                                        (100000L)               
           =4 #define CONFIG_I2C1_FREQ                                        (100000L)
           =4 #define CONFIG_I2C2_FREQ                                        (100000L)
           =4 #define CONFIG_I2C3_FREQ                                        (100000L)
           =4 #define CONFIG_I2C4_FREQ                                        (100000L)
           =4 /*****************************************************************************/
           =4 #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
           =4 #define CONFIG_AT24C02_SIZE                             256
           =4 #define CONFIG_AT24C04_SIZE                             512
           =4 #define CONFIG_AT24C08_SIZE                             1024
           =4 #define CONFIG_AT24C16_SIZE                             2048
           =4 #define CONFIG_AT24C32_SIZE                             4096
           =4 #define CONFIG_AT24C64_SIZE                                     8192
           =4 #define CONFIG_AT24C128_SIZE                            16384
           =4 #define CONFIG_AT24C256_SIZE                            32768
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 82  

           =4 #define CONFIG_EPROM_ADDRESS                            0x50
           =4 #define CONFIG_EPROM_FRAM                                       0//铁电存储体无写入等待
           =4 #define CONFIG_EPROM_FREQ                                       1//
           =4 /*****************************************************************************/
           =4 #define CONFIG_USE_IPID                                         1//使能IPID温度控制
           =4 /*****************************************************************************/
           =4 #define CONFIG_USE_HWVER_SHOW                           1//使能固件版本显示
           =4 #define CONFIG_USE_MPD1_SHOW                            1//使能MPD1测量显示
           =4 #define CONFIG_USE_MPD2_SHOW                            1//使能MPD2测量显示
           =4 #define CONFIG_USE_FBS1                                         1//使能FBS1检测
           =4 #define CONFIG_USE_FBS2                                         1//使能FBS2检测
           =4 #define CONFIG_USE_LASER_TEMP                           1//使能激光器温度显示
           =4 #define CONFIG_USE_RADIATOR_TEMP                        1//使能散热器温度显示
           =4 #define CONFIG_USE_ENVI_TEMP                            1//使能环境温度显示
           =4 #define CONFIG_USE_IPID_UPDATE                          1//使能IPID参数更新功能
           =4 #define CONFIG_USE_IPID_OUTSHOW                         1//使能IPID输出显示
           =4 /*****************************************************************************/
           =4 //SPLC设置
           =4 #define CONFIG_SPLC_IO_INPUT_NUM                        16//硬件输入点数
           =4 #define CONFIG_SPLC_IO_OUTPUT_NUM                       16//硬件输出点数
           =4 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =4 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =4 #define CONFIG_IPID_RUN_CYCLE                           40//IPID运行周期 默认 40 * 100mS
           =4 #define CONFIG_IPID_PWM_CYCLE                           20//IPID输出周期 默认 20 * 100mS
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_EPROM                         0//EPROM掉电存储启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_ADC                           0//使能ADC模块
           =4 #define CONFIG_SPLC_ADC_FILTER_TAP                      48//ADC位移滤波次数
           =4 #define CONFIG_SPLC_ADC_CHANNLE                         9//ADC通道数
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =4 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
           =4 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
           =4 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =4 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =4 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =4 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =4 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =4 /*****************************************************************************/
           =4 
           =4 /*****************************************************************************/
           =4 #define ID_ONLY_1_CHANNEL                                       4321
           =4 #define ID_ONLY_2_CHANNEL                                       8765
           =4 #define ID_BOTH_CHANNEL                                         9431
           =4 #define ID_LASER_MODE_CW                                        7631
           =4 #define ID_LASER_MODE_SP                                        8934
           =4 #define ID_LASER_MODE_MP                                        2453
           =4 #define ID_LASER_MODE_GP                                        3876
           =4 /*****************************************************************************/
           =4 #define FBS1_IN_PORT                                            3
           =4 #define FBS2_IN_PORT                                            2
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 83  

           =4 #define COOLON_OUT_PORT                                         (1 * 8 + 3)
           =4 /*****************************************************************************/
           =4 //PID FUZZY 模糊PID配置
           =4 #define CONFIG_TECOUT_CYCLE                                     4000//PID输出转PWM周期
           =4 /*****************************************************************************/
           =4 /*****************************************************************************/
           =4 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =4 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =4 #define DISABLE_INTERRUPT                                       EA = 0;
           =4 #define ENABLE_INTERRUPT                                        EA = 1;
           =4 /*****************************************************************************/
           =4 #include "stdint.h"
           =4 #include "stdbool.h"
           =4 #include "endian.h"
           =4 #include "si_toolchain.h"
           =4 #include "compiler_defs.h"
           =4 #ifdef C8051F020
           =4 #include "C8051F020_defs.h"
           =4 #endif
           =4 #ifdef C8051F340
           =4 #include "C8051F340_defs.h"
           =4 #endif
           =4 #ifdef C8051F580
           =4 #include "C8051F580_defs.h"
           =4 #endif
           =4 /*****************************************************************************/
           =4 #include <stdio.h>
           =4 #include <stdlib.h> 
           =4 #include <string.h>
           =4 #include <INTRINS.H>
           =4 #include <ctype.h>
           =4 #include <LIMITS.H>
           =4 #include <math.h>
           =4 #include "crc32.h"
           =4 /*****************************************************************************/
           =4 #ifdef C8051F020
           =4 #include "InitDeviceF020.h"
           =4 #endif
           =4 #ifdef C8051F580
           =4 #include "InitDeviceF580.h"
           =4 #endif
           =4 
           =4 #include "delay.h"
           =4 #include "i2c0.h"
           =4 #include "i2c1.h"
           =4 #include "i2c2.h"
           =4 #include "i2c3.h"
           =4 #include "i2c4.h"
           =4 #include "i2c5.h"
           =4 #include "i2c6.h"
           =4 #include "eprom.h"
           =4 //#include "mcp47x6.h"
           =4 //#include "inPca9554.h"
           =4 //#include "outPca9554.h"
           =4 /*****************************************************************************/
           =4 #include "Modbus.h"
           =4 #include "ModbusPort.h"
           =4 /*****************************************************************************/
           =4 #include "sPLC.h"
           =4 //#include "pidFuzzy.h"
           =4 /*****************************************************************************/
           =4 //#include "AppMath.h"
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 84  

           =4 //#include "chipAdc.h"
           =4 //#include "ad5621.h"
           =4 //#include "chipBeem.h"
           =4 
           =4 /*****************************************************************************/
           =4 #endif
   5      =3  /*****************************************************************************/
   6      =3  //线圈 保持 16 * 16 = 256BIT
   7      =3  #define MR_START                                                0
   8      =3  #define MR_END                                                  15
   9      =3  //线圈寄存器 非保持 16 * 16 = 256BIT
  10      =3  #define R_START                                                 16
  11      =3  #define R_END                                                   31
  12      =3  //数据寄存器 保持 128
  13      =3  #define DM_START                                                32
  14      =3  #define DM_END                                                  159
  15      =3  //数据寄存器 非保持 128个字
  16      =3  #define EM_START                                                160
  17      =3  #define EM_END                                                  287
  18      =3  //延时线圈
  19      =3  #define T_1MS_START                                             288//16个1mS
  20      =3  #define T_1MS_END                                               303
  21      =3  #define T_10MS_START                                    304//16个10mS
  22      =3  #define T_10MS_END                                              319
  23      =3  #define T_100MS_START                                   320//16个100mS
  24      =3  #define T_100MS_END                                             335
  25      =3  //延时计时器 
  26      =3  #define TD_1MS_START                                    336//16个1mS
  27      =3  #define TD_1MS_END                                              351
  28      =3  #define TD_10MS_START                                   352//16个10mS
  29      =3  #define TD_10MS_END                                             367
  30      =3  #define TD_100MS_START                                  368//16个100mS
  31      =3  #define TD_100MS_END                                    383
  32      =3  //计数器
  33      =3  #define C_START                                                 384//16个计数器
  34      =3  #define C_END                                                   399//
  35      =3  //输入位寄存器 16 * 16 = 256个
  36      =3  #define X_START                                                 400//
  37      =3  #define X_END                                                   415// 
  38      =3  //输出位寄存器 16 * 16 = 256个
  39      =3  #define Y_START                                                 416// 
  40      =3  #define Y_END                                                   431//
  41      =3  //特殊寄存器 64个字
  42      =3  #define SPREG_START                                             432//
  43      =3  #define SPREG_END                                               495//
  44      =3  //特殊线圈      16 * 16 = 256个
  45      =3  #define SPCOIL_START                                    496
  46      =3  #define SPCOIL_END                                              511
  47      =3  /*****************************************************************************/
  48      =3  #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
  49      =3  /*****************************************************************************/
  50      =3  #define SPREG_ADC_0                                             (SPREG_START + 0)
  51      =3  #define SPREG_ADC_1                                             (SPREG_START + 1)
  52      =3  #define SPREG_ADC_2                                             (SPREG_START + 2)
  53      =3  #define SPREG_ADC_3                                             (SPREG_START + 3)
  54      =3  #define SPREG_DAC_0                                             (SPREG_START + 4)
  55      =3  #define SPREG_DAC_1                                             (SPREG_START + 5)
  56      =3  #define SPREG_DAC_2                                             (SPREG_START + 6)
  57      =3  #define SPREG_DAC_3                                             (SPREG_START + 7)
  58      =3  
  59      =3  #define SPCOIL_ON                                               0//长通线圈
  60      =3  #define SPCOIL_PS1MS                                    1//1mS间隔 50%占空比脉冲
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 85  

  61      =3  #define SPCOIL_PS10MS                                   2//10mS
  62      =3  #define SPCOIL_PS100MS                                  3//100mS
  63      =3  /*****************************************************************************/
  64      =3  #define SP_EM_MODBUS_SLAVE_ERR                  300
  65      =3  #define SP_R_ON                                                 800//上电ON
  66      =3  #define SP_R_TICK_1MS                                   801//
  67      =3  #define SP_R_TICK_10MS                                  802//
  68      =3  #define SP_R_TICK_100MS                                 803//
  69      =3  #define SP_R_TICK_1S                                    804//
  70      =3  /*****************************************************************************/
  71      =3  extern uint16_t ModbusSlaveAsciiOverTimeCounter;//Modbus Slave通信超时计时器
  72      =3  extern xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
  73      =3  extern xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
  74      =3  /*****************************************************************************/
  75      =3  void wdtDisable(void);//看门狗屏蔽
  76      =3  
  77      =3  void sPlcInit(void);//软逻辑初始化
  78      =3  void sPlcProcessStart(void);//sPLC轮询起始
  79      =3  void sPlcProcessEnd(void);//sPLC轮询结束
  80      =3  /*****************************************************************************/
  81      =3  void assertCoilAddress(uint16_t adr);
  82      =3  void assertRegisterAddress(uint16_t adr);
  83      =3  /*****************************************************************************/
  84      =3  void nvramUpdata(void);
  85      =3  void clearDM(void);
  86      =3  void clearEM(void);
  87      =3  void clearR(void);
  88      =3  void clearT(void);
  89      =3  void clearTD(void);
  90      =3  void clearC(void);
  91      =3  void nvramLoad(void);
  92      =3  void nvramSave(void);
  93      =3  void nvramUpdata(void);
  94      =3  /*****************************************************************************/
  95      =3  void SET(uint16_t A);//置位
  96      =3  void RESET(uint16_t A);//复位
  97      =3  void FLIP(uint16_t A);//翻转
  98      =3  uint8_t LD(uint16_t A);//载入
  99      =3  uint8_t LDP(uint16_t A);//脉冲上升沿
 100      =3  uint8_t LDN(uint16_t A);//脉冲下降沿
 101      =3  void T100US(uint8_t A, uint8_t start, uint16_t value);
 102      =3  void T1MS(uint8_t A, uint8_t start, uint16_t value);
 103      =3  void T10MS(uint8_t A, uint8_t start, uint16_t value);
 104      =3  void T100MS(uint8_t A, uint8_t start, uint16_t value);
 105      =3  /*****************************************************************************/
 106      =3  void chipDacInit(void);
 107      =3  void chipAdcInit(void);
 108      =3  void sPlcInit(void);
 109      =3  void refreshInput(void);
 110      =3  void refreshOutput(void);
 111      =3  void refreshDac(void);
 112      =3  /*****************************************************************************/
 113      =3  #endif
   5      =1  /*****************************************************************************/
   6      =1  extern volatile uint16_t modbusTimerValue;
   7      =1  extern volatile uint8_t modbusReceiveCounter;// Collected data number
   8      =1  extern xdata volatile uint8_t modbusReceiveBuffer[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];
   9      =1  /*****************************************************************************/
  10      =1  extern void initModbus(uint8_t modbusSlaveAddress, uint32_t bd);
  11      =1  extern void modbusPorcess(void);
  12      =1  #endif
   2          /*******************************ModBus Functions*******************************/
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 86  

   3          #define MODBUS_READ_COILS                                               1
   4          #define MODBUS_READ_DISCRETE_INPUTS                                     2
   5          #define MODBUS_READ_HOLDING_REGISTERS                                   3
   6          #define MODBUS_READ_INPUT_REGISTERS                                     4
   7          #define MODBUS_WRITE_SINGLE_COIL                                        5
   8          #define MODBUS_WRITE_SINGLE_REGISTER                                    6
   9          #define MODBUS_WRITE_MULTIPLE_COILS                                     15
  10          #define MODBUS_WRITE_MULTIPLE_REGISTERS                                 16
  11          /****************************End of ModBus Functions***************************/
  12          #define FALSE_FUNCTION                                                  0
  13          #define FALSE_SLAVE_ADDRESS                                             1
  14          #define DATA_NOT_READY                                                  2
  15          #define DATA_READY                                                      3
  16          #define ERROR_CODE_01                                                   0x01// function code is not supported
  17          #define ERROR_CODE_02                                                   0x02// Register address is not allowed or write-protected
  18          #define ERROR_CODE_03                                                   0x03//Some data values are out of range, invalid number of r
             -egister
  19          /*****************************************************************************/
  20          typedef enum{
  21              RXTX_IDLE,
  22              RXTX_START,
  23              RXTX_DATABUF,
  24              RXTX_WAIT_ANSWER,
  25              RXTX_TIMEOUT
  26          }MODBUS_RXTX_STATE;
  27          typedef struct{
  28                  uint8_t address;
  29                  uint8_t function;
  30                  uint8_t dataBuf[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];
  31                  uint16_t dataLen;
  32          }modbusRxTxData_t;
  33          /**********************Slave Transmit and Receive Variables********************/
  34          data uint8_t ModbusSlaveAddress = 1;
  35          xdata modbusRxTxData_t Tx_Data;
  36          data uint32_t Tx_Current = 0;
  37          data uint32_t Tx_CRC16 = 0xFFFF;
  38          data MODBUS_RXTX_STATE Tx_State = RXTX_IDLE;
  39          xdata uint8_t Tx_Buf[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];
  40          data uint32_t Tx_Buf_Size = 0;
  41          /*****************************************************************************/
  42          xdata modbusRxTxData_t Rx_Data;
  43          data uint32_t Rx_CRC16 = 0xFFFF;
  44          data MODBUS_RXTX_STATE Rx_State = RXTX_IDLE;
  45          data uint8_t Rx_Data_Available = false;
  46          /*****************************************************************************/
  47          volatile uint16_t modbusTimerValue = 0;
  48          volatile uint8_t modbusReceiveCounter = 0;// Collected data number
  49          xdata volatile uint8_t modbusReceiveBuffer[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];// Buffer to collect data from
             - hardware
  50          /*****************************************************************************/
  51          void modbusCrc16(const uint8_t Data, uint32_t* CRC){
  52   1          data uint32_t i;
  53   1          *CRC = *CRC ^(uint32_t) Data;
  54   1          for (i = 8; i > 0; i--){
  55   2              if (*CRC & 0x0001)
  56   2                  *CRC = (*CRC >> 1) ^ 0xA001;
  57   2              else
  58   2                  *CRC >>= 1;
  59   2          }
  60   1      }
  61          uint8_t DoSlaveTX(void){//It is used for send data package over physical layer
  62   1          modBusUartString(Tx_Buf, Tx_Buf_Size);
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 87  

  63   1          Tx_Buf_Size = 0;
  64   1          return true;
  65   1      }
  66          uint8_t SendMessage(void){//This function start to sending messages
  67   1          if (Tx_State != RXTX_IDLE){
  68   2              return false;
  69   2              }
  70   1          Tx_Current  =0;
  71   1          Tx_State    =RXTX_START;
  72   1          return true;
  73   1      }
  74          void HandleModbusError(char ErrorCode){// Initialise the output buffer. The first byte in the buffer says 
             -how many registers we have read
  75   1          Tx_Data.function = ErrorCode | 0x80;
  76   1          Tx_Data.address = ModbusSlaveAddress;
  77   1          Tx_Data.dataLen = 0;
  78   1          SendMessage();
  79   1      }
  80          
  81          void HandleModbusReadCoils(void){//Modbus function 01 - 读取线圈状态
  82   1              uint16_t startAddress, numberOfCoil, byteCount, tempAddr, i, j;
  83   1              uint8_t tempData = 0;
  84   1              // The message contains the requested start address and number of registers
  85   1          startAddress = ((uint16_t) (Rx_Data.dataBuf[0]) << 8) + (uint16_t) (Rx_Data.dataBuf[1]);
  86   1          numberOfCoil = ((uint16_t) (Rx_Data.dataBuf[2]) << 8) + (uint16_t) (Rx_Data.dataBuf[3]);
  87   1              if((startAddress + numberOfCoil) > (CONFIG_NVRAM_SIZE * 16)){//If it is bigger than RegisterNumber return
             - error to Modbus Master
  88   2              HandleModbusError(ERROR_CODE_02);
  89   2              }
  90   1              else{
  91   2                      byteCount = numberOfCoil / 8;
  92   2                      if((numberOfCoil % 8) != 0){
  93   3                              byteCount += 1;
  94   3                      }
  95   2                      Tx_Data.function = MODBUS_READ_COILS;
  96   2                      Tx_Data.address = ModbusSlaveAddress;
  97   2                      Tx_Data.dataLen = 1;
  98   2                      tempAddr = startAddress;
  99   2                      for(i = 0; i < byteCount; i ++){
 100   3                              Tx_Data.dataBuf[Tx_Data.dataLen] = 0;
 101   3                              for(j = 0; j < 8; j ++){
 102   4                                      tempData = (NVRAM0[(tempAddr / 16)] >> (tempAddr % 16)) & 0x01;
 103   4                                      Tx_Data.dataBuf[Tx_Data.dataLen] |= (uint8_t)(tempData << j);
 104   4                                      tempAddr++;     
 105   4                                      //if(tempAddr >= startAddress + numberOfCoil){//读完
 106   4                                      //      exit = 1;
 107   4                                      //      break;
 108   4                                      //} 
 109   4                              }
 110   3                              Tx_Data.dataLen ++;     
 111   3                      }
 112   2                      Tx_Data.dataBuf[0] = Tx_Data.dataLen - 1;
 113   2                      SendMessage();
 114   2              }
 115   1      }
 116          void HandleModbusReadInputCoil(void){//Modbus function 02 - 读取输入线圈状态
 117   1      }
 118          void HandleModbusReadHoldingRegisters(void){//Modbus function 03 - Read holding registers
 119   1          uint16_t startAddress, numberOfRegisters, i, currentData;
 120   1              // The message contains the requested start address and number of registers
 121   1          startAddress = ((uint16_t) (Rx_Data.dataBuf[0]) << 8) + (uint16_t) (Rx_Data.dataBuf[1]);
 122   1          numberOfRegisters = ((uint16_t) (Rx_Data.dataBuf[2]) << 8) + (uint16_t) (Rx_Data.dataBuf[3]);
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 88  

 123   1              if((startAddress + numberOfRegisters) > CONFIG_NVRAM_SIZE){//If it is bigger than RegisterNumber return e
             -rror to Modbus Master
 124   2              HandleModbusError(ERROR_CODE_02);
 125   2              }
 126   1          else{//Initialise the output buffer. The first byte in the buffer says how many registers we have read
 127   2              Tx_Data.function = MODBUS_READ_HOLDING_REGISTERS;
 128   2              Tx_Data.address = ModbusSlaveAddress;
 129   2              Tx_Data.dataLen = 1;
 130   2              Tx_Data.dataBuf[0] = 0;
 131   2              for (i = 0;i < numberOfRegisters;i ++){
 132   3                  currentData = (uint16_t)NVRAM0[startAddress + i];
 133   3                  Tx_Data.dataBuf[Tx_Data.dataLen] = (uint8_t)((currentData & 0xFF00) >> 8);
 134   3                  Tx_Data.dataBuf[Tx_Data.dataLen + 1] = (uint8_t)(currentData & 0x00FF);
 135   3                  Tx_Data.dataLen += 2;
 136   3                  Tx_Data.dataBuf[0] = Tx_Data.dataLen - 1;
 137   3              }
 138   2              SendMessage();
 139   2          }
 140   1      }
 141          void HandleModbusWriteSingleCoil(void){//Modbus function 05 -强置单线圈
 142   1              uint16_t startAddress, value;
 143   1              // The message contains the requested start address and number of registers
 144   1          startAddress = ((uint16_t) (Rx_Data.dataBuf[0]) << 8) + (uint16_t) (Rx_Data.dataBuf[1]);
 145   1              value = ((uint16_t) (Rx_Data.dataBuf[2]) << 8) + (uint16_t)(Rx_Data.dataBuf[3]);
 146   1              if((startAddress) > (CONFIG_NVRAM_SIZE * 16)){//If it is bigger than RegisterNumber return error to Modbu
             -s Master
 147   2              HandleModbusError(ERROR_CODE_02);
 148   2              }
 149   1              else{
 150   2                      Tx_Data.function = MODBUS_WRITE_SINGLE_COIL;
 151   2                      Tx_Data.address = ModbusSlaveAddress;
 152   2                      Tx_Data.dataLen = 4;
 153   2                      Tx_Data.dataBuf[0] = Rx_Data.dataBuf[0];
 154   2                      Tx_Data.dataBuf[1] = Rx_Data.dataBuf[1];
 155   2                      if(value == 0x0000){//0
 156   3                              NVRAM0[(startAddress / 16)] &= ~((uint16_t)(1 << (startAddress % 16)));
 157   3                              Tx_Data.dataBuf[2] = 0x00;
 158   3                              Tx_Data.dataBuf[3] = 0x00;
 159   3                      }
 160   2                      else if(value == 0xFF00){//1
 161   3                              NVRAM0[(startAddress / 16)] |= (uint16_t)(1 << (startAddress % 16));
 162   3                              Tx_Data.dataBuf[2] = 0xFF;
 163   3                              Tx_Data.dataBuf[3] = 0x00;
 164   3                      }
 165   2                      else{           
 166   3                      }
 167   2                      SendMessage();
 168   2              }
 169   1      }
 170          void HandleModbusWriteSingleRegister(void){//Modbus function 06 - Write single register
 171   1          uint16_t address, value,i;
 172   1          // The message contains the requested start address and number of registers
 173   1          address = ((uint16_t) (Rx_Data.dataBuf[0]) << 8) + (uint16_t)(Rx_Data.dataBuf[1]);
 174   1          value = ((uint16_t) (Rx_Data.dataBuf[2]) << 8) + (uint16_t)(Rx_Data.dataBuf[3]);
 175   1          // Initialise the output buffer. The first byte in the buffer says how many registers we have read
 176   1          Tx_Data.function = MODBUS_WRITE_SINGLE_REGISTER;
 177   1          Tx_Data.address = ModbusSlaveAddress;
 178   1          Tx_Data.dataLen = 4;
 179   1          if(address >= CONFIG_NVRAM_SIZE){
 180   2              HandleModbusError(ERROR_CODE_03);
 181   2              }
 182   1          else{
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 89  

 183   2                      NVRAM0[address] = (int16_t)value;
 184   2              // Output data buffer is exact copy of input buffer
 185   2              for (i = 0; i < 4; ++i){
 186   3                  Tx_Data.dataBuf[i] = Rx_Data.dataBuf[i];
 187   3                      }
 188   2          }
 189   1          SendMessage();
 190   1      }
 191          void HandleModbusWriteMultipleCoils(void){//Modbus function 15 - Write multiple coils
 192   1              uint16_t startAddress, numberOfCoil, byteCount, tempAddr, i, j;
 193   1              uint8_t tempData = 0;
 194   1              // The message contains the requested start address and number of registers
 195   1          startAddress = ((uint16_t) (Rx_Data.dataBuf[0]) << 8) + (uint16_t) (Rx_Data.dataBuf[1]);
 196   1          numberOfCoil = ((uint16_t) (Rx_Data.dataBuf[2]) << 8) + (uint16_t) (Rx_Data.dataBuf[3]);
 197   1              if((startAddress + numberOfCoil) > (CONFIG_NVRAM_SIZE * 16)){//If it is bigger than RegisterNumber return
             - error to Modbus Master
 198   2              HandleModbusError(ERROR_CODE_02);
 199   2              }
 200   1              else{
 201   2                      byteCount = numberOfCoil / 8;
 202   2                      if((numberOfCoil % 8) != 0){
 203   3                              byteCount += 1;
 204   3                      }
 205   2                      Tx_Data.function = MODBUS_WRITE_MULTIPLE_COILS;
 206   2                      Tx_Data.address = ModbusSlaveAddress;
 207   2                      Tx_Data.dataLen = 4;
 208   2                      Tx_Data.dataBuf[0] = Rx_Data.dataBuf[0];
 209   2                      Tx_Data.dataBuf[1] = Rx_Data.dataBuf[1];
 210   2                      Tx_Data.dataBuf[2] = Rx_Data.dataBuf[2];
 211   2                      Tx_Data.dataBuf[3] = Rx_Data.dataBuf[3];
 212   2                      tempAddr = startAddress;
 213   2                      for(i = 0;i < byteCount;i ++){
 214   3                              for(j = 0;j < 8;j ++){
 215   4                                      tempData = (uint8_t)((Rx_Data.dataBuf[(5 + i)] >> j) & 0x01);
 216   4                                      if(tempData){//ON
 217   5                                              NVRAM0[(tempAddr / 16)] |= (uint16_t)(1 << (tempAddr % 16));
 218   5                                      }
 219   4                                      else{//OFF
 220   5                                              NVRAM0[(tempAddr / 16)] &= ~((uint16_t)(1 << (tempAddr % 16)));
 221   5                                      }
 222   4                                      tempAddr ++;
 223   4                                      numberOfCoil --;
 224   4                                      if(numberOfCoil == 0){
 225   5                                              break;
 226   5                                      }
 227   4                              }
 228   3                              
 229   3                      }
 230   2                      SendMessage();
 231   2              }
 232   1      }
 233          void HandleModbusWriteMultipleRegisters(void){//Modbus function 16 - Write multiple registers
 234   1          // Write single numerical output
 235   1          data uint16_t startAddress, numberOfRegisters, value;
 236   1          data uint8_t byteCount , i;
 237   1          // The message contains the requested start address and number of registers
 238   1          startAddress = ((uint16_t)(Rx_Data.dataBuf[0]) << 8) + (uint16_t)(Rx_Data.dataBuf[1]);
 239   1          numberOfRegisters = ((uint16_t)(Rx_Data.dataBuf[2]) << 8) + (uint16_t)(Rx_Data.dataBuf[3]);
 240   1          byteCount = Rx_Data.dataBuf[4];
 241   1          // If it is bigger than RegisterNumber return error to Modbus Master
 242   1          if((startAddress+numberOfRegisters) > CONFIG_NVRAM_SIZE){
 243   2              HandleModbusError(ERROR_CODE_03);
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 90  

 244   2              }
 245   1          else{
 246   2              // Initialise the output buffer. The first byte in the buffer says how many outputs we have set
 247   2              Tx_Data.function = MODBUS_WRITE_MULTIPLE_REGISTERS;
 248   2              Tx_Data.address = ModbusSlaveAddress;
 249   2              Tx_Data.dataLen = 4;
 250   2              Tx_Data.dataBuf[0] = Rx_Data.dataBuf[0];
 251   2              Tx_Data.dataBuf[1] = Rx_Data.dataBuf[1];
 252   2              Tx_Data.dataBuf[2] = Rx_Data.dataBuf[2];
 253   2              Tx_Data.dataBuf[3] = Rx_Data.dataBuf[3];
 254   2              // Output data buffer is exact copy of input buffer
 255   2              for (i = 0;i < numberOfRegisters;i ++){
 256   3                  value = (uint16_t)((Rx_Data.dataBuf[5 + 2 * i] << 8) & 0xFF00) + (uint16_t)((Rx_Data.dataBuf[6
             - + 2 * i]) & 0x00FF);
 257   3                  NVRAM0[startAddress + i] = (int16_t)value;
 258   3              }
 259   2              SendMessage();
 260   2          }
 261   1      }
 262          uint8_t RxDataAvailable(void){//RxDataAvailable
 263   1          uint8_t Result = Rx_Data_Available;   
 264   1          Rx_Data_Available = false;
 265   1          return Result;
 266   1      }
 267          uint8_t CheckRxTimeout(void){//CheckRxTimeout
 268   1          // A return value of true indicates there is a timeout    
 269   1          if (modbusTimerValue >= CONFIG_MB_RTU_SLAVE_BUFFER_SIZE){
 270   2              modbusTimerValue = 0;
 271   2              modbusReceiveCounter = 0;
 272   2              return true;
 273   2          }
 274   1          return false;
 275   1      }
 276          uint8_t checkModbusBufferComplete(void){//CheckBufferComplete
 277   1          data int32_t expectedReceiveCount=0;
 278   1          if(modbusReceiveCounter > 4)
 279   1          {
 280   2              if(modbusReceiveBuffer[0] == ModbusSlaveAddress)
 281   2              {
 282   3                  if(modbusReceiveBuffer[1]==0x01 || modbusReceiveBuffer[1]==0x02 || modbusReceiveBuffer[1]==0x0
             -3 || modbusReceiveBuffer[1]==0x04 || modbusReceiveBuffer[1]==0x05 || modbusReceiveBuffer[1]==0x06)  // RHR
 283   3                  {
 284   4                      expectedReceiveCount = 8;
 285   4                  }
 286   3                  else if(modbusReceiveBuffer[1] == 0x0F || modbusReceiveBuffer[1] == 0x10)
 287   3                  {
 288   4                      expectedReceiveCount=modbusReceiveBuffer[6] + 9;
 289   4                  }
 290   3                  else{
 291   4                      modbusReceiveCounter = 0;
 292   4                      return FALSE_FUNCTION;
 293   4                  }
 294   3              }
 295   2              else
 296   2              {
 297   3                  modbusReceiveCounter=0;
 298   3                  return FALSE_SLAVE_ADDRESS;
 299   3              }
 300   2          }
 301   1          else
 302   1              return DATA_NOT_READY;
 303   1      
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 91  

 304   1          if(modbusReceiveCounter==expectedReceiveCount)
 305   1          {
 306   2              return DATA_READY;
 307   2          }
 308   1      
 309   1          return DATA_NOT_READY;
 310   1      }
 311          void RxRTU(void){//Check for data ready, if it is good return answer
 312   1          uint8_t i;
 313   1          uint8_t receiveBufferControl=0;
 314   1          receiveBufferControl = checkModbusBufferComplete();
 315   1          if(receiveBufferControl == DATA_READY){
 316   2              Rx_Data.address               =modbusReceiveBuffer[0];
 317   2              Rx_CRC16                      = 0xffff;
 318   2              modbusCrc16(Rx_Data.address, &Rx_CRC16);
 319   2              Rx_Data.function              =modbusReceiveBuffer[1];
 320   2              modbusCrc16(Rx_Data.function, &Rx_CRC16);
 321   2      
 322   2              Rx_Data.dataLen=0;
 323   2      
 324   2              for(i=2;i<modbusReceiveCounter;i++)
 325   2                  Rx_Data.dataBuf[Rx_Data.dataLen++]=modbusReceiveBuffer[i];
 326   2      
 327   2              Rx_State =RXTX_DATABUF;
 328   2      
 329   2              modbusReceiveCounter=0;
 330   2          }
 331   1      
 332   1          CheckRxTimeout();
 333   1      
 334   1          if ((Rx_State == RXTX_DATABUF) && (Rx_Data.dataLen >= 2))
 335   1          {
 336   2              // Finish off our CRC check
 337   2              Rx_Data.dataLen -= 2;
 338   2              for (i = 0; i < Rx_Data.dataLen; ++i)
 339   2              {
 340   3                  modbusCrc16(Rx_Data.dataBuf[i], &Rx_CRC16);
 341   3              }
 342   2              
 343   2              if (((uint32_t) Rx_Data.dataBuf[Rx_Data.dataLen] + ((uint32_t) Rx_Data.dataBuf[Rx_Data.dataLen + 1
             -] << 8)) == Rx_CRC16)
 344   2              {
 345   3                  // Valid message!
 346   3                  Rx_Data_Available = true;
 347   3              }
 348   2      
 349   2              Rx_State = RXTX_IDLE;
 350   2          }
 351   1      }
 352          void TxRTU(void){//If it is ready send answers!
 353   1          Tx_CRC16 = 0xFFFF;
 354   1          Tx_Buf_Size = 0;
 355   1          Tx_Buf[Tx_Buf_Size++] = Tx_Data.address;
 356   1          modbusCrc16(Tx_Data.address, &Tx_CRC16);
 357   1          Tx_Buf[Tx_Buf_Size++] = Tx_Data.function;
 358   1          modbusCrc16(Tx_Data.function, &Tx_CRC16);
 359   1          for(Tx_Current=0; Tx_Current < Tx_Data.dataLen; Tx_Current++){
 360   2              Tx_Buf[Tx_Buf_Size++] = Tx_Data.dataBuf[Tx_Current];
 361   2              modbusCrc16(Tx_Data.dataBuf[Tx_Current], &Tx_CRC16);
 362   2          }
 363   1          Tx_Buf[Tx_Buf_Size++] = Tx_CRC16 & 0x00FF;
 364   1          Tx_Buf[Tx_Buf_Size++] = (Tx_CRC16 & 0xFF00) >> 8;
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 92  

 365   1          DoSlaveTX();
 366   1          Tx_State = RXTX_IDLE;
 367   1      }
 368          void modbusPorcess(void){//ModBus main core! Call this function into main!
 369   1          if (Tx_State != RXTX_IDLE){                                      // If answer is ready, send it!
 370   2              TxRTU();
 371   2              }
 372   1          RxRTU();                                                              // Call this function every cycl
             -e
 373   1          if (RxDataAvailable()){
 374   2              if (Rx_Data.address == ModbusSlaveAddress){
 375   3                  switch (Rx_Data.function)                                     // Data is for us but which func
             -tion?
 376   3                  {
 377   4                                      case MODBUS_READ_COILS:{//FUN 01
 378   5                                              HandleModbusReadCoils();
 379   5                                              break;
 380   5                                      }
 381   4                      case MODBUS_READ_HOLDING_REGISTERS:{//FUN 03
 382   5                                              HandleModbusReadHoldingRegisters();
 383   5                                              break;  
 384   5                                      }
 385   4                                      case MODBUS_WRITE_SINGLE_COIL:{//FUN 05
 386   5                                              HandleModbusWriteSingleCoil();
 387   5                                              break;
 388   5                                      }
 389   4                      case MODBUS_WRITE_SINGLE_REGISTER:{//FUN 06
 390   5                                              HandleModbusWriteSingleRegister();
 391   5                                              break;
 392   5                                      }
 393   4                                      case MODBUS_WRITE_MULTIPLE_COILS:{//FUN 15
 394   5                                              HandleModbusWriteMultipleCoils();
 395   5                                              break;
 396   5                                      }
 397   4                      case MODBUS_WRITE_MULTIPLE_REGISTERS:{//FUN 16
 398   5                                              HandleModbusWriteMultipleRegisters();
 399   5                                              break;
 400   5                                      }
 401   4                      default:{
 402   5                                              HandleModbusError(ERROR_CODE_01);
 403   5                                              break;
 404   5                                      }
 405   4                  }
 406   3              }
 407   2          }
 408   1      }
 409          void InitModbus(uint8_t modbusSlaveAddress, uint32_t baudrate){//ModBus slave initialize
 410   1          ModbusSlaveAddress = modbusSlaveAddress;
 411   1          modBusUartInitialise(baudrate);
 412   1          modBusTimerInitialise();
 413   1      }
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 93  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION L?0134 (BEGIN)
0000 E0                MOVX    A,@DPTR
0001 FB                MOV     R3,A
0002 7800        R     MOV     R0,#LOW Tx_Buf_Size
0004 120000      E     LCALL   ?C?LLDIIDATA1
0007 7400        R     MOV     A,#LOW Tx_Buf
0009 2F                ADD     A,R7
000A F582              MOV     DPL,A
000C 7400        R     MOV     A,#HIGH Tx_Buf
000E 3E                ADDC    A,R6
000F F583              MOV     DPH,A
0011 EB                MOV     A,R3
0012 F0                MOVX    @DPTR,A
0013 AF03              MOV     R7,AR3
0015         L?0135:
0015 7B00              MOV     R3,#00H
0017 7A00        R     MOV     R2,#HIGH Tx_CRC16
0019 7900        R     MOV     R1,#LOW Tx_CRC16
             ; FUNCTION _modbusCrc16 (BEGIN)
                                           ; SOURCE LINE # 51
;---- Variable 'Data' assigned to Register 'R7' ----
001B 8B00        R     MOV     CRC,R3
001D 8A00        R     MOV     CRC+01H,R2
001F 8900        R     MOV     CRC+02H,R1
                                           ; SOURCE LINE # 53
0021 E4                CLR     A
0022 FC                MOV     R4,A
0023 FD                MOV     R5,A
0024 FE                MOV     R6,A
0025 120000      E     LCALL   ?C?LLDPTR0
0028 EF                MOV     A,R7
0029 6B                XRL     A,R3
002A FF                MOV     R7,A
002B EA                MOV     A,R2
002C FE                MOV     R6,A
002D E9                MOV     A,R1
002E FD                MOV     R5,A
002F E8                MOV     A,R0
0030 FC                MOV     R4,A
0031 AB00        R     MOV     R3,CRC
0033 AA00        R     MOV     R2,CRC+01H
0035 A900        R     MOV     R1,CRC+02H
0037 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 54
003A E4                CLR     A
003B 750008      R     MOV     i+03H,#08H
003E F500        R     MOV     i+02H,A
0040 F500        R     MOV     i+01H,A
0042 F500        R     MOV     i,A
0044         ?C0001:
0044 E4                CLR     A
0045 FF                MOV     R7,A
0046 FE                MOV     R6,A
0047 FD                MOV     R5,A
0048 FC                MOV     R4,A
0049 AB00        R     MOV     R3,i+03H
004B AA00        R     MOV     R2,i+02H
004D A900        R     MOV     R1,i+01H
004F A800        R     MOV     R0,i
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 94  

0051 D3                SETB    C
0052 120000      E     LCALL   ?C?ULCMP
0055 404C              JC      ?C0006
                                           ; SOURCE LINE # 55
0057 AB00        R     MOV     R3,CRC
0059 AA00        R     MOV     R2,CRC+01H
005B A900        R     MOV     R1,CRC+02H
005D 120000      E     LCALL   ?C?LLDPTR
0060 EF                MOV     A,R7
0061 5401              ANL     A,#01H
0063 FF                MOV     R7,A
0064 E4                CLR     A
0065 FE                MOV     R6,A
0066 FD                MOV     R5,A
0067 FC                MOV     R4,A
0068 EF                MOV     A,R7
0069 6013              JZ      ?C0004
                                           ; SOURCE LINE # 56
006B 120000      E     LCALL   ?C?LLDPTR
006E 7801              MOV     R0,#01H
0070 120000      E     LCALL   ?C?ULSHR
0073 EF                MOV     A,R7
0074 6401              XRL     A,#01H
0076 FF                MOV     R7,A
0077 EE                MOV     A,R6
0078 64A0              XRL     A,#0A0H
007A FE                MOV     R6,A
007B EC                MOV     A,R4
007C 8008              SJMP    ?C0131
007E         ?C0004:
                                           ; SOURCE LINE # 58
007E 120000      E     LCALL   ?C?LLDPTR
0081 7801              MOV     R0,#01H
0083 120000      E     LCALL   ?C?ULSHR
0086         ?C0131:
0086 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 59
0089         ?C0003:
0089 E500        R     MOV     A,i+03H
008B 24FF              ADD     A,#0FFH
008D F500        R     MOV     i+03H,A
008F E500        R     MOV     A,i+02H
0091 34FF              ADDC    A,#0FFH
0093 F500        R     MOV     i+02H,A
0095 E500        R     MOV     A,i+01H
0097 34FF              ADDC    A,#0FFH
0099 F500        R     MOV     i+01H,A
009B E500        R     MOV     A,i
009D 34FF              ADDC    A,#0FFH
009F F500        R     MOV     i,A
00A1 80A1              SJMP    ?C0001
                                           ; SOURCE LINE # 60
00A3         ?C0006:
00A3 22                RET     
             ; FUNCTION _modbusCrc16 (END)

             ; FUNCTION DoSlaveTX (BEGIN)
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH Tx_Buf
0004 7900        R     MOV     R1,#LOW Tx_Buf
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 95  

0006 AC00        R     MOV     R4,Tx_Buf_Size+02H
0008 AD00        R     MOV     R5,Tx_Buf_Size+03H
000A 120000      E     LCALL   _modBusUartString
                                           ; SOURCE LINE # 63
000D E4                CLR     A
000E F500        R     MOV     Tx_Buf_Size+03H,A
0010 F500        R     MOV     Tx_Buf_Size+02H,A
0012 F500        R     MOV     Tx_Buf_Size+01H,A
0014 F500        R     MOV     Tx_Buf_Size,A
                                           ; SOURCE LINE # 64
0016 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 65
0018 22                RET     
             ; FUNCTION DoSlaveTX (END)

             ; FUNCTION SendMessage (BEGIN)
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0000 E500        R     MOV     A,Tx_State
0002 6003              JZ      ?C0008
                                           ; SOURCE LINE # 68
0004 7F00              MOV     R7,#00H
0006 22                RET     
                                           ; SOURCE LINE # 69
0007         ?C0008:
                                           ; SOURCE LINE # 70
0007 E4                CLR     A
0008 F500        R     MOV     Tx_Current+03H,A
000A F500        R     MOV     Tx_Current+02H,A
000C F500        R     MOV     Tx_Current+01H,A
000E F500        R     MOV     Tx_Current,A
                                           ; SOURCE LINE # 71
0010 750001      R     MOV     Tx_State,#01H
                                           ; SOURCE LINE # 72
0013 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 73
0015         ?C0009:
0015 22                RET     
             ; FUNCTION SendMessage (END)

             ; FUNCTION _HandleModbusError (BEGIN)
                                           ; SOURCE LINE # 74
;---- Variable 'ErrorCode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 75
0000 EF                MOV     A,R7
0001 4480              ORL     A,#080H
0003 900000      R     MOV     DPTR,#Tx_Data+01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0007 900000      R     MOV     DPTR,#Tx_Data
000A E500        R     MOV     A,ModbusSlaveAddress
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
000D E4                CLR     A
000E 900000      R     MOV     DPTR,#Tx_Data+0102H
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0014 020000      R     LJMP    SendMessage
             ; FUNCTION _HandleModbusError (END)

C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 96  

             ; FUNCTION HandleModbusReadCoils (BEGIN)
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 83
;---- Variable 'tempData' assigned to Register 'R1' ----
0000 E4                CLR     A
0001 F9                MOV     R1,A
                                           ; SOURCE LINE # 85
0002 900000      R     MOV     DPTR,#Rx_Data+02H
0005 E0                MOVX    A,@DPTR
0006 FE                MOV     R6,A
0007 A3                INC     DPTR
0008 E0                MOVX    A,@DPTR
0009 7C00              MOV     R4,#00H
000B 2400              ADD     A,#00H
000D FF                MOV     R7,A
000E EC                MOV     A,R4
000F 3E                ADDC    A,R6
;---- Variable 'startAddress' assigned to Register 'R4/R5' ----
0010 AD07              MOV     R5,AR7
0012 FC                MOV     R4,A
                                           ; SOURCE LINE # 86
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FE                MOV     R6,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 7A00              MOV     R2,#00H
001A 2400              ADD     A,#00H
001C FF                MOV     R7,A
001D EA                MOV     A,R2
001E 3E                ADDC    A,R6
;---- Variable 'numberOfCoil' assigned to Register 'R2/R3' ----
001F AB07              MOV     R3,AR7
0021 FA                MOV     R2,A
                                           ; SOURCE LINE # 87
0022 ED                MOV     A,R5
0023 2B                ADD     A,R3
0024 FF                MOV     R7,A
0025 EC                MOV     A,R4
0026 3A                ADDC    A,R2
0027 FE                MOV     R6,A
0028 D3                SETB    C
0029 EF                MOV     A,R7
002A 9400              SUBB    A,#00H
002C EE                MOV     A,R6
002D 9420              SUBB    A,#020H
002F 4005              JC      ?C0011
                                           ; SOURCE LINE # 88
0031 7F02              MOV     R7,#02H
0033 020000      R     LJMP    _HandleModbusError
                                           ; SOURCE LINE # 89
0036         ?C0011:
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0036 AE02              MOV     R6,AR2
0038 EB                MOV     A,R3
0039 7803              MOV     R0,#03H
003B         ?C0102:
003B CE                XCH     A,R6
003C C3                CLR     C
003D 13                RRC     A
003E CE                XCH     A,R6
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 97  

003F 13                RRC     A
0040 D8F9              DJNZ    R0,?C0102
0042 F500        R     MOV     byteCount+01H,A
0044 8E00        R     MOV     byteCount,R6
                                           ; SOURCE LINE # 92
0046 EB                MOV     A,R3
0047 5407              ANL     A,#07H
0049 6008              JZ      ?C0013
                                           ; SOURCE LINE # 93
004B 0500        R     INC     byteCount+01H
004D E500        R     MOV     A,byteCount+01H
004F 7002              JNZ     ?C0103
0051 0500        R     INC     byteCount
0053         ?C0103:
                                           ; SOURCE LINE # 94
0053         ?C0013:
                                           ; SOURCE LINE # 95
0053 900000      R     MOV     DPTR,#Tx_Data+01H
0056 7401              MOV     A,#01H
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0059 900000      R     MOV     DPTR,#Tx_Data
005C E500        R     MOV     A,ModbusSlaveAddress
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
005F 900000      R     MOV     DPTR,#Tx_Data+0102H
0062 E4                CLR     A
0063 F0                MOVX    @DPTR,A
0064 A3                INC     DPTR
0065 04                INC     A
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
0067 8C00        R     MOV     tempAddr,R4
0069 8D00        R     MOV     tempAddr+01H,R5
                                           ; SOURCE LINE # 99
006B E4                CLR     A
006C F500        R     MOV     i,A
006E F500        R     MOV     i+01H,A
0070         ?C0014:
0070 C3                CLR     C
0071 E500        R     MOV     A,i+01H
0073 9500        R     SUBB    A,byteCount+01H
0075 E500        R     MOV     A,i
0077 9500        R     SUBB    A,byteCount
0079 4003              JC      $ + 5H
007B 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 100
007E 900000      R     MOV     DPTR,#Tx_Data+0102H
0081 E0                MOVX    A,@DPTR
0082 FE                MOV     R6,A
0083 A3                INC     DPTR
0084 E0                MOVX    A,@DPTR
0085 2400        R     ADD     A,#LOW Tx_Data+02H
0087 F582              MOV     DPL,A
0089 7400        R     MOV     A,#HIGH Tx_Data+02H
008B 3E                ADDC    A,R6
008C F583              MOV     DPH,A
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
;---- Variable 'j' assigned to Register 'R4/R5' ----
0090 FD                MOV     R5,A
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 98  

0091 FC                MOV     R4,A
0092         ?C0017:
                                           ; SOURCE LINE # 102
0092 E500        R     MOV     A,tempAddr
0094 C4                SWAP    A
0095 F8                MOV     R0,A
0096 54F0              ANL     A,#0F0H
0098 C8                XCH     A,R0
0099 68                XRL     A,R0
009A FE                MOV     R6,A
009B E500        R     MOV     A,tempAddr+01H
009D C4                SWAP    A
009E 540F              ANL     A,#0FH
00A0 48                ORL     A,R0
00A1 25E0              ADD     A,ACC
00A3 FF                MOV     R7,A
00A4 EE                MOV     A,R6
00A5 33                RLC     A
00A6 FE                MOV     R6,A
00A7 7400        E     MOV     A,#LOW NVRAM0
00A9 2F                ADD     A,R7
00AA F582              MOV     DPL,A
00AC 7400        E     MOV     A,#HIGH NVRAM0
00AE 3E                ADDC    A,R6
00AF F583              MOV     DPH,A
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 E500        R     MOV     A,tempAddr+01H
00B8 540F              ANL     A,#0FH
00BA FB                MOV     R3,A
00BB EF                MOV     A,R7
00BC A803              MOV     R0,AR3
00BE 08                INC     R0
00BF 8006              SJMP    ?C0105
00C1         ?C0104:
00C1 CE                XCH     A,R6
00C2 A2E7              MOV     C,ACC.7
00C4 13                RRC     A
00C5 CE                XCH     A,R6
00C6 13                RRC     A
00C7         ?C0105:
00C7 D8F8              DJNZ    R0,?C0104
00C9 5401              ANL     A,#01H
00CB F9                MOV     R1,A
                                           ; SOURCE LINE # 103
00CC 900000      R     MOV     DPTR,#Tx_Data+0102H
00CF E0                MOVX    A,@DPTR
00D0 FE                MOV     R6,A
00D1 A3                INC     DPTR
00D2 E0                MOVX    A,@DPTR
00D3 2400        R     ADD     A,#LOW Tx_Data+02H
00D5 F582              MOV     DPL,A
00D7 7400        R     MOV     A,#HIGH Tx_Data+02H
00D9 3E                ADDC    A,R6
00DA F583              MOV     DPH,A
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE AE05              MOV     R6,AR5
00E0 A806              MOV     R0,AR6
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 99  

00E2 E9                MOV     A,R1
00E3 08                INC     R0
00E4 8002              SJMP    ?C0107
00E6         ?C0106:
00E6 C3                CLR     C
00E7 33                RLC     A
00E8         ?C0107:
00E8 D8FC              DJNZ    R0,?C0106
00EA 4F                ORL     A,R7
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
00EC 0500        R     INC     tempAddr+01H
00EE E500        R     MOV     A,tempAddr+01H
00F0 7002              JNZ     ?C0108
00F2 0500        R     INC     tempAddr
00F4         ?C0108:
                                           ; SOURCE LINE # 109
00F4 0D                INC     R5
00F5 BD0001            CJNE    R5,#00H,?C0109
00F8 0C                INC     R4
00F9         ?C0109:
00F9 ED                MOV     A,R5
00FA 6408              XRL     A,#08H
00FC 4C                ORL     A,R4
00FD 7093              JNZ     ?C0017
00FF         ?C0018:
                                           ; SOURCE LINE # 110
00FF 900000      R     MOV     DPTR,#Tx_Data+0103H
0102 E0                MOVX    A,@DPTR
0103 04                INC     A
0104 F0                MOVX    @DPTR,A
0105 7006              JNZ     ?C0110
0107 900000      R     MOV     DPTR,#Tx_Data+0102H
010A E0                MOVX    A,@DPTR
010B 04                INC     A
010C F0                MOVX    @DPTR,A
010D         ?C0110:
                                           ; SOURCE LINE # 111
010D 0500        R     INC     i+01H
010F E500        R     MOV     A,i+01H
0111 6003              JZ      $ + 5H
0113 020000      R     LJMP    ?C0014
0116 0500        R     INC     i
0118         ?C0111:
0118 020000      R     LJMP    ?C0014
011B         ?C0015:
                                           ; SOURCE LINE # 112
011B 900000      R     MOV     DPTR,#Tx_Data+0102H
011E A3                INC     DPTR
011F E0                MOVX    A,@DPTR
0120 14                DEC     A
0121 900000      R     MOV     DPTR,#Tx_Data+02H
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0125 120000      R     LCALL   SendMessage
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0128         ?C0020:
0128 22                RET     
             ; FUNCTION HandleModbusReadCoils (END)

             ; FUNCTION HandleModbusReadInputCoil (BEGIN)
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 100 

                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
0000 22                RET     
             ; FUNCTION HandleModbusReadInputCoil (END)

             ; FUNCTION HandleModbusReadHoldingRegisters (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 121
0000 900000      R     MOV     DPTR,#Rx_Data+02H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 7C00              MOV     R4,#00H
0009 2400              ADD     A,#00H
000B F500        R     MOV     startAddress+01H,A
000D EC                MOV     A,R4
000E 3E                ADDC    A,R6
000F F500        R     MOV     startAddress,A
                                           ; SOURCE LINE # 122
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 2400              ADD     A,#00H
0018 F500        R     MOV     numberOfRegisters+01H,A
001A EC                MOV     A,R4
001B 3E                ADDC    A,R6
001C F500        R     MOV     numberOfRegisters,A
                                           ; SOURCE LINE # 123
001E E500        R     MOV     A,startAddress+01H
0020 2500        R     ADD     A,numberOfRegisters+01H
0022 FF                MOV     R7,A
0023 E500        R     MOV     A,startAddress
0025 3500        R     ADDC    A,numberOfRegisters
0027 FE                MOV     R6,A
0028 D3                SETB    C
0029 EF                MOV     A,R7
002A 9400              SUBB    A,#00H
002C EE                MOV     A,R6
002D 9402              SUBB    A,#02H
002F 4005              JC      ?C0022
                                           ; SOURCE LINE # 124
0031 7F02              MOV     R7,#02H
0033 020000      R     LJMP    _HandleModbusError
                                           ; SOURCE LINE # 125
0036         ?C0022:
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
0036 900000      R     MOV     DPTR,#Tx_Data+01H
0039 7403              MOV     A,#03H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
003C 900000      R     MOV     DPTR,#Tx_Data
003F E500        R     MOV     A,ModbusSlaveAddress
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0042 900000      R     MOV     DPTR,#Tx_Data+0102H
0045 E4                CLR     A
0046 F0                MOVX    @DPTR,A
0047 A3                INC     DPTR
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 101 

0048 04                INC     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
004A E4                CLR     A
004B 900000      R     MOV     DPTR,#Tx_Data+02H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
;---- Variable 'i' assigned to Register 'R4/R5' ----
004F FD                MOV     R5,A
0050 FC                MOV     R4,A
0051         ?C0024:
0051 C3                CLR     C
0052 ED                MOV     A,R5
0053 9500        R     SUBB    A,numberOfRegisters+01H
0055 EC                MOV     A,R4
0056 9500        R     SUBB    A,numberOfRegisters
0058 505F              JNC     ?C0025
                                           ; SOURCE LINE # 132
005A E500        R     MOV     A,startAddress+01H
005C 2D                ADD     A,R5
005D FF                MOV     R7,A
005E E500        R     MOV     A,startAddress
0060 3C                ADDC    A,R4
0061 FE                MOV     R6,A
0062 EF                MOV     A,R7
0063 25E0              ADD     A,ACC
0065 FF                MOV     R7,A
0066 EE                MOV     A,R6
0067 33                RLC     A
0068 FE                MOV     R6,A
0069 7400        E     MOV     A,#LOW NVRAM0
006B 2F                ADD     A,R7
006C F582              MOV     DPL,A
006E 7400        E     MOV     A,#HIGH NVRAM0
0070 3E                ADDC    A,R6
0071 F583              MOV     DPH,A
0073 E0                MOVX    A,@DPTR
0074 FE                MOV     R6,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 8E00        R     MOV     currentData,R6
0079 F500        R     MOV     currentData+01H,A
                                           ; SOURCE LINE # 133
007B EE                MOV     A,R6
007C FF                MOV     R7,A
007D 900000      R     MOV     DPTR,#Tx_Data+0102H
0080 E0                MOVX    A,@DPTR
0081 FA                MOV     R2,A
0082 A3                INC     DPTR
0083 E0                MOVX    A,@DPTR
0084 FB                MOV     R3,A
0085 2400        R     ADD     A,#LOW Tx_Data+02H
0087 F582              MOV     DPL,A
0089 7400        R     MOV     A,#HIGH Tx_Data+02H
008B 3A                ADDC    A,R2
008C F583              MOV     DPH,A
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0090 7400        R     MOV     A,#LOW Tx_Data+03H
0092 2B                ADD     A,R3
0093 F582              MOV     DPL,A
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 102 

0095 7400        R     MOV     A,#HIGH Tx_Data+03H
0097 3A                ADDC    A,R2
0098 F583              MOV     DPH,A
009A E500        R     MOV     A,currentData+01H
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
009D 900000      R     MOV     DPTR,#Tx_Data+0103H
00A0 E0                MOVX    A,@DPTR
00A1 2402              ADD     A,#02H
00A3 F0                MOVX    @DPTR,A
00A4 900000      R     MOV     DPTR,#Tx_Data+0102H
00A7 E0                MOVX    A,@DPTR
00A8 3400              ADDC    A,#00H
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD 14                DEC     A
00AE 900000      R     MOV     DPTR,#Tx_Data+02H
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
00B2 0D                INC     R5
00B3 BD0001            CJNE    R5,#00H,?C0112
00B6 0C                INC     R4
00B7         ?C0112:
00B7 8098              SJMP    ?C0024
00B9         ?C0025:
                                           ; SOURCE LINE # 138
00B9 120000      R     LCALL   SendMessage
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
00BC         ?C0027:
00BC 22                RET     
             ; FUNCTION HandleModbusReadHoldingRegisters (END)

             ; FUNCTION HandleModbusWriteSingleCoil (BEGIN)
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 144
0000 900000      R     MOV     DPTR,#Rx_Data+02H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 7C00              MOV     R4,#00H
0009 2400              ADD     A,#00H
000B F500        R     MOV     startAddress+01H,A
000D EC                MOV     A,R4
000E 3E                ADDC    A,R6
000F F500        R     MOV     startAddress,A
                                           ; SOURCE LINE # 145
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 2400              ADD     A,#00H
0018 F500        R     MOV     value+01H,A
001A EC                MOV     A,R4
001B 3E                ADDC    A,R6
001C F500        R     MOV     value,A
                                           ; SOURCE LINE # 146
001E D3                SETB    C
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 103 

001F E500        R     MOV     A,startAddress+01H
0021 9400              SUBB    A,#00H
0023 E500        R     MOV     A,startAddress
0025 9420              SUBB    A,#020H
0027 4005              JC      ?C0028
                                           ; SOURCE LINE # 147
0029 7F02              MOV     R7,#02H
002B 020000      R     LJMP    _HandleModbusError
                                           ; SOURCE LINE # 148
002E         ?C0028:
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
002E 900000      R     MOV     DPTR,#Tx_Data+01H
0031 7405              MOV     A,#05H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
0034 900000      R     MOV     DPTR,#Tx_Data
0037 E500        R     MOV     A,ModbusSlaveAddress
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
003A 900000      R     MOV     DPTR,#Tx_Data+0102H
003D E4                CLR     A
003E F0                MOVX    @DPTR,A
003F A3                INC     DPTR
0040 7404              MOV     A,#04H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0043 900000      R     MOV     DPTR,#Rx_Data+02H
0046 E0                MOVX    A,@DPTR
0047 900000      R     MOV     DPTR,#Tx_Data+02H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
004B 900000      R     MOV     DPTR,#Rx_Data+03H
004E E0                MOVX    A,@DPTR
004F 900000      R     MOV     DPTR,#Tx_Data+03H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
0053 E500        R     MOV     A,value+01H
0055 4500        R     ORL     A,value
0057 7058              JNZ     ?C0030
                                           ; SOURCE LINE # 156
0059 E500        R     MOV     A,startAddress
005B C4                SWAP    A
005C F8                MOV     R0,A
005D 54F0              ANL     A,#0F0H
005F C8                XCH     A,R0
0060 68                XRL     A,R0
0061 FE                MOV     R6,A
0062 E500        R     MOV     A,startAddress+01H
0064 C4                SWAP    A
0065 540F              ANL     A,#0FH
0067 48                ORL     A,R0
0068 25E0              ADD     A,ACC
006A FF                MOV     R7,A
006B EE                MOV     A,R6
006C 33                RLC     A
006D FE                MOV     R6,A
006E 7400        E     MOV     A,#LOW NVRAM0
0070 2F                ADD     A,R7
0071 F582              MOV     DPL,A
0073 7400        E     MOV     A,#HIGH NVRAM0
0075 3E                ADDC    A,R6
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 104 

0076 F583              MOV     DPH,A
0078 C083              PUSH    DPH
007A C082              PUSH    DPL
007C E0                MOVX    A,@DPTR
007D FC                MOV     R4,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FD                MOV     R5,A
0081 E500        R     MOV     A,startAddress+01H
0083 540F              ANL     A,#0FH
0085 FF                MOV     R7,A
0086 7E00              MOV     R6,#00H
0088 7401              MOV     A,#01H
008A A807              MOV     R0,AR7
008C 08                INC     R0
008D 8005              SJMP    ?C0114
008F         ?C0113:
008F C3                CLR     C
0090 33                RLC     A
0091 CE                XCH     A,R6
0092 33                RLC     A
0093 CE                XCH     A,R6
0094         ?C0114:
0094 D8F9              DJNZ    R0,?C0113
0096 F4                CPL     A
0097 FF                MOV     R7,A
0098 EE                MOV     A,R6
0099 F4                CPL     A
009A 5C                ANL     A,R4
009B FE                MOV     R6,A
009C ED                MOV     A,R5
009D 5F                ANL     A,R7
009E FF                MOV     R7,A
009F D082              POP     DPL
00A1 D083              POP     DPH
00A3 EE                MOV     A,R6
00A4 F0                MOVX    @DPTR,A
00A5 A3                INC     DPTR
00A6 EF                MOV     A,R7
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
00A8 E4                CLR     A
00A9 900000      R     MOV     DPTR,#Tx_Data+04H
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
00AD A3                INC     DPTR
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
00AF 805F              SJMP    ?C0031
00B1         ?C0030:
                                           ; SOURCE LINE # 160
00B1 E4                CLR     A
00B2 B5005B      R     CJNE    A,value+01H,?C0031
00B5 E500        R     MOV     A,value
00B7 B4FF56            CJNE    A,#0FFH,?C0031
                                           ; SOURCE LINE # 161
00BA E500        R     MOV     A,startAddress
00BC C4                SWAP    A
00BD F8                MOV     R0,A
00BE 54F0              ANL     A,#0F0H
00C0 C8                XCH     A,R0
00C1 68                XRL     A,R0
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 105 

00C2 FE                MOV     R6,A
00C3 E500        R     MOV     A,startAddress+01H
00C5 C4                SWAP    A
00C6 540F              ANL     A,#0FH
00C8 48                ORL     A,R0
00C9 25E0              ADD     A,ACC
00CB FF                MOV     R7,A
00CC EE                MOV     A,R6
00CD 33                RLC     A
00CE FE                MOV     R6,A
00CF 7400        E     MOV     A,#LOW NVRAM0
00D1 2F                ADD     A,R7
00D2 F582              MOV     DPL,A
00D4 7400        E     MOV     A,#HIGH NVRAM0
00D6 3E                ADDC    A,R6
00D7 F583              MOV     DPH,A
00D9 C083              PUSH    DPH
00DB C082              PUSH    DPL
00DD E0                MOVX    A,@DPTR
00DE FC                MOV     R4,A
00DF A3                INC     DPTR
00E0 E0                MOVX    A,@DPTR
00E1 FD                MOV     R5,A
00E2 E500        R     MOV     A,startAddress+01H
00E4 540F              ANL     A,#0FH
00E6 FF                MOV     R7,A
00E7 7E00              MOV     R6,#00H
00E9 7401              MOV     A,#01H
00EB A807              MOV     R0,AR7
00ED 08                INC     R0
00EE 8005              SJMP    ?C0117
00F0         ?C0116:
00F0 C3                CLR     C
00F1 33                RLC     A
00F2 CE                XCH     A,R6
00F3 33                RLC     A
00F4 CE                XCH     A,R6
00F5         ?C0117:
00F5 D8F9              DJNZ    R0,?C0116
00F7 FF                MOV     R7,A
00F8 EC                MOV     A,R4
00F9 4E                ORL     A,R6
00FA FE                MOV     R6,A
00FB ED                MOV     A,R5
00FC 4F                ORL     A,R7
00FD FF                MOV     R7,A
00FE D082              POP     DPL
0100 D083              POP     DPH
0102 EE                MOV     A,R6
0103 F0                MOVX    @DPTR,A
0104 A3                INC     DPTR
0105 EF                MOV     A,R7
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
0107 900000      R     MOV     DPTR,#Tx_Data+04H
010A 74FF              MOV     A,#0FFH
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
010D E4                CLR     A
010E A3                INC     DPTR
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 106 

                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
0110         ?C0031:
                                           ; SOURCE LINE # 167
0110 120000      R     LCALL   SendMessage
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
0113         ?C0034:
0113 22                RET     
             ; FUNCTION HandleModbusWriteSingleCoil (END)

             ; FUNCTION HandleModbusWriteSingleRegister (BEGIN)
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 173
0000 900000      R     MOV     DPTR,#Rx_Data+02H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 7C00              MOV     R4,#00H
0009 2400              ADD     A,#00H
000B FF                MOV     R7,A
000C EC                MOV     A,R4
000D 3E                ADDC    A,R6
;---- Variable 'address' assigned to Register 'R4/R5' ----
000E AD07              MOV     R5,AR7
0010 FC                MOV     R4,A
                                           ; SOURCE LINE # 174
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 7A00              MOV     R2,#00H
0018 2400              ADD     A,#00H
001A FF                MOV     R7,A
001B EA                MOV     A,R2
001C 3E                ADDC    A,R6
001D FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 176
001E 900000      R     MOV     DPTR,#Tx_Data+01H
0021 7406              MOV     A,#06H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0024 900000      R     MOV     DPTR,#Tx_Data
0027 E500        R     MOV     A,ModbusSlaveAddress
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
002A 900000      R     MOV     DPTR,#Tx_Data+0102H
002D E4                CLR     A
002E F0                MOVX    @DPTR,A
002F A3                INC     DPTR
0030 7404              MOV     A,#04H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0033 C3                CLR     C
0034 EC                MOV     A,R4
0035 9402              SUBB    A,#02H
0037 4007              JC      ?C0035
                                           ; SOURCE LINE # 180
0039 7F03              MOV     R7,#03H
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 107 

003B 120000      R     LCALL   _HandleModbusError
                                           ; SOURCE LINE # 181
003E 8040              SJMP    ?C0036
0040         ?C0035:
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
0040 AA06              MOV     R2,AR6
0042 AB07              MOV     R3,AR7
0044 ED                MOV     A,R5
0045 25E0              ADD     A,ACC
0047 FF                MOV     R7,A
0048 EC                MOV     A,R4
0049 33                RLC     A
004A FE                MOV     R6,A
004B 7400        E     MOV     A,#LOW NVRAM0
004D 2F                ADD     A,R7
004E F582              MOV     DPL,A
0050 7400        E     MOV     A,#HIGH NVRAM0
0052 3E                ADDC    A,R6
0053 F583              MOV     DPH,A
0055 EA                MOV     A,R2
0056 F0                MOVX    @DPTR,A
0057 A3                INC     DPTR
0058 EB                MOV     A,R3
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
;---- Variable 'i' assigned to Register 'R6/R7' ----
005A E4                CLR     A
005B FF                MOV     R7,A
005C FE                MOV     R6,A
005D         ?C0037:
                                           ; SOURCE LINE # 186
005D 7400        R     MOV     A,#LOW Rx_Data+02H
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 7400        R     MOV     A,#HIGH Rx_Data+02H
0064 3E                ADDC    A,R6
0065 F583              MOV     DPH,A
0067 E0                MOVX    A,@DPTR
0068 FD                MOV     R5,A
0069 7400        R     MOV     A,#LOW Tx_Data+02H
006B 2F                ADD     A,R7
006C F582              MOV     DPL,A
006E 7400        R     MOV     A,#HIGH Tx_Data+02H
0070 3E                ADDC    A,R6
0071 F583              MOV     DPH,A
0073 ED                MOV     A,R5
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
0075 0F                INC     R7
0076 BF0001            CJNE    R7,#00H,?C0118
0079 0E                INC     R6
007A         ?C0118:
007A EF                MOV     A,R7
007B 6404              XRL     A,#04H
007D 4E                ORL     A,R6
007E 70DD              JNZ     ?C0037
                                           ; SOURCE LINE # 188
0080         ?C0036:
                                           ; SOURCE LINE # 189
0080 020000      R     LJMP    SendMessage
             ; FUNCTION HandleModbusWriteSingleRegister (END)
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 108 


             ; FUNCTION HandleModbusWriteMultipleCoils (BEGIN)
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 193
0000 E4                CLR     A
0001 F500        R     MOV     tempData,A
                                           ; SOURCE LINE # 195
0003 900000      R     MOV     DPTR,#Rx_Data+02H
0006 E0                MOVX    A,@DPTR
0007 FE                MOV     R6,A
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A 7C00              MOV     R4,#00H
000C 2400              ADD     A,#00H
000E FF                MOV     R7,A
000F EC                MOV     A,R4
0010 3E                ADDC    A,R6
;---- Variable 'startAddress' assigned to Register 'R4/R5' ----
0011 AD07              MOV     R5,AR7
0013 FC                MOV     R4,A
                                           ; SOURCE LINE # 196
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 F9                MOV     R1,A
001A 7A00              MOV     R2,#00H
001C 2400              ADD     A,#00H
001E F500        R     MOV     numberOfCoil+01H,A
0020 EA                MOV     A,R2
0021 3E                ADDC    A,R6
0022 F500        R     MOV     numberOfCoil,A
                                           ; SOURCE LINE # 197
0024 E500        R     MOV     A,numberOfCoil+01H
0026 2D                ADD     A,R5
0027 FF                MOV     R7,A
0028 E500        R     MOV     A,numberOfCoil
002A 3C                ADDC    A,R4
002B FE                MOV     R6,A
002C D3                SETB    C
002D EF                MOV     A,R7
002E 9400              SUBB    A,#00H
0030 EE                MOV     A,R6
0031 9420              SUBB    A,#020H
0033 4005              JC      ?C0041
                                           ; SOURCE LINE # 198
0035 7F02              MOV     R7,#02H
0037 020000      R     LJMP    _HandleModbusError
                                           ; SOURCE LINE # 199
003A         ?C0041:
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
003A AE00        R     MOV     R6,numberOfCoil
003C E500        R     MOV     A,numberOfCoil+01H
003E 7803              MOV     R0,#03H
0040         ?C0119:
0040 CE                XCH     A,R6
0041 C3                CLR     C
0042 13                RRC     A
0043 CE                XCH     A,R6
0044 13                RRC     A
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 109 

0045 D8F9              DJNZ    R0,?C0119
0047 F500        R     MOV     byteCount+01H,A
0049 8E00        R     MOV     byteCount,R6
                                           ; SOURCE LINE # 202
004B E500        R     MOV     A,numberOfCoil+01H
004D 5407              ANL     A,#07H
004F 6008              JZ      ?C0043
                                           ; SOURCE LINE # 203
0051 0500        R     INC     byteCount+01H
0053 E500        R     MOV     A,byteCount+01H
0055 7002              JNZ     ?C0120
0057 0500        R     INC     byteCount
0059         ?C0120:
                                           ; SOURCE LINE # 204
0059         ?C0043:
                                           ; SOURCE LINE # 205
0059 900000      R     MOV     DPTR,#Tx_Data+01H
005C 740F              MOV     A,#0FH
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
005F 900000      R     MOV     DPTR,#Tx_Data
0062 E500        R     MOV     A,ModbusSlaveAddress
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0065 900000      R     MOV     DPTR,#Tx_Data+0102H
0068 E4                CLR     A
0069 F0                MOVX    @DPTR,A
006A A3                INC     DPTR
006B 7404              MOV     A,#04H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
006E 900000      R     MOV     DPTR,#Rx_Data+02H
0071 E0                MOVX    A,@DPTR
0072 900000      R     MOV     DPTR,#Tx_Data+02H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
0076 900000      R     MOV     DPTR,#Rx_Data+03H
0079 E0                MOVX    A,@DPTR
007A 900000      R     MOV     DPTR,#Tx_Data+03H
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
007E 900000      R     MOV     DPTR,#Rx_Data+04H
0081 E0                MOVX    A,@DPTR
0082 900000      R     MOV     DPTR,#Tx_Data+04H
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0086 A3                INC     DPTR
0087 E9                MOV     A,R1
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0089 8C00        R     MOV     tempAddr,R4
008B 8D00        R     MOV     tempAddr+01H,R5
                                           ; SOURCE LINE # 213
008D E4                CLR     A
008E F500        R     MOV     i,A
0090 F500        R     MOV     i+01H,A
0092         ?C0044:
0092 C3                CLR     C
0093 E500        R     MOV     A,i+01H
0095 9500        R     SUBB    A,byteCount+01H
0097 E500        R     MOV     A,i
0099 9500        R     SUBB    A,byteCount
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 110 

009B 4003              JC      $ + 5H
009D 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 214
00A0 E4                CLR     A
00A1 F500        R     MOV     j,A
00A3 F500        R     MOV     j+01H,A
00A5         ?C0047:
                                           ; SOURCE LINE # 215
00A5 AF00        R     MOV     R7,j+01H
00A7 7400        R     MOV     A,#LOW Rx_Data+07H
00A9 2500        R     ADD     A,i+01H
00AB F582              MOV     DPL,A
00AD 7400        R     MOV     A,#HIGH Rx_Data+07H
00AF 3500        R     ADDC    A,i
00B1 F583              MOV     DPH,A
00B3 E0                MOVX    A,@DPTR
00B4 FE                MOV     R6,A
00B5 A807              MOV     R0,AR7
00B7 08                INC     R0
00B8 8002              SJMP    ?C0122
00BA         ?C0121:
00BA C3                CLR     C
00BB 13                RRC     A
00BC         ?C0122:
00BC D8FC              DJNZ    R0,?C0121
00BE 5401              ANL     A,#01H
00C0 F500        R     MOV     tempData,A
                                           ; SOURCE LINE # 216
00C2 6045              JZ      ?C0050
                                           ; SOURCE LINE # 217
00C4 E500        R     MOV     A,tempAddr
00C6 C4                SWAP    A
00C7 F8                MOV     R0,A
00C8 54F0              ANL     A,#0F0H
00CA C8                XCH     A,R0
00CB 68                XRL     A,R0
00CC FE                MOV     R6,A
00CD E500        R     MOV     A,tempAddr+01H
00CF C4                SWAP    A
00D0 540F              ANL     A,#0FH
00D2 48                ORL     A,R0
00D3 25E0              ADD     A,ACC
00D5 FF                MOV     R7,A
00D6 EE                MOV     A,R6
00D7 33                RLC     A
00D8 FE                MOV     R6,A
00D9 7400        E     MOV     A,#LOW NVRAM0
00DB 2F                ADD     A,R7
00DC F582              MOV     DPL,A
00DE 7400        E     MOV     A,#HIGH NVRAM0
00E0 3E                ADDC    A,R6
00E1 F583              MOV     DPH,A
00E3 C083              PUSH    DPH
00E5 C082              PUSH    DPL
00E7 E0                MOVX    A,@DPTR
00E8 FC                MOV     R4,A
00E9 A3                INC     DPTR
00EA E0                MOVX    A,@DPTR
00EB FD                MOV     R5,A
00EC E500        R     MOV     A,tempAddr+01H
00EE 540F              ANL     A,#0FH
00F0 FF                MOV     R7,A
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 111 

00F1 7E00              MOV     R6,#00H
00F3 7401              MOV     A,#01H
00F5 A807              MOV     R0,AR7
00F7 08                INC     R0
00F8 8005              SJMP    ?C0124
00FA         ?C0123:
00FA C3                CLR     C
00FB 33                RLC     A
00FC CE                XCH     A,R6
00FD 33                RLC     A
00FE CE                XCH     A,R6
00FF         ?C0124:
00FF D8F9              DJNZ    R0,?C0123
0101 FF                MOV     R7,A
0102 EC                MOV     A,R4
0103 4E                ORL     A,R6
0104 FE                MOV     R6,A
0105 ED                MOV     A,R5
0106 4F                ORL     A,R7
                                           ; SOURCE LINE # 218
0107 8045              SJMP    ?C0132
0109         ?C0050:
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0109 E500        R     MOV     A,tempAddr
010B C4                SWAP    A
010C F8                MOV     R0,A
010D 54F0              ANL     A,#0F0H
010F C8                XCH     A,R0
0110 68                XRL     A,R0
0111 FE                MOV     R6,A
0112 E500        R     MOV     A,tempAddr+01H
0114 C4                SWAP    A
0115 540F              ANL     A,#0FH
0117 48                ORL     A,R0
0118 25E0              ADD     A,ACC
011A FF                MOV     R7,A
011B EE                MOV     A,R6
011C 33                RLC     A
011D FE                MOV     R6,A
011E 7400        E     MOV     A,#LOW NVRAM0
0120 2F                ADD     A,R7
0121 F582              MOV     DPL,A
0123 7400        E     MOV     A,#HIGH NVRAM0
0125 3E                ADDC    A,R6
0126 F583              MOV     DPH,A
0128 C083              PUSH    DPH
012A C082              PUSH    DPL
012C E0                MOVX    A,@DPTR
012D FC                MOV     R4,A
012E A3                INC     DPTR
012F E0                MOVX    A,@DPTR
0130 FD                MOV     R5,A
0131 E500        R     MOV     A,tempAddr+01H
0133 540F              ANL     A,#0FH
0135 FF                MOV     R7,A
0136 7E00              MOV     R6,#00H
0138 7401              MOV     A,#01H
013A A807              MOV     R0,AR7
013C 08                INC     R0
013D 8005              SJMP    ?C0126
013F         ?C0125:
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 112 

013F C3                CLR     C
0140 33                RLC     A
0141 CE                XCH     A,R6
0142 33                RLC     A
0143 CE                XCH     A,R6
0144         ?C0126:
0144 D8F9              DJNZ    R0,?C0125
0146 F4                CPL     A
0147 FF                MOV     R7,A
0148 EE                MOV     A,R6
0149 F4                CPL     A
014A 5C                ANL     A,R4
014B FE                MOV     R6,A
014C ED                MOV     A,R5
014D 5F                ANL     A,R7
014E         ?C0132:
014E FF                MOV     R7,A
014F D082              POP     DPL
0151 D083              POP     DPH
0153 EE                MOV     A,R6
0154 F0                MOVX    @DPTR,A
0155 A3                INC     DPTR
0156 EF                MOV     A,R7
0157 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0158         ?C0051:
                                           ; SOURCE LINE # 222
0158 0500        R     INC     tempAddr+01H
015A E500        R     MOV     A,tempAddr+01H
015C 7002              JNZ     ?C0127
015E 0500        R     INC     tempAddr
0160         ?C0127:
                                           ; SOURCE LINE # 223
0160 E500        R     MOV     A,numberOfCoil+01H
0162 1500        R     DEC     numberOfCoil+01H
0164 7002              JNZ     ?C0128
0166 1500        R     DEC     numberOfCoil
0168         ?C0128:
                                           ; SOURCE LINE # 224
0168 E500        R     MOV     A,numberOfCoil+01H
016A 4500        R     ORL     A,numberOfCoil
016C 6011              JZ      ?C0046
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
016E 0500        R     INC     j+01H
0170 E500        R     MOV     A,j+01H
0172 7002              JNZ     ?C0129
0174 0500        R     INC     j
0176         ?C0129:
0176 6408              XRL     A,#08H
0178 4500        R     ORL     A,j
017A 6003              JZ      $ + 5H
017C 020000      R     LJMP    ?C0047
                                           ; SOURCE LINE # 229
017F         ?C0046:
017F 0500        R     INC     i+01H
0181 E500        R     MOV     A,i+01H
0183 7002              JNZ     ?C0130
0185 0500        R     INC     i
0187         ?C0130:
0187 020000      R     LJMP    ?C0044
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 113 

018A         ?C0045:
                                           ; SOURCE LINE # 230
018A 120000      R     LCALL   SendMessage
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
018D         ?C0053:
018D 22                RET     
             ; FUNCTION HandleModbusWriteMultipleCoils (END)

             ; FUNCTION HandleModbusWriteMultipleRegisters (BEGIN)
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 238
0000 900000      R     MOV     DPTR,#Rx_Data+02H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 7C00              MOV     R4,#00H
0009 2400              ADD     A,#00H
000B F500        R     MOV     startAddress+01H,A
000D EC                MOV     A,R4
000E 3E                ADDC    A,R6
000F F500        R     MOV     startAddress,A
                                           ; SOURCE LINE # 239
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 F9                MOV     R1,A
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FD                MOV     R5,A
0018 7A00              MOV     R2,#00H
001A 2400              ADD     A,#00H
001C F500        R     MOV     numberOfRegisters+01H,A
001E EA                MOV     A,R2
001F 3E                ADDC    A,R6
0020 F500        R     MOV     numberOfRegisters,A
                                           ; SOURCE LINE # 240
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 F500        R     MOV     byteCount,A
                                           ; SOURCE LINE # 242
0026 E500        R     MOV     A,startAddress+01H
0028 2500        R     ADD     A,numberOfRegisters+01H
002A FF                MOV     R7,A
002B E500        R     MOV     A,startAddress
002D 3500        R     ADDC    A,numberOfRegisters
002F FE                MOV     R6,A
0030 D3                SETB    C
0031 EF                MOV     A,R7
0032 9400              SUBB    A,#00H
0034 EE                MOV     A,R6
0035 9402              SUBB    A,#02H
0037 4005              JC      ?C0054
                                           ; SOURCE LINE # 243
0039 7F03              MOV     R7,#03H
003B 020000      R     LJMP    _HandleModbusError
                                           ; SOURCE LINE # 244
003E         ?C0054:
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 247
003E 900000      R     MOV     DPTR,#Tx_Data+01H
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 114 

0041 7410              MOV     A,#010H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0044 900000      R     MOV     DPTR,#Tx_Data
0047 E500        R     MOV     A,ModbusSlaveAddress
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
004A 900000      R     MOV     DPTR,#Tx_Data+0102H
004D E4                CLR     A
004E F0                MOVX    @DPTR,A
004F A3                INC     DPTR
0050 7404              MOV     A,#04H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
0053 900000      R     MOV     DPTR,#Rx_Data+02H
0056 E0                MOVX    A,@DPTR
0057 900000      R     MOV     DPTR,#Tx_Data+02H
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
005B 900000      R     MOV     DPTR,#Rx_Data+03H
005E E0                MOVX    A,@DPTR
005F 900000      R     MOV     DPTR,#Tx_Data+03H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0063 A3                INC     DPTR
0064 E9                MOV     A,R1
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0066 A3                INC     DPTR
0067 ED                MOV     A,R5
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
;---- Variable 'i' assigned to Register 'R5' ----
0069 E4                CLR     A
006A FD                MOV     R5,A
006B         ?C0056:
006B ED                MOV     A,R5
006C C3                CLR     C
006D 9500        R     SUBB    A,numberOfRegisters+01H
006F E4                CLR     A
0070 9500        R     SUBB    A,numberOfRegisters
0072 5050              JNC     ?C0057
                                           ; SOURCE LINE # 256
0074 75F002            MOV     B,#02H
0077 ED                MOV     A,R5
0078 A4                MUL     AB
0079 2400        R     ADD     A,#LOW Rx_Data+07H
007B F582              MOV     DPL,A
007D E5F0              MOV     A,B
007F 3400        R     ADDC    A,#HIGH Rx_Data+07H
0081 F583              MOV     DPH,A
0083 E0                MOVX    A,@DPTR
0084 FE                MOV     R6,A
0085 75F002            MOV     B,#02H
0088 ED                MOV     A,R5
0089 A4                MUL     AB
008A 2400        R     ADD     A,#LOW Rx_Data+08H
008C F582              MOV     DPL,A
008E E5F0              MOV     A,B
0090 3400        R     ADDC    A,#HIGH Rx_Data+08H
0092 F583              MOV     DPH,A
0094 E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 115 

0095 7A00              MOV     R2,#00H
0097 2400              ADD     A,#00H
0099 F500        R     MOV     value+01H,A
009B EA                MOV     A,R2
009C 3E                ADDC    A,R6
009D F500        R     MOV     value,A
                                           ; SOURCE LINE # 257
009F FA                MOV     R2,A
00A0 ED                MOV     A,R5
00A1 7E00              MOV     R6,#00H
00A3 2500        R     ADD     A,startAddress+01H
00A5 FF                MOV     R7,A
00A6 EE                MOV     A,R6
00A7 3500        R     ADDC    A,startAddress
00A9 FE                MOV     R6,A
00AA EF                MOV     A,R7
00AB 25E0              ADD     A,ACC
00AD FF                MOV     R7,A
00AE EE                MOV     A,R6
00AF 33                RLC     A
00B0 FE                MOV     R6,A
00B1 7400        E     MOV     A,#LOW NVRAM0
00B3 2F                ADD     A,R7
00B4 F582              MOV     DPL,A
00B6 7400        E     MOV     A,#HIGH NVRAM0
00B8 3E                ADDC    A,R6
00B9 F583              MOV     DPH,A
00BB EA                MOV     A,R2
00BC F0                MOVX    @DPTR,A
00BD A3                INC     DPTR
00BE E500        R     MOV     A,value+01H
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
00C1 0D                INC     R5
00C2 80A7              SJMP    ?C0056
00C4         ?C0057:
                                           ; SOURCE LINE # 259
00C4 120000      R     LCALL   SendMessage
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
00C7         ?C0059:
00C7 22                RET     
             ; FUNCTION HandleModbusWriteMultipleRegisters (END)

             ; FUNCTION RxDataAvailable (BEGIN)
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
;---- Variable 'Result' assigned to Register 'R7' ----
0000 AF00        R     MOV     R7,Rx_Data_Available
                                           ; SOURCE LINE # 264
0002 E4                CLR     A
0003 F500        R     MOV     Rx_Data_Available,A
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0005 22                RET     
             ; FUNCTION RxDataAvailable (END)

             ; FUNCTION CheckRxTimeout (BEGIN)
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 269
0000 C3                CLR     C
0001 E500        R     MOV     A,modbusTimerValue
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 116 

0003 9401              SUBB    A,#01H
0005 400A              JC      ?C0061
                                           ; SOURCE LINE # 270
0007 E4                CLR     A
0008 F500        R     MOV     modbusTimerValue,A
000A F500        R     MOV     modbusTimerValue+01H,A
                                           ; SOURCE LINE # 271
000C F500        R     MOV     modbusReceiveCounter,A
                                           ; SOURCE LINE # 272
000E 7F01              MOV     R7,#01H
0010 22                RET     
                                           ; SOURCE LINE # 273
0011         ?C0061:
                                           ; SOURCE LINE # 274
0011 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 275
0013         ?C0062:
0013 22                RET     
             ; FUNCTION CheckRxTimeout (END)

             ; FUNCTION checkModbusBufferComplete (BEGIN)
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
0000 E4                CLR     A
0001 F500        R     MOV     expectedReceiveCount+03H,A
0003 F500        R     MOV     expectedReceiveCount+02H,A
0005 F500        R     MOV     expectedReceiveCount+01H,A
0007 F500        R     MOV     expectedReceiveCount,A
                                           ; SOURCE LINE # 278
0009 AF00        R     MOV     R7,modbusReceiveCounter
000B D3                SETB    C
000C EF                MOV     A,R7
000D 9404              SUBB    A,#04H
000F 7480              MOV     A,#080H
0011 9480              SUBB    A,#080H
0013 405E              JC      ?C0063
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0015 900000      R     MOV     DPTR,#modbusReceiveBuffer
0018 E0                MOVX    A,@DPTR
0019 6500        R     XRL     A,ModbusSlaveAddress
001B 7050              JNZ     ?C0064
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F 6401              XRL     A,#01H
0021 6019              JZ      ?C0066
0023 E0                MOVX    A,@DPTR
0024 6402              XRL     A,#02H
0026 6014              JZ      ?C0066
0028 E0                MOVX    A,@DPTR
0029 6403              XRL     A,#03H
002B 600F              JZ      ?C0066
002D E0                MOVX    A,@DPTR
002E 6404              XRL     A,#04H
0030 600A              JZ      ?C0066
0032 E0                MOVX    A,@DPTR
0033 6405              XRL     A,#05H
0035 6005              JZ      ?C0066
0037 E0                MOVX    A,@DPTR
0038 6406              XRL     A,#06H
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 117 

003A 7008              JNZ     ?C0065
003C         ?C0066:
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
003C E4                CLR     A
003D 750008      R     MOV     expectedReceiveCount+03H,#08H
0040 F500        R     MOV     expectedReceiveCount+02H,A
                                           ; SOURCE LINE # 285
0042 801E              SJMP    ?C0133
0044         ?C0065:
                                           ; SOURCE LINE # 286
0044 900000      R     MOV     DPTR,#modbusReceiveBuffer+01H
0047 E0                MOVX    A,@DPTR
0048 640F              XRL     A,#0FH
004A 6005              JZ      ?C0069
004C E0                MOVX    A,@DPTR
004D 6410              XRL     A,#010H
004F 7017              JNZ     ?C0068
0051         ?C0069:
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
0051 900000      R     MOV     DPTR,#modbusReceiveBuffer+06H
0054 E0                MOVX    A,@DPTR
0055 2409              ADD     A,#09H
0057 FF                MOV     R7,A
0058 E4                CLR     A
0059 33                RLC     A
005A FE                MOV     R6,A
005B 33                RLC     A
005C 95E0              SUBB    A,ACC
005E 8F00        R     MOV     expectedReceiveCount+03H,R7
0060 8E00        R     MOV     expectedReceiveCount+02H,R6
0062         ?C0133:
0062 F500        R     MOV     expectedReceiveCount+01H,A
0064 F500        R     MOV     expectedReceiveCount,A
                                           ; SOURCE LINE # 289
0066 800E              SJMP    ?C0073
0068         ?C0068:
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
0068 E4                CLR     A
0069 F500        R     MOV     modbusReceiveCounter,A
                                           ; SOURCE LINE # 292
006B FF                MOV     R7,A
006C 22                RET     
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
006D         ?C0064:
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
006D E4                CLR     A
006E F500        R     MOV     modbusReceiveCounter,A
                                           ; SOURCE LINE # 298
0070 7F01              MOV     R7,#01H
0072 22                RET     
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
0073         ?C0063:
                                           ; SOURCE LINE # 302
0073 7F02              MOV     R7,#02H
0075 22                RET     
0076         ?C0073:
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 118 

                                           ; SOURCE LINE # 304
0076 AF00        R     MOV     R7,modbusReceiveCounter
0078 E4                CLR     A
0079 FC                MOV     R4,A
007A FD                MOV     R5,A
007B FE                MOV     R6,A
007C AB00        R     MOV     R3,expectedReceiveCount+03H
007E AA00        R     MOV     R2,expectedReceiveCount+02H
0080 A900        R     MOV     R1,expectedReceiveCount+01H
0082 A800        R     MOV     R0,expectedReceiveCount
0084 C3                CLR     C
0085 120000      E     LCALL   ?C?SLCMP
0088 7003              JNZ     ?C0074
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
008A 7F03              MOV     R7,#03H
008C 22                RET     
                                           ; SOURCE LINE # 307
008D         ?C0074:
                                           ; SOURCE LINE # 309
008D 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 310
008F         ?C0071:
008F 22                RET     
             ; FUNCTION checkModbusBufferComplete (END)

             ; FUNCTION RxRTU (BEGIN)
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 313
;---- Variable 'receiveBufferControl' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 314
0002 120000      R     LCALL   checkModbusBufferComplete
                                           ; SOURCE LINE # 315
0005 EF                MOV     A,R7
0006 6403              XRL     A,#03H
0008 7071              JNZ     ?C0075
                                           ; SOURCE LINE # 316
000A 900000      R     MOV     DPTR,#modbusReceiveBuffer
000D E0                MOVX    A,@DPTR
000E 900000      R     MOV     DPTR,#Rx_Data
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
0012 E4                CLR     A
0013 7500FF      R     MOV     Rx_CRC16+03H,#0FFH
0016 7500FF      R     MOV     Rx_CRC16+02H,#0FFH
0019 F500        R     MOV     Rx_CRC16+01H,A
001B F500        R     MOV     Rx_CRC16,A
                                           ; SOURCE LINE # 318
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 7B00              MOV     R3,#00H
0021 7A00        R     MOV     R2,#HIGH Rx_CRC16
0023 7900        R     MOV     R1,#LOW Rx_CRC16
0025 120000      R     LCALL   _modbusCrc16
                                           ; SOURCE LINE # 319
0028 900000      R     MOV     DPTR,#modbusReceiveBuffer+01H
002B E0                MOVX    A,@DPTR
002C 900000      R     MOV     DPTR,#Rx_Data+01H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 320
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 119 

0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 7B00              MOV     R3,#00H
0034 7A00        R     MOV     R2,#HIGH Rx_CRC16
0036 7900        R     MOV     R1,#LOW Rx_CRC16
0038 120000      R     LCALL   _modbusCrc16
                                           ; SOURCE LINE # 322
003B E4                CLR     A
003C 900000      R     MOV     DPTR,#Rx_Data+0102H
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0042 750002      R     MOV     i,#02H
0045         ?C0076:
0045 E500        R     MOV     A,i
0047 C3                CLR     C
0048 9500        R     SUBB    A,modbusReceiveCounter
004A 5029              JNC     ?C0077
                                           ; SOURCE LINE # 325
004C 7400        R     MOV     A,#LOW modbusReceiveBuffer
004E 2500        R     ADD     A,i
0050 F582              MOV     DPL,A
0052 E4                CLR     A
0053 3400        R     ADDC    A,#HIGH modbusReceiveBuffer
0055 F583              MOV     DPH,A
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 900000      R     MOV     DPTR,#Rx_Data+0102H
005C E4                CLR     A
005D 75F001            MOV     B,#01H
0060 120000      E     LCALL   ?C?ILDIX
0063 FC                MOV     R4,A
0064 7400        R     MOV     A,#LOW Rx_Data+02H
0066 25F0              ADD     A,B
0068 F582              MOV     DPL,A
006A 7400        R     MOV     A,#HIGH Rx_Data+02H
006C 3C                ADDC    A,R4
006D F583              MOV     DPH,A
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
0071 0500        R     INC     i
0073 80D0              SJMP    ?C0076
0075         ?C0077:
                                           ; SOURCE LINE # 327
0075 750002      R     MOV     Rx_State,#02H
                                           ; SOURCE LINE # 329
0078 E4                CLR     A
0079 F500        R     MOV     modbusReceiveCounter,A
                                           ; SOURCE LINE # 330
007B         ?C0075:
                                           ; SOURCE LINE # 332
007B 120000      R     LCALL   CheckRxTimeout
                                           ; SOURCE LINE # 334
007E E500        R     MOV     A,Rx_State
0080 6402              XRL     A,#02H
0082 6003              JZ      $ + 5H
0084 020000      R     LJMP    ?C0084
0087 C3                CLR     C
0088 900000      R     MOV     DPTR,#Rx_Data+0103H
008B E0                MOVX    A,@DPTR
008C 9402              SUBB    A,#02H
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 120 

008E 900000      R     MOV     DPTR,#Rx_Data+0102H
0091 E0                MOVX    A,@DPTR
0092 9400              SUBB    A,#00H
0094 5003              JNC     $ + 5H
0096 020000      R     LJMP    ?C0084
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 337
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B 24FE              ADD     A,#0FEH
009D F0                MOVX    @DPTR,A
009E 900000      R     MOV     DPTR,#Rx_Data+0102H
00A1 E0                MOVX    A,@DPTR
00A2 34FF              ADDC    A,#0FFH
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
00A5 E4                CLR     A
00A6 F500        R     MOV     i,A
00A8         ?C0080:
00A8 D3                SETB    C
00A9 900000      R     MOV     DPTR,#Rx_Data+0103H
00AC E0                MOVX    A,@DPTR
00AD 9500        R     SUBB    A,i
00AF 900000      R     MOV     DPTR,#Rx_Data+0102H
00B2 E0                MOVX    A,@DPTR
00B3 9400              SUBB    A,#00H
00B5 401A              JC      ?C0081
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
00B7 7400        R     MOV     A,#LOW Rx_Data+02H
00B9 2500        R     ADD     A,i
00BB F582              MOV     DPL,A
00BD E4                CLR     A
00BE 3400        R     ADDC    A,#HIGH Rx_Data+02H
00C0 F583              MOV     DPH,A
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 7B00              MOV     R3,#00H
00C6 7A00        R     MOV     R2,#HIGH Rx_CRC16
00C8 7900        R     MOV     R1,#LOW Rx_CRC16
00CA 120000      R     LCALL   _modbusCrc16
                                           ; SOURCE LINE # 341
00CD 0500        R     INC     i
00CF 80D7              SJMP    ?C0080
00D1         ?C0081:
                                           ; SOURCE LINE # 343
00D1 900000      R     MOV     DPTR,#Rx_Data+0102H
00D4 E0                MOVX    A,@DPTR
00D5 FE                MOV     R6,A
00D6 A3                INC     DPTR
00D7 E0                MOVX    A,@DPTR
00D8 2400        R     ADD     A,#LOW Rx_Data+03H
00DA F582              MOV     DPL,A
00DC 7400        R     MOV     A,#HIGH Rx_Data+03H
00DE 3E                ADDC    A,R6
00DF F583              MOV     DPH,A
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 E4                CLR     A
00E4 FC                MOV     R4,A
00E5 FD                MOV     R5,A
00E6 FE                MOV     R6,A
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 121 

00E7 7808              MOV     R0,#08H
00E9 120000      E     LCALL   ?C?LSHL
00EC A804              MOV     R0,AR4
00EE A905              MOV     R1,AR5
00F0 AA06              MOV     R2,AR6
00F2 AB07              MOV     R3,AR7
00F4 900000      R     MOV     DPTR,#Rx_Data+0102H
00F7 E0                MOVX    A,@DPTR
00F8 FE                MOV     R6,A
00F9 A3                INC     DPTR
00FA E0                MOVX    A,@DPTR
00FB 2400        R     ADD     A,#LOW Rx_Data+02H
00FD F582              MOV     DPL,A
00FF 7400        R     MOV     A,#HIGH Rx_Data+02H
0101 3E                ADDC    A,R6
0102 F583              MOV     DPH,A
0104 E0                MOVX    A,@DPTR
0105 FF                MOV     R7,A
0106 E4                CLR     A
0107 FC                MOV     R4,A
0108 FD                MOV     R5,A
0109 FE                MOV     R6,A
010A EB                MOV     A,R3
010B 2F                ADD     A,R7
010C FF                MOV     R7,A
010D EE                MOV     A,R6
010E 3A                ADDC    A,R2
010F FE                MOV     R6,A
0110 ED                MOV     A,R5
0111 39                ADDC    A,R1
0112 FD                MOV     R5,A
0113 EC                MOV     A,R4
0114 38                ADDC    A,R0
0115 FC                MOV     R4,A
0116 AB00        R     MOV     R3,Rx_CRC16+03H
0118 AA00        R     MOV     R2,Rx_CRC16+02H
011A A900        R     MOV     R1,Rx_CRC16+01H
011C A800        R     MOV     R0,Rx_CRC16
011E C3                CLR     C
011F 120000      E     LCALL   ?C?ULCMP
0122 7003              JNZ     ?C0083
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 346
0124 750001      R     MOV     Rx_Data_Available,#01H
                                           ; SOURCE LINE # 347
0127         ?C0083:
                                           ; SOURCE LINE # 349
0127 E4                CLR     A
0128 F500        R     MOV     Rx_State,A
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
012A         ?C0084:
012A 22                RET     
             ; FUNCTION RxRTU (END)

             ; FUNCTION TxRTU (BEGIN)
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0000 E4                CLR     A
0001 7500FF      R     MOV     Tx_CRC16+03H,#0FFH
0004 7500FF      R     MOV     Tx_CRC16+02H,#0FFH
0007 F500        R     MOV     Tx_CRC16+01H,A
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 122 

0009 F500        R     MOV     Tx_CRC16,A
                                           ; SOURCE LINE # 354
000B F500        R     MOV     Tx_Buf_Size+03H,A
000D F500        R     MOV     Tx_Buf_Size+02H,A
000F F500        R     MOV     Tx_Buf_Size+01H,A
0011 F500        R     MOV     Tx_Buf_Size,A
                                           ; SOURCE LINE # 355
0013 900000      R     MOV     DPTR,#Tx_Data
                                           ; SOURCE LINE # 356
0016 120000      R     LCALL   L?0134
                                           ; SOURCE LINE # 357
0019 900000      R     MOV     DPTR,#Tx_Data+01H
                                           ; SOURCE LINE # 358
001C 120000      R     LCALL   L?0134
                                           ; SOURCE LINE # 359
001F E4                CLR     A
0020 F500        R     MOV     Tx_Current+03H,A
0022 F500        R     MOV     Tx_Current+02H,A
0024 F500        R     MOV     Tx_Current+01H,A
0026 F500        R     MOV     Tx_Current,A
0028         ?C0085:
0028 900000      R     MOV     DPTR,#Tx_Data+0102H
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 E4                CLR     A
0031 FC                MOV     R4,A
0032 FD                MOV     R5,A
0033 AB00        R     MOV     R3,Tx_Current+03H
0035 AA00        R     MOV     R2,Tx_Current+02H
0037 A900        R     MOV     R1,Tx_Current+01H
0039 A800        R     MOV     R0,Tx_Current
003B C3                CLR     C
003C 120000      E     LCALL   ?C?ULCMP
003F 5043              JNC     ?C0086
                                           ; SOURCE LINE # 360
0041 7400        R     MOV     A,#LOW Tx_Data+02H
0043 2B                ADD     A,R3
0044 F582              MOV     DPL,A
0046 E4                CLR     A
0047 3400        R     ADDC    A,#HIGH Tx_Data+02H
0049 F583              MOV     DPH,A
004B E0                MOVX    A,@DPTR
004C FA                MOV     R2,A
004D 7800        R     MOV     R0,#LOW Tx_Buf_Size
004F 120000      E     LCALL   ?C?LLDIIDATA1
0052 7400        R     MOV     A,#LOW Tx_Buf
0054 2F                ADD     A,R7
0055 F582              MOV     DPL,A
0057 7400        R     MOV     A,#HIGH Tx_Buf
0059 3E                ADDC    A,R6
005A F583              MOV     DPH,A
005C EA                MOV     A,R2
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
005E 7400        R     MOV     A,#LOW Tx_Data+02H
0060 2B                ADD     A,R3
0061 F582              MOV     DPL,A
0063 E4                CLR     A
0064 3400        R     ADDC    A,#HIGH Tx_Data+02H
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 123 

0066 F583              MOV     DPH,A
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A 120000      R     LCALL   L?0135
                                           ; SOURCE LINE # 362
006D E500        R     MOV     A,Tx_Current+03H
006F 2401              ADD     A,#01H
0071 F500        R     MOV     Tx_Current+03H,A
0073 E4                CLR     A
0074 3500        R     ADDC    A,Tx_Current+02H
0076 F500        R     MOV     Tx_Current+02H,A
0078 E4                CLR     A
0079 3500        R     ADDC    A,Tx_Current+01H
007B F500        R     MOV     Tx_Current+01H,A
007D E4                CLR     A
007E 3500        R     ADDC    A,Tx_Current
0080 F500        R     MOV     Tx_Current,A
0082 80A4              SJMP    ?C0085
0084         ?C0086:
                                           ; SOURCE LINE # 363
0084 E500        R     MOV     A,Tx_CRC16+03H
0086 FF                MOV     R7,A
0087 E4                CLR     A
0088 AB07              MOV     R3,AR7
008A 7800        R     MOV     R0,#LOW Tx_Buf_Size
008C 120000      E     LCALL   ?C?LLDIIDATA1
008F 7400        R     MOV     A,#LOW Tx_Buf
0091 2F                ADD     A,R7
0092 F582              MOV     DPL,A
0094 7400        R     MOV     A,#HIGH Tx_Buf
0096 3E                ADDC    A,R6
0097 F583              MOV     DPH,A
0099 EB                MOV     A,R3
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
009B E4                CLR     A
009C FF                MOV     R7,A
009D E500        R     MOV     A,Tx_CRC16+02H
009F FE                MOV     R6,A
00A0 E4                CLR     A
00A1 FD                MOV     R5,A
00A2 FC                MOV     R4,A
00A3 7808              MOV     R0,#08H
00A5 120000      E     LCALL   ?C?ULSHR
00A8 AB07              MOV     R3,AR7
00AA 7800        R     MOV     R0,#LOW Tx_Buf_Size
00AC 120000      E     LCALL   ?C?LLDIIDATA1
00AF 7400        R     MOV     A,#LOW Tx_Buf
00B1 2F                ADD     A,R7
00B2 F582              MOV     DPL,A
00B4 7400        R     MOV     A,#HIGH Tx_Buf
00B6 3E                ADDC    A,R6
00B7 F583              MOV     DPH,A
00B9 EB                MOV     A,R3
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
00BB 120000      R     LCALL   DoSlaveTX
                                           ; SOURCE LINE # 366
00BE E4                CLR     A
00BF F500        R     MOV     Tx_State,A
                                           ; SOURCE LINE # 367
00C1 22                RET     
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 124 

             ; FUNCTION TxRTU (END)

             ; FUNCTION modbusPorcess (BEGIN)
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0000 E500        R     MOV     A,Tx_State
0002 6003              JZ      ?C0089
                                           ; SOURCE LINE # 370
0004 120000      R     LCALL   TxRTU
                                           ; SOURCE LINE # 371
0007         ?C0089:
                                           ; SOURCE LINE # 372
0007 120000      R     LCALL   RxRTU
                                           ; SOURCE LINE # 373
000A 120000      R     LCALL   RxDataAvailable
000D EF                MOV     A,R7
000E 6037              JZ      ?C0100
                                           ; SOURCE LINE # 374
0010 900000      R     MOV     DPTR,#Rx_Data
0013 E0                MOVX    A,@DPTR
0014 6500        R     XRL     A,ModbusSlaveAddress
0016 702F              JNZ     ?C0100
                                           ; SOURCE LINE # 375
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A 24FD              ADD     A,#0FDH
001C 6015              JZ      ?C0094
001E 24FE              ADD     A,#0FEH
0020 6014              JZ      ?C0095
0022 14                DEC     A
0023 6014              JZ      ?C0096
0025 24F7              ADD     A,#0F7H
0027 6013              JZ      ?C0097
0029 14                DEC     A
002A 6013              JZ      ?C0098
002C 240F              ADD     A,#0FH
002E 7012              JNZ     ?C0099
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
0030         ?C0093:
                                           ; SOURCE LINE # 378
0030 020000      R     LJMP    HandleModbusReadCoils
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
0033         ?C0094:
                                           ; SOURCE LINE # 382
0033 020000      R     LJMP    HandleModbusReadHoldingRegisters
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
0036         ?C0095:
                                           ; SOURCE LINE # 386
0036 020000      R     LJMP    HandleModbusWriteSingleCoil
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
0039         ?C0096:
                                           ; SOURCE LINE # 390
0039 020000      R     LJMP    HandleModbusWriteSingleRegister
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 125 

                                           ; SOURCE LINE # 393
003C         ?C0097:
                                           ; SOURCE LINE # 394
003C 020000      R     LJMP    HandleModbusWriteMultipleCoils
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
003F         ?C0098:
                                           ; SOURCE LINE # 398
003F 020000      R     LJMP    HandleModbusWriteMultipleRegisters
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
0042         ?C0099:
                                           ; SOURCE LINE # 402
0042 7F01              MOV     R7,#01H
0044 120000      R     LCALL   _HandleModbusError
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
0047         ?C0100:
0047 22                RET     
             ; FUNCTION modbusPorcess (END)

             ; FUNCTION _InitModbus (BEGIN)
                                           ; SOURCE LINE # 409
;---- Variable 'modbusSlaveAddress' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 410
0000 8F00        R     MOV     ModbusSlaveAddress,R7
                                           ; SOURCE LINE # 411
0002 AF00        R     MOV     R7,baudrate+03H
0004 AE00        R     MOV     R6,baudrate+02H
0006 AD00        R     MOV     R5,baudrate+01H
0008 AC00        R     MOV     R4,baudrate
000A 120000      E     LCALL   _modBusUartInitialise
                                           ; SOURCE LINE # 412
000D 020000      E     LJMP    modBusTimerInitialise
             ; FUNCTION _InitModbus (END)

C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 126 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
fp32_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
fp64_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
bool . . . . . . . . . . . . . . . . .  TYPEDEF  -----  BIT      -----  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
U8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
U16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
U32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
S8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
S16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
S32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
UU16 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 127 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU16 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU32 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
UU32 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_GENERIC_PTR . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GENERIC_PTR . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_modBusUartInitialise. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
modBusTimerInitialise. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_modBusUartString. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NVRAM0 . . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  1024
modbusTimerValue . . . . . . . . . . .  PUBLIC   DATA   U_INT    0000H  2
modbusReceiveCounter . . . . . . . . .  PUBLIC   DATA   U_CHAR   0002H  1
modbusReceiveBuffer. . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  256
modbusPorcess. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RXTX_IDLE. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RXTX_START . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RXTX_DATABUF . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RXTX_WAIT_ANSWER . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RXTX_TIMEOUT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MODBUS_RXTX_STATE. . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
modbusRxTxData_t . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  260
  address. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  function . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dataBuf. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  256
  dataLen. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
ModbusSlaveAddress . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0003H  1
Tx_Data. . . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   0100H  260
Tx_Current . . . . . . . . . . . . . .  PUBLIC   DATA   U_LONG   0004H  4
Tx_CRC16 . . . . . . . . . . . . . . .  PUBLIC   DATA   U_LONG   0008H  4
Tx_State . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000CH  1
Tx_Buf . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0204H  256
Tx_Buf_Size. . . . . . . . . . . . . .  PUBLIC   DATA   U_LONG   000DH  4
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 128 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Rx_Data. . . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   0304H  260
Rx_CRC16 . . . . . . . . . . . . . . .  PUBLIC   DATA   U_LONG   0011H  4
Rx_State . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0015H  1
Rx_Data_Available. . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0016H  1
_modbusCrc16 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     001BH  -----
  Data . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  CRC. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0003H  4
DoSlaveTX. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SendMessage. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_HandleModbusError . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ErrorCode. . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
HandleModbusReadCoils. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  startAddress . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  numberOfCoil . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  byteCount. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  tempAddr . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  tempData . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
HandleModbusReadInputCoil. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
HandleModbusReadHoldingRegisters . . .  PUBLIC   CODE   PROC     0000H  -----
  startAddress . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  numberOfRegisters. . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  currentData. . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
HandleModbusWriteSingleCoil. . . . . .  PUBLIC   CODE   PROC     0000H  -----
  startAddress . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  value. . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
HandleModbusWriteSingleRegister. . . .  PUBLIC   CODE   PROC     0000H  -----
  address. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
HandleModbusWriteMultipleCoils . . . .  PUBLIC   CODE   PROC     0000H  -----
  startAddress . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  numberOfCoil . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  byteCount. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  tempAddr . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0006H  2
  j. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0008H  2
  tempData . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000AH  1
HandleModbusWriteMultipleRegisters . .  PUBLIC   CODE   PROC     0000H  -----
  startAddress . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  numberOfRegisters. . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  value. . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
  byteCount. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
RxDataAvailable. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Result . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CheckRxTimeout . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
checkModbusBufferComplete. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  expectedReceiveCount . . . . . . . .  AUTO     DATA   LONG     0000H  4
RxRTU. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  receiveBufferControl . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
TxRTU. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_InitModbus. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.59.0.0   MODBUS                                                            01/03/2019 22:57:09 PAGE 129 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  modbusSlaveAddress . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  baudrate . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0001H  4


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2477    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1032    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      51
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
