C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAINAPP
OBJECT MODULE PLACED IN .\Objects\MainApp.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MainApp\MainApp.c OPTIMIZE(8,SPEED) REGFILE(.\Objects\dwLaser.uvgui.ORC)
                    - BROWSE ORDER INCDIR(.\Lib;.\Driver;.\sPlc;.\sPlc\Modbus;.\sPlc\Port_f020;.\MainApp) DEFINE(C8051F020) DEBUG OBJECTEXTEN
                    -D CODE LISTINCLUDE SYMBOLS PRINT(.\Listings\MainApp.lst) PREPRINT(.\Listings\MainApp.i) OBJECT(.\Objects\MainApp.obj)

line level    source

   1          #include "MainApp.h"
   1      =1  #ifndef __MAINAPP_H__
   2      =1  #define __MAINAPP_H__
   3      =1  /*****************************************************************************/
   4      =1  #include "sPlc.h"
   1      =2  #ifndef __SPLC_H__
   2      =2  #define __SPLC_H__
   3      =2  /*****************************************************************************/
   4      =2  #include "sPlcConfig.h"
   1      =3  #ifndef __SPLCCONFIG_H__
   2      =3  #define __SPLCCONFIG_H__
   3      =3  /*****************************************************************************/
   4      =3  #define DEBUG_LED_ON                                            0
   5      =3  #define DEBUG_LED_OFF                                           1
   6      =3  /*****************************************************************************/
   7      =3  #ifdef C8051F580
           =3 #define CONFIG_SYSCLK                       (48000000L)//F580内部48M
           =3 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =3 #endif
  11      =3  
  12      =3  #ifdef C8051F020
  13      =3  #define CONFIG_SYSCLK                       (22118400L)
  14      =3  #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
  15      =3  #endif
  16      =3  
  17      =3  //SPLC设置
  18      =3  #define SET_LED_RUN(b)
  19      =3  #define SET_LED_ERROR(b)
  20      =3  #define SET_LED_DAC(b)
  21      =3  #define SET_LED_ADC(b)
  22      =3  #define SET_LED_EPROM(b)
  23      =3  #define SET_LED_IO(b)
  24      =3  #define SET_LED_WDT(b)
  25      =3  #define SET_LED_PCA(b)
  26      =3  
  27      =3  #define GET_LED_RUN(b)
  28      =3  #define GET_LED_ERROR(b)
  29      =3  #define GET_LED_DAC(b)
  30      =3  #define GET_LED_ADC(b)
  31      =3  #define GET_LED_EPROM(b)
  32      =3  #define GET_LED_IO(b)
  33      =3  #define GET_LED_WDT(b)
  34      =3  #define GET_LED_PCA(b)
  35      =3  
  36      =3  #define REBOOT()                                                                RSTSRC |= 1 << 4//强制复位
  37      =3  /*****************************************************************************/
  38      =3  #define CONFIG_UART0_BAUDRATE                           115200//串口波特率
  39      =3  #define CONFIG_UART0_PARITY                                     NONE
  40      =3  #define CONFIG_UART0_STOPBIT                            1
  41      =3  #define CONFIG_UART0_DATABIT                            8
  42      =3  
  43      =3  #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
  44      =3  #define CONFIG_UART1_PARITY                                     NONE
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 2   

  45      =3  #define CONFIG_UART1_STOPBIT                            1
  46      =3  #define CONFIG_UART1_DATABIT                            8
  47      =3  /*****************************************************************************/
  48      =3  #define CONFIG_SPLC_ASSERT                                      1//检查地址范围
  49      =3  #define CONFIG_SPLC_DEV                                         0x0A01//设备号
  50      =3  #define CONFIG_SPLC_CLEAR_CODE                          0xA58E
  51      =3  #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
  52      =3  #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
  53      =3  /*****************************************************************************/
  54      =3  #define CONFIG_SPLC_USING_LED                           0//启用调试LED
  55      =3  #define CONFIG_SPLC_USING_CLEAR_NVRAM           0//启用清除NVRAM功能
  56      =3  /*****************************************************************************/
  57      =3  #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
  58      =3  /*****************************************************************************/
  59      =3  #define CONFIG_SPLC_USING_IO_INPUT                      0//输入IO刷新启用
  60      =3  /*****************************************************************************/
  61      =3  #define CONFIG_SPLC_USING_IO_OUTPUT                     0//输出IO刷新启用
  62      =3  /*****************************************************************************/
  63      =3  #define CONFIG_SPLC_USING_EPROM                         0//EPROM掉电存储启用
  64      =3  /*****************************************************************************/
  65      =3  #define CONFIG_SPLC_USING_UART1                         0//UART1串口启用
  66      =3  #if CONFIG_SPLC_USING_UART1 == 1
           =3 #define SPLC_UART1                                                      0
           =3 #endif
  69      =3  #define CONFIG_SPLC_USING_UART2                         0//UART1串口启用
  70      =3  /*****************************************************************************/
  71      =3  #define CONFIG_SPLC_USING_ADC                           0//使能ADC模块
  72      =3  #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
  73      =3  #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
  74      =3  #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
  75      =3  #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
  76      =3  #define CONFIG_SPLC_ADC_INTERNAL_VREF           2400L// ADC Voltage Reference (mV)
  77      =3  #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
  78      =3  /*****************************************************************************/
  79      =3  #define CONFIG_SPLC_USING_DAC                           0//是能DAC模块
  80      =3  /*****************************************************************************/
  81      =3  #define CONFIG_SPLC_USING_MB_RTU_SLAVE          0//是能MODBUS RTU从站
  82      =3  #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
  83      =3  #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
  84      =3  #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
  85      =3  #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
  86      =3  #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
  87      =3  /*****************************************************************************/
  88      =3  #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
  89      =3  #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
  90      =3  #define DISABLE_INTERRUPT                                       EA = 0;
  91      =3  #define ENABLE_INTERRUPT                                        EA = 1;
  92      =3  /*****************************************************************************/
  93      =3  //线圈 保持 8 * 16 = 128BIT
  94      =3  #define MR_START                                                0
  95      =3  #define MR_END                                                  3
  96      =3  //线圈寄存器 非保持 8 * 16 = 128BIT
  97      =3  #define R_START                                                 4
  98      =3  #define R_END                                                   11
  99      =3  //数据寄存器 保持 8
 100      =3  #define DM_START                                                12
 101      =3  #define DM_END                                                  19
 102      =3  //数据寄存器 非保持 140个字
 103      =3  #define EM_START                                                20
 104      =3  #define EM_END                                                  159
 105      =3  //延时线圈
 106      =3  //1MS 1 * 16 = 16BIT
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 3   

 107      =3  #define T_1MS_START                                             160
 108      =3  #define T_1MS_END                                               160
 109      =3  //10MS 1 * 16 = 16BIT
 110      =3  #define T_10MS_START                                    161
 111      =3  #define T_10MS_END                                              161
 112      =3  //100MS 1 * 16 = 16BIT
 113      =3  #define T_100MS_START                                   162
 114      =3  #define T_100MS_END                                             162
 115      =3  //延时计时器 
 116      =3  //1MS 16
 117      =3  #define TD_1MS_START                                    163
 118      =3  #define TD_1MS_END                                              178
 119      =3  //10MS 16
 120      =3  #define TD_10MS_START                                   179
 121      =3  #define TD_10MS_END                                             194
 122      =3  //100MS 16
 123      =3  #define TD_100MS_START                                  195
 124      =3  #define TD_100MS_END                                    210
 125      =3  //计数器 1
 126      =3  #define C_START                                                 211
 127      =3  #define C_END                                                   211
 128      =3  //输入位寄存器 1 * 16 = 16个
 129      =3  #define X_START                                                 212
 130      =3  #define X_END                                                   212             
 131      =3  //输出位寄存器 1 * 16 = 16个
 132      =3  #define Y_START                                                 213
 133      =3  #define Y_END                                                   213
 134      =3  //特殊寄存器 24个字
 135      =3  #define SPREG_START                                             214
 136      =3  #define SPREG_END                                               237
 137      =3  //特殊线圈      4 * 16 = 64个
 138      =3  #define SPCOIL_START                                    238
 139      =3  #define SPCOIL_END                                              241
 140      =3  /*****************************************************************************/
 141      =3  #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
 142      =3  /*****************************************************************************/
 143      =3  #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
 144      =3  #define SPCOIL_START_UP                                 (SPCOIL_START * 16 + 1)//初次上电
 145      =3  #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 2)//1mS间隔 50%占空比脉冲
 146      =3  #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 3)//10mS
 147      =3  #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 4)//100mS  
 148      =3  #define SPCOIL_PS1000MS                                 (SPCOIL_START * 16 + 5)//1000mS 
 149      =3  
 150      =3  #define SPCOIL_NVRAM_FAIL                               (SPCOIL_START * 16 + 14)//NVRAM校验码错误
 151      =3  #define SPCOIL_WATCHDOG                                 (SPCOIL_START * 16 + 15)//看门狗溢出
 152      =3  #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 16)//UART1发送忙
 153      =3  #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 17)//UART1接收忙
 154      =3  #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 18)//发送完成
 155      =3  #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 19)//接收完成
 156      =3  #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 20)//UART1发送忙
 157      =3  #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 21)//UART1接收忙
 158      =3  #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 22)//发送完成
 159      =3  #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 23)//接收完成
 160      =3  /*****************************************************************************/
 161      =3  #define SPREG_RUNTIME_L                                 (SPREG_START + 0)//累计运行时间秒 32BIT
 162      =3  #define SPREG_RUNTIME_H                                 (SPREG_START + 1)//累计运行时间秒 32BIT         
 163      =3  /*****************************************************************************/
 164      =3  #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
 165      =3  #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
 166      =3  #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
 167      =3  #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
 168      =3  #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 4   

 169      =3  #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
 170      =3  /*****************************************************************************/
 171      =3  #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
 172      =3  #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
 173      =3  #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
 174      =3  #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
 175      =3  #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
 176      =3  #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
 177      =3  /*****************************************************************************/
 178      =3  #define SPREG_CLEAR_NVRAM0                              (SPREG_END)//清除NVRAM后重新启动
 179      =3  /*****************************************************************************/
 180      =3  
 181      =3  #endif
   5      =2  #include "sPlcFun.h"
   1      =3  #ifndef __SPLCFUN_H__
   2      =3  #define __SPLCFUN_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "sPlcConfig.h"
   1      =4  #ifndef __SPLCCONFIG_H__
           =4 #define __SPLCCONFIG_H__
           =4 /*****************************************************************************/
           =4 #define DEBUG_LED_ON                                            0
           =4 #define DEBUG_LED_OFF                                           1
           =4 /*****************************************************************************/
           =4 #ifdef C8051F580
           =4 #define CONFIG_SYSCLK                       (48000000L)//F580内部48M
           =4 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =4 #endif
           =4 
           =4 #ifdef C8051F020
           =4 #define CONFIG_SYSCLK                       (22118400L)
           =4 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =4 #endif
           =4 
           =4 //SPLC设置
           =4 #define SET_LED_RUN(b)
           =4 #define SET_LED_ERROR(b)
           =4 #define SET_LED_DAC(b)
           =4 #define SET_LED_ADC(b)
           =4 #define SET_LED_EPROM(b)
           =4 #define SET_LED_IO(b)
           =4 #define SET_LED_WDT(b)
           =4 #define SET_LED_PCA(b)
           =4 
           =4 #define GET_LED_RUN(b)
           =4 #define GET_LED_ERROR(b)
           =4 #define GET_LED_DAC(b)
           =4 #define GET_LED_ADC(b)
           =4 #define GET_LED_EPROM(b)
           =4 #define GET_LED_IO(b)
           =4 #define GET_LED_WDT(b)
           =4 #define GET_LED_PCA(b)
           =4 
           =4 #define REBOOT()                                                                RSTSRC |= 1 << 4//强制复位
           =4 /*****************************************************************************/
           =4 #define CONFIG_UART0_BAUDRATE                           115200//串口波特率
           =4 #define CONFIG_UART0_PARITY                                     NONE
           =4 #define CONFIG_UART0_STOPBIT                            1
           =4 #define CONFIG_UART0_DATABIT                            8
           =4 
           =4 #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
           =4 #define CONFIG_UART1_PARITY                                     NONE
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 5   

           =4 #define CONFIG_UART1_STOPBIT                            1
           =4 #define CONFIG_UART1_DATABIT                            8
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_ASSERT                                      1//检查地址范围
           =4 #define CONFIG_SPLC_DEV                                         0x0A01//设备号
           =4 #define CONFIG_SPLC_CLEAR_CODE                          0xA58E
           =4 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =4 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_LED                           0//启用调试LED
           =4 #define CONFIG_SPLC_USING_CLEAR_NVRAM           0//启用清除NVRAM功能
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_INPUT                      0//输入IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_OUTPUT                     0//输出IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_EPROM                         0//EPROM掉电存储启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_UART1                         0//UART1串口启用
           =4 #if CONFIG_SPLC_USING_UART1 == 1
           =4 #define SPLC_UART1                                                      0
           =4 #endif
           =4 #define CONFIG_SPLC_USING_UART2                         0//UART1串口启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_ADC                           0//使能ADC模块
           =4 #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
           =4 #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =4 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2400L// ADC Voltage Reference (mV)
           =4 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_DAC                           0//是能DAC模块
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          0//是能MODBUS RTU从站
           =4 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =4 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =4 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =4 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =4 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =4 /*****************************************************************************/
           =4 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =4 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =4 #define DISABLE_INTERRUPT                                       EA = 0;
           =4 #define ENABLE_INTERRUPT                                        EA = 1;
           =4 /*****************************************************************************/
           =4 //线圈 保持 8 * 16 = 128BIT
           =4 #define MR_START                                                0
           =4 #define MR_END                                                  3
           =4 //线圈寄存器 非保持 8 * 16 = 128BIT
           =4 #define R_START                                                 4
           =4 #define R_END                                                   11
           =4 //数据寄存器 保持 8
           =4 #define DM_START                                                12
           =4 #define DM_END                                                  19
           =4 //数据寄存器 非保持 140个字
           =4 #define EM_START                                                20
           =4 #define EM_END                                                  159
           =4 //延时线圈
           =4 //1MS 1 * 16 = 16BIT
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 6   

           =4 #define T_1MS_START                                             160
           =4 #define T_1MS_END                                               160
           =4 //10MS 1 * 16 = 16BIT
           =4 #define T_10MS_START                                    161
           =4 #define T_10MS_END                                              161
           =4 //100MS 1 * 16 = 16BIT
           =4 #define T_100MS_START                                   162
           =4 #define T_100MS_END                                             162
           =4 //延时计时器 
           =4 //1MS 16
           =4 #define TD_1MS_START                                    163
           =4 #define TD_1MS_END                                              178
           =4 //10MS 16
           =4 #define TD_10MS_START                                   179
           =4 #define TD_10MS_END                                             194
           =4 //100MS 16
           =4 #define TD_100MS_START                                  195
           =4 #define TD_100MS_END                                    210
           =4 //计数器 1
           =4 #define C_START                                                 211
           =4 #define C_END                                                   211
           =4 //输入位寄存器 1 * 16 = 16个
           =4 #define X_START                                                 212
           =4 #define X_END                                                   212             
           =4 //输出位寄存器 1 * 16 = 16个
           =4 #define Y_START                                                 213
           =4 #define Y_END                                                   213
           =4 //特殊寄存器 24个字
           =4 #define SPREG_START                                             214
           =4 #define SPREG_END                                               237
           =4 //特殊线圈      4 * 16 = 64个
           =4 #define SPCOIL_START                                    238
           =4 #define SPCOIL_END                                              241
           =4 /*****************************************************************************/
           =4 #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
           =4 /*****************************************************************************/
           =4 #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
           =4 #define SPCOIL_START_UP                                 (SPCOIL_START * 16 + 1)//初次上电
           =4 #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 2)//1mS间隔 50%占空比脉冲
           =4 #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 3)//10mS
           =4 #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 4)//100mS  
           =4 #define SPCOIL_PS1000MS                                 (SPCOIL_START * 16 + 5)//1000mS 
           =4 
           =4 #define SPCOIL_NVRAM_FAIL                               (SPCOIL_START * 16 + 14)//NVRAM校验码错误
           =4 #define SPCOIL_WATCHDOG                                 (SPCOIL_START * 16 + 15)//看门狗溢出
           =4 #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 16)//UART1发送忙
           =4 #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 17)//UART1接收忙
           =4 #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 18)//发送完成
           =4 #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 19)//接收完成
           =4 #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 20)//UART1发送忙
           =4 #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 21)//UART1接收忙
           =4 #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 22)//发送完成
           =4 #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 23)//接收完成
           =4 /*****************************************************************************/
           =4 #define SPREG_RUNTIME_L                                 (SPREG_START + 0)//累计运行时间秒 32BIT
           =4 #define SPREG_RUNTIME_H                                 (SPREG_START + 1)//累计运行时间秒 32BIT         
           =4 /*****************************************************************************/
           =4 #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
           =4 #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
           =4 #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
           =4 #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
           =4 #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 7   

           =4 #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
           =4 /*****************************************************************************/
           =4 #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
           =4 #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
           =4 #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
           =4 #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
           =4 #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
           =4 #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
           =4 /*****************************************************************************/
           =4 #define SPREG_CLEAR_NVRAM0                              (SPREG_END)//清除NVRAM后重新启动
           =4 /*****************************************************************************/
           =4 
           =4 #endif
   5      =3  #include "sPlcConfig.h"
   1      =4  #ifndef __SPLCCONFIG_H__
           =4 #define __SPLCCONFIG_H__
           =4 /*****************************************************************************/
           =4 #define DEBUG_LED_ON                                            0
           =4 #define DEBUG_LED_OFF                                           1
           =4 /*****************************************************************************/
           =4 #ifdef C8051F580
           =4 #define CONFIG_SYSCLK                       (48000000L)//F580内部48M
           =4 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =4 #endif
           =4 
           =4 #ifdef C8051F020
           =4 #define CONFIG_SYSCLK                       (22118400L)
           =4 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =4 #endif
           =4 
           =4 //SPLC设置
           =4 #define SET_LED_RUN(b)
           =4 #define SET_LED_ERROR(b)
           =4 #define SET_LED_DAC(b)
           =4 #define SET_LED_ADC(b)
           =4 #define SET_LED_EPROM(b)
           =4 #define SET_LED_IO(b)
           =4 #define SET_LED_WDT(b)
           =4 #define SET_LED_PCA(b)
           =4 
           =4 #define GET_LED_RUN(b)
           =4 #define GET_LED_ERROR(b)
           =4 #define GET_LED_DAC(b)
           =4 #define GET_LED_ADC(b)
           =4 #define GET_LED_EPROM(b)
           =4 #define GET_LED_IO(b)
           =4 #define GET_LED_WDT(b)
           =4 #define GET_LED_PCA(b)
           =4 
           =4 #define REBOOT()                                                                RSTSRC |= 1 << 4//强制复位
           =4 /*****************************************************************************/
           =4 #define CONFIG_UART0_BAUDRATE                           115200//串口波特率
           =4 #define CONFIG_UART0_PARITY                                     NONE
           =4 #define CONFIG_UART0_STOPBIT                            1
           =4 #define CONFIG_UART0_DATABIT                            8
           =4 
           =4 #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
           =4 #define CONFIG_UART1_PARITY                                     NONE
           =4 #define CONFIG_UART1_STOPBIT                            1
           =4 #define CONFIG_UART1_DATABIT                            8
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_ASSERT                                      1//检查地址范围
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 8   

           =4 #define CONFIG_SPLC_DEV                                         0x0A01//设备号
           =4 #define CONFIG_SPLC_CLEAR_CODE                          0xA58E
           =4 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =4 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_LED                           0//启用调试LED
           =4 #define CONFIG_SPLC_USING_CLEAR_NVRAM           0//启用清除NVRAM功能
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_INPUT                      0//输入IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_OUTPUT                     0//输出IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_EPROM                         0//EPROM掉电存储启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_UART1                         0//UART1串口启用
           =4 #if CONFIG_SPLC_USING_UART1 == 1
           =4 #define SPLC_UART1                                                      0
           =4 #endif
           =4 #define CONFIG_SPLC_USING_UART2                         0//UART1串口启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_ADC                           0//使能ADC模块
           =4 #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
           =4 #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =4 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2400L// ADC Voltage Reference (mV)
           =4 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_DAC                           0//是能DAC模块
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          0//是能MODBUS RTU从站
           =4 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =4 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =4 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =4 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =4 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =4 /*****************************************************************************/
           =4 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =4 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =4 #define DISABLE_INTERRUPT                                       EA = 0;
           =4 #define ENABLE_INTERRUPT                                        EA = 1;
           =4 /*****************************************************************************/
           =4 //线圈 保持 8 * 16 = 128BIT
           =4 #define MR_START                                                0
           =4 #define MR_END                                                  3
           =4 //线圈寄存器 非保持 8 * 16 = 128BIT
           =4 #define R_START                                                 4
           =4 #define R_END                                                   11
           =4 //数据寄存器 保持 8
           =4 #define DM_START                                                12
           =4 #define DM_END                                                  19
           =4 //数据寄存器 非保持 140个字
           =4 #define EM_START                                                20
           =4 #define EM_END                                                  159
           =4 //延时线圈
           =4 //1MS 1 * 16 = 16BIT
           =4 #define T_1MS_START                                             160
           =4 #define T_1MS_END                                               160
           =4 //10MS 1 * 16 = 16BIT
           =4 #define T_10MS_START                                    161
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 9   

           =4 #define T_10MS_END                                              161
           =4 //100MS 1 * 16 = 16BIT
           =4 #define T_100MS_START                                   162
           =4 #define T_100MS_END                                             162
           =4 //延时计时器 
           =4 //1MS 16
           =4 #define TD_1MS_START                                    163
           =4 #define TD_1MS_END                                              178
           =4 //10MS 16
           =4 #define TD_10MS_START                                   179
           =4 #define TD_10MS_END                                             194
           =4 //100MS 16
           =4 #define TD_100MS_START                                  195
           =4 #define TD_100MS_END                                    210
           =4 //计数器 1
           =4 #define C_START                                                 211
           =4 #define C_END                                                   211
           =4 //输入位寄存器 1 * 16 = 16个
           =4 #define X_START                                                 212
           =4 #define X_END                                                   212             
           =4 //输出位寄存器 1 * 16 = 16个
           =4 #define Y_START                                                 213
           =4 #define Y_END                                                   213
           =4 //特殊寄存器 24个字
           =4 #define SPREG_START                                             214
           =4 #define SPREG_END                                               237
           =4 //特殊线圈      4 * 16 = 64个
           =4 #define SPCOIL_START                                    238
           =4 #define SPCOIL_END                                              241
           =4 /*****************************************************************************/
           =4 #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
           =4 /*****************************************************************************/
           =4 #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
           =4 #define SPCOIL_START_UP                                 (SPCOIL_START * 16 + 1)//初次上电
           =4 #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 2)//1mS间隔 50%占空比脉冲
           =4 #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 3)//10mS
           =4 #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 4)//100mS  
           =4 #define SPCOIL_PS1000MS                                 (SPCOIL_START * 16 + 5)//1000mS 
           =4 
           =4 #define SPCOIL_NVRAM_FAIL                               (SPCOIL_START * 16 + 14)//NVRAM校验码错误
           =4 #define SPCOIL_WATCHDOG                                 (SPCOIL_START * 16 + 15)//看门狗溢出
           =4 #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 16)//UART1发送忙
           =4 #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 17)//UART1接收忙
           =4 #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 18)//发送完成
           =4 #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 19)//接收完成
           =4 #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 20)//UART1发送忙
           =4 #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 21)//UART1接收忙
           =4 #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 22)//发送完成
           =4 #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 23)//接收完成
           =4 /*****************************************************************************/
           =4 #define SPREG_RUNTIME_L                                 (SPREG_START + 0)//累计运行时间秒 32BIT
           =4 #define SPREG_RUNTIME_H                                 (SPREG_START + 1)//累计运行时间秒 32BIT         
           =4 /*****************************************************************************/
           =4 #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
           =4 #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
           =4 #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
           =4 #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
           =4 #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
           =4 #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
           =4 /*****************************************************************************/
           =4 #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
           =4 #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 10  

           =4 #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
           =4 #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
           =4 #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
           =4 #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
           =4 /*****************************************************************************/
           =4 #define SPREG_CLEAR_NVRAM0                              (SPREG_END)//清除NVRAM后重新启动
           =4 /*****************************************************************************/
           =4 
           =4 #endif
   6      =3  #include "sPlcFun.h"
           =3 #include "stdint.h"
           =3 #include "stdbool.h"
           =3 #include "endian.h"
           =3 #include "si_toolchain.h"
           =3 #include "compiler_defs.h"
           =3 /*****************************************************************************/
           =3 //位指令
           =3 void SET(uint16_t A) reentrant;//线圈置位
           =3 void RES(uint16_t A) reentrant;//线圈复位
           =3 void FLIP(uint16_t A) reentrant;//翻转
           =3 uint8_t LD(uint16_t A) reentrant;//载入
           =3 uint8_t LDB(uint16_t A) reentrant;//方向载入
           =3 uint8_t LDP(uint16_t A) reentrant;//脉冲上升沿
           =3 uint8_t LDN(uint16_t A) reentrant;//脉冲下降沿
           =3 //计时器指令
           =3 void T100US(uint8_t A, uint8_t start, uint16_t value) reentrant;//100uS计时器启动
           =3 void T1MS(uint8_t A, uint8_t start, uint16_t value) reentrant;//1mS计时器启动
           =3 void T10MS(uint8_t A, uint8_t start, uint16_t value) reentrant;//10mS计时器启动
           =3 void T100MS(uint8_t A, uint8_t start, uint16_t value) reentrant;//100mS计时器启动
           =3 //运算指令
           =3 void SWAP(int16_t *dist, int32_t *src) reentrant;//交换A的高低字节
           =3 void ABS16(int16_t *dist, int16_t *src) reentrant;//16位数球绝对值
           =3 void ABS32(int32_t *dist, int32_t *src) reentrant;//32位数求绝对值
           =3 void SMIN16(int16_t *index, uint16_t *length, int16_t *min) reentrant;//16位有符号数组找最小值
           =3 void SMAX16(int16_t *index, uint16_t *length, int16_t *max) reentrant;//16位有符号数组找最大值
           =3 void UMIN16(uint16_t *index, uint16_t *length, uint16_t *min)reentrant;//16位无符号数组找最小值
           =3 void UMAX16(uint16_t *index, uint16_t *length, uint16_t *max) reentrant;//16位无符号数组找最大值
           =3 void SUM16(int16_t *index, int16_t *length, int32_t *sum) reentrant;//16BIT数求和->32BIT
           =3 void MULT32(int16_t *Sa, int16_t *Sb, int32_t *D) reentrant;//16*16->32非饱和乘法 D = Sa * Sb
           =3 void MULTS16(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16*16->16饱和乘法 D = Sa * Sb
           =3 void MULT16(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16*16->16非饱和乘法 D = Sa * Sb
           =3 void SUB32(int32_t *Sa, int32_t *Sb, int32_t *D) reentrant;//32位非饱和减法 D = Sa - Sb
           =3 void SUBS16(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16位饱和减法 D = Sa - Sb
           =3 void SUB16(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16位非饱和减法 D = Sa - Sb
           =3 void ADD32(int32_t *Sa, int32_t *Sb, int32_t *D) reentrant;//32位非饱加法 D = Sa + Sb
           =3 void ADDS16(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16位饱和加法 D = Sa + Sb
           =3 void ADD16(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16位非饱和加法 D = Sa + Sb
           =3 void TENV(int16_t *dist, int16_t *src) reentrant;//CODE转换为环境温度
           =3 void TNTC(int16_t *dist, int16_t *src) reentrant;//CODE转换为NTC测量温度温度
           =3 /*****************************************************************************/
           =3 void XTAB(int16_t *distY, int16_t *srcX, int16_t *index, int16_t *length) reentrant;//线性查表从X计算Y值
           =3 void YTAB(int16_t *distX, int16_t *srcY, int16_t *index, int16_t *length) reentrant;//线性查表从Y计算X值
           =3 /*****************************************************************************/
           =3 void IMDIO(void) reentrant;//立即更新IO点状态含输入输出
           =3 void TPCTL(int16_t *ref, int16_t *fb, int16_t buf) reentrant;//温控PID指令
           =3 void HSPWM(int16_t *pos, int16_t *neg, int16_t pot) reentrant;//硬件PWM输出
           =3 /*****************************************************************************/
           =3 //void RAMP()reentrant;
           =3 #endif
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 11  

   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
   8      =4  #define STDINT_H
   9      =4  
  10      =4  #if defined __C51__
  11      =4  
  12      =4  typedef unsigned char uint8_t;
  13      =4  typedef unsigned short uint16_t;
  14      =4  typedef unsigned long uint32_t;
  15      =4  typedef uint32_t uint64_t[2];
  16      =4  
  17      =4  typedef signed char int8_t;
  18      =4  typedef short int16_t;
  19      =4  typedef long int32_t;
  20      =4  typedef int32_t int64_t[2];
  21      =4  typedef float fp32_t;
  22      =4  typedef double fp64_t;
  23      =4  
  24      =4  #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
  51      =4  
  52      =4  #endif
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
   8      =4  #define STDBOOL_H
   9      =4  
  10      =4  #if defined __C51__
  11      =4  
  12      =4  typedef bit bool;
  13      =4  enum{
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 12  

  14      =4    false = 0,
  15      =4    true = 1,
  16      =4  };
  17      =4  
  18      =4  #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
  43      =4  
  44      =4  #endif //STDBOOL_H
  45      =4  
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef __ENDIAN_H__
   8      =4  #define __ENDIAN_H__
   9      =4  
  10      =4  #define bswapu16(x) (((x) >> 8) | ((x) << 8))
  11      =4  #define bswapu32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) \
  12      =4                    | (((x) & 0x0000FF00) << 8) | ((x) << 24))
  13      =4  
  14      =4  #define bswap16(x) bswapu16((uint16_t)(x))
  15      =4  #define bswap32(x) bswapu32((uint32_t)(x))
  16      =4  
  17      =4  // Big Endian Compilers
  18      =4  #if ((defined __C51__) || (defined __RC51__) || (defined _CC51))
  19      =4  
  20      =4  #define htobe16(x) (x)
  21      =4  #define htobe32(x) (x)
  22      =4  #define be16toh(x) (x)
  23      =4  #define be32toh(x) (x)
  24      =4  
  25      =4  #define htole16(x) bswap16(x)
  26      =4  #define htole32(x) bswap32(x)
  27      =4  #define le16toh(x) bswap16(x)
  28      =4  #define le32toh(x) bswap32(x)
  29      =4  
  30      =4  #elif ((defined SDCC) || (defined HI_TECH_C) || (defined __ICC8051__))
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 13  

           =4 
           =4 #define htobe16(x) bswap16(x)
           =4 #define htobe32(x) bswap32(x)
           =4 #define be16toh(x) bswap16(x)
           =4 #define be32toh(x) bswap32(x)
           =4 
           =4 #define htole16(x) (x)
           =4 #define htole32(x) (x)
           =4 #define le16toh(x) (x)
           =4 #define le32toh(x) (x)
           =4 
           =4 #else
           =4 
           =4 #define htobe16(x) (x)
           =4 #define htobe32(x) (x)
           =4 #define be16toh(x) (x)
           =4 #define be32toh(x) (x)
           =4 
           =4 #define htole16(x) (x)
           =4 #define htole32(x) (x)
           =4 #define le16toh(x) (x)
           =4 #define le32toh(x) (x)
           =4 
           =4 #endif  // Compiler Definitions
  55      =4  
  56      =4  #endif  // __ENDIAN_H__
   1      =4  /******************************************************************************
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef __SI_TOOLCHAIN_H__
   8      =4  #define __SI_TOOLCHAIN_H__
   9      =4  
  10      =4  #include <stdint.h>
   1      =5  /**************************************************************************//**
   2      =5   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =5   *
   4      =5   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =5   *****************************************************************************/
   6      =5  
   7      =5  #ifndef STDINT_H
           =5 #define STDINT_H
           =5 
           =5 #if defined __C51__
           =5 
           =5 typedef unsigned char uint8_t;
           =5 typedef unsigned short uint16_t;
           =5 typedef unsigned long uint32_t;
           =5 typedef uint32_t uint64_t[2];
           =5 
           =5 typedef signed char int8_t;
           =5 typedef short int16_t;
           =5 typedef long int32_t;
           =5 typedef int32_t int64_t[2];
           =5 typedef float fp32_t;
           =5 typedef double fp64_t;
           =5 
           =5 #elif defined __ICC8051__
           =5 
           =5 /* Fixed size types. These are all optional. */
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 14  

           =5 #ifdef __INT8_T_TYPE__
           =5   typedef __INT8_T_TYPE__   int8_t;
           =5   typedef __UINT8_T_TYPE__ uint8_t;
           =5 #endif /* __INT8_T_TYPE__ */
           =5 
           =5 #ifdef __INT16_T_TYPE__
           =5   typedef __INT16_T_TYPE__   int16_t;
           =5   typedef __UINT16_T_TYPE__ uint16_t;
           =5 #endif /* __INT16_T_TYPE__ */
           =5 
           =5 #ifdef __INT32_T_TYPE__
           =5   typedef __INT32_T_TYPE__   int32_t;
           =5   typedef __UINT32_T_TYPE__ uint32_t;
           =5 #endif /* __INT32_T_TYPE__ */
           =5 
           =5 #ifdef __INT64_T_TYPE__
           =5   #pragma language=save
           =5   #pragma language=extended
           =5   typedef __INT64_T_TYPE__   int64_t;
           =5   typedef __UINT64_T_TYPE__ uint64_t;
           =5   #pragma language=restore
           =5 #endif /* __INT64_T_TYPE__ */
           =5 
           =5 #endif
           =5 
           =5 #endif
  11      =4  #include <stdbool.h>
   1      =5  /**************************************************************************//**
   2      =5   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =5   *
   4      =5   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =5   *****************************************************************************/
   6      =5  
   7      =5  #ifndef STDBOOL_H
           =5 #define STDBOOL_H
           =5 
           =5 #if defined __C51__
           =5 
           =5 typedef bit bool;
           =5 enum{
           =5   false = 0,
           =5   true = 1,
           =5 };
           =5 
           =5 #elif defined __ICC8051__
           =5 
           =5 #ifndef _SYSTEM_BUILD
           =5   #pragma system_include
           =5 #endif
           =5 
           =5 #ifndef __cplusplus
           =5 
           =5 #define bool _Bool
           =5 #define true 1
           =5 #define false 0
           =5 
           =5 #define __bool_true_false_are_defined 1
           =5 
           =5 #endif /* !__cplusplus */
           =5 
           =5 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =5 
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 15  

           =5 typedef bit bool;
           =5 enum{
           =5   false = 0,
           =5   true = 1,
           =5 };
           =5 
           =5 #endif
           =5 
           =5 #endif //STDBOOL_H
  45      =5  
  12      =4  
  13      =4  /**************************************************************************//**
  14      =4   *
  15      =4   * @addtogroup toolchain_group Toolchain Abstraction
  16      =4   *
  17      =4   * @brief Macros for toolchain abstraction.
  18      =4   *
  19      =4   * # Introduction #
  20      =4   *
  21      =4   * This header file contains macros that are used to provide an abstraction
  22      =4   * for toolchain use in source code.  The 8051 compiler requires C-language
  23      =4   * extensions in order to fully use features of the 8051 architecture.  All
  24      =4   * compilers for 8051 implement a set of extensions but use different names
  25      =4   * and ways of implementing those extensions.  This header file provides
  26      =4   * macros that are defined for each supported toolchain and can be used in
  27      =4   * the source code.  This allows the source code to use 8051 extensions and
  28      =4   * remain independent of which toolchain is used for compilation.
  29      =4   *
  30      =4   * ## Variable and Pointer Declarations ##
  31      =4   *
  32      =4   * It is often useful to specify the memory area (or segment) of a variable,
  33      =4   * pointer, or pointer target.  For example, you may wish to place all
  34      =4   * variables in XDATA by default, but for variables used in time-sensitive
  35      =4   * code you use DATA for efficient access.  In this case you declare the
  36      =4   * XDATA variable in the normal C way, but declare the variables to be located
  37      =4   * in the DATA segment using @ref SI_SEGMENT_VARIABLE.
  38      =4   *
  39      =4   * Pointers are more complicated because there are two memory spaces
  40      =4   * associated with a pointer, the pointer target, and the pointer variable
  41      =4   * itself.  When using default memory segment for the pointer location and
  42      =4   * target, then no special macro is needed.  But if you wish to specify the
  43      =4   * pointer variable location, or target memory segment, then you can use one
  44      =4   * of the following macros to do this in a toolchain-independent way.
  45      =4   *
  46      =4   * |Pointer segment|Target segment|Macro                                   |
  47      =4   * |---------------|--------------|----------------------------------------|
  48      =4   * |default        |generic       |None                                    |
  49      =4   * |default        |specific      |@ref SI_VARIABLE_SEGMENT_POINTER        |
  50      =4   * |specific       |generic       |@ref SI_SEGMENT_POINTER                 |
  51      =4   * |specific       |specific      |@ref SI_SEGMENT_VARIABLE_SEGMENT_POINTER|
  52      =4   *
  53      =4   * ## Prior Toolchain Abstraction Header File ##
  54      =4   *
  55      =4   * This file supercedes an earlier header file named `compiler_defs.h`.  We
  56      =4   * are deprecating the use of compiler_defs.h, however it will remain for
  57      =4   * backwards compatibility.  This file was created to normalize macro names,
  58      =4   * remove unused macros, and to provide documentation.
  59      =4   *
  60      =4   * ## Supported Toolchains ##
  61      =4   *
  62      =4   * - Keil/ARM C51
  63      =4   *
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 16  

  64      =4   * @{
  65      =4   *
  66      =4   *****************************************************************************/
  67      =4  
  68      =4  // Make sure there is a NULL defined if the toolchain does not provide it.
  69      =4  #ifndef NULL
  70      =4  #define NULL ((void *)0)
  71      =4  #endif
  72      =4  
  73      =4  // -------------------------------
  74      =4  // Keil/ARM C51
  75      =4  //
  76      =4  #if defined(__C51__)
  77      =4  
  78      =4  /// Used with pointers, declares a generic pointer.  Generic pointers
  79      =4  /// work with any memory space but are inefficient.
  80      =4  #define SI_SEG_GENERIC
  81      =4  
  82      =4  /// Declares a variable to be located in 8051 DATA space.
  83      =4  #define SI_SEG_DATA data
  84      =4  
  85      =4  /// Declares a variable to be located in 8051 IDATA space.
  86      =4  #define SI_SEG_IDATA idata
  87      =4  
  88      =4  /// Declares a variable to be located in 8051 XDATA space.
  89      =4  #define SI_SEG_XDATA xdata
  90      =4  
  91      =4  /// Declares a variable to be located in 8051 PDATA space.
  92      =4  #define SI_SEG_PDATA pdata
  93      =4  
  94      =4  /// Declares a variable to be located in 8051 BDATA (bit-addressable) space.
  95      =4  #define SI_SEG_BDATA bdata
  96      =4  
  97      =4  /// Declares a variable to be located in 8051 CODE space.
  98      =4  #define SI_SEG_CODE code
  99      =4  
 100      =4  /**************************************************************************//**
 101      =4   * Declares a bit variable in a bit-addressable memory space.
 102      =4   *
 103      =4   * @param name The name of the bit variable.
 104      =4   *****************************************************************************/
 105      =4  #define SI_BIT(name) bit name
 106      =4  
 107      =4  /**************************************************************************//**
 108      =4   * Declares a bit variable in a bit-addressable SFR or memory space.
 109      =4   *
 110      =4   * @param name The name of the bit variable.
 111      =4   * @param address The address of the byte containing the bit.
 112      =4   * @param bitnum The bit number (0-7) within the byte.
 113      =4   *
 114      =4   * This cannot be used to make any arbitrary SFR or variable into
 115      =4   * a bit variable.  The underlying memory must support bit-addressability.
 116      =4   *****************************************************************************/
 117      =4  #define SI_SBIT(name, address, bitnum) sbit name = address^bitnum
 118      =4  
 119      =4  /**************************************************************************//**
 120      =4   * Declares an 8-bit special function register (SFR) variable.
 121      =4   *
 122      =4   * @param name The name of the SFR variable.
 123      =4   * @param address The address of the SFR.
 124      =4   *
 125      =4   * This creates a C variable (8-bit) that maps to a physical special function
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 17  

 126      =4   * register of the 8051.  This cannot be used to make any arbitrary memory
 127      =4   * location into an SFR.  The _address_ must map to a real SFR in the memory
 128      =4   * map.
 129      =4   *****************************************************************************/
 130      =4  #define SI_SFR(name, address) sfr name = address
 131      =4  
 132      =4  /**************************************************************************//**
 133      =4   * Declares a 16-bit special function register (SFR) variable.
 134      =4   *
 135      =4   * @param name The name of the SFR variable.
 136      =4   * @param address The address of the 16-bit SFR.
 137      =4   *
 138      =4   * This creates a C variable (16-bit) that maps to a physical special function
 139      =4   * register of the 8051.  This cannot be used to make any arbitrary memory
 140      =4   * location into an SFR.  The _address_ must map to a real 16-bit SFR in the
 141      =4   * memory map.
 142      =4   *****************************************************************************/
 143      =4  #define SI_SFR16(name, address) sfr16 name = address
 144      =4  
 145      =4  #ifndef __SLS_IDE__
 146      =4  /**************************************************************************//**
 147      =4   * Define an interrupt handler function for an interrupt vector.
 148      =4   *
 149      =4   * @param name The name of the interrupt handler function.
 150      =4   * @param vector The interrupt vector number.
 151      =4   *
 152      =4   * This macro defines a function to be an interrupt handler.  The _vector_
 153      =4   * parameter is the 8051 interrupt vector number, not the address.  This
 154      =4   * will cause the compiler to treat the function as the interrupt handler
 155      =4   * and generate the appropriate prolog/epilog code.
 156      =4   *
 157      =4   * @note This macro is used to define the function implementation.  To declare
 158      =4   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO.
 159      =4   *****************************************************************************/
 160      =4  #define SI_INTERRUPT(name, vector) void name (void) interrupt vector
 161      =4  
 162      =4  /**************************************************************************//**
 163      =4   * Define an interrupt handler function using a specific register bank.
 164      =4   *
 165      =4   * @param name The name of the interrupt handler function.
 166      =4   * @param vector The interrupt vector number.
 167      =4   * @param regnum The register bank number (0-3).
 168      =4   *
 169      =4   * This macro defines a function to be an interrupt handler, using a specific
 170      =4   * register bank for the interrupt code.  The _vector_ parameter is the 8051
 171      =4   * interrupt vector number, not the address.  The _regnum_ parameter is the
 172      =4   * register bank number (0-3) that will be used as general purpose registers
 173      =4   * for the instructions in the compiled code.  Using dedicated register banks
 174      =4   * for interrupt handlers allows the prolog code to just switch banks instead
 175      =4   * of saving and restoring all the general purpose registers.  This can make
 176      =4   * interrupt entry/exit faster but requires dedicating a register bank for
 177      =4   * the interrupt handler.
 178      =4   *
 179      =4   * @note This macro is used to define the function implementation.  To declare
 180      =4   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO_USING.
 181      =4   *****************************************************************************/
 182      =4  #define SI_INTERRUPT_USING(name, vector, regnum)                             \
 183      =4               void name (void) interrupt vector using regnum
 184      =4  
 185      =4  /**************************************************************************//**
 186      =4   * Declare an interrupt handler prototype for an interrupt vector.
 187      =4   *
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 18  

 188      =4   * @param name The name of the interrupt handler function.
 189      =4   * @param vector The interrupt vector number.
 190      =4   *
 191      =4   * This macro declares a function prototype for an interrupt handler.  The
 192      =4   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 193      =4   * Declaring the function prototype this way will cause the compiler to
 194      =4   * recognize that the function is an interrupt handler and not a normal C
 195      =4   * function.
 196      =4   *
 197      =4   * @note This macro is used to declare a prototype for the interrupt function.
 198      =4   * To define the interrupt function implementation, use @ref SI_INTERRUPT.
 199      =4   *****************************************************************************/
 200      =4  #define SI_INTERRUPT_PROTO(name, vector) void name (void)
 201      =4  
 202      =4  /**************************************************************************//**
 203      =4   * Declare an interrupt handler prototype using a specific register bank.
 204      =4   *
 205      =4   * @param name The name of the interrupt handler function.
 206      =4   * @param vector The interrupt vector number.
 207      =4   * @param regnum The register bank number (0-3).
 208      =4   *
 209      =4   * This macro declares a function prototype for an interrupt handler, for a
 210      =4   * function that uses a specific register bank for the interrupt code.  The
 211      =4   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 212      =4   * The _regnum_ parameter is the register bank number (0-3) that will be used
 213      =4   * as general purpose registers in the function.  Declaring the function
 214      =4   * prototype this way will cause the compiler to recognize that the function
 215      =4   * is an interrupt handler and is not a normal C function.
 216      =4   *
 217      =4   * @note This macro is used to declare a prototype for the interrupt function.
 218      =4   * To define the interrupt function implementation,
 219      =4   * use @ref SI_INTERRUPT_USING.
 220      =4   *****************************************************************************/
 221      =4  #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 222      =4  
 223      =4  /**************************************************************************//**
 224      =4   * Define a function to be reentrant (store local variables on the stack).
 225      =4   *
 226      =4   * @param name The name of the function.
 227      =4   * @param return_type The data type of the function return value
 228      =4   * (void, int, etc).
 229      =4   * @param parameter One C function parameter (or "void") (type and name).
 230      =4   *
 231      =4   * This macro defines a function to be reentrant.
 232      =4   *
 233      =4   * You must specify the _return_type_ which is the type of the function.  It
 234      =4   * can be `void` or any other C type or typedef.  The _parameters_ argument
 235      =4   * is the list of function parameters.  It can be `void` or else it must be
 236      =4   * a parameter data type and name.  It can also be multiple parameters but
 237      =4   * they must be enclosed in parentheses and separated by commas.
 238      =4   *
 239      =4   * __Example__
 240      =4   *
 241      =4   * ~~~~~~~~.c
 242      =4   * // The following is used to implement a function with the following
 243      =4   * // signature...
 244      =4   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 245      =4   *
 246      =4   * SI_REENTRANT_FUNCTION(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2))
 247      =4   * {
 248      =4   *   // Function implementation body
 249      =4   * }
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 19  

 250      =4   * ~~~~~~~~
 251      =4   *
 252      =4   * @note This macro is used to define the function implementation.  To declare
 253      =4   * the function prototype, use @ref SI_REENTRANT_FUNCTION_PROTO.
 254      =4   *****************************************************************************/
 255      =4  #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
 256      =4    return_type name parameter reentrant
 257      =4  
 258      =4  /**************************************************************************//**
 259      =4   * Declare a function to be reentrant (store local variables on the stack).
 260      =4   *
 261      =4   * @param name The name of the function.
 262      =4   * @param return_type The data type of the function return value
 263      =4   * (void, int, etc).
 264      =4   * @param parameter One C function parameter (or "void") (type and name).
 265      =4   *
 266      =4   * This macro declares a function prototype for a C function that is reentrant.
 267      =4   * See the documentation for @ref SI_REENTRANT_FUNCTION for an explanation of
 268      =4   * the macro arguments.  This is an advanced feature.
 269      =4   *
 270      =4   * @note This macro is used to declare a prototype for the function.  To
 271      =4   * define the function implementation, use @ref SI_REENTRANT_FUNCTION.
 272      =4   *****************************************************************************/
 273      =4  #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
 274      =4    return_type name parameter reentrant
 275      =4                 
 276      =4  /**************************************************************************//**
 277      =4   * Define a function to use a specific register bank.
 278      =4   *
 279      =4   * @param name The name of the function.
 280      =4   * @param return_value The data type of the function return value
 281      =4   * (void, int, etc).
 282      =4   * @param parameter One C function parameter (or "void") (type and name).
 283      =4   * @param regnum The register bank number (0-3).
 284      =4   *
 285      =4   * This macro defines a function that uses a specific register bank.  The
 286      =4   * _regnum_ parameter is the register bank number (0-3) that will be used as
 287      =4   * general purpose registers for the instructions in the compiled function
 288      =4   * code.  Using dedicated register banks for a function can reduce the amount
 289      =4   * of registers saving and restoring needed on entry and exit to the
 290      =4   * function.  However, this is an advanced feature and you should not use it
 291      =4   * unless you fully understand how and when to use register banking.
 292      =4   *
 293      =4   * You must specify the _return_value_ which is the type of the function.  It
 294      =4   * can be `void` or any other C type or typedef.  The _parameters_ argument
 295      =4   * is the list of function parameters.  It can be `void` or else it must be
 296      =4   * a parameter data type and name.  It can also be multiple parameters but
 297      =4   * they must be enclosed in parentheses and separated by commas.
 298      =4   *
 299      =4   * __Example__
 300      =4   *
 301      =4   * ~~~~~~~~.c
 302      =4   * // The following is used to implement a function with the following
 303      =4   * // signature, and that uses register bank 3 ...
 304      =4   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 305      =4   *
 306      =4   * SI_FUNCTION_USING(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2), 3)
 307      =4   * {
 308      =4   *   // Function implementation body
 309      =4   * }
 310      =4   * ~~~~~~~~
 311      =4   *
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 20  

 312      =4   * @note This macro is used to define the function implementation.  To declare
 313      =4   * the function prototype, use @ref SI_FUNCTION_PROTO_USING.
 314      =4   *****************************************************************************/
 315      =4  #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
 316      =4               return_value name parameter using regnum
 317      =4  
 318      =4  /**************************************************************************//**
 319      =4   * Declare a function that uses a specific register bank.
 320      =4   *
 321      =4   * @param name The name of the function.
 322      =4   * @param return_value The data type of the function return value
 323      =4   * (void, int, etc).
 324      =4   * @param parameter One C function parameter (or "void") (type and name).
 325      =4   * @param regnum The register bank number (0-3).
 326      =4   *
 327      =4   * This macro declares a function prototype for a C function that uses a
 328      =4   * specific register its working registers.  See the documentation for
 329      =4   * @ref SI_FUNCTION_USING for an explanation of the macro arguments.  This is
 330      =4   * an advanced feature.
 331      =4   *
 332      =4   * @note This macro is used to declare a prototype for the function.  To
 333      =4   * define the function implementation, use @ref SI_FUNCTION_USING.
 334      =4   *****************************************************************************/
 335      =4  #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
 336      =4               return_value name parameter
 337      =4  
 338      =4  /**************************************************************************//**
 339      =4   * Declare a variable to be located in a specific memory segment.
 340      =4   *
 341      =4   * @param name The variable name.
 342      =4   * @param vartype The variable data type.* @param memseg The memory segment to use for the variable.
 343      =4   *
 344      =4   * This macro declares a variable to be located in a specific memory area
 345      =4   * (or segment) of the 8051 memory space.  It is only necessary to use this
 346      =4   * macro if you want to force the variable into a specific memory space instead
 347      =4   * of the default memory space used by the compiler.  The segment can be
 348      =4   * one of the following:
 349      =4   *
 350      =4   * - @ref SI_SEG_DATA
 351      =4   * - @ref SI_SEG_IDATA
 352      =4   * - @ref SI_SEG_BDATA
 353      =4   * - @ref SI_SEG_PDATA
 354      =4   * - @ref SI_SEG_XDATA
 355      =4   * - @ref SI_SEG_CODE
 356      =4   *
 357      =4   * __Example__
 358      =4   *
 359      =4   * ~~~~~~~~.c
 360      =4   * // The following macro can be used to create a variable located in
 361      =4   * // XDATA with the following signature:
 362      =4   * uint8_t myVar;
 363      =4   *
 364      =4   * SI_SEGMENT_VARIABLE(myVar, uint8_t, SEG_XDATA);
 365      =4   * ~~~~~~~~
 366      =4   *****************************************************************************/
 367      =4  #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype memseg name
 368      =4  
 369      =4  /**************************************************************************//**
 370      =4   * Declare a memory segment specific pointer variable.
 371      =4   *
 372      =4   * @param name The pointer variable name.
 373      =4   * @param vartype The pointer data type.
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 21  

 374      =4   * @param targseg The target memory segment for the pointer.
 375      =4   *
 376      =4   * This macro declares a pointer that points at a specific memory area
 377      =4   * (or segment).  The memory segment of the pointer variable itself is not
 378      =4   * specified and the default is used.  The segment can be one of the following:
 379      =4   *
 380      =4   * - @ref SI_SEG_DATA
 381      =4   * - @ref SI_SEG_IDATA
 382      =4   * - @ref SI_SEG_BDATA
 383      =4   * - @ref SI_SEG_PDATA
 384      =4   * - @ref SI_SEG_XDATA
 385      =4   * - @ref SI_SEG_CODE
 386      =4   *
 387      =4   * __Example__
 388      =4   *
 389      =4   * ~~~~~~~~.c
 390      =4   * // The following macro can be used to create a pointer that points to
 391      =4   * // a location in XDATA with the following signature:
 392      =4   * uint8_t *pVar; // where pVar is pointing at XDATA
 393      =4   *
 394      =4   * SI_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA);
 395      =4   * ~~~~~~~~
 396      =4   *****************************************************************************/
 397      =4  #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
 398      =4               vartype targseg * name
 399      =4  
 400      =4  /**************************************************************************//**
 401      =4   * Declare a memory segment specific pointer variable, in a specific segment.
 402      =4   *
 403      =4   * @param name The pointer variable name.
 404      =4   * @param vartype The pointer data type.
 405      =4   * @param targseg The target memory segment for the pointer.
 406      =4   * @param memseg The memory segment to use for the pointer variable.
 407      =4   *
 408      =4   * This macro declares a pointer that points at a specific memory area
 409      =4   * (or segment).  The pointer variable itself is also located in a specified
 410      =4   * memory segment by _memseg_.  The arguments _targseg_ and _memseg_ can be
 411      =4   * one of the following:
 412      =4   *
 413      =4   * - @ref SI_SEG_DATA
 414      =4   * - @ref SI_SEG_IDATA
 415      =4   * - @ref SI_SEG_BDATA
 416      =4   * - @ref SI_SEG_PDATA
 417      =4   * - @ref SI_SEG_XDATA
 418      =4   * - @ref SI_SEG_CODE
 419      =4   *
 420      =4   * __Example__
 421      =4   *
 422      =4   * ~~~~~~~~.c
 423      =4   * // The following macro can be used to create a pointer that points to
 424      =4   * // a location in XDATA while the pointer itself is located in DATA, with
 425      =4   * // the following signature:
 426      =4   * uint8_t *pVar; // where pVar is located in DATA and is pointing at XDATA
 427      =4   *
 428      =4   * SI_SEGMENT_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA, SEG_DATA);
 429      =4   * ~~~~~~~~
 430      =4   *****************************************************************************/
 431      =4  #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
 432      =4               vartype targseg * memseg name
 433      =4  
 434      =4  /**************************************************************************//**
 435      =4   * Declare a generic pointer variable that is located in a specific segment.
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 22  

 436      =4   *
 437      =4   * @param name The pointer variable name.
 438      =4   * @param vartype The pointer data type.
 439      =4   * @param memseg The memory segment to use for the pointer variable.
 440      =4   *
 441      =4   * This macro declares a pointer that is a generic pointer.  This means it can
 442      =4   * point at any kind of memory location.  However the pointer variable itself
 443      =4   * is located in a specific memory segment by _memseg_, which can be one of
 444      =4   * the following:
 445      =4   *
 446      =4   * - @ref SI_SEG_DATA
 447      =4   * - @ref SI_SEG_IDATA
 448      =4   * - @ref SI_SEG_BDATA
 449      =4   * - @ref SI_SEG_PDATA
 450      =4   * - @ref SI_SEG_XDATA
 451      =4   * - @ref SI_SEG_CODE
 452      =4   *
 453      =4   * __Example__
 454      =4   *
 455      =4   * ~~~~~~~~.c
 456      =4   * // The following macro can be used to create a generic pointer that
 457      =4   * // is located in DATA and points at any memory type, with the
 458      =4   * // following signature:
 459      =4   * uint8_t *pVar; // where pVar is located in DATA and is a generic pointer
 460      =4   *
 461      =4   * SI_SEGMENT_POINTER(pVar, uint8_t, SEG_DATA);
 462      =4   * ~~~~~~~~
 463      =4   *****************************************************************************/
 464      =4  #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * memseg name
 465      =4  
 466      =4  /**************************************************************************//**
 467      =4   * Declare an uninitialized variable that is located at a specific address.
 468      =4   *
 469      =4   * @param name The variable name.
 470      =4   * @param vartype The variable data type.
 471      =4   * @param memseg The memory segment to use for the variable.
 472      =4   * @param address The memory address of the variable.
 473      =4   *
 474      =4   * This macro allows declaring a variable that can be placed at a specific
 475      =4   * location in memory.  This can only be used for variables that do not need
 476      =4   * initializers.  The _address_ is the memory address within the specified
 477      =4   * segment.  The memory segment, _memseg_, can be one of the following:
 478      =4   *
 479      =4   * - @ref SI_SEG_DATA
 480      =4   * - @ref SI_SEG_IDATA
 481      =4   * - @ref SI_SEG_BDATA
 482      =4   * - @ref SI_SEG_PDATA
 483      =4   * - @ref SI_SEG_XDATA
 484      =4   * - @ref SI_SEG_CODE
 485      =4   *
 486      =4   * __Example__
 487      =4   *
 488      =4   * ~~~~~~~~.c
 489      =4   * // The following declares a variable located at 0x4000 in XDATA with
 490      =4   * // the following signature:
 491      =4   * uint8_t myMemVar;
 492      =4   *
 493      =4   * SI_LOCATED_VARIABLE_NO_INIT(myMemVar, uint8_t, SEG_DATA, 0x4000);
 494      =4   * ~~~~~~~~
 495      =4   *****************************************************************************/
 496      =4  #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
 497      =4               vartype memseg name _at_ address
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 23  

 498      =4  
 499      =4  
 500      =4  #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 #define SI_INTERRUPT(name, vector) void name (void)
           =4 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 #define SI_REENTRANT_FUNCTION(name, return_value, parameter, regnum) return_value name (parameter)
           =4 #define SI_REENTRANT_FUNCTION_PROTO(name, return_value, parameter, regnum) return_value name (parameter)
           =4 
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =4 #define SI_SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =4 #endif // __SLS_IDE__
 519      =4  
 520      =4  // The following are used for byte ordering when referring to individual
 521      =4  // bytes within a SI_UU32_t.  B0 is the least significant byte.
 522      =4  #define B0 3 ///< Least significant byte of a 4 byte word
 523      =4  #define B1 2 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
 524      =4  #define B2 1 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
 525      =4  #define B3 0 ///< Most significant byte of a 4-byte word
 526      =4  
 527      =4  #define LSB 1 ///< Index to least significant bit of a 2 byte word
 528      =4  #define MSB 0 ///< Index to most significant bit of a 2 byte word
 529      =4  
 530      =4  /// A union type to make it easier to access individual bytes of a 16-bit
 531      =4  /// word, and to use as signed or unsigned type.
 532      =4  typedef union SI_UU16
 533      =4  {
 534      =4    uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
 535      =4    int16_t s16;    ///< The two byte value as a 16-bit signed integer.
 536      =4    uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
 537      =4    int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
 538      =4  } SI_UU16_t;
 539      =4  
 540      =4  /// A union type to make it easier to access individual bytes within a
 541      =4  /// 32-bit word, or to access it as variations of 16-bit words, or to
 542      =4  /// use as signed or unsigned type.
 543      =4  typedef union SI_UU32
 544      =4  {
 545      =4    uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
 546      =4    int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
 547      =4    SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
 548      =4    uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
 549      =4    int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
 550      =4    uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
 551      =4    int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
 552      =4  } SI_UU32_t;
 553      =4  
 554      =4  // Generic pointer memory segment constants.
 555      =4  #define SI_GPTR                   ///< Generic pointer indeterminate type.
 556      =4  #define SI_GPTR_MTYPE_DATA  0x00  ///< Generic pointer for DATA segment.
 557      =4  #define SI_GPTR_MTYPE_IDATA 0x00  ///< Generic pointer for IDATA segment.
 558      =4  #define SI_GPTR_MTYPE_BDATA 0x00  ///< Generic pointer for BDATA segment.
 559      =4  #define SI_GPTR_MTYPE_PDATA 0xFE  ///< Generic pointer for PDATA segment.
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 24  

 560      =4  #define SI_GPTR_MTYPE_XDATA 0x01  ///< Generic pointer for XDATA segment.
 561      =4  #define SI_GPTR_MTYPE_CODE  0xFF  ///< Generic pointer for CODE segment.
 562      =4  
 563      =4  /// Generic pointer structure containing the type and address.
 564      =4  typedef struct
 565      =4  {
 566      =4    uint8_t memtype;    ///< The type of memory of the generic pointer.
 567      =4    SI_UU16_t address;  ///< The address of the generic pointer.
 568      =4  } GPTR_t;
 569      =4  
 570      =4  /// A union type to allow access to the fields of a generic pointer.
 571      =4  /// A generic pointer has a field indicating the type of memory and an
 572      =4  /// address within the memory.
 573      =4  typedef union SI_GEN_PTR
 574      =4  {
 575      =4    uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
 576      =4    GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
 577      =4  } SI_GEN_PTR_t;
 578      =4  
 579      =4  // Declaration of Keil intrinisc
 580      =4  extern void _nop_(void);
 581      =4  /// Macro to insert a no-operation (NOP) instruction.
 582      =4  #define NOP() _nop_()
 583      =4  
 584      =4  // -------------------------------
 585      =4  // GCC for ARM Cortex-M
 586      =4  // Provides support for code that can be compiled for 8 or 32-bit
 587      =4  //
 588      =4  #elif defined (__GNUC__)
           =4 #if defined(__ARMEL__) && ((__ARMEL__ == 1) && ((__ARM_ARCH == 6) || (__ARM_ARCH == 7)))
           =4 
           =4 // these ignore any memory segment directives
           =4 #define SI_SEG_GENERIC
           =4 #define SI_SEG_DATA
           =4 #define SI_SEG_IDATA
           =4 #define SI_SEG_XDATA
           =4 #define SI_SEG_PDATA
           =4 #define SI_SEG_BDATA
           =4 #define SI_SEG_CODE
           =4 
           =4 // the following create a variable of the specified name but ignore the
           =4 // address and bit number.  If the using-code cares about the actual
           =4 // address or bit number, this probably will break it
           =4 #define SI_SBIT(name, address, bitnum) uint8_t name
           =4 #define SI_SFR(name, address) uint8_t name
           =4 #define SI_SFR16(name, address) uint16_t name
           =4 
           =4 // the following create function and variable names of the specified types
           =4 // but the 8051-specific aspects (like memory segment) are ignored
           =4 #define SI_INTERRUPT(name, vector) void name (void)
           =4 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =4              return_value name (parameter)
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =4              return_value name (parameter)
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype name
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =4              vartype * name
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =4              vartype * name
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 25  

           =4 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * name
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =4              vartype name
           =4 
           =4 #define B0 0
           =4 #define B1 1
           =4 #define B2 2
           =4 #define B3 3
           =4 #define LSB 0
           =4 #define MSB 1
           =4 typedef union SI_UU16
           =4 {
           =4   uint16_t u16;
           =4   int16_t s16;
           =4   uint8_t u8[2];
           =4   int8_t s8[2];
           =4 } SI_UU16_t;
           =4 
           =4 typedef union SI_UU32
           =4 {
           =4   uint32_t u32;
           =4   int32_t s32;
           =4   SI_UU16_t uu16[2];
           =4   uint16_t u16[2];
           =4   int16_t s16[2];
           =4   uint8_t u8[4];
           =4   int8_t s8[4];
           =4 } SI_UU32_t;
           =4 
           =4 // Generic pointer stuff is left out because if you are accessing
           =4 // generic pointer fields then it will need to be rewritten for 32-bit
           =4 
           =4 // __NOP should be declared in cmsis header core_cmInstr.h
           =4 extern void __NOP(void);
           =4 /// Macro to insert a no-operation (NOP) instruction.
           =4 #define NOP() __NOP()
           =4 
           =4 #else // ARM_ARCH 6 | 7
           =4 #error unsupported ARM arch
           =4 #endif
           =4 
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // IAR 8051
           =4 // http://www.iar.com
           =4 #elif defined __ICC8051__
           =4 
           =4 #include <intrinsics.h>
           =4 
           =4 #define SI_BIT(name)              __no_init bool __bit name
           =4 #define SI_SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =4 #define SI_SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =4 #define SI_SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =4 
           =4 #define SI_SEG_GENERIC __generic
           =4 #define SI_SEG_FAR  __xdata
           =4 #define SI_SEG_DATA __data
           =4 #define SI_SEG_NEAR __data
           =4 #define SI_SEG_IDATA __idata
           =4 #define SI_SEG_XDATA __xdata
           =4 #define SI_SEG_PDATA __pdata
           =4 #define SI_SEG_CODE  __code
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 26  

           =4 #define SI_SEG_BDATA __bdata
           =4 
           =4 #define _PPTOSTR_(x) #x
           =4 #define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =4 #define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =4 #define SI_INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =4 #define SI_INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =4 #define SI_INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __in
             -terrupt void name(void)
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =4 
           =4 #if (__DATA_MODEL__ == 0) /* TINY */ || \
           =4     (__DATA_MODEL__ == 1) /* SMALL */
           =4 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =4   __idata_reentrant return_type name parameter
           =4 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =4   __idata_reentrant return_type name parameter
           =4 #elif (__DATA_MODEL__ == 2) /* LARGE */ || \
           =4       (__DATA_MODEL__ == 3) /* GENERIC */ || \
           =4       (__DATA_MODEL__ == 4) /* FAR */
           =4 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =4   __xdata_reentrant return_type name parameter
           =4 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =4   __xdata_reentrant return_type name (parameter)
           =4 #else
           =4 #error "Illegal memory model setting."
           =4 #endif
           =4 
           =4 // Note: IAR does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =4              return_value name parameter
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =4              return_value name parameter
           =4 
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment)  vartype locsegment name
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * 
             -locsegment name
           =4                
           =4 #define SI_SEGMENT_POINTER(name, vartype, ptrseg) vartype __generic * ptrseg name
           =4 
           =4 #define SI_LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ add
             -r
           =4 
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment __no_init vartype name @ a
             -ddr
           =4 
           =4 // The following are used for byte ordering when referring to individual
           =4 // bytes within a SI_UU32_t.  B0 is the least significant byte.
           =4 #define B0 0 ///< Least significant byte of a 4 byte word
           =4 #define B1 1 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
           =4 #define B2 2 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
           =4 #define B3 3 ///< Most significant byte of a 4-byte word
           =4 
           =4 #define LSB 0 ///< Index to least significant bit of a 2 byte word
           =4 #define MSB 1 ///< Index to most significant bit of a 2 byte word
           =4 
           =4 /// A union type to make it easier to access individual bytes of a 16-bit
           =4 /// word, and to use as signed or unsigned type.
           =4 typedef union SI_UU16
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 27  

           =4 {
           =4   uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
           =4   int16_t s16;    ///< The two byte value as a 16-bit signed integer.
           =4   uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
           =4   int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
           =4 } SI_UU16_t;
           =4 
           =4 /// A union type to make it easier to access individual bytes within a
           =4 /// 32-bit word, or to access it as variations of 16-bit words, or to
           =4 /// use as signed or unsigned type.
           =4 typedef union SI_UU32
           =4 {
           =4   uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
           =4   int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
           =4   SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
           =4   uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
           =4   int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
           =4   uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
           =4   int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
           =4 } SI_UU32_t;
           =4 
           =4 // Generic pointer memory segment constants.
           =4 #define SI_GPTR                   ///< Generic pointer indeterminate type.
           =4 #define SI_GPTR_MTYPE_DATA  0x01  ///< Generic pointer for DATA segment.
           =4 #define SI_GPTR_MTYPE_IDATA 0x01  ///< Generic pointer for IDATA segment.
           =4 #define SI_GPTR_MTYPE_BDATA 0x01  ///< Generic pointer for BDATA segment.
           =4 #define SI_GPTR_MTYPE_PDATA 0x00  ///< Generic pointer for PDATA segment.
           =4 #define SI_GPTR_MTYPE_XDATA 0x00  ///< Generic pointer for XDATA segment.
           =4 #define SI_GPTR_MTYPE_CODE  0x80  ///< Generic pointer for CODE segment.
           =4 
           =4 /// Generic pointer structure containing the type and address.
           =4 typedef struct
           =4 {
           =4   SI_UU16_t address;  ///< The address of the generic pointer.
           =4   uint8_t memtype;    ///< The type of memory of the generic pointer.  
           =4 } GPTR_t;
           =4 
           =4 /// A union type to allow access to the fields of a generic pointer.
           =4 /// A generic pointer has a field indicating the type of memory and an
           =4 /// address within the memory.
           =4 typedef union SI_GEN_PTR
           =4 {
           =4   uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
           =4   GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
           =4 } SI_GEN_PTR_t;
           =4 
           =4 /// Macro to insert a no-operation (NOP) instruction.
           =4 #define NOP() __no_operation()
           =4 
           =4 #else // unknown toolchain
           =4 #error Unrecognized toolchain in si_toolchain.h
           =4 #endif
 794      =4  
 795      =4  /** @} */
 796      =4  
 797      =4  #endif
   1      =4  //-----------------------------------------------------------------------------
   2      =4  // compiler_defs.h
   3      =4  //-----------------------------------------------------------------------------
   4      =4  // Portions of this file are copyright Maarten Brock
   5      =4  // http://sdcc.sourceforge.net
   6      =4  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 28  

   7      =4  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =4  //
   9      =4  // GNU LGPL boilerplate:
  10      =4  /** This library is free software; you can redistribute it and/or
  11      =4    * modify it under the terms of the GNU Lesser General Public
  12      =4    * License as published by the Free Software Foundation; either
  13      =4    * version 2.1 of the License, or (at your option) any later version.
  14      =4    *
  15      =4    * This library is distributed in the hope that it will be useful,
  16      =4    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =4    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  18      =4    * Lesser General Public License for more details.
  19      =4    *
  20      =4    * You should have received a copy of the GNU Lesser General Public
  21      =4    * License along with this library; if not, write to the Free Software
  22      =4    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =4    *
  24      =4    * In other words, you are welcome to use, share and improve this program.
  25      =4    * You are forbidden to forbid anyone else to use, share and improve
  26      =4    * what you give them. Help stamp out software-hoarding!
  27      =4  **/
  28      =4  // Program Description:
  29      =4  //
  30      =4  // **Important Note**: This header file should be included before including
  31      =4  // a device-specific header file such as C8051F300_defs.h.
  32      =4  //
  33      =4  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =4  // special function registers and other 8051-specific features such as NOP
  35      =4  // generation, and locating variables in memory-specific segments.  The
  36      =4  // compilers are identified by their unique predefined macros. See also:
  37      =4  // http://predef.sourceforge.net/precomp.html
  38      =4  //
  39      =4  // SBIT and SFR define special bit and special function registers at the given
  40      =4  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =4  // little-endian format. SFR16E and SFR32E define sfr combinations without
  42      =4  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =4  // combinations will guarantee the order in which they are accessed when read
  44      =4  // or written.
  45      =4  //
  46      =4  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
  47      =4  // to avoid portability issues because of compiler endianness.
  48      =4  //
  49      =4  // Example:
  50      =4  // // my_mcu.c: main 'c' file for my mcu
  51      =4  // #include <compiler_defs.h>  // this file
  52      =4  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =4  //
  54      =4  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =4  // SFR   (P0, 0x80);           // Port 0
  56      =4  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
  57      =4  //                             // xdata memory at 0xE600
  58      =4  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =4  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =4  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =4  //                             // lsb at 0x93, msb at 0x96
  62      =4  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =4  //                             // lsb at 0xE2, msb at 0xE5
  64      =4  //
  65      =4  // Target:         C8051xxxx
  66      =4  // Tool chain:     Generic
  67      =4  // Command Line:   None
  68      =4  // 
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 29  

  69      =4  // Release 2.7 - 25 JUN 2014 (JM)
  70      =4  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =4  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =4  //     pointed at by a generic poitner
  73      =4  // Release 2.6 - 14 DEC 2012 (GO)
  74      =4  //        -Added define for deprecated SDCC keyword 'at'
  75      =4  // Release 2.5 - 12 SEP 2012 (TP)
  76      =4  //    -Added defines for deprecated SDCC keywords bit and code
  77      =4  // Release 2.4 - 27 AUG 2012 (TP)
  78      =4  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =4  // Release 2.3 - 27 MAY 2010 (DM)
  80      =4  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =4  // Release 2.2 - 06 APR 2010 (ES)
  82      =4  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =4  // Release 2.1 - 16 JUL 2009 (ES)
  84      =4  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =4  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =4  // Release 2.0 - 19 MAY 2009 (ES)
  87      =4  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
  88      =4  // Release 1.9 - 23 OCT 2008 (ES)
  89      =4  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =4  //    -Added SFR16 macro defintion for Hi-Tech
  91      =4  // Release 1.8 - 31 JUL 2008 (ES)
  92      =4  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =4  //    -Added macro's for IAR
  94      =4  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =4  // Release 1.7 - 11 SEP 2007 (BW)
  96      =4  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =4  // Release 1.6 - 27 AUG 2007 (BW)
  98      =4  //    -Updated copyright notice per agreement with Maartin Brock
  99      =4  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =4  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =4  // Release 1.5 - 24 AUG 2007 (BW)
 102      =4  //    -Added support for NOP () macro
 103      =4  //    -Added support for Hi-Tech ver 9.01
 104      =4  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =4  //    -Removed FID and fixed formatting.
 106      =4  // Release 1.3 - 30 SEP 2007 (TP)
 107      =4  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =4  //     under SDCC.
 109      =4  // Release 1.2 - (BW)
 110      =4  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =4  // Release 1.1 - (BW)
 112      =4  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =4  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =4  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =4  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =4  //    -Initial revision
 117      =4  
 118      =4  //-----------------------------------------------------------------------------
 119      =4  // Header File Preprocessor Directive
 120      =4  //-----------------------------------------------------------------------------
 121      =4  
 122      =4  #ifndef COMPILER_DEFS_H
 123      =4  #define COMPILER_DEFS_H
 124      =4  
 125      =4  #include "stdbool.h"
   1      =5  /**************************************************************************//**
   2      =5   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =5   *
   4      =5   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =5   *****************************************************************************/
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 30  

   6      =5  
   7      =5  #ifndef STDBOOL_H
           =5 #define STDBOOL_H
           =5 
           =5 #if defined __C51__
           =5 
           =5 typedef bit bool;
           =5 enum{
           =5   false = 0,
           =5   true = 1,
           =5 };
           =5 
           =5 #elif defined __ICC8051__
           =5 
           =5 #ifndef _SYSTEM_BUILD
           =5   #pragma system_include
           =5 #endif
           =5 
           =5 #ifndef __cplusplus
           =5 
           =5 #define bool _Bool
           =5 #define true 1
           =5 #define false 0
           =5 
           =5 #define __bool_true_false_are_defined 1
           =5 
           =5 #endif /* !__cplusplus */
           =5 
           =5 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =5 
           =5 typedef bit bool;
           =5 enum{
           =5   false = 0,
           =5   true = 1,
           =5 };
           =5 
           =5 #endif
           =5 
           =5 #endif //STDBOOL_H
  45      =5  
 126      =4  #include "stdint.h"
   1      =5  /**************************************************************************//**
   2      =5   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =5   *
   4      =5   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =5   *****************************************************************************/
   6      =5  
   7      =5  #ifndef STDINT_H
           =5 #define STDINT_H
           =5 
           =5 #if defined __C51__
           =5 
           =5 typedef unsigned char uint8_t;
           =5 typedef unsigned short uint16_t;
           =5 typedef unsigned long uint32_t;
           =5 typedef uint32_t uint64_t[2];
           =5 
           =5 typedef signed char int8_t;
           =5 typedef short int16_t;
           =5 typedef long int32_t;
           =5 typedef int32_t int64_t[2];
           =5 typedef float fp32_t;
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 31  

           =5 typedef double fp64_t;
           =5 
           =5 #elif defined __ICC8051__
           =5 
           =5 /* Fixed size types. These are all optional. */
           =5 #ifdef __INT8_T_TYPE__
           =5   typedef __INT8_T_TYPE__   int8_t;
           =5   typedef __UINT8_T_TYPE__ uint8_t;
           =5 #endif /* __INT8_T_TYPE__ */
           =5 
           =5 #ifdef __INT16_T_TYPE__
           =5   typedef __INT16_T_TYPE__   int16_t;
           =5   typedef __UINT16_T_TYPE__ uint16_t;
           =5 #endif /* __INT16_T_TYPE__ */
           =5 
           =5 #ifdef __INT32_T_TYPE__
           =5   typedef __INT32_T_TYPE__   int32_t;
           =5   typedef __UINT32_T_TYPE__ uint32_t;
           =5 #endif /* __INT32_T_TYPE__ */
           =5 
           =5 #ifdef __INT64_T_TYPE__
           =5   #pragma language=save
           =5   #pragma language=extended
           =5   typedef __INT64_T_TYPE__   int64_t;
           =5   typedef __UINT64_T_TYPE__ uint64_t;
           =5   #pragma language=restore
           =5 #endif /* __INT64_T_TYPE__ */
           =5 
           =5 #endif
           =5 
           =5 #endif
 127      =4  
 128      =4  //-----------------------------------------------------------------------------
 129      =4  // Macro definitions
 130      =4  //-----------------------------------------------------------------------------
 131      =4  
 132      =4  //SDK Version
 133      =4  #define SDK_VERSION   2
 134      =4  
 135      =4  #ifndef NULL
           =4 #define NULL ((void*) 0)
           =4 #endif
 138      =4  
 139      =4  
 140      =4  // SDCC - Small Device C Compiler
 141      =4  // http://sdcc.sourceforge.net
 142      =4  
 143      =4  #if defined SDCC
           =4 
           =4 #if (SDCC >= 300)
           =4 
           =4 #define interrupt __interrupt
           =4 #define _asm __asm
           =4 #define _endasm __endasm
           =4 #define bit __bit
           =4 #define code __code
           =4 #define at __at
           =4 
           =4 #endif
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   __xdata
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 32  

           =4 # define SEG_DATA  __data
           =4 # define SEG_NEAR  __data
           =4 # define SEG_IDATA __idata
           =4 # define SEG_XDATA __xdata
           =4 # define SEG_PDATA __pdata
           =4 # define SEG_CODE  __code
           =4 # define SEG_BDATA __bdata
           =4 
           =4 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =4 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =4 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
           =4 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =4 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
           =4 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =4 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =4 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
             -)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
             -regnum)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 33  

           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 #define NOP() _asm NOP _endasm
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x40
           =4 #define SI_GPTR_MTYPE_IDATA      0x40
           =4 #define SI_GPTR_MTYPE_BDATA      0x40
           =4 #define SI_GPTR_MTYPE_PDATA      0x60
           =4 #define SI_GPTR_MTYPE_XDATA      0x00
           =4 #define SI_GPTR_MTYPE_CODE       0x80
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         UU16 ADDR;
           =4         U8 MTYPE;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Raisonance (must be placed before Keil C51)
           =4 // http://www.raisonance.com
           =4 
           =4 #elif defined __RC51__
           =4 
           =4 //#error Raisonance C51 detected.
           =4 
           =4 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =4 # define SEG_FAR   xdata
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  data
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =4 # define SFR(name, addr)        sfr at addr                name
           =4 # define SFR16(name, addr)      sfr16 at addr              name
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 34  

           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =4 
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support -- NOP is opcode 0x00
           =4 #define NOP() asm { 0x00 }
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x04
           =4 #define SI_GPTR_MTYPE_IDATA      0x01
           =4 #define SI_GPTR_MTYPE_BDATA      0x04
           =4 #define SI_GPTR_MTYPE_PDATA      0x03
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 35  

           =4 #define SI_GPTR_MTYPE_XDATA      0x02
           =4 #define SI_GPTR_MTYPE_CODE       0x05
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         U8 MTYPE;
           =4         UU16 ADDR;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 
           =4 // Keil C51
           =4 // http://www.keil.com
           =4 
           =4 #elif defined __C51__
 360      =4  
 361      =4  //#error Keil C51 detected.
 362      =4  
 363      =4  # define SEG_GENERIC
 364      =4  # define SEG_FAR   xdata
 365      =4  # define SEG_DATA  data
 366      =4  # define SEG_NEAR  data
 367      =4  # define SEG_IDATA idata
 368      =4  # define SEG_XDATA xdata
 369      =4  # define SEG_PDATA pdata
 370      =4  # define SEG_CODE  code
 371      =4  # define SEG_BDATA bdata
 372      =4  
 373      =4  # define SBIT(name, addr, bit)  sbit  name = addr^bit
 374      =4  # define SFR(name, addr)        sfr   name = addr
 375      =4  # define SFR16(name, addr)      sfr16 name = addr
 376      =4  # define SFR16E(name, fulladdr) /* not supported */
 377      =4  # define SFR32(name, fulladdr)  /* not supported */
 378      =4  # define SFR32E(name, fulladdr) /* not supported */
 379      =4  
 380      =4  # ifndef __SLS_IDE__
 381      =4  
 382      =4  # define INTERRUPT(name, vector) void name (void) interrupt vector
 383      =4  # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
 384      =4  # define INTERRUPT_PROTO(name, vector) void name (void)
 385      =4  # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 386      =4  
 387      =4  # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
 388      =4  # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
 389      =4  // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
 390      =4  
 391      =4  # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
 392      =4  # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
 393      =4  # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
 394      =4  # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
 395      =4  # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
 396      =4  
 397      =4  # else  // __SLS_IDE__
           =4 
           =4 # define INTERRUPT(name, vector) void name (void)
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 36  

           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =4 
           =4 # endif // __SLS_IDE__
 415      =4  
 416      =4  // used with UU16
 417      =4  # define LSB 1
 418      =4  # define MSB 0
 419      =4  
 420      =4  // used with UU32 (b0 is least-significant byte)
 421      =4  # define b0 3
 422      =4  # define b1 2
 423      =4  # define b2 1
 424      =4  # define b3 0
 425      =4  
 426      =4  typedef unsigned char U8;
 427      =4  typedef unsigned int U16;
 428      =4  typedef unsigned long U32;
 429      =4  
 430      =4  typedef signed char S8;
 431      =4  typedef signed int S16;
 432      =4  typedef signed long S32;
 433      =4  
 434      =4  typedef union UU16
 435      =4  {
 436      =4     U16 U16;
 437      =4     S16 S16;
 438      =4     U8 U8[2];
 439      =4     S8 S8[2];
 440      =4  } UU16;
 441      =4  
 442      =4  typedef union UU32
 443      =4  {
 444      =4     U32 U32;
 445      =4     S32 S32;
 446      =4     UU16 UU16[2];
 447      =4     U16 U16[2];
 448      =4     S16 S16[2];
 449      =4     U8 U8[4];
 450      =4     S8 S8[4];
 451      =4  } UU32;
 452      =4  
 453      =4  // NOP () macro support
 454      =4  extern void _nop_ (void);
 455      =4  #define NOP() _nop_()
 456      =4  
 457      =4  // generic pointer memory type specifiers
 458      =4  #define SI_GPTR
 459      =4  #define SI_GPTR_MTYPE_DATA      0x00
 460      =4  #define SI_GPTR_MTYPE_IDATA     0x00
 461      =4  #define SI_GPTR_MTYPE_BDATA     0x00
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 37  

 462      =4  #define SI_GPTR_MTYPE_PDATA     0xFE
 463      =4  #define SI_GPTR_MTYPE_XDATA     0x01
 464      =4  #define SI_GPTR_MTYPE_CODE      0xFF
 465      =4  
 466      =4  // generic pointer access struct
 467      =4  typedef union SI_GENERIC_PTR
 468      =4  {
 469      =4      U8 U8[3];
 470      =4      struct
 471      =4      {
 472      =4          U8 MTYPE;
 473      =4          UU16 ADDR;
 474      =4      } GPTR;
 475      =4  } SI_GENERIC_PTR;
 476      =4  
 477      =4  //-----------------------------------------------------------------------------
 478      =4  
 479      =4  // Hi-Tech 8051
 480      =4  // http://www.htsoft.com
 481      =4  
 482      =4  #elif defined HI_TECH_C
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   far
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  near
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 
           =4 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =4 # define SFR(name, addr)          static volatile unsigned char name @ addr
           =4 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =4 # define INTERRUPT_PROTO(name, vector)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =4 // Note: Hi-Tech does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 38  

           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 #define NOP() asm(" nop ")
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Tasking / Altium
           =4 // http://www.altium.com/tasking
           =4 
           =4 
           =4 #elif defined _CC51
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   _xdat
           =4 # define SEG_DATA  _data
           =4 # define SEG_NEAR  _data
           =4 # define SEG_IDATA _idat
           =4 # define SEG_XDATA _xdat
           =4 # define SEG_PDATA _pdat
           =4 # define SEG_CODE  _rom
           =4 # define SEG_BDATA _bdat
           =4 
           =4 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =4 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =4 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =4 #if _CC51 > 71
           =4 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =4 #else
           =4 # define SFR16(name, addr)      /* not supported */
           =4 #endif
           =4 # define SFR16E(name, fulladdr) /* not supported */
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 39  

           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =4 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =4 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =4 
           =4 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =4 // is also using the same register bank. If not, the compiler will generate an error.
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
             -)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
             -ameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 extern void _nop (void);
           =4 #define NOP() _nop()
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 40  

           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 
           =4 // IAR 8051
           =4 // http://www.iar.com
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #include <stdbool.h>
           =4 #include <intrinsics.h>
           =4 
           =4 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =4 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =4 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =4 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr) /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define SEG_GENERIC __generic
           =4 # define SEG_FAR  __xdata
           =4 # define SEG_DATA __data
           =4 # define SEG_NEAR __data
           =4 # define SEG_IDATA __idata
           =4 # define SEG_XDATA __xdata
           =4 # define SEG_PDATA __pdata
           =4 # define SEG_CODE  __code
           =4 # define SEG_BDATA __bdata
           =4 
           =4 #define bit bool
           =4 
           =4 # define _PPTOSTR_(x) #x
           =4 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =4 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =4 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =4 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =4 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =4 // Note: IAR does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 41  

           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 
           =4 #define NOP() __no_operation();
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x01
           =4 #define SI_GPTR_MTYPE_IDATA      0x01
           =4 #define SI_GPTR_MTYPE_BDATA      0x01
           =4 #define SI_GPTR_MTYPE_PDATA      0x00
           =4 #define SI_GPTR_MTYPE_XDATA      0x00
           =4 #define SI_GPTR_MTYPE_CODE       0x80
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         UU16 ADDR;
           =4         U8 MTYPE;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Crossware
           =4 // http://www.crossware.com
           =4 
           =4 #elif defined _XC51_VER
           =4 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =4 # define SFR(name, addr)        _sfr     name = addr
           =4 # define SFR16(name, addr)      _sfrword name = addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 42  

           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Wickenh盲user
           =4 // http://www.wickenhaeuser.de
           =4 
           =4 #elif defined __UC__
           =4 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =4 # define SFR(name, addr)        near unsigned char name @ addr
           =4 # define SFR16(name, addr)      /* not supported */
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Default
           =4 // Unknown compiler
           =4 
           =4 #else
           =4 # warning unrecognized compiler
           =4 # define SBIT(name, addr, bit)  volatile bool           name
           =4 # define SFR(name, addr)        volatile unsigned char  name
           =4 # define SFRX(name, addr)       volatile unsigned char  name
           =4 # define SFR16(name, addr)      volatile unsigned short name
           =4 # define SFR16E(name, fulladdr) volatile unsigned short name
           =4 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =4 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =4 
           =4 #endif
 798      =4  
 799      =4  //-----------------------------------------------------------------------------
 800      =4  // Header File PreProcessor Directive
 801      =4  //-----------------------------------------------------------------------------
 802      =4  
 803      =4  #endif                                 // #define COMPILER_DEFS_H
 804      =4  
 805      =4  //-----------------------------------------------------------------------------
 806      =4  // End Of File
 807      =4  //-----------------------------------------------------------------------------
   6      =2  #include "sPlcPort.h"
   1      =3  #ifndef __SPLCPORT_H__
   2      =3  #define __SPLCPORT_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "sPlc.h"
           =2 /*****************************************************************************/
           =2 #include <stdio.h>
           =2 #include <stdlib.h> 
           =2 #include <string.h>
           =2 #include <INTRINS.H>
           =2 #include <ctype.h>
           =2 #include <LIMITS.H>
           =2 #include <math.h>
           =2 /*****************************************************************************/
           =2 extern xdata int16_t volatile NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
           =2 extern xdata int16_t volatile NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
           =2 extern idata volatile uint8_t TimerCounter_1mS;
           =2 extern idata volatile uint8_t TimerCounter_10mS;
           =2 extern idata volatile uint8_t TimerCounter_100mS;
           =2 extern idata volatile uint8_t Timer0_L, Timer0_H;
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 43  

           =2 /*****************************************************************************/
           =2 void sPlcInit(void);//软逻辑初始化
           =2 
           =2 void sPlcProcessStart(void);//sPLC轮询起始
           =2 void sPlcProcessEnd(void);//sPLC轮询结束
           =2 extern void initWatchDog(void);//看门狗初始化
           =2 extern void feedWatchDog(void) reentrant;//喂狗
           =2 extern void enableWatchDog(void);//使能看门狗
           =2 extern void disableWatchDog(void);//关闭看门狗(未锁定)
           =2 void checkWatchDog(void);//检查看门狗状态
           =2 /*****************************************************************************/
           =2 void assertCoilAddress(uint16_t adr) reentrant;
           =2 void assertRegisterAddress(uint16_t adr) reentrant;
           =2 /*****************************************************************************/
           =2 void clearX(void);
           =2 void clearY(void);
           =2 void clearDM(void);
           =2 void clearEM(void);
           =2 void clearR(void);
           =2 void clearT(void);
           =2 void clearTD(void);
           =2 void clearC(void);
           =2 void clearSPCOIL();
           =2 void clearSPREG(void);
           =2 extern void loadNvram(void);
           =2 extern void clearNvram(void);
           =2 extern void saveNvram(void);
           =2 extern void updataNvram(void);
           =2 /*****************************************************************************/
           =2 void enterSplcIsr(void);
           =2 void exitSplcIsr(void);
           =2 /*****************************************************************************/
           =2 void initSplcTimer(void);
           =2 void chipDacInit(void);
           =2 void chipAdcInit(void);
           =2 void sPlcInit(void);
           =2 void refreshDac(void);
           =2 /*****************************************************************************/
           =2 #endif
   4      =3  #ifndef __SPLCPORT_H__
   4      =3  #define __SPLCPORT_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "sPlc.h"
   5      =3  #include "sPlcConfig.h"
   1      =4  #ifndef __SPLCCONFIG_H__
           =4 #define __SPLCCONFIG_H__
           =4 /*****************************************************************************/
           =4 #define DEBUG_LED_ON                                            0
           =4 #define DEBUG_LED_OFF                                           1
           =4 /*****************************************************************************/
           =4 #ifdef C8051F580
           =4 #define CONFIG_SYSCLK                       (48000000L)//F580内部48M
           =4 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =4 #endif
           =4 
           =4 #ifdef C8051F020
           =4 #define CONFIG_SYSCLK                       (22118400L)
           =4 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =4 #endif
           =4 
           =4 //SPLC设置
           =4 #define SET_LED_RUN(b)
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 44  

           =4 #define SET_LED_ERROR(b)
           =4 #define SET_LED_DAC(b)
           =4 #define SET_LED_ADC(b)
           =4 #define SET_LED_EPROM(b)
           =4 #define SET_LED_IO(b)
           =4 #define SET_LED_WDT(b)
           =4 #define SET_LED_PCA(b)
           =4 
           =4 #define GET_LED_RUN(b)
           =4 #define GET_LED_ERROR(b)
           =4 #define GET_LED_DAC(b)
           =4 #define GET_LED_ADC(b)
           =4 #define GET_LED_EPROM(b)
           =4 #define GET_LED_IO(b)
           =4 #define GET_LED_WDT(b)
           =4 #define GET_LED_PCA(b)
           =4 
           =4 #define REBOOT()                                                                RSTSRC |= 1 << 4//强制复位
           =4 /*****************************************************************************/
           =4 #define CONFIG_UART0_BAUDRATE                           115200//串口波特率
           =4 #define CONFIG_UART0_PARITY                                     NONE
           =4 #define CONFIG_UART0_STOPBIT                            1
           =4 #define CONFIG_UART0_DATABIT                            8
           =4 
           =4 #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
           =4 #define CONFIG_UART1_PARITY                                     NONE
           =4 #define CONFIG_UART1_STOPBIT                            1
           =4 #define CONFIG_UART1_DATABIT                            8
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_ASSERT                                      1//检查地址范围
           =4 #define CONFIG_SPLC_DEV                                         0x0A01//设备号
           =4 #define CONFIG_SPLC_CLEAR_CODE                          0xA58E
           =4 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =4 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_LED                           0//启用调试LED
           =4 #define CONFIG_SPLC_USING_CLEAR_NVRAM           0//启用清除NVRAM功能
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_INPUT                      0//输入IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_OUTPUT                     0//输出IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_EPROM                         0//EPROM掉电存储启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_UART1                         0//UART1串口启用
           =4 #if CONFIG_SPLC_USING_UART1 == 1
           =4 #define SPLC_UART1                                                      0
           =4 #endif
           =4 #define CONFIG_SPLC_USING_UART2                         0//UART1串口启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_ADC                           0//使能ADC模块
           =4 #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
           =4 #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =4 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2400L// ADC Voltage Reference (mV)
           =4 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_DAC                           0//是能DAC模块
           =4 /*****************************************************************************/
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 45  

           =4 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          0//是能MODBUS RTU从站
           =4 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =4 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =4 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =4 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =4 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =4 /*****************************************************************************/
           =4 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =4 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =4 #define DISABLE_INTERRUPT                                       EA = 0;
           =4 #define ENABLE_INTERRUPT                                        EA = 1;
           =4 /*****************************************************************************/
           =4 //线圈 保持 8 * 16 = 128BIT
           =4 #define MR_START                                                0
           =4 #define MR_END                                                  3
           =4 //线圈寄存器 非保持 8 * 16 = 128BIT
           =4 #define R_START                                                 4
           =4 #define R_END                                                   11
           =4 //数据寄存器 保持 8
           =4 #define DM_START                                                12
           =4 #define DM_END                                                  19
           =4 //数据寄存器 非保持 140个字
           =4 #define EM_START                                                20
           =4 #define EM_END                                                  159
           =4 //延时线圈
           =4 //1MS 1 * 16 = 16BIT
           =4 #define T_1MS_START                                             160
           =4 #define T_1MS_END                                               160
           =4 //10MS 1 * 16 = 16BIT
           =4 #define T_10MS_START                                    161
           =4 #define T_10MS_END                                              161
           =4 //100MS 1 * 16 = 16BIT
           =4 #define T_100MS_START                                   162
           =4 #define T_100MS_END                                             162
           =4 //延时计时器 
           =4 //1MS 16
           =4 #define TD_1MS_START                                    163
           =4 #define TD_1MS_END                                              178
           =4 //10MS 16
           =4 #define TD_10MS_START                                   179
           =4 #define TD_10MS_END                                             194
           =4 //100MS 16
           =4 #define TD_100MS_START                                  195
           =4 #define TD_100MS_END                                    210
           =4 //计数器 1
           =4 #define C_START                                                 211
           =4 #define C_END                                                   211
           =4 //输入位寄存器 1 * 16 = 16个
           =4 #define X_START                                                 212
           =4 #define X_END                                                   212             
           =4 //输出位寄存器 1 * 16 = 16个
           =4 #define Y_START                                                 213
           =4 #define Y_END                                                   213
           =4 //特殊寄存器 24个字
           =4 #define SPREG_START                                             214
           =4 #define SPREG_END                                               237
           =4 //特殊线圈      4 * 16 = 64个
           =4 #define SPCOIL_START                                    238
           =4 #define SPCOIL_END                                              241
           =4 /*****************************************************************************/
           =4 #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
           =4 /*****************************************************************************/
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 46  

           =4 #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
           =4 #define SPCOIL_START_UP                                 (SPCOIL_START * 16 + 1)//初次上电
           =4 #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 2)//1mS间隔 50%占空比脉冲
           =4 #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 3)//10mS
           =4 #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 4)//100mS  
           =4 #define SPCOIL_PS1000MS                                 (SPCOIL_START * 16 + 5)//1000mS 
           =4 
           =4 #define SPCOIL_NVRAM_FAIL                               (SPCOIL_START * 16 + 14)//NVRAM校验码错误
           =4 #define SPCOIL_WATCHDOG                                 (SPCOIL_START * 16 + 15)//看门狗溢出
           =4 #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 16)//UART1发送忙
           =4 #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 17)//UART1接收忙
           =4 #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 18)//发送完成
           =4 #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 19)//接收完成
           =4 #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 20)//UART1发送忙
           =4 #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 21)//UART1接收忙
           =4 #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 22)//发送完成
           =4 #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 23)//接收完成
           =4 /*****************************************************************************/
           =4 #define SPREG_RUNTIME_L                                 (SPREG_START + 0)//累计运行时间秒 32BIT
           =4 #define SPREG_RUNTIME_H                                 (SPREG_START + 1)//累计运行时间秒 32BIT         
           =4 /*****************************************************************************/
           =4 #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
           =4 #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
           =4 #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
           =4 #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
           =4 #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
           =4 #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
           =4 /*****************************************************************************/
           =4 #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
           =4 #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
           =4 #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
           =4 #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
           =4 #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
           =4 #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
           =4 /*****************************************************************************/
           =4 #define SPREG_CLEAR_NVRAM0                              (SPREG_END)//清除NVRAM后重新启动
           =4 /*****************************************************************************/
           =4 
           =4 #endif
   6      =3  #include "stdint.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 47  

           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
   7      =3  #include "stdbool.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 48  

           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
   8      =3  #include "endian.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef __ENDIAN_H__
           =4 #define __ENDIAN_H__
           =4 
           =4 #define bswapu16(x) (((x) >> 8) | ((x) << 8))
           =4 #define bswapu32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) \
           =4                   | (((x) & 0x0000FF00) << 8) | ((x) << 24))
           =4 
           =4 #define bswap16(x) bswapu16((uint16_t)(x))
           =4 #define bswap32(x) bswapu32((uint32_t)(x))
           =4 
           =4 // Big Endian Compilers
           =4 #if ((defined __C51__) || (defined __RC51__) || (defined _CC51))
           =4 
           =4 #define htobe16(x) (x)
           =4 #define htobe32(x) (x)
           =4 #define be16toh(x) (x)
           =4 #define be32toh(x) (x)
           =4 
           =4 #define htole16(x) bswap16(x)
           =4 #define htole32(x) bswap32(x)
           =4 #define le16toh(x) bswap16(x)
           =4 #define le32toh(x) bswap32(x)
           =4 
           =4 #elif ((defined SDCC) || (defined HI_TECH_C) || (defined __ICC8051__))
           =4 
           =4 #define htobe16(x) bswap16(x)
           =4 #define htobe32(x) bswap32(x)
           =4 #define be16toh(x) bswap16(x)
           =4 #define be32toh(x) bswap32(x)
           =4 
           =4 #define htole16(x) (x)
           =4 #define htole32(x) (x)
           =4 #define le16toh(x) (x)
           =4 #define le32toh(x) (x)
           =4 
           =4 #else
           =4 
           =4 #define htobe16(x) (x)
           =4 #define htobe32(x) (x)
           =4 #define be16toh(x) (x)
           =4 #define be32toh(x) (x)
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 49  

           =4 
           =4 #define htole16(x) (x)
           =4 #define htole32(x) (x)
           =4 #define le16toh(x) (x)
           =4 #define le32toh(x) (x)
           =4 
           =4 #endif  // Compiler Definitions
           =4 
           =4 #endif  // __ENDIAN_H__
   9      =3  #include "si_toolchain.h"
   1      =4  /******************************************************************************
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef __SI_TOOLCHAIN_H__
           =4 #define __SI_TOOLCHAIN_H__
           =4 
           =4 #include <stdint.h>
           =4 #include <stdbool.h>
           =4 
           =4 /**************************************************************************//**
           =4  *
           =4  * @addtogroup toolchain_group Toolchain Abstraction
           =4  *
           =4  * @brief Macros for toolchain abstraction.
           =4  *
           =4  * # Introduction #
           =4  *
           =4  * This header file contains macros that are used to provide an abstraction
           =4  * for toolchain use in source code.  The 8051 compiler requires C-language
           =4  * extensions in order to fully use features of the 8051 architecture.  All
           =4  * compilers for 8051 implement a set of extensions but use different names
           =4  * and ways of implementing those extensions.  This header file provides
           =4  * macros that are defined for each supported toolchain and can be used in
           =4  * the source code.  This allows the source code to use 8051 extensions and
           =4  * remain independent of which toolchain is used for compilation.
           =4  *
           =4  * ## Variable and Pointer Declarations ##
           =4  *
           =4  * It is often useful to specify the memory area (or segment) of a variable,
           =4  * pointer, or pointer target.  For example, you may wish to place all
           =4  * variables in XDATA by default, but for variables used in time-sensitive
           =4  * code you use DATA for efficient access.  In this case you declare the
           =4  * XDATA variable in the normal C way, but declare the variables to be located
           =4  * in the DATA segment using @ref SI_SEGMENT_VARIABLE.
           =4  *
           =4  * Pointers are more complicated because there are two memory spaces
           =4  * associated with a pointer, the pointer target, and the pointer variable
           =4  * itself.  When using default memory segment for the pointer location and
           =4  * target, then no special macro is needed.  But if you wish to specify the
           =4  * pointer variable location, or target memory segment, then you can use one
           =4  * of the following macros to do this in a toolchain-independent way.
           =4  *
           =4  * |Pointer segment|Target segment|Macro                                   |
           =4  * |---------------|--------------|----------------------------------------|
           =4  * |default        |generic       |None                                    |
           =4  * |default        |specific      |@ref SI_VARIABLE_SEGMENT_POINTER        |
           =4  * |specific       |generic       |@ref SI_SEGMENT_POINTER                 |
           =4  * |specific       |specific      |@ref SI_SEGMENT_VARIABLE_SEGMENT_POINTER|
           =4  *
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 50  

           =4  * ## Prior Toolchain Abstraction Header File ##
           =4  *
           =4  * This file supercedes an earlier header file named `compiler_defs.h`.  We
           =4  * are deprecating the use of compiler_defs.h, however it will remain for
           =4  * backwards compatibility.  This file was created to normalize macro names,
           =4  * remove unused macros, and to provide documentation.
           =4  *
           =4  * ## Supported Toolchains ##
           =4  *
           =4  * - Keil/ARM C51
           =4  *
           =4  * @{
           =4  *
           =4  *****************************************************************************/
           =4 
           =4 // Make sure there is a NULL defined if the toolchain does not provide it.
           =4 #ifndef NULL
           =4 #define NULL ((void *)0)
           =4 #endif
           =4 
           =4 // -------------------------------
           =4 // Keil/ARM C51
           =4 //
           =4 #if defined(__C51__)
           =4 
           =4 /// Used with pointers, declares a generic pointer.  Generic pointers
           =4 /// work with any memory space but are inefficient.
           =4 #define SI_SEG_GENERIC
           =4 
           =4 /// Declares a variable to be located in 8051 DATA space.
           =4 #define SI_SEG_DATA data
           =4 
           =4 /// Declares a variable to be located in 8051 IDATA space.
           =4 #define SI_SEG_IDATA idata
           =4 
           =4 /// Declares a variable to be located in 8051 XDATA space.
           =4 #define SI_SEG_XDATA xdata
           =4 
           =4 /// Declares a variable to be located in 8051 PDATA space.
           =4 #define SI_SEG_PDATA pdata
           =4 
           =4 /// Declares a variable to be located in 8051 BDATA (bit-addressable) space.
           =4 #define SI_SEG_BDATA bdata
           =4 
           =4 /// Declares a variable to be located in 8051 CODE space.
           =4 #define SI_SEG_CODE code
           =4 
           =4 /**************************************************************************//**
           =4  * Declares a bit variable in a bit-addressable memory space.
           =4  *
           =4  * @param name The name of the bit variable.
           =4  *****************************************************************************/
           =4 #define SI_BIT(name) bit name
           =4 
           =4 /**************************************************************************//**
           =4  * Declares a bit variable in a bit-addressable SFR or memory space.
           =4  *
           =4  * @param name The name of the bit variable.
           =4  * @param address The address of the byte containing the bit.
           =4  * @param bitnum The bit number (0-7) within the byte.
           =4  *
           =4  * This cannot be used to make any arbitrary SFR or variable into
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 51  

           =4  * a bit variable.  The underlying memory must support bit-addressability.
           =4  *****************************************************************************/
           =4 #define SI_SBIT(name, address, bitnum) sbit name = address^bitnum
           =4 
           =4 /**************************************************************************//**
           =4  * Declares an 8-bit special function register (SFR) variable.
           =4  *
           =4  * @param name The name of the SFR variable.
           =4  * @param address The address of the SFR.
           =4  *
           =4  * This creates a C variable (8-bit) that maps to a physical special function
           =4  * register of the 8051.  This cannot be used to make any arbitrary memory
           =4  * location into an SFR.  The _address_ must map to a real SFR in the memory
           =4  * map.
           =4  *****************************************************************************/
           =4 #define SI_SFR(name, address) sfr name = address
           =4 
           =4 /**************************************************************************//**
           =4  * Declares a 16-bit special function register (SFR) variable.
           =4  *
           =4  * @param name The name of the SFR variable.
           =4  * @param address The address of the 16-bit SFR.
           =4  *
           =4  * This creates a C variable (16-bit) that maps to a physical special function
           =4  * register of the 8051.  This cannot be used to make any arbitrary memory
           =4  * location into an SFR.  The _address_ must map to a real 16-bit SFR in the
           =4  * memory map.
           =4  *****************************************************************************/
           =4 #define SI_SFR16(name, address) sfr16 name = address
           =4 
           =4 #ifndef __SLS_IDE__
           =4 /**************************************************************************//**
           =4  * Define an interrupt handler function for an interrupt vector.
           =4  *
           =4  * @param name The name of the interrupt handler function.
           =4  * @param vector The interrupt vector number.
           =4  *
           =4  * This macro defines a function to be an interrupt handler.  The _vector_
           =4  * parameter is the 8051 interrupt vector number, not the address.  This
           =4  * will cause the compiler to treat the function as the interrupt handler
           =4  * and generate the appropriate prolog/epilog code.
           =4  *
           =4  * @note This macro is used to define the function implementation.  To declare
           =4  * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO.
           =4  *****************************************************************************/
           =4 #define SI_INTERRUPT(name, vector) void name (void) interrupt vector
           =4 
           =4 /**************************************************************************//**
           =4  * Define an interrupt handler function using a specific register bank.
           =4  *
           =4  * @param name The name of the interrupt handler function.
           =4  * @param vector The interrupt vector number.
           =4  * @param regnum The register bank number (0-3).
           =4  *
           =4  * This macro defines a function to be an interrupt handler, using a specific
           =4  * register bank for the interrupt code.  The _vector_ parameter is the 8051
           =4  * interrupt vector number, not the address.  The _regnum_ parameter is the
           =4  * register bank number (0-3) that will be used as general purpose registers
           =4  * for the instructions in the compiled code.  Using dedicated register banks
           =4  * for interrupt handlers allows the prolog code to just switch banks instead
           =4  * of saving and restoring all the general purpose registers.  This can make
           =4  * interrupt entry/exit faster but requires dedicating a register bank for
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 52  

           =4  * the interrupt handler.
           =4  *
           =4  * @note This macro is used to define the function implementation.  To declare
           =4  * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO_USING.
           =4  *****************************************************************************/
           =4 #define SI_INTERRUPT_USING(name, vector, regnum)                             \
           =4              void name (void) interrupt vector using regnum
           =4 
           =4 /**************************************************************************//**
           =4  * Declare an interrupt handler prototype for an interrupt vector.
           =4  *
           =4  * @param name The name of the interrupt handler function.
           =4  * @param vector The interrupt vector number.
           =4  *
           =4  * This macro declares a function prototype for an interrupt handler.  The
           =4  * _vector_ parameter is the 8051 interrupt vector number, not the address.
           =4  * Declaring the function prototype this way will cause the compiler to
           =4  * recognize that the function is an interrupt handler and not a normal C
           =4  * function.
           =4  *
           =4  * @note This macro is used to declare a prototype for the interrupt function.
           =4  * To define the interrupt function implementation, use @ref SI_INTERRUPT.
           =4  *****************************************************************************/
           =4 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =4 
           =4 /**************************************************************************//**
           =4  * Declare an interrupt handler prototype using a specific register bank.
           =4  *
           =4  * @param name The name of the interrupt handler function.
           =4  * @param vector The interrupt vector number.
           =4  * @param regnum The register bank number (0-3).
           =4  *
           =4  * This macro declares a function prototype for an interrupt handler, for a
           =4  * function that uses a specific register bank for the interrupt code.  The
           =4  * _vector_ parameter is the 8051 interrupt vector number, not the address.
           =4  * The _regnum_ parameter is the register bank number (0-3) that will be used
           =4  * as general purpose registers in the function.  Declaring the function
           =4  * prototype this way will cause the compiler to recognize that the function
           =4  * is an interrupt handler and is not a normal C function.
           =4  *
           =4  * @note This macro is used to declare a prototype for the interrupt function.
           =4  * To define the interrupt function implementation,
           =4  * use @ref SI_INTERRUPT_USING.
           =4  *****************************************************************************/
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 /**************************************************************************//**
           =4  * Define a function to be reentrant (store local variables on the stack).
           =4  *
           =4  * @param name The name of the function.
           =4  * @param return_type The data type of the function return value
           =4  * (void, int, etc).
           =4  * @param parameter One C function parameter (or "void") (type and name).
           =4  *
           =4  * This macro defines a function to be reentrant.
           =4  *
           =4  * You must specify the _return_type_ which is the type of the function.  It
           =4  * can be `void` or any other C type or typedef.  The _parameters_ argument
           =4  * is the list of function parameters.  It can be `void` or else it must be
           =4  * a parameter data type and name.  It can also be multiple parameters but
           =4  * they must be enclosed in parentheses and separated by commas.
           =4  *
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 53  

           =4  * __Example__
           =4  *
           =4  * ~~~~~~~~.c
           =4  * // The following is used to implement a function with the following
           =4  * // signature...
           =4  * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
           =4  *
           =4  * SI_REENTRANT_FUNCTION(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2))
           =4  * {
           =4  *   // Function implementation body
           =4  * }
           =4  * ~~~~~~~~
           =4  *
           =4  * @note This macro is used to define the function implementation.  To declare
           =4  * the function prototype, use @ref SI_REENTRANT_FUNCTION_PROTO.
           =4  *****************************************************************************/
           =4 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =4   return_type name parameter reentrant
           =4 
           =4 /**************************************************************************//**
           =4  * Declare a function to be reentrant (store local variables on the stack).
           =4  *
           =4  * @param name The name of the function.
           =4  * @param return_type The data type of the function return value
           =4  * (void, int, etc).
           =4  * @param parameter One C function parameter (or "void") (type and name).
           =4  *
           =4  * This macro declares a function prototype for a C function that is reentrant.
           =4  * See the documentation for @ref SI_REENTRANT_FUNCTION for an explanation of
           =4  * the macro arguments.  This is an advanced feature.
           =4  *
           =4  * @note This macro is used to declare a prototype for the function.  To
           =4  * define the function implementation, use @ref SI_REENTRANT_FUNCTION.
           =4  *****************************************************************************/
           =4 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =4   return_type name parameter reentrant
           =4                
           =4 /**************************************************************************//**
           =4  * Define a function to use a specific register bank.
           =4  *
           =4  * @param name The name of the function.
           =4  * @param return_value The data type of the function return value
           =4  * (void, int, etc).
           =4  * @param parameter One C function parameter (or "void") (type and name).
           =4  * @param regnum The register bank number (0-3).
           =4  *
           =4  * This macro defines a function that uses a specific register bank.  The
           =4  * _regnum_ parameter is the register bank number (0-3) that will be used as
           =4  * general purpose registers for the instructions in the compiled function
           =4  * code.  Using dedicated register banks for a function can reduce the amount
           =4  * of registers saving and restoring needed on entry and exit to the
           =4  * function.  However, this is an advanced feature and you should not use it
           =4  * unless you fully understand how and when to use register banking.
           =4  *
           =4  * You must specify the _return_value_ which is the type of the function.  It
           =4  * can be `void` or any other C type or typedef.  The _parameters_ argument
           =4  * is the list of function parameters.  It can be `void` or else it must be
           =4  * a parameter data type and name.  It can also be multiple parameters but
           =4  * they must be enclosed in parentheses and separated by commas.
           =4  *
           =4  * __Example__
           =4  *
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 54  

           =4  * ~~~~~~~~.c
           =4  * // The following is used to implement a function with the following
           =4  * // signature, and that uses register bank 3 ...
           =4  * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
           =4  *
           =4  * SI_FUNCTION_USING(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2), 3)
           =4  * {
           =4  *   // Function implementation body
           =4  * }
           =4  * ~~~~~~~~
           =4  *
           =4  * @note This macro is used to define the function implementation.  To declare
           =4  * the function prototype, use @ref SI_FUNCTION_PROTO_USING.
           =4  *****************************************************************************/
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =4              return_value name parameter using regnum
           =4 
           =4 /**************************************************************************//**
           =4  * Declare a function that uses a specific register bank.
           =4  *
           =4  * @param name The name of the function.
           =4  * @param return_value The data type of the function return value
           =4  * (void, int, etc).
           =4  * @param parameter One C function parameter (or "void") (type and name).
           =4  * @param regnum The register bank number (0-3).
           =4  *
           =4  * This macro declares a function prototype for a C function that uses a
           =4  * specific register its working registers.  See the documentation for
           =4  * @ref SI_FUNCTION_USING for an explanation of the macro arguments.  This is
           =4  * an advanced feature.
           =4  *
           =4  * @note This macro is used to declare a prototype for the function.  To
           =4  * define the function implementation, use @ref SI_FUNCTION_USING.
           =4  *****************************************************************************/
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =4              return_value name parameter
           =4 
           =4 /**************************************************************************//**
           =4  * Declare a variable to be located in a specific memory segment.
           =4  *
           =4  * @param name The variable name.
           =4  * @param vartype The variable data type.* @param memseg The memory segment to use for the variable.
           =4  *
           =4  * This macro declares a variable to be located in a specific memory area
           =4  * (or segment) of the 8051 memory space.  It is only necessary to use this
           =4  * macro if you want to force the variable into a specific memory space instead
           =4  * of the default memory space used by the compiler.  The segment can be
           =4  * one of the following:
           =4  *
           =4  * - @ref SI_SEG_DATA
           =4  * - @ref SI_SEG_IDATA
           =4  * - @ref SI_SEG_BDATA
           =4  * - @ref SI_SEG_PDATA
           =4  * - @ref SI_SEG_XDATA
           =4  * - @ref SI_SEG_CODE
           =4  *
           =4  * __Example__
           =4  *
           =4  * ~~~~~~~~.c
           =4  * // The following macro can be used to create a variable located in
           =4  * // XDATA with the following signature:
           =4  * uint8_t myVar;
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 55  

           =4  *
           =4  * SI_SEGMENT_VARIABLE(myVar, uint8_t, SEG_XDATA);
           =4  * ~~~~~~~~
           =4  *****************************************************************************/
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype memseg name
           =4 
           =4 /**************************************************************************//**
           =4  * Declare a memory segment specific pointer variable.
           =4  *
           =4  * @param name The pointer variable name.
           =4  * @param vartype The pointer data type.
           =4  * @param targseg The target memory segment for the pointer.
           =4  *
           =4  * This macro declares a pointer that points at a specific memory area
           =4  * (or segment).  The memory segment of the pointer variable itself is not
           =4  * specified and the default is used.  The segment can be one of the following:
           =4  *
           =4  * - @ref SI_SEG_DATA
           =4  * - @ref SI_SEG_IDATA
           =4  * - @ref SI_SEG_BDATA
           =4  * - @ref SI_SEG_PDATA
           =4  * - @ref SI_SEG_XDATA
           =4  * - @ref SI_SEG_CODE
           =4  *
           =4  * __Example__
           =4  *
           =4  * ~~~~~~~~.c
           =4  * // The following macro can be used to create a pointer that points to
           =4  * // a location in XDATA with the following signature:
           =4  * uint8_t *pVar; // where pVar is pointing at XDATA
           =4  *
           =4  * SI_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA);
           =4  * ~~~~~~~~
           =4  *****************************************************************************/
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =4              vartype targseg * name
           =4 
           =4 /**************************************************************************//**
           =4  * Declare a memory segment specific pointer variable, in a specific segment.
           =4  *
           =4  * @param name The pointer variable name.
           =4  * @param vartype The pointer data type.
           =4  * @param targseg The target memory segment for the pointer.
           =4  * @param memseg The memory segment to use for the pointer variable.
           =4  *
           =4  * This macro declares a pointer that points at a specific memory area
           =4  * (or segment).  The pointer variable itself is also located in a specified
           =4  * memory segment by _memseg_.  The arguments _targseg_ and _memseg_ can be
           =4  * one of the following:
           =4  *
           =4  * - @ref SI_SEG_DATA
           =4  * - @ref SI_SEG_IDATA
           =4  * - @ref SI_SEG_BDATA
           =4  * - @ref SI_SEG_PDATA
           =4  * - @ref SI_SEG_XDATA
           =4  * - @ref SI_SEG_CODE
           =4  *
           =4  * __Example__
           =4  *
           =4  * ~~~~~~~~.c
           =4  * // The following macro can be used to create a pointer that points to
           =4  * // a location in XDATA while the pointer itself is located in DATA, with
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 56  

           =4  * // the following signature:
           =4  * uint8_t *pVar; // where pVar is located in DATA and is pointing at XDATA
           =4  *
           =4  * SI_SEGMENT_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA, SEG_DATA);
           =4  * ~~~~~~~~
           =4  *****************************************************************************/
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =4              vartype targseg * memseg name
           =4 
           =4 /**************************************************************************//**
           =4  * Declare a generic pointer variable that is located in a specific segment.
           =4  *
           =4  * @param name The pointer variable name.
           =4  * @param vartype The pointer data type.
           =4  * @param memseg The memory segment to use for the pointer variable.
           =4  *
           =4  * This macro declares a pointer that is a generic pointer.  This means it can
           =4  * point at any kind of memory location.  However the pointer variable itself
           =4  * is located in a specific memory segment by _memseg_, which can be one of
           =4  * the following:
           =4  *
           =4  * - @ref SI_SEG_DATA
           =4  * - @ref SI_SEG_IDATA
           =4  * - @ref SI_SEG_BDATA
           =4  * - @ref SI_SEG_PDATA
           =4  * - @ref SI_SEG_XDATA
           =4  * - @ref SI_SEG_CODE
           =4  *
           =4  * __Example__
           =4  *
           =4  * ~~~~~~~~.c
           =4  * // The following macro can be used to create a generic pointer that
           =4  * // is located in DATA and points at any memory type, with the
           =4  * // following signature:
           =4  * uint8_t *pVar; // where pVar is located in DATA and is a generic pointer
           =4  *
           =4  * SI_SEGMENT_POINTER(pVar, uint8_t, SEG_DATA);
           =4  * ~~~~~~~~
           =4  *****************************************************************************/
           =4 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * memseg name
           =4 
           =4 /**************************************************************************//**
           =4  * Declare an uninitialized variable that is located at a specific address.
           =4  *
           =4  * @param name The variable name.
           =4  * @param vartype The variable data type.
           =4  * @param memseg The memory segment to use for the variable.
           =4  * @param address The memory address of the variable.
           =4  *
           =4  * This macro allows declaring a variable that can be placed at a specific
           =4  * location in memory.  This can only be used for variables that do not need
           =4  * initializers.  The _address_ is the memory address within the specified
           =4  * segment.  The memory segment, _memseg_, can be one of the following:
           =4  *
           =4  * - @ref SI_SEG_DATA
           =4  * - @ref SI_SEG_IDATA
           =4  * - @ref SI_SEG_BDATA
           =4  * - @ref SI_SEG_PDATA
           =4  * - @ref SI_SEG_XDATA
           =4  * - @ref SI_SEG_CODE
           =4  *
           =4  * __Example__
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 57  

           =4  *
           =4  * ~~~~~~~~.c
           =4  * // The following declares a variable located at 0x4000 in XDATA with
           =4  * // the following signature:
           =4  * uint8_t myMemVar;
           =4  *
           =4  * SI_LOCATED_VARIABLE_NO_INIT(myMemVar, uint8_t, SEG_DATA, 0x4000);
           =4  * ~~~~~~~~
           =4  *****************************************************************************/
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =4              vartype memseg name _at_ address
           =4 
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 #define SI_INTERRUPT(name, vector) void name (void)
           =4 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 #define SI_REENTRANT_FUNCTION(name, return_value, parameter, regnum) return_value name (parameter)
           =4 #define SI_REENTRANT_FUNCTION_PROTO(name, return_value, parameter, regnum) return_value name (parameter)
           =4 
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =4 #define SI_SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =4 #endif // __SLS_IDE__
           =4 
           =4 // The following are used for byte ordering when referring to individual
           =4 // bytes within a SI_UU32_t.  B0 is the least significant byte.
           =4 #define B0 3 ///< Least significant byte of a 4 byte word
           =4 #define B1 2 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
           =4 #define B2 1 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
           =4 #define B3 0 ///< Most significant byte of a 4-byte word
           =4 
           =4 #define LSB 1 ///< Index to least significant bit of a 2 byte word
           =4 #define MSB 0 ///< Index to most significant bit of a 2 byte word
           =4 
           =4 /// A union type to make it easier to access individual bytes of a 16-bit
           =4 /// word, and to use as signed or unsigned type.
           =4 typedef union SI_UU16
           =4 {
           =4   uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
           =4   int16_t s16;    ///< The two byte value as a 16-bit signed integer.
           =4   uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
           =4   int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
           =4 } SI_UU16_t;
           =4 
           =4 /// A union type to make it easier to access individual bytes within a
           =4 /// 32-bit word, or to access it as variations of 16-bit words, or to
           =4 /// use as signed or unsigned type.
           =4 typedef union SI_UU32
           =4 {
           =4   uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
           =4   int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
           =4   SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
           =4   uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 58  

           =4   int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
           =4   uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
           =4   int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
           =4 } SI_UU32_t;
           =4 
           =4 // Generic pointer memory segment constants.
           =4 #define SI_GPTR                   ///< Generic pointer indeterminate type.
           =4 #define SI_GPTR_MTYPE_DATA  0x00  ///< Generic pointer for DATA segment.
           =4 #define SI_GPTR_MTYPE_IDATA 0x00  ///< Generic pointer for IDATA segment.
           =4 #define SI_GPTR_MTYPE_BDATA 0x00  ///< Generic pointer for BDATA segment.
           =4 #define SI_GPTR_MTYPE_PDATA 0xFE  ///< Generic pointer for PDATA segment.
           =4 #define SI_GPTR_MTYPE_XDATA 0x01  ///< Generic pointer for XDATA segment.
           =4 #define SI_GPTR_MTYPE_CODE  0xFF  ///< Generic pointer for CODE segment.
           =4 
           =4 /// Generic pointer structure containing the type and address.
           =4 typedef struct
           =4 {
           =4   uint8_t memtype;    ///< The type of memory of the generic pointer.
           =4   SI_UU16_t address;  ///< The address of the generic pointer.
           =4 } GPTR_t;
           =4 
           =4 /// A union type to allow access to the fields of a generic pointer.
           =4 /// A generic pointer has a field indicating the type of memory and an
           =4 /// address within the memory.
           =4 typedef union SI_GEN_PTR
           =4 {
           =4   uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
           =4   GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
           =4 } SI_GEN_PTR_t;
           =4 
           =4 // Declaration of Keil intrinisc
           =4 extern void _nop_(void);
           =4 /// Macro to insert a no-operation (NOP) instruction.
           =4 #define NOP() _nop_()
           =4 
           =4 // -------------------------------
           =4 // GCC for ARM Cortex-M
           =4 // Provides support for code that can be compiled for 8 or 32-bit
           =4 //
           =4 #elif defined (__GNUC__)
           =4 #if defined(__ARMEL__) && ((__ARMEL__ == 1) && ((__ARM_ARCH == 6) || (__ARM_ARCH == 7)))
           =4 
           =4 // these ignore any memory segment directives
           =4 #define SI_SEG_GENERIC
           =4 #define SI_SEG_DATA
           =4 #define SI_SEG_IDATA
           =4 #define SI_SEG_XDATA
           =4 #define SI_SEG_PDATA
           =4 #define SI_SEG_BDATA
           =4 #define SI_SEG_CODE
           =4 
           =4 // the following create a variable of the specified name but ignore the
           =4 // address and bit number.  If the using-code cares about the actual
           =4 // address or bit number, this probably will break it
           =4 #define SI_SBIT(name, address, bitnum) uint8_t name
           =4 #define SI_SFR(name, address) uint8_t name
           =4 #define SI_SFR16(name, address) uint16_t name
           =4 
           =4 // the following create function and variable names of the specified types
           =4 // but the 8051-specific aspects (like memory segment) are ignored
           =4 #define SI_INTERRUPT(name, vector) void name (void)
           =4 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 59  

           =4 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =4              return_value name (parameter)
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =4              return_value name (parameter)
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype name
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =4              vartype * name
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =4              vartype * name
           =4 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * name
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =4              vartype name
           =4 
           =4 #define B0 0
           =4 #define B1 1
           =4 #define B2 2
           =4 #define B3 3
           =4 #define LSB 0
           =4 #define MSB 1
           =4 typedef union SI_UU16
           =4 {
           =4   uint16_t u16;
           =4   int16_t s16;
           =4   uint8_t u8[2];
           =4   int8_t s8[2];
           =4 } SI_UU16_t;
           =4 
           =4 typedef union SI_UU32
           =4 {
           =4   uint32_t u32;
           =4   int32_t s32;
           =4   SI_UU16_t uu16[2];
           =4   uint16_t u16[2];
           =4   int16_t s16[2];
           =4   uint8_t u8[4];
           =4   int8_t s8[4];
           =4 } SI_UU32_t;
           =4 
           =4 // Generic pointer stuff is left out because if you are accessing
           =4 // generic pointer fields then it will need to be rewritten for 32-bit
           =4 
           =4 // __NOP should be declared in cmsis header core_cmInstr.h
           =4 extern void __NOP(void);
           =4 /// Macro to insert a no-operation (NOP) instruction.
           =4 #define NOP() __NOP()
           =4 
           =4 #else // ARM_ARCH 6 | 7
           =4 #error unsupported ARM arch
           =4 #endif
           =4 
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // IAR 8051
           =4 // http://www.iar.com
           =4 #elif defined __ICC8051__
           =4 
           =4 #include <intrinsics.h>
           =4 
           =4 #define SI_BIT(name)              __no_init bool __bit name
           =4 #define SI_SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 60  

           =4 #define SI_SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =4 #define SI_SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =4 
           =4 #define SI_SEG_GENERIC __generic
           =4 #define SI_SEG_FAR  __xdata
           =4 #define SI_SEG_DATA __data
           =4 #define SI_SEG_NEAR __data
           =4 #define SI_SEG_IDATA __idata
           =4 #define SI_SEG_XDATA __xdata
           =4 #define SI_SEG_PDATA __pdata
           =4 #define SI_SEG_CODE  __code
           =4 #define SI_SEG_BDATA __bdata
           =4 
           =4 #define _PPTOSTR_(x) #x
           =4 #define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =4 #define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =4 #define SI_INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =4 #define SI_INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =4 #define SI_INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __in
             -terrupt void name(void)
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =4 
           =4 #if (__DATA_MODEL__ == 0) /* TINY */ || \
           =4     (__DATA_MODEL__ == 1) /* SMALL */
           =4 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =4   __idata_reentrant return_type name parameter
           =4 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =4   __idata_reentrant return_type name parameter
           =4 #elif (__DATA_MODEL__ == 2) /* LARGE */ || \
           =4       (__DATA_MODEL__ == 3) /* GENERIC */ || \
           =4       (__DATA_MODEL__ == 4) /* FAR */
           =4 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =4   __xdata_reentrant return_type name parameter
           =4 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =4   __xdata_reentrant return_type name (parameter)
           =4 #else
           =4 #error "Illegal memory model setting."
           =4 #endif
           =4 
           =4 // Note: IAR does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =4              return_value name parameter
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =4              return_value name parameter
           =4 
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment)  vartype locsegment name
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * 
             -locsegment name
           =4                
           =4 #define SI_SEGMENT_POINTER(name, vartype, ptrseg) vartype __generic * ptrseg name
           =4 
           =4 #define SI_LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ add
             -r
           =4 
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment __no_init vartype name @ a
             -ddr
           =4 
           =4 // The following are used for byte ordering when referring to individual
           =4 // bytes within a SI_UU32_t.  B0 is the least significant byte.
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 61  

           =4 #define B0 0 ///< Least significant byte of a 4 byte word
           =4 #define B1 1 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
           =4 #define B2 2 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
           =4 #define B3 3 ///< Most significant byte of a 4-byte word
           =4 
           =4 #define LSB 0 ///< Index to least significant bit of a 2 byte word
           =4 #define MSB 1 ///< Index to most significant bit of a 2 byte word
           =4 
           =4 /// A union type to make it easier to access individual bytes of a 16-bit
           =4 /// word, and to use as signed or unsigned type.
           =4 typedef union SI_UU16
           =4 {
           =4   uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
           =4   int16_t s16;    ///< The two byte value as a 16-bit signed integer.
           =4   uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
           =4   int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
           =4 } SI_UU16_t;
           =4 
           =4 /// A union type to make it easier to access individual bytes within a
           =4 /// 32-bit word, or to access it as variations of 16-bit words, or to
           =4 /// use as signed or unsigned type.
           =4 typedef union SI_UU32
           =4 {
           =4   uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
           =4   int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
           =4   SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
           =4   uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
           =4   int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
           =4   uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
           =4   int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
           =4 } SI_UU32_t;
           =4 
           =4 // Generic pointer memory segment constants.
           =4 #define SI_GPTR                   ///< Generic pointer indeterminate type.
           =4 #define SI_GPTR_MTYPE_DATA  0x01  ///< Generic pointer for DATA segment.
           =4 #define SI_GPTR_MTYPE_IDATA 0x01  ///< Generic pointer for IDATA segment.
           =4 #define SI_GPTR_MTYPE_BDATA 0x01  ///< Generic pointer for BDATA segment.
           =4 #define SI_GPTR_MTYPE_PDATA 0x00  ///< Generic pointer for PDATA segment.
           =4 #define SI_GPTR_MTYPE_XDATA 0x00  ///< Generic pointer for XDATA segment.
           =4 #define SI_GPTR_MTYPE_CODE  0x80  ///< Generic pointer for CODE segment.
           =4 
           =4 /// Generic pointer structure containing the type and address.
           =4 typedef struct
           =4 {
           =4   SI_UU16_t address;  ///< The address of the generic pointer.
           =4   uint8_t memtype;    ///< The type of memory of the generic pointer.  
           =4 } GPTR_t;
           =4 
           =4 /// A union type to allow access to the fields of a generic pointer.
           =4 /// A generic pointer has a field indicating the type of memory and an
           =4 /// address within the memory.
           =4 typedef union SI_GEN_PTR
           =4 {
           =4   uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
           =4   GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
           =4 } SI_GEN_PTR_t;
           =4 
           =4 /// Macro to insert a no-operation (NOP) instruction.
           =4 #define NOP() __no_operation()
           =4 
           =4 #else // unknown toolchain
           =4 #error Unrecognized toolchain in si_toolchain.h
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 62  

           =4 #endif
           =4 
           =4 /** @} */
           =4 
           =4 #endif
  10      =3  #include "compiler_defs.h"
   1      =4  //-----------------------------------------------------------------------------
   2      =4  // compiler_defs.h
   3      =4  //-----------------------------------------------------------------------------
   4      =4  // Portions of this file are copyright Maarten Brock
   5      =4  // http://sdcc.sourceforge.net
   6      =4  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
   7      =4  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =4  //
   9      =4  // GNU LGPL boilerplate:
  10      =4  /** This library is free software; you can redistribute it and/or
  11      =4    * modify it under the terms of the GNU Lesser General Public
  12      =4    * License as published by the Free Software Foundation; either
  13      =4    * version 2.1 of the License, or (at your option) any later version.
  14      =4    *
  15      =4    * This library is distributed in the hope that it will be useful,
  16      =4    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =4    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  18      =4    * Lesser General Public License for more details.
  19      =4    *
  20      =4    * You should have received a copy of the GNU Lesser General Public
  21      =4    * License along with this library; if not, write to the Free Software
  22      =4    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =4    *
  24      =4    * In other words, you are welcome to use, share and improve this program.
  25      =4    * You are forbidden to forbid anyone else to use, share and improve
  26      =4    * what you give them. Help stamp out software-hoarding!
  27      =4  **/
  28      =4  // Program Description:
  29      =4  //
  30      =4  // **Important Note**: This header file should be included before including
  31      =4  // a device-specific header file such as C8051F300_defs.h.
  32      =4  //
  33      =4  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =4  // special function registers and other 8051-specific features such as NOP
  35      =4  // generation, and locating variables in memory-specific segments.  The
  36      =4  // compilers are identified by their unique predefined macros. See also:
  37      =4  // http://predef.sourceforge.net/precomp.html
  38      =4  //
  39      =4  // SBIT and SFR define special bit and special function registers at the given
  40      =4  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =4  // little-endian format. SFR16E and SFR32E define sfr combinations without
  42      =4  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =4  // combinations will guarantee the order in which they are accessed when read
  44      =4  // or written.
  45      =4  //
  46      =4  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
  47      =4  // to avoid portability issues because of compiler endianness.
  48      =4  //
  49      =4  // Example:
  50      =4  // // my_mcu.c: main 'c' file for my mcu
  51      =4  // #include <compiler_defs.h>  // this file
  52      =4  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =4  //
  54      =4  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =4  // SFR   (P0, 0x80);           // Port 0
  56      =4  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 63  

  57      =4  //                             // xdata memory at 0xE600
  58      =4  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =4  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =4  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =4  //                             // lsb at 0x93, msb at 0x96
  62      =4  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =4  //                             // lsb at 0xE2, msb at 0xE5
  64      =4  //
  65      =4  // Target:         C8051xxxx
  66      =4  // Tool chain:     Generic
  67      =4  // Command Line:   None
  68      =4  // 
  69      =4  // Release 2.7 - 25 JUN 2014 (JM)
  70      =4  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =4  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =4  //     pointed at by a generic poitner
  73      =4  // Release 2.6 - 14 DEC 2012 (GO)
  74      =4  //        -Added define for deprecated SDCC keyword 'at'
  75      =4  // Release 2.5 - 12 SEP 2012 (TP)
  76      =4  //    -Added defines for deprecated SDCC keywords bit and code
  77      =4  // Release 2.4 - 27 AUG 2012 (TP)
  78      =4  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =4  // Release 2.3 - 27 MAY 2010 (DM)
  80      =4  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =4  // Release 2.2 - 06 APR 2010 (ES)
  82      =4  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =4  // Release 2.1 - 16 JUL 2009 (ES)
  84      =4  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =4  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =4  // Release 2.0 - 19 MAY 2009 (ES)
  87      =4  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
  88      =4  // Release 1.9 - 23 OCT 2008 (ES)
  89      =4  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =4  //    -Added SFR16 macro defintion for Hi-Tech
  91      =4  // Release 1.8 - 31 JUL 2008 (ES)
  92      =4  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =4  //    -Added macro's for IAR
  94      =4  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =4  // Release 1.7 - 11 SEP 2007 (BW)
  96      =4  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =4  // Release 1.6 - 27 AUG 2007 (BW)
  98      =4  //    -Updated copyright notice per agreement with Maartin Brock
  99      =4  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =4  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =4  // Release 1.5 - 24 AUG 2007 (BW)
 102      =4  //    -Added support for NOP () macro
 103      =4  //    -Added support for Hi-Tech ver 9.01
 104      =4  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =4  //    -Removed FID and fixed formatting.
 106      =4  // Release 1.3 - 30 SEP 2007 (TP)
 107      =4  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =4  //     under SDCC.
 109      =4  // Release 1.2 - (BW)
 110      =4  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =4  // Release 1.1 - (BW)
 112      =4  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =4  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =4  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =4  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =4  //    -Initial revision
 117      =4  
 118      =4  //-----------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 64  

 119      =4  // Header File Preprocessor Directive
 120      =4  //-----------------------------------------------------------------------------
 121      =4  
 122      =4  #ifndef COMPILER_DEFS_H
           =4 #define COMPILER_DEFS_H
           =4 
           =4 #include "stdbool.h"
           =4 #include "stdint.h"
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Macro definitions
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 //SDK Version
           =4 #define SDK_VERSION   2
           =4 
           =4 #ifndef NULL
           =4 #define NULL ((void*) 0)
           =4 #endif
           =4 
           =4 
           =4 // SDCC - Small Device C Compiler
           =4 // http://sdcc.sourceforge.net
           =4 
           =4 #if defined SDCC
           =4 
           =4 #if (SDCC >= 300)
           =4 
           =4 #define interrupt __interrupt
           =4 #define _asm __asm
           =4 #define _endasm __endasm
           =4 #define bit __bit
           =4 #define code __code
           =4 #define at __at
           =4 
           =4 #endif
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   __xdata
           =4 # define SEG_DATA  __data
           =4 # define SEG_NEAR  __data
           =4 # define SEG_IDATA __idata
           =4 # define SEG_XDATA __xdata
           =4 # define SEG_PDATA __pdata
           =4 # define SEG_CODE  __code
           =4 # define SEG_BDATA __bdata
           =4 
           =4 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =4 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =4 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
           =4 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =4 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
           =4 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =4 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =4 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 65  

             -)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
             -regnum)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 #define NOP() _asm NOP _endasm
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x40
           =4 #define SI_GPTR_MTYPE_IDATA      0x40
           =4 #define SI_GPTR_MTYPE_BDATA      0x40
           =4 #define SI_GPTR_MTYPE_PDATA      0x60
           =4 #define SI_GPTR_MTYPE_XDATA      0x00
           =4 #define SI_GPTR_MTYPE_CODE       0x80
           =4 
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 66  

           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         UU16 ADDR;
           =4         U8 MTYPE;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Raisonance (must be placed before Keil C51)
           =4 // http://www.raisonance.com
           =4 
           =4 #elif defined __RC51__
           =4 
           =4 //#error Raisonance C51 detected.
           =4 
           =4 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =4 # define SEG_FAR   xdata
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  data
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =4 # define SFR(name, addr)        sfr at addr                name
           =4 # define SFR16(name, addr)      sfr16 at addr              name
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =4 
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 67  

           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support -- NOP is opcode 0x00
           =4 #define NOP() asm { 0x00 }
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x04
           =4 #define SI_GPTR_MTYPE_IDATA      0x01
           =4 #define SI_GPTR_MTYPE_BDATA      0x04
           =4 #define SI_GPTR_MTYPE_PDATA      0x03
           =4 #define SI_GPTR_MTYPE_XDATA      0x02
           =4 #define SI_GPTR_MTYPE_CODE       0x05
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         U8 MTYPE;
           =4         UU16 ADDR;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 
           =4 // Keil C51
           =4 // http://www.keil.com
           =4 
           =4 #elif defined __C51__
           =4 
           =4 //#error Keil C51 detected.
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 68  

           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   xdata
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  data
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 # define SBIT(name, addr, bit)  sbit  name = addr^bit
           =4 # define SFR(name, addr)        sfr   name = addr
           =4 # define SFR16(name, addr)      sfr16 name = addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # ifndef __SLS_IDE__
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
           =4 
           =4 # else  // __SLS_IDE__
           =4 
           =4 # define INTERRUPT(name, vector) void name (void)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =4 
           =4 # endif // __SLS_IDE__
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 69  

           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 extern void _nop_ (void);
           =4 #define NOP() _nop_()
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA      0x00
           =4 #define SI_GPTR_MTYPE_IDATA     0x00
           =4 #define SI_GPTR_MTYPE_BDATA     0x00
           =4 #define SI_GPTR_MTYPE_PDATA     0xFE
           =4 #define SI_GPTR_MTYPE_XDATA     0x01
           =4 #define SI_GPTR_MTYPE_CODE      0xFF
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         U8 MTYPE;
           =4         UU16 ADDR;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Hi-Tech 8051
           =4 // http://www.htsoft.com
           =4 
           =4 #elif defined HI_TECH_C
           =4 
           =4 # define SEG_GENERIC
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 70  

           =4 # define SEG_FAR   far
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  near
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 
           =4 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =4 # define SFR(name, addr)          static volatile unsigned char name @ addr
           =4 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =4 # define INTERRUPT_PROTO(name, vector)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =4 // Note: Hi-Tech does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 71  

           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 #define NOP() asm(" nop ")
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Tasking / Altium
           =4 // http://www.altium.com/tasking
           =4 
           =4 
           =4 #elif defined _CC51
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   _xdat
           =4 # define SEG_DATA  _data
           =4 # define SEG_NEAR  _data
           =4 # define SEG_IDATA _idat
           =4 # define SEG_XDATA _xdat
           =4 # define SEG_PDATA _pdat
           =4 # define SEG_CODE  _rom
           =4 # define SEG_BDATA _bdat
           =4 
           =4 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =4 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =4 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =4 #if _CC51 > 71
           =4 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =4 #else
           =4 # define SFR16(name, addr)      /* not supported */
           =4 #endif
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =4 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =4 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =4 
           =4 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =4 // is also using the same register bank. If not, the compiler will generate an error.
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
             -)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
             -ameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =4 
           =4 // used with UU16
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 72  

           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 extern void _nop (void);
           =4 #define NOP() _nop()
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 
           =4 // IAR 8051
           =4 // http://www.iar.com
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #include <stdbool.h>
           =4 #include <intrinsics.h>
           =4 
           =4 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =4 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =4 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =4 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr) /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define SEG_GENERIC __generic
           =4 # define SEG_FAR  __xdata
           =4 # define SEG_DATA __data
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 73  

           =4 # define SEG_NEAR __data
           =4 # define SEG_IDATA __idata
           =4 # define SEG_XDATA __xdata
           =4 # define SEG_PDATA __pdata
           =4 # define SEG_CODE  __code
           =4 # define SEG_BDATA __bdata
           =4 
           =4 #define bit bool
           =4 
           =4 # define _PPTOSTR_(x) #x
           =4 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =4 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =4 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =4 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =4 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =4 // Note: IAR does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 74  

           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 
           =4 #define NOP() __no_operation();
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x01
           =4 #define SI_GPTR_MTYPE_IDATA      0x01
           =4 #define SI_GPTR_MTYPE_BDATA      0x01
           =4 #define SI_GPTR_MTYPE_PDATA      0x00
           =4 #define SI_GPTR_MTYPE_XDATA      0x00
           =4 #define SI_GPTR_MTYPE_CODE       0x80
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         UU16 ADDR;
           =4         U8 MTYPE;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Crossware
           =4 // http://www.crossware.com
           =4 
           =4 #elif defined _XC51_VER
           =4 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =4 # define SFR(name, addr)        _sfr     name = addr
           =4 # define SFR16(name, addr)      _sfrword name = addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Wickenh盲user
           =4 // http://www.wickenhaeuser.de
           =4 
           =4 #elif defined __UC__
           =4 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =4 # define SFR(name, addr)        near unsigned char name @ addr
           =4 # define SFR16(name, addr)      /* not supported */
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Default
           =4 // Unknown compiler
           =4 
           =4 #else
           =4 # warning unrecognized compiler
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 75  

           =4 # define SBIT(name, addr, bit)  volatile bool           name
           =4 # define SFR(name, addr)        volatile unsigned char  name
           =4 # define SFRX(name, addr)       volatile unsigned char  name
           =4 # define SFR16(name, addr)      volatile unsigned short name
           =4 # define SFR16E(name, fulladdr) volatile unsigned short name
           =4 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =4 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =4 
           =4 #endif
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Header File PreProcessor Directive
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #endif                                 // #define COMPILER_DEFS_H
 804      =4  
 805      =4  //-----------------------------------------------------------------------------
 806      =4  // End Of File
 807      =4  //-----------------------------------------------------------------------------
  11      =3  #include "C8051F580_defs.h"
   1      =4  //-----------------------------------------------------------------------------
   2      =4  // C8051F580_defs.h
   3      =4  //-----------------------------------------------------------------------------
   4      =4  // Copyright 2008, Silicon Laboratories, Inc.
   5      =4  // http://www.silabs.com
   6      =4  //
   7      =4  // Program Description:
   8      =4  //
   9      =4  // Register/bit definitions for the C8051F58x family.
  10      =4  // **Important Note**: The compiler_defs.h header file should be included
  11      =4  // before including this header file.
  12      =4  //
  13      =4  // Target:         C8051F580/1/2/3/4/5/6/7,8/9-F590/1
  14      =4  // Tool chain:     Generic
  15      =4  // Command Line:   None
  16      =4  //
  17      =4  // Release 0.6 - 20 AUG 2012 (TP)
  18      =4  //    -Added #define for _XPAGE to provide support for SDCC memory paging
  19      =4  //     (pdata)
  20      =4  //
  21      =4  // Release 0.5 - 10 SEP 2011 (GP)
  22      =4  //    - Fixed SFR16 definition for CAN0IF2MC
  23      =4  //
  24      =4  // Release 0.4 - 08 OCT 2010 (TP)
  25      =4  //    - Fixed bit definitions for SCON0
  26      =4  //
  27      =4  // Release 0.3 - 01 APR 2009 (GP)
  28      =4  //    - Added SN0-SN3
  29      =4  //
  30      =4  // Release 0.2 - 29 JUL 2008 (ADT)
  31      =4  //    - Added Timer 4 bit definitions
  32      =4  //
  33      =4  // Release 0.1 - 09 JUL 2008 (GP)
  34      =4  //    - Initial Revision
  35      =4  //
  36      =4  //-----------------------------------------------------------------------------
  37      =4  // Header File Preprocessor Directive
  38      =4  //-----------------------------------------------------------------------------
  39      =4  
  40      =4  #ifndef C8051F580_DEFS_H
  41      =4  #define C8051F580_DEFS_H
  42      =4  
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 76  

  43      =4  //-----------------------------------------------------------------------------
  44      =4  // Page 0, Page 1 and Page F Registers
  45      =4  //-----------------------------------------------------------------------------
  46      =4  
  47      =4  SFR (P0, 0x80);                        // Port 0 Latch
  48      =4  SFR (SP, 0x81);                        // Stack Pointer
  49      =4  SFR (DPL, 0x82);                       // Data Pointer Low
  50      =4  SFR (DPH, 0x83);                       // Data Pointer High
  51      =4  SFR (SFR0CN, 0x84);                    // SFR Page Control
  52      =4  SFR (SFRNEXT, 0x85);                   // SFR stack next page
  53      =4  SFR (SFRLAST, 0x86);                   // SFR stack last page
  54      =4  SFR (PCON, 0x87);                      // Power Control
  55      =4  SFR (TCON, 0x88);                      // Timer/Counter Control
  56      =4  SFR (TMOD, 0x89);                      // Timer/Counter Mode
  57      =4  SFR (TL0, 0x8A);                       // Timer/Counter 0 Low
  58      =4  SFR (TL1, 0x8B);                       // Timer/Counter 1 Low
  59      =4  SFR (TH0, 0x8C);                       // Timer/Counter 0 High
  60      =4  SFR (TH1, 0x8D);                       // Timer/Counter 1 High
  61      =4  SFR (CKCON, 0x8E);                     // Clock Control
  62      =4  SFR (PSCTL, 0x8F);                     // Program Store R/W Control
  63      =4  SFR (CLKSEL, 0x8F);                    // System clock select
  64      =4  SFR (P1, 0x90);                        // Port 1 Latch
  65      =4  SFR (TMR3CN, 0x91);                    // Timer/Counter 3 Control
  66      =4  SFR (TMR5CN, 0x91);                    // Timer/Counter 5 Control
  67      =4  SFR (TMR3RLL, 0x92);                   // Timer/Counter 3 Reload Low
  68      =4  SFR (TMR5CAPL, 0x92);                  // Timer/Counter 5 Capture Low
  69      =4  SFR (TMR3RLH, 0x93);                   // Timer/Counter 3 Reload High
  70      =4  SFR (TMR5CAPH, 0x93);                  // Timer/Counter 5 Capture High
  71      =4  SFR (TMR3L, 0x94);                     // Timer/Counter 3 Low
  72      =4  SFR (TMR5L, 0x94);                     // Timer/Counter 5 Low
  73      =4  SFR (TMR3H, 0x95);                     // Timer/Counter 3 High
  74      =4  SFR (TMR5H, 0x95);                     // Timer/Counter 5 High
  75      =4  SFR (TMR5CF, 0x96);                    // Timer/Counter 5 Configuration
  76      =4  SFR (CLKMUL, 0x97);                    // Clock Multiplier
  77      =4  SFR (SCON0, 0x98);                     // UART0 Control
  78      =4  SFR (SCON1, 0x98);                     // UART1 Control
  79      =4  SFR (SBUF0, 0x99);                     // UART0 Data Buffer
  80      =4  SFR (SBUF1, 0x99);                     // UART1 Data Buffer
  81      =4  SFR (CPT0CN, 0x9A);                    // Comparator 0 Control
  82      =4  SFR (CPT2CN, 0x9A);                    // Comparator 2 Control
  83      =4  SFR (CPT0MD, 0x9B);                    // Comparator 0 Mode
  84      =4  SFR (CPT2MD, 0x9B);                    // Comparator 2 Mode
  85      =4  SFR (CPT0MX, 0x9C);                    // Comparator 0 Mux
  86      =4  SFR (CPT2MX, 0x9C);                    // Comparator 2 Mux
  87      =4  SFR (CPT1CN, 0x9D);                    // Comparator 1 Control
  88      =4  SFR (CPT1MD, 0x9E);                    // Comparator 0 Mode
  89      =4  SFR (OSCIFIN, 0x9E);                   // Internal Oscillator Fine Control
  90      =4  SFR (CPT1MX, 0x9F);                    // Comparator 1 Mux
  91      =4  SFR (OSCXCN, 0x9F);                    // External Oscillator Control
  92      =4  SFR (P2, 0xA0);                        // Port 2 Latch
  93      =4  SFR (SPI0CFG, 0xA1);                   // SPI0 Configuration
  94      =4  SFR (OSCICN, 0xA1);                    // Internal Oscillator Control
  95      =4  SFR (SPI0CKR, 0xA2);                   // SPI0 Clock rate control
  96      =4  SFR (OSCICRS, 0xA2);                   // Internal Oscillator Coarse Control
  97      =4  SFR (SPI0DAT, 0xA3);                   // SPI0 Data Buffer
  98      =4  SFR (P0MDOUT, 0xA4);                   // Port 0 Output Mode
  99      =4  SFR (P1MDOUT, 0xA5);                   // Port 1 Output Mode
 100      =4  SFR (P2MDOUT, 0xA6);                   // Port 2 Output Mode
 101      =4  SFR (SFRPAGE, 0xA7);                   // SFR Page Select
 102      =4  SFR (IE, 0xA8);                        // Interrupt Enable
 103      =4  SFR (SMOD0, 0xA9);                     // Serial Port 0 Control
 104      =4  SFR (EMI0CN, 0xAA);                    // EMIF Control
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 77  

 105      =4  SFR (EMI0TC, 0xAA);                    // EMIF Timing control
 106      =4  SFR (SBCON0, 0xAB);                    // UART0 Baud Rate Generator Control
 107      =4  SFR (SBRLL0, 0xAC);                    // UART0 Baud Rate Generator Low
 108      =4  SFR (SBRLH0, 0xAD);                    // UART0 Baud Rate Generator High
 109      =4  SFR (P3MAT, 0xAE);                     // Port 3 Match
 110      =4  SFR (P3MDOUT, 0xAE);                   // Port 3 Mode
 111      =4  SFR (P3MASK, 0xAF);                    // Port 3 Mask
 112      =4  SFR (P4MDOUT, 0xAF);                   // Port 4 Mode
 113      =4  SFR (P3, 0xB0);                        // Port 3 Latch
 114      =4  SFR (P2MAT, 0xB1);                     // Port 2 Match
 115      =4  SFR (P2MASK, 0xB2);                    // Port 2 Mask
 116      =4  SFR (EMI0CF, 0xB2);                    // EMIF Configuration
 117      =4  SFR (P4, 0xB5);                        // Port 4 Latch
 118      =4  SFR (FLSCL, 0xB6);                     // Flash Scale
 119      =4  SFR (FLKEY, 0xB7);                     // Flash access limit
 120      =4  SFR (IP, 0xB8);                        // Interrupt Priority
 121      =4  SFR (SMB0ADR, 0xB9);                   // SMBus0 Slave address
 122      =4  SFR (ADC0TK, 0xBA);                    // ADC0 Tracking Mode Select
 123      =4  SFR (SMB0ADM, 0xBA);                   // SMBus0 Address Mask
 124      =4  SFR (ADC0MX, 0xBB);                    // AMUX0 Channel select
 125      =4  SFR (ADC0CF, 0xBC);                    // AMUX0 Channel configuration
 126      =4  SFR (ADC0L, 0xBD);                     // ADC0 Data Low
 127      =4  SFR (ADC0H, 0xBE);                     // ADC0 Data High
 128      =4  SFR (SMB0CN, 0xC0);                    // SMBus0 Control
 129      =4  SFR (SMB0CF, 0xC1);                    // SMBus0 Configuration
 130      =4  SFR (SMB0DAT, 0xC2);                   // SMBus0 Data
 131      =4  SFR (ADC0GTL, 0xC3);                   // ADC0 Greater-Than Compare Low
 132      =4  SFR (ADC0GTH, 0xC4);                   // ADC0 Greater-Than Compare High
 133      =4  SFR (ADC0LTL, 0xC5);                   // ADC0 Less-Than Compare Word Low
 134      =4  SFR (ADC0LTH, 0xC6);                   // ADC0 Less-Than Compare Word High
 135      =4  SFR (XBR3, 0xC6);                      // Port I/O Crossbar Control 3
 136      =4  SFR (XBR2, 0xC7);                      // Port I/O Crossbar Control 2
 137      =4  SFR (TMR2CN, 0xC8);                    // Timer/Counter 2 Control
 138      =4  SFR (TMR4CN, 0xC8);                    // Timer/Counter 4 Control
 139      =4  SFR (REG0CN, 0xC9);                    // Regulator Control
 140      =4  SFR (LIN0CF, 0xC9);                    // LIN 0 Configuration
 141      =4  SFR (TMR4CF, 0xC9);                    // Timer/Counter 4 Configuration
 142      =4  SFR (TMR2RLL, 0xCA);                   // Timer/Counter 2 Reload Low
 143      =4  SFR (TMR4CAPL, 0xCA);                  // Timer/Counter 4 Capture Low
 144      =4  SFR (TMR2RLH, 0xCB);                   // Timer/Counter 2 Reload High
 145      =4  SFR (TMR4CAPH, 0xCB);                  // Timer/Counter 4 Capture High
 146      =4  SFR (TMR2L, 0xCC);                     // Timer/Counter 2 Low
 147      =4  SFR (TMR4L, 0xCC);                     // Timer/Counter 4 Low
 148      =4  SFR (TMR2H, 0xCD);                     // Timer/Counter 2 High
 149      =4  SFR (TMR4H, 0xCD);                     // Timer/Counter 4 High
 150      =4  SFR (PCA0CPL5, 0xCE);                  // PCA0 Capture 5 Low
 151      =4  SFR (PCA1CPL11, 0xCE);                 // PCA1 Capture 11 Low
 152      =4  SFR (PCA0CPH5, 0xCF);                  // PCA0 Capture 5 High
 153      =4  SFR (PCA1CPH11, 0xCF);                 // PCA1 Capture 11 High
 154      =4  SFR (PSW, 0xD0);                       // Program Status Word
 155      =4  SFR (REF0CN, 0xD1);                    // Voltage Reference Control
 156      =4  SFR (LIN0DAT, 0xD2);                   // LIN0 Data
 157      =4  SFR (LIN0ADR, 0xD3);                   // LIN0 Address
 158      =4  SFR (P0SKIP, 0xD4);                    // Port 0 Skip
 159      =4  SFR (P1SKIP, 0xD5);                    // Port 1 Skip
 160      =4  SFR (P2SKIP, 0xD6);                    // Port 2 Skip
 161      =4  SFR (P3SKIP, 0xD7);                    // Port 3 Skip
 162      =4  SFR (PCA0CN, 0xD8);                    // PCA0 Control
 163      =4  SFR (PCA1CN, 0xD8);                    // PCA1 Control
 164      =4  SFR (PCA0MD, 0xD9);                    // PCA0 Mode
 165      =4  SFR (PCA1MD, 0xD9);                    // PCA1 Mode
 166      =4  SFR (PCA0PWM, 0xD9);                   // PCA0 PWM Control
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 78  

 167      =4  SFR (PCA0CPM0, 0xDA);                  // PCA0 Module 0 Mode
 168      =4  SFR (PCA1CPM6, 0xDA);                  // PCA1 Module 6 Mode
 169      =4  SFR (PCA1PWM, 0xDA);                   // PCA1 PWM Control
 170      =4  SFR (PCA0CPM1, 0xDB);                  // PCA0 Module 1  Mode
 171      =4  SFR (PCA1CPM7, 0xDB);                  // PCA1 Module 7  Mode
 172      =4  SFR (PCA0CPM2, 0xDC);                  // PCA0 Module 2  Mode
 173      =4  SFR (PCA1CPM8, 0xDC);                  // PCA1 Module 8  Mode
 174      =4  SFR (PCA0CPM3, 0xDD);                  // PCA0 Module 3  Mode
 175      =4  SFR (PCA1CPM9, 0xDD);                  // PCA1 Module 9  Mode
 176      =4  SFR (PCA0CPM4, 0xDE);                  // PCA0 Module 4  Mode
 177      =4  SFR (PCA1CPM10, 0xDE);                  // PCA1 Module 10 Mode
 178      =4  SFR (PCA0CPM5, 0xDF);                  // PCA0 Module 5  Mode
 179      =4  SFR (PCA1CPM11, 0xDF);                  // PCA1 Module 11 Mode
 180      =4  SFR (ACC, 0xE0);                       // Accumulator
 181      =4  SFR (XBR0, 0xE1);                      // Port I/O Crossbar Control 0
 182      =4  SFR (XBR1, 0xE2);                      // Port I/O Crossbar Control 1
 183      =4  SFR (CCH0CN, 0xE3);                    // Cache control
 184      =4  SFR (IT01CF, 0xE4);                    // INT0/INT1 Configuration
 185      =4  SFR (EIE1, 0xE6);                      // Extended Interrupt Enable 2
 186      =4  SFR (EIE2, 0xE7);                      // Extended Interrupt Enable 2
 187      =4  SFR (ADC0CN, 0xE8);                    // ADC0 Control
 188      =4  SFR (PCA0CPL1, 0xE9);                  // PCA0 Capture 1 Low
 189      =4  SFR (PCA1CPL1, 0xE9);                  // PCA1 Capture 7 Low
 190      =4  SFR (PCA0CPH1, 0xEA);                  // PCA0 Capture 1 High
 191      =4  SFR (PCA1CPH1, 0xEA);                  // PCA1 Capture 7 High
 192      =4  SFR (PCA0CPL2, 0xEB);                  // PCA0 Capture 2 Low
 193      =4  SFR (PCA1CPL2, 0xEB);                  // PCA1 Capture 8 Low
 194      =4  SFR (PCA0CPH2, 0xEC);                  // PCA0 Capture 2 High
 195      =4  SFR (PCA1CPH2, 0xEC);                  // PCA1 Capture 8 High
 196      =4  SFR (PCA0CPL3, 0xED);                  // PCA0 Capture 3 Low
 197      =4  SFR (PCA1CPL3, 0xED);                  // PCA1 Capture 9 Low
 198      =4  SFR (PCA0CPH3, 0xEE);                  // PCA0 Capture 3 High
 199      =4  SFR (PCA1CPH3, 0xEE);                  // PCA1 Capture 9 High
 200      =4  SFR (RSTSRC, 0xEF);                    // Reset Source Configuration/Status
 201      =4  SFR (B, 0xF0);                         // B Register
 202      =4  SFR (P0MAT, 0xF1);                     // Port 0 Match
 203      =4  SFR (P0MDIN, 0xF1);                    // Port 0 Input Mode
 204      =4  SFR (P0MASK, 0xF2);                    // Port 0 Mask
 205      =4  SFR (P1MDIN, 0xF2);                    // Port 1 Input Mode
 206      =4  SFR (P1MAT, 0xF3);                     // Port 1 Match
 207      =4  SFR (P2MDIN, 0xF3);                    // Port 2 Input Mode
 208      =4  SFR (P1MASK, 0xF4);                    // Port 1 Mask
 209      =4  SFR (P3MDIN, 0xF4);                    // Port 3 Input Mode
 210      =4  SFR (PSBANK, 0xF5);                    // Program Space Bank Select
 211      =4  SFR (EIP1, 0xF6);                      // External Interrupt Priority 1
 212      =4  SFR (EIP2, 0xF7);                      // External Interrupt Priority 2
 213      =4  SFR (SPI0CN, 0xF8);                    // SPI0 Control
 214      =4  SFR (PCA0L, 0xF9);                     // PCA0 Counter Low
 215      =4  SFR (PCA1L, 0xF9);                     // PCA1 Counter Low
 216      =4  SFR (SN0, 0xF9);                       // Serial Number 0
 217      =4  SFR (PCA0H, 0xFA);                     // PCA0 Counter High
 218      =4  SFR (PCA1H, 0xFA);                     // PCA1 Counter High
 219      =4  SFR (SN1, 0xFA);                       // Serial Number 1
 220      =4  SFR (PCA0CPL0, 0xFB);                  // PCA0 Capture 0 Low
 221      =4  SFR (PCA1CPL6, 0xFB);                  // PCA1 Capture 6 Low
 222      =4  SFR (SN2, 0xFB);                       // Serial Number 2
 223      =4  SFR (PCA0CPH0, 0xFC);                  // PCA0 Capture 0 High
 224      =4  SFR (PCA1CPH6, 0xFC);                  // PCA1 Capture 6 High
 225      =4  SFR (SN3, 0xFC);                       // Serial Number 3
 226      =4  SFR (PCA0CPL4, 0xFD);                  // PCA0 Capture 4 Low
 227      =4  SFR (PCA1CPL10, 0xFD);                 // PCA1 Capture 10 Low
 228      =4  SFR (PCA0CPH4, 0xFE);                  // PCA0 Capture 4 High
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 79  

 229      =4  SFR (PCA1CPH10, 0xFE);                 // PCA1 Capture 10 High
 230      =4  SFR (VDM0CN, 0xFF);                    // VDD Monitor Control
 231      =4  
 232      =4  //-----------------------------------------------------------------------------
 233      =4  // Page C (CAN0) Registers
 234      =4  //-----------------------------------------------------------------------------
 235      =4  
 236      =4  SFR (CAN0CFG, 0x92);                   // CAN0 Clock Configuration
 237      =4  SFR (CAN0STAT, 0x94);                  // Status Register Low Byte
 238      =4  SFR (CAN0ERRL, 0x96);                  // Error Counter Low Byte
 239      =4  SFR (CAN0ERRH, 0x97);                  // Error Counter High Byte
 240      =4  SFR (CAN0BTL, 0x9A);                   // Bit Timing Register Low Byte
 241      =4  SFR (CAN0BTH, 0x9B);                   // Bit Timing Register High Byte
 242      =4  SFR (CAN0IIDL, 0x9C);                  // Interrupt Register Low Byte
 243      =4  SFR (CAN0IIDH, 0x9D);                  // Interrupt Register High Byte
 244      =4  SFR (CAN0TST, 0x9E);                   // Test Register Low Byte
 245      =4  SFR (CAN0BRPE, 0xA1);                  // BRP Extension Register Low Byte
 246      =4  SFR (CAN0TR1L, 0xA2);                  // Transmission Request 1 Low Byte
 247      =4  SFR (CAN0TR1H, 0xA3);                  // Transmission Request 1 High Byte
 248      =4  SFR (CAN0TR2L, 0xA4);                  // Transmission Request 2 Low Byte
 249      =4  SFR (CAN0TR2H, 0xA5);                  // Transmission Request 2 High Byte
 250      =4  SFR (CAN0ND1L, 0xAA);                  // New Data 1 Low Byte
 251      =4  SFR (CAN0ND1H, 0xAB);                  // New Data 1 High Byte
 252      =4  SFR (CAN0ND2L, 0xAC);                  // New Data 2 Low Byte
 253      =4  SFR (CAN0ND2H, 0xAD);                  // New Data 2 High Byte
 254      =4  SFR (CAN0IP1L, 0xAE);                  // Interrupt Pending 1 Low Byte
 255      =4  SFR (CAN0IP1H, 0xAF);                  // Interrupt Pending 1 High Byte
 256      =4  SFR (CAN0IP2L, 0xB2);                  // Interrupt Pending 2 Low Byte
 257      =4  SFR (CAN0IP2H, 0xB3);                  // Interrupt Pending 2 High Byte
 258      =4  SFR (CAN0MV1L, 0xBA);                  // Message Valid 1 Low Byte
 259      =4  SFR (CAN0MV1H, 0xBB);                  // Message Valid 1 High Byte
 260      =4  SFR (CAN0MV2L, 0xBC);                  // Message Valid 2 Low Byte
 261      =4  SFR (CAN0MV2H, 0xBD);                  // Message Valid 2 High Byte
 262      =4  SFR (CAN0IF1CRL, 0xBE);                // IF1 Command Request Low Byte
 263      =4  SFR (CAN0IF1CRH, 0xBF);                // IF1 Command Request High Byte
 264      =4  SFR (CAN0CN, 0xC0);                    // CAN Control Register Low Byte
 265      =4  SFR (CAN0IF1CML, 0xC2);                // IF1 Command Mask Low Byte
 266      =4  SFR (CAN0IF1CMH, 0xC3);                // IF1 Command Mask High Byte
 267      =4  SFR (CAN0IF1M1L, 0xC4);                // IF1 Mask 1 Low Byte
 268      =4  SFR (CAN0IF1M1H, 0xC5);                // IF1 Mask 1 High Byte
 269      =4  SFR (CAN0IF1M2L, 0xC6);                // IF1 Mask 2 Low Byte
 270      =4  SFR (CAN0IF1M2H, 0xC7);                // IF1 Mask 2 High Byte
 271      =4  SFR (CAN0IF1A1L, 0xCA);                // IF1 Arbitration 1 Low Byte
 272      =4  SFR (CAN0IF1A1H, 0xCB);                // IF1 Arbitration 1 High Byte
 273      =4  SFR (CAN0IF1A2L, 0xCC);                // IF1 Arbitration 2 Low Byte
 274      =4  SFR (CAN0IF1A2H, 0xCD);                // IF1 Arbitration 2 High Byte
 275      =4  SFR (CAN0IF2MCL, 0xCE);                // IF2 Message Control Low Byte
 276      =4  SFR (CAN0IF2MCH, 0xCF);                // IF2 Message Control High Byte
 277      =4  SFR (CAN0IF1MCL, 0xD2);                // IF1 Message Control Low Byte
 278      =4  SFR (CAN0IF1MCH, 0xD3);                // IF1 Message Control High Byte
 279      =4  SFR (CAN0IF1DA1L, 0xD4);               // IF1 Data A 1 Low Byte
 280      =4  SFR (CAN0IF1DA1H, 0xD5);               // IF1 Data A 1 High Byte
 281      =4  SFR (CAN0IF1DA2L, 0xD6);               // IF1 Data A 2 Low Byte
 282      =4  SFR (CAN0IF1DA2H, 0xD7);               // IF1 Data A 2 High Byte
 283      =4  SFR (CAN0IF1DB1L, 0xDA);               // IF1 Data B 1 Low Byte
 284      =4  SFR (CAN0IF1DB1H, 0xDB);               // IF1 Data B 1 High Byte
 285      =4  SFR (CAN0IF1DB2L, 0xDC);               // IF1 Data B 2 Low Byte
 286      =4  SFR (CAN0IF1DB2H, 0xDD);               // IF1 Data B 2 High Byte
 287      =4  SFR (CAN0IF2CRL, 0xDE);                // IF2 Command Request Low Byte
 288      =4  SFR (CAN0IF2CRH, 0xDF);                // IF2 Command Request High Byte
 289      =4  SFR (CAN0IF2CML, 0xE2);                // IF2 Command Mask Low Byte
 290      =4  SFR (CAN0IF2CMH, 0xE3);                // IF2 Command Mask High Byte
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 80  

 291      =4  SFR (CAN0IF2M1L, 0xEA);                // IF2 Mask 1 Low Byte
 292      =4  SFR (CAN0IF2M1H, 0xEB);                // IF2 Mask 1 High Byte
 293      =4  SFR (CAN0IF2M2L, 0xEC);                // IF2 Mask 2 Low Byte
 294      =4  SFR (CAN0IF2M2H, 0xED);                // IF2 Mask 2 High Byte
 295      =4  SFR (CAN0IF2A1L, 0xEE);                // IF2 Arbitration 1 Low Byte
 296      =4  SFR (CAN0IF2A1H, 0xEF);                // IF2 Arbitration 1 High Byte
 297      =4  SFR (CAN0IF2A2L, 0xF2);                // IF2 Arbitration 2 Low Byte
 298      =4  SFR (CAN0IF2A2H, 0xF3);                // IF2 Arbitration 2 High Byte
 299      =4  SFR (CAN0IF2DA1L, 0xF6);               // IF2 Data A 1 Low Byte
 300      =4  SFR (CAN0IF2DA1H, 0xF7);               // IF2 Data A 1 High Byte
 301      =4  SFR (CAN0IF2DA2L, 0xFA);               // IF2 Data A 2 Low Byte
 302      =4  SFR (CAN0IF2DA2H, 0xFB);               // IF2 Data A 2 High Byte
 303      =4  SFR (CAN0IF2DB1L, 0xFC);               // IF2 Data B 1 Low Byte
 304      =4  SFR (CAN0IF2DB1H, 0xFD);               // IF2 Data B 1 High Byte
 305      =4  SFR (CAN0IF2DB2L, 0xFE);               // IF2 Data B 2 Low Byte
 306      =4  SFR (CAN0IF2DB2H, 0xFF);               // IF2 Data B 2 High Byte
 307      =4  
 308      =4  
 309      =4  //-----------------------------------------------------------------------------
 310      =4  // 16-bit Register Definitions (might not be supported by all compilers)
 311      =4  //-----------------------------------------------------------------------------
 312      =4  
 313      =4  SFR16 (DP, 0x82);                      // Data Pointer
 314      =4  SFR16 (TMR3RL, 0x92);                  // Timer 3 Reload
 315      =4  SFR16 (TMR5CAP, 0x92);                 // Timer 5 Capture
 316      =4  SFR16 (TMR3, 0x94);                    // Timer 3 Capture / Reload
 317      =4  SFR16 (TMR5, 0x94);                    // Timer 5
 318      =4  SFR16 (SBRL0, 0xAC);                   // UART0 Reload
 319      =4  SFR16 (ADC0, 0xBD);                    // ADC0 data
 320      =4  SFR16 (ADC0GT, 0xC3);                  // ADC0 Greater Than Window
 321      =4  SFR16 (ADC0LT, 0xC5);                  // ADC0 Less Than Window
 322      =4  SFR16 (TMR2RL, 0xCA);                  // Timer 2 Reload
 323      =4  SFR16 (TMR4CAP, 0xCA);                 // Timer 4 Capture
 324      =4  SFR16 (TMR2, 0xCC);                    // Timer 2 Capture / Reload
 325      =4  SFR16 (TMR4, 0xCC);                    // Timer 4
 326      =4  SFR16 (PCA0CP5, 0xCE);                 // PCA0 Module 5 Capture
 327      =4  SFR16 (PCA1CP11, 0xCE);                // PCA1 Module 11 Capture
 328      =4  SFR16 (PCA0CP1, 0xE9);                 // PCA0 Module 1 Capture
 329      =4  SFR16 (PCA1CP7, 0xE9);                 // PCA1 Module 7 Capture
 330      =4  SFR16 (PCA0CP2, 0xEB);                 // PCA0 Module 2 Capture
 331      =4  SFR16 (PCA1CP8, 0xEB);                 // PCA1 Module 8 Capture
 332      =4  SFR16 (PCA0CP3, 0xED);                 // PCA0 Module 3 Capture
 333      =4  SFR16 (PCA1CP9, 0xED);                 // PCA1 Module 9 Capture
 334      =4  SFR16 (PCA0, 0xF9);                    // PCA0 Counter
 335      =4  SFR16 (PCA1, 0xF9);                    // PCA1 Counter
 336      =4  SFR16 (PCA0CP0, 0xFB);                 // PCA0 Module 0 Capture
 337      =4  SFR16 (PCA1CP6, 0xFB);                 // PCA1 Module 6 Capture
 338      =4  SFR16 (PCA0CP4, 0xFD);                 // PCA0 Module 4 Capture
 339      =4  SFR16 (PCA1CP10, 0xFD);                 // PCA1 Module 10 Capture
 340      =4  
 341      =4  SFR16 (CAN0ERR, 0x96);                 // Error Counter
 342      =4  SFR16 (CAN0BT, 0x9A);                  // Bit Timing Register
 343      =4  SFR16 (CAN0IID, 0x9C);                 // Interrupt Register
 344      =4  SFR16 (CAN0TR1, 0xA2);                 // Transmission Request 1
 345      =4  SFR16 (CAN0TR2, 0xA4);                 // Transmission Request 2
 346      =4  SFR16 (CAN0ND1, 0xAA);                 // New Data 1
 347      =4  SFR16 (CAN0ND2, 0xAC);                 // New Data 2
 348      =4  SFR16 (CAN0IP1, 0xAE);                 // Interrupt Pending 1
 349      =4  SFR16 (CAN0IP2, 0xB2);                 // Interrupt Pending 2
 350      =4  SFR16 (CAN0MV1, 0xBA);                 // Message Valid 1
 351      =4  SFR16 (CAN0MV2, 0xBC);                 // Message Valid 2
 352      =4  SFR16 (CAN0IF1CR, 0xBE);               // IF1 Command Request
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 81  

 353      =4  SFR16 (CAN0IF1CM, 0xC2);               // IF1 Command Mask
 354      =4  SFR16 (CAN0IF1M1, 0xC4);               // IF1 Mask 1
 355      =4  SFR16 (CAN0IF1M2, 0xC6);               // IF1 Mask 2
 356      =4  SFR16 (CAN0IF1A1, 0xCA);               // IF1 Arbitration 1
 357      =4  SFR16 (CAN0IF1A2, 0xCC);               // IF1 Arbitration 2
 358      =4  SFR16 (CAN0IF1MC, 0xD2);               // IF1 Message Control
 359      =4  SFR16 (CAN0IF1DA1, 0xD4);              // IF1 Data A 1
 360      =4  SFR16 (CAN0IF1DA2, 0xD6);              // IF1 Data A 2
 361      =4  SFR16 (CAN0IF1DB1, 0xDA);              // IF1 Data B 1
 362      =4  SFR16 (CAN0IF1DB2, 0xDC);              // IF1 Data B 2
 363      =4  SFR16 (CAN0IF2CR, 0xDE);               // IF2 Command Request
 364      =4  SFR16 (CAN0IF2CM, 0xE2);               // IF2 Command Mask
 365      =4  SFR16 (CAN0IF2M1, 0xEA);               // IF2 Mask 1
 366      =4  SFR16 (CAN0IF2M2, 0xEC);               // IF2 Mask 2
 367      =4  SFR16 (CAN0IF2A1, 0xEE);               // IF2 Arbitration 1
 368      =4  SFR16 (CAN0IF2A2, 0xF2);               // IF2 Arbitration 2
 369      =4  SFR16 (CAN0IF2MC, 0xCE);               // IF2 Message Control
 370      =4  SFR16 (CAN0IF2DA1, 0xF6);              // IF2 Data A 1
 371      =4  SFR16 (CAN0IF2DA2, 0xFA);              // IF2 Data A 2
 372      =4  SFR16 (CAN0IF2DB1, 0xFC);              // IF2 Data B 1
 373      =4  SFR16 (CAN0IF2DB2, 0xFE);              // IF2 Data B 2
 374      =4  
 375      =4  //-----------------------------------------------------------------------------
 376      =4  // LIN0 Indirect Registers
 377      =4  //-----------------------------------------------------------------------------
 378      =4  
 379      =4  #define  LIN0DT1   0x00                // LIN0 Data Byte 1
 380      =4  #define  LIN0DT2   0x01                // LIN0 Data Byte 2
 381      =4  #define  LIN0DT3   0x02                // LIN0 Data Byte 3
 382      =4  #define  LIN0DT4   0x03                // LIN0 Data Byte 4
 383      =4  #define  LIN0DT5   0x04                // LIN0 Data Byte 5
 384      =4  #define  LIN0DT6   0x05                // LIN0 Data Byte 6
 385      =4  #define  LIN0DT7   0x06                // LIN0 Data Byte 7
 386      =4  #define  LIN0DT8   0x07                // LIN0 Data Byte 8
 387      =4  #define  LIN0CTRL  0x08                // LIN0 Control
 388      =4  #define  LIN0ST    0x09                // LIN0 Status
 389      =4  #define  LIN0ERR   0x0A                // LIN0 Error
 390      =4  #define  LIN0SIZE  0x0B                // LIN0 Message Size
 391      =4  #define  LIN0DIV   0x0C                // LIN0 Divider
 392      =4  #define  LIN0MUL   0x0D                // LIN0 Multiplier
 393      =4  #define  LIN0ID    0x0E                // LIN0 Identifier
 394      =4  
 395      =4  //-----------------------------------------------------------------------------
 396      =4  // Address Definitions for Bit-addressable Registers
 397      =4  //-----------------------------------------------------------------------------
 398      =4  
 399      =4  #define SFR_P0       0x80
 400      =4  #define SFR_TCON     0x88
 401      =4  #define SFR_P1       0x90
 402      =4  #define SFR_SCON0    0x98
 403      =4  #define SFR_SCON1    0x98
 404      =4  #define SFR_P2       0xA0
 405      =4  #define SFR_IE       0xA8
 406      =4  #define SFR_P3       0xB0
 407      =4  #define SFR_IP       0xB8
 408      =4  #define SFR_SMB0CN   0xC0
 409      =4  #define SFR_TMR2CN   0xC8
 410      =4  #define SFR_TMR4CN   0xC8
 411      =4  #define SFR_PSW      0xD0
 412      =4  #define SFR_PCA0CN   0xD8
 413      =4  #define SFR_PCA1CN   0xD8
 414      =4  #define SFR_ACC      0xE0
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 82  

 415      =4  #define SFR_ADC0CN   0xE8
 416      =4  #define SFR_B        0xF0
 417      =4  #define SFR_SPI0CN   0xF8
 418      =4  
 419      =4  //-----------------------------------------------------------------------------
 420      =4  // Bit Definitions
 421      =4  //-----------------------------------------------------------------------------
 422      =4  
 423      =4  // TCON 0x88
 424      =4  SBIT (TF1, SFR_TCON, 7);               // Timer 1 Overflow Flag
 425      =4  SBIT (TR1, SFR_TCON, 6);               // Timer 1 On/Off Control
 426      =4  SBIT (TF0, SFR_TCON, 5);               // Timer 0 Overflow Flag
 427      =4  SBIT (TR0, SFR_TCON, 4);               // Timer 0 On/Off Control
 428      =4  SBIT (IE1, SFR_TCON, 3);               // Ext. Interrupt 1 Edge Flag
 429      =4  SBIT (IT1, SFR_TCON, 2);               // Ext. Interrupt 1 Type
 430      =4  SBIT (IE0, SFR_TCON, 1);               // Ext. Interrupt 0 Edge Flag
 431      =4  SBIT (IT0, SFR_TCON, 0);               // Ext. Interrupt 0 Type
 432      =4  
 433      =4  // SCON0 0x98
 434      =4  SBIT (OVR0, SFR_SCON0, 7);             // UART0 Receive FIFO Overrun Flag
 435      =4  SBIT (PERR0, SFR_SCON0, 6);            // UART0 Parity Error Flag
 436      =4  SBIT (THRE0, SFR_SCON0, 5);            // UART0 Transmit Register Empty Flag
 437      =4  SBIT (REN0, SFR_SCON0, 4);             // UART0 RX Enable
 438      =4  SBIT (TBX0, SFR_SCON0, 3);             // UART0 Extra Transmission Bit
 439      =4  SBIT (RBX0, SFR_SCON0, 2);             // UART0 Extra Receive Bit
 440      =4  SBIT (TI0, SFR_SCON0, 1);              // UART0 TX Interrupt Flag
 441      =4  SBIT (RI0, SFR_SCON0, 0);              // UART0 RX Interrupt Flag
 442      =4  
 443      =4  // SCON1 0x98
 444      =4  SBIT (S1MODE, SFR_SCON1, 7);           // UART1 Mode 0
 445      =4                                         // Bit 6 UNUSED
 446      =4  SBIT (MCE1, SFR_SCON1, 5);             // UART1 Multiprocessor enable
 447      =4  SBIT (REN1, SFR_SCON1, 4);             // UART1 RX Enable
 448      =4  SBIT (TB81, SFR_SCON1, 3);             // UART1 TX Bit 8
 449      =4  SBIT (RB81, SFR_SCON1, 2);             // UART1 RX Bit 8
 450      =4  SBIT (TI1, SFR_SCON1, 1);              // UART1 TX Interrupt Flag
 451      =4  SBIT (RI1, SFR_SCON1, 0);              // UART1 RX Interrupt Flag
 452      =4  
 453      =4  // IE 0xA8
 454      =4  SBIT (EA, SFR_IE, 7);                  // Global Interrupt Enable
 455      =4  SBIT (ESPI0, SFR_IE, 6);               // SPI0 Interrupt Enable
 456      =4  SBIT (ET2, SFR_IE, 5);                 // Timer 2 Interrupt Enable
 457      =4  SBIT (ES0, SFR_IE, 4);                 // UART0 Interrupt Enable
 458      =4  SBIT (ET1, SFR_IE, 3);                 // Timer 1 Interrupt Enable
 459      =4  SBIT (EX1, SFR_IE, 2);                 // External Interrupt 1 Enable
 460      =4  SBIT (ET0, SFR_IE, 1);                 // Timer 0 Interrupt Enable
 461      =4  SBIT (EX0, SFR_IE, 0);                 // External Interrupt 0 Enable
 462      =4  
 463      =4  // IP 0xB8
 464      =4                                         // Bit 7 unused
 465      =4  SBIT (PSPI0, SFR_IP, 6);               // SPI0 Interrupt Priority
 466      =4  SBIT (PT2, SFR_IP, 5);                 // Timer 2 Priority
 467      =4  SBIT (PS0, SFR_IP, 4);                 // UART0 Priority
 468      =4  SBIT (PS, SFR_IP, 4);                  // UART0 Priority
 469      =4  SBIT (PT1, SFR_IP, 3);                 // Timer 1 Priority
 470      =4  SBIT (PX1, SFR_IP, 2);                 // External Interrupt 1 Priority
 471      =4  SBIT (PT0, SFR_IP, 1);                 // Timer 0 Priority
 472      =4  SBIT (PX0, SFR_IP, 0);                 // External Interrupt 0 Priority
 473      =4  
 474      =4  // SMB0CN 0xC0
 475      =4  SBIT (MASTER, SFR_SMB0CN, 7);          // SMBus0 Master/Slave Indicator
 476      =4  SBIT (TXMODE, SFR_SMB0CN, 6);          // SMBus0 Transmit Mode Indicator
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 83  

 477      =4  SBIT (STA, SFR_SMB0CN, 5);             // SMBus0 Start Flag
 478      =4  SBIT (STO, SFR_SMB0CN, 4);             // SMBus0 Stop Flag
 479      =4  SBIT (ACKRQ, SFR_SMB0CN, 3);           // SMBus0 Acknowledge Request
 480      =4  SBIT (ARBLOST, SFR_SMB0CN, 2);         // SMBus0 Arbitration Lost Indicator
 481      =4  SBIT (ACK, SFR_SMB0CN, 1);             // SMBus0 Acknowledge
 482      =4  SBIT (SI, SFR_SMB0CN, 0);              // SMBus0 Interrupt Flag
 483      =4  
 484      =4  // TMR2CN 0xC8
 485      =4  SBIT (TF2H, SFR_TMR2CN, 7);            // Timer 2 High-Byte Overflow Flag
 486      =4  SBIT (TF2L, SFR_TMR2CN, 6);            // Timer 2 Low-Byte  Overflow Flag
 487      =4  SBIT (TF2LEN, SFR_TMR2CN, 5);          // Timer 2 Low-Byte Flag Enable
 488      =4  SBIT (TF2CEN, SFR_TMR2CN, 4);          // Timer 2 Capture Enable
 489      =4  SBIT (T2SPLIT, SFR_TMR2CN, 3);         // Timer 2 Split-Mode Enable
 490      =4  SBIT (TR2, SFR_TMR2CN, 2);             // Timer 2 Run Enable
 491      =4  SBIT (T2RCLK, SFR_TMR2CN, 1);          // Timer 2 Xclk/Rclk Select
 492      =4  SBIT (T2XCLK, SFR_TMR2CN, 0);          // Timer 2 Clk/8 Clock Source
 493      =4  
 494      =4  // TMR4CN 0xC8
 495      =4  SBIT (TF4, SFR_TMR4CN, 7);             // Timer 4 Overflow/Underflow Flag
 496      =4  SBIT (EXF4, SFR_TMR4CN, 6);            // Timer 4 External Flag
 497      =4                                         // Bit 5 unused
 498      =4                                         // Bit 4 unused
 499      =4  SBIT (EXE4, SFR_TMR4CN, 3);            // Timer 4 External Enable
 500      =4  SBIT (TR4, SFR_TMR4CN, 2);             // Timer 4 Run Enable
 501      =4  SBIT (CT4, SFR_TMR4CN, 1);             // Timer 4 Counter/Timer Select
 502      =4  SBIT (CPRL4, SFR_TMR4CN, 0);           // Timer 4 Capture/Reload Select
 503      =4  
 504      =4  // PSW 0xD0
 505      =4  SBIT (CY, SFR_PSW, 7);                 // Carry Flag
 506      =4  SBIT (AC, SFR_PSW, 6);                 // Auxiliary Carry Flag
 507      =4  SBIT (F0, SFR_PSW, 5);                 // User Flag 0
 508      =4  SBIT (RS1, SFR_PSW, 4);                // Register Bank Select 1
 509      =4  SBIT (RS0, SFR_PSW, 3);                // Register Bank Select 0
 510      =4  SBIT (OV, SFR_PSW, 2);                 // Overflow Flag
 511      =4  SBIT (F1, SFR_PSW, 1);                 // User Flag 1
 512      =4  SBIT (P, SFR_PSW, 0);                  // Accumulator Parity Flag
 513      =4  
 514      =4  // PCA0CN 0xD8
 515      =4  SBIT (CF, SFR_PCA0CN, 7);              // PCA0 Counter Overflow Flag
 516      =4  SBIT (CR, SFR_PCA0CN, 6);              // PCA0 Counter Run Control Bit
 517      =4  SBIT (CCF5, SFR_PCA0CN, 5);            // PCA0 Module 5 Interrupt Flag
 518      =4  SBIT (CCF4, SFR_PCA0CN, 4);            // PCA0 Module 4 Interrupt Flag
 519      =4  SBIT (CCF3, SFR_PCA0CN, 3);            // PCA0 Module 3 Interrupt Flag
 520      =4  SBIT (CCF2, SFR_PCA0CN, 2);            // PCA0 Module 2 Interrupt Flag
 521      =4  SBIT (CCF1, SFR_PCA0CN, 1);            // PCA0 Module 1 Interrupt Flag
 522      =4  SBIT (CCF0, SFR_PCA0CN, 0);            // PCA0 Module 0 Interrupt Flag
 523      =4  
 524      =4  // PCA1CN 0xD8
 525      =4  SBIT (CF1, SFR_PCA1CN, 7);             // PCA1 Counter Overflow Flag
 526      =4  SBIT (CR1, SFR_PCA1CN, 6);             // PCA1 Counter Run Control Bit
 527      =4  SBIT (CCF11, SFR_PCA1CN, 5);           // PCA1 Module 11 Interrupt Flag
 528      =4  SBIT (CCF10, SFR_PCA1CN, 4);           // PCA1 Module 10 Interrupt Flag
 529      =4  SBIT (CCF9, SFR_PCA1CN, 3);            // PCA1 Module 9 Interrupt Flag
 530      =4  SBIT (CCF8, SFR_PCA1CN, 2);            // PCA1 Module 8 Interrupt Flag
 531      =4  SBIT (CCF7, SFR_PCA1CN, 1);            // PCA1 Module 7 Interrupt Flag
 532      =4  SBIT (CCF6, SFR_PCA1CN, 0);            // PCA1 Module 6 Interrupt Flag
 533      =4  
 534      =4  // ADC0CN 0xE8
 535      =4  SBIT (AD0EN, SFR_ADC0CN, 7);           // ADC0 Enable
 536      =4  SBIT (BURSTEN, SFR_ADC0CN, 6);         // ADC0 Burst Enable
 537      =4  SBIT (AD0INT, SFR_ADC0CN, 5);          // ADC0 EOC Interrupt Flag
 538      =4  SBIT (AD0BUSY, SFR_ADC0CN, 4);         // ADC0 Busy Flag
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 84  

 539      =4  SBIT (AD0WINT, SFR_ADC0CN, 3);         // ADC0 Window Compare Interrupt Flag
 540      =4  SBIT (AD0LJST, SFR_ADC0CN, 2);         // ADC0 Left Justified
 541      =4  SBIT (AD0CM1, SFR_ADC0CN, 1);          // ADC0 Start Of Conversion Mode Bit 1
 542      =4  SBIT (AD0CM0, SFR_ADC0CN, 0);          // ADC0 Start Of Conversion Mode Bit 0
 543      =4  
 544      =4  // SPI0CN 0xF8
 545      =4  SBIT (SPIF, SFR_SPI0CN, 7);            // SPI0 Interrupt Flag
 546      =4  SBIT (WCOL, SFR_SPI0CN, 6);            // SPI0 Write Collision Flag
 547      =4  SBIT (MODF, SFR_SPI0CN, 5);            // SPI0 Mode Fault Flag
 548      =4  SBIT (RXOVRN, SFR_SPI0CN, 4);          // SPI0 RX Overrun Flag
 549      =4  SBIT (NSSMD1, SFR_SPI0CN, 3);          // SPI0 Slave Select Mode 1
 550      =4  SBIT (NSSMD0, SFR_SPI0CN, 2);          // SPI0 Slave Select Mode 0
 551      =4  SBIT (TXBMT, SFR_SPI0CN, 1);           // SPI0 TX Buffer Empty Flag
 552      =4  SBIT (SPIEN, SFR_SPI0CN, 0);           // SPI0 Enable
 553      =4  
 554      =4  //-----------------------------------------------------------------------------
 555      =4  // Interrupt Priorities
 556      =4  //-----------------------------------------------------------------------------
 557      =4  
 558      =4  #define INTERRUPT_INT0             0   // External Interrupt 0
 559      =4  #define INTERRUPT_TIMER0           1   // Timer 0 Overflow
 560      =4  #define INTERRUPT_INT1             2   // External Interrupt 1
 561      =4  #define INTERRUPT_TIMER1           3   // Timer 1 Overflow
 562      =4  #define INTERRUPT_UART0            4   // UART0
 563      =4  #define INTERRUPT_TIMER2           5   // Timer 2 Overflow
 564      =4  #define INTERRUPT_SPI0             6   // SPI0
 565      =4  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 566      =4  #define INTERRUPT_ADC0_WINDOW      8   // ADC0 Window Comparison
 567      =4  #define INTERRUPT_ADC0_EOC         9   // ADC0 End Of Conversion
 568      =4  #define INTERRUPT_PCA0            10   // PCA0 Peripheral
 569      =4  #define INTERRUPT_COMPARATOR0     11   // Comparator 0 Comparison
 570      =4  #define INTERRUPT_COMPARATOR1     12   // Comparator 1 Comparison
 571      =4  #define INTERRUPT_TIMER3          13   // Timer 3 Overflow
 572      =4  #define INTERRUPT_LIN0            14   // LIN Bus Interrupt
 573      =4  #define INTERRUPT_VREG            15   // Voltage Regulator
 574      =4  #define INTERRUPT_CAN0            16   // CAN Bus Interrupt
 575      =4  #define INTERRUPT_PORT_MATCH      17   // Port Match
 576      =4  #define INTERRUPT_UART1           18   // UART1
 577      =4  #define INTERRUPT_PCA1            19   // PCA1 Peripheral
 578      =4  #define INTERRUPT_COMPARATOR2     20   // Comparator 2 Comparison
 579      =4  #define INTERRUPT_TIMER4          21   // Timer 4 Overflow
 580      =4  #define INTERRUPT_TIMER5          22   // Timer 5 Overflow
 581      =4  
 582      =4  
 583      =4  //-----------------------------------------------------------------------------
 584      =4  // SFR Page Definitions
 585      =4  //-----------------------------------------------------------------------------
 586      =4  
 587      =4  #define  CONFIG_PAGE       0x0F        // System and Port Configuration Page
 588      =4  #define  ACTIVE_PAGE       0x00        // Active Use Page
 589      =4  #define  ACTIVE2_PAGE      0x10        // Active Use Page 2
 590      =4  #define  CAN0_PAGE         0x0C        // CAN0 Registers
 591      =4  
 592      =4  //-----------------------------------------------------------------------------
 593      =4  // SDCC PDATA External Memory Paging Support
 594      =4  //-----------------------------------------------------------------------------
 595      =4  
 596      =4  #if defined SDCC
           =4 
           =4 SFR(_XPAGE, 0xAA); // Point to the EMI0CN register
           =4 
           =4 #endif
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 85  

 601      =4  
 602      =4  //-----------------------------------------------------------------------------
 603      =4  // Header File PreProcessor Directive
 604      =4  //-----------------------------------------------------------------------------
 605      =4  
 606      =4  #endif                                 // #define C8051F580_DEFS_H
 607      =4  
 608      =4  //-----------------------------------------------------------------------------
 609      =4  // End Of File
 610      =4  //-----------------------------------------------------------------------------
  12      =3  /*****************************************************************************/
  13      =3  
  14      =3  
  15      =3  
  16      =3  /*****************************************************************************/
  17      =3  //#include "InitDeviceF580.h"
  18      =3  //#include "delay.h"
  19      =3  //#include "i2c0.h"
  20      =3  //#include "i2c1.h"
  21      =3  //#include "i2c2.h"
  22      =3  //#include "i2c3.h"
  23      =3  //#include "i2c4.h"
  24      =3  //#include "i2c5.h"
  25      =3  //#include "i2c6.h"
  26      =3  //#include "eprom.h"
  27      =3  //#include "mcp47x6.h"
  28      =3  //#include "inPca9554.h"
  29      =3  //#include "outPca9554.h"
  30      =3  /*****************************************************************************/
  31      =3  #include "InitDeviceF020.h"
   1      =4  #ifndef __INITDEVICEF020_H__
   2      =4  #define __INITDEVICEF020_H__
   3      =4  /*****************************************************************************/
   4      =4  #include "appConfig.h"
   1      =5  #ifndef __APPCONFIG_H__
   2      =5  #define __APPCONFIG_H__
   3      =5  /*****************************************************************************/
   4      =5  #define ID_ONLY_1_CHANNEL                                       4321
   5      =5  #define ID_ONLY_2_CHANNEL                                       8765
   6      =5  #define ID_BOTH_CHANNEL                                         9431
   7      =5  #define ID_LASER_MODE_CW                                        7631
   8      =5  #define ID_LASER_MODE_SP                                        8934
   9      =5  #define ID_LASER_MODE_MP                                        2453
  10      =5  #define ID_LASER_MODE_GP                                        3876
  11      =5  /*****************************************************************************/
  12      =5  #define FBS1_IN_PORT                                            3
  13      =5  #define FBS2_IN_PORT                                            2
  14      =5  #define COOLON_OUT_PORT                                         (1 * 8 + 3)
  15      =5  #endif
   5      =4  /*****************************************************************************/
   6      =4  void initDeviceF020(void);
   7      =4  #endif
  32      =3  #include "delay.h"
   1      =4  #ifndef __DELAY_H__
   2      =4  #define __DELAY_H__
   3      =4  /*****************************************************************************/
   4      =4  #include "appConfig.h"
   1      =5  #ifndef __APPCONFIG_H__
           =5 #define __APPCONFIG_H__
           =5 /*****************************************************************************/
           =5 #define ID_ONLY_1_CHANNEL                                       4321
           =5 #define ID_ONLY_2_CHANNEL                                       8765
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 86  

           =5 #define ID_BOTH_CHANNEL                                         9431
           =5 #define ID_LASER_MODE_CW                                        7631
           =5 #define ID_LASER_MODE_SP                                        8934
           =5 #define ID_LASER_MODE_MP                                        2453
           =5 #define ID_LASER_MODE_GP                                        3876
           =5 /*****************************************************************************/
           =5 #define FBS1_IN_PORT                                            3
           =5 #define FBS2_IN_PORT                                            2
           =5 #define COOLON_OUT_PORT                                         (1 * 8 + 3)
           =5 #endif
   5      =4  /*****************************************************************************/
   6      =4  void delayMs(uint8_t ms) reentrant;
   7      =4  void delayUs(uint8_t us) reentrant;
   8      =4  void hwDelayInit(uint8_t reload_h, uint8_t reload_l);
   9      =4  void hwDelay(uint8_t control, uint8_t reload_h, uint8_t reload_l);
  10      =4  /*****************************************************************************/
  11      =4  #endif
  12      =4  
  33      =3  
  34      =3  #include "sPlcTimer.h"
   1      =4  #ifndef __SPLCTIMER_H__
   2      =4  #define __SPLCTIMER_H__
   3      =4  /*****************************************************************************/
   4      =4  #include "sPlcPort.h"
   1      =5  #ifndef __SPLCPORT_H__
           =5 #define __SPLCPORT_H__
           =5 /*****************************************************************************/
           =5 #include "sPlc.h"
           =5 #include "sPlcConfig.h"
           =5 #include "stdint.h"
           =5 #include "stdbool.h"
           =5 #include "endian.h"
           =5 #include "si_toolchain.h"
           =5 #include "compiler_defs.h"
           =5 #include "C8051F580_defs.h"
           =5 /*****************************************************************************/
           =5 
           =5 
           =5 
           =5 /*****************************************************************************/
           =5 //#include "InitDeviceF580.h"
           =5 //#include "delay.h"
           =5 //#include "i2c0.h"
           =5 //#include "i2c1.h"
           =5 //#include "i2c2.h"
           =5 //#include "i2c3.h"
           =5 //#include "i2c4.h"
           =5 //#include "i2c5.h"
           =5 //#include "i2c6.h"
           =5 //#include "eprom.h"
           =5 //#include "mcp47x6.h"
           =5 //#include "inPca9554.h"
           =5 //#include "outPca9554.h"
           =5 /*****************************************************************************/
           =5 #include "InitDeviceF020.h"
           =5 #include "delay.h"
           =5 
           =5 #include "sPlcTimer.h"
           =5 #include "sPlcInt.h"
           =5 #if CONFIG_SPLC_USING_UART1 == 1
           =5 #include "sPlcUart.h"
           =5 #endif
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 87  

           =5 
           =5 #if CONFIG_SPLC_USING_ADC == 1
           =5 #include "sPlcChipAdc.h"
           =5 #endif
           =5 #if CONFIG_SPLC_USING_DAC == 1
           =5 #include "sPlcDac.h"
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
           =5 #include "Modbus.h"
           =5 #include "ModbusPort.h"
           =5 #endif
           =5 
           =5 
           =5 
           =5 #if CONFIG_SPLC_USING_LED == 1
           =5 #include "sPlcLed.h"
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_IO_INPUT == 1
           =5 #include "sPlcIo.h"
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_IO_OUTPUT == 1
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_WDT == 1
           =5 #include "sPlcWatchDog.h"
           =5 #endif
           =5 
           =5 /*****************************************************************************/
           =5 
           =5 
           =5 
           =5 #endif
   5      =4  
   6      =4  
   7      =4  #endif
  35      =3  #include "sPlcInt.h"
   1      =4  #ifndef __SPLCINT_H__
   2      =4  #define __SPLCINT_H__
   3      =4  /*****************************************************************************/
   4      =4  #include "sPlcConfig.h"
   1      =5  #ifndef __SPLCCONFIG_H__
           =5 #define __SPLCCONFIG_H__
           =5 /*****************************************************************************/
           =5 #define DEBUG_LED_ON                                            0
           =5 #define DEBUG_LED_OFF                                           1
           =5 /*****************************************************************************/
           =5 #ifdef C8051F580
           =5 #define CONFIG_SYSCLK                       (48000000L)//F580内部48M
           =5 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =5 #endif
           =5 
           =5 #ifdef C8051F020
           =5 #define CONFIG_SYSCLK                       (22118400L)
           =5 #define CONFIG_SARCLK                                           (2000000L)//ADC0时钟 <2.5MHz
           =5 #endif
           =5 
           =5 //SPLC设置
           =5 #define SET_LED_RUN(b)
           =5 #define SET_LED_ERROR(b)
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 88  

           =5 #define SET_LED_DAC(b)
           =5 #define SET_LED_ADC(b)
           =5 #define SET_LED_EPROM(b)
           =5 #define SET_LED_IO(b)
           =5 #define SET_LED_WDT(b)
           =5 #define SET_LED_PCA(b)
           =5 
           =5 #define GET_LED_RUN(b)
           =5 #define GET_LED_ERROR(b)
           =5 #define GET_LED_DAC(b)
           =5 #define GET_LED_ADC(b)
           =5 #define GET_LED_EPROM(b)
           =5 #define GET_LED_IO(b)
           =5 #define GET_LED_WDT(b)
           =5 #define GET_LED_PCA(b)
           =5 
           =5 #define REBOOT()                                                                RSTSRC |= 1 << 4//强制复位
           =5 /*****************************************************************************/
           =5 #define CONFIG_UART0_BAUDRATE                           115200//串口波特率
           =5 #define CONFIG_UART0_PARITY                                     NONE
           =5 #define CONFIG_UART0_STOPBIT                            1
           =5 #define CONFIG_UART0_DATABIT                            8
           =5 
           =5 #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
           =5 #define CONFIG_UART1_PARITY                                     NONE
           =5 #define CONFIG_UART1_STOPBIT                            1
           =5 #define CONFIG_UART1_DATABIT                            8
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_ASSERT                                      1//检查地址范围
           =5 #define CONFIG_SPLC_DEV                                         0x0A01//设备号
           =5 #define CONFIG_SPLC_CLEAR_CODE                          0xA58E
           =5 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =5 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_LED                           0//启用调试LED
           =5 #define CONFIG_SPLC_USING_CLEAR_NVRAM           0//启用清除NVRAM功能
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_IO_INPUT                      0//输入IO刷新启用
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_IO_OUTPUT                     0//输出IO刷新启用
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_EPROM                         0//EPROM掉电存储启用
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_UART1                         0//UART1串口启用
           =5 #if CONFIG_SPLC_USING_UART1 == 1
           =5 #define SPLC_UART1                                                      0
           =5 #endif
           =5 #define CONFIG_SPLC_USING_UART2                         0//UART1串口启用
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_ADC                           0//使能ADC模块
           =5 #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
           =5 #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
           =5 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =5 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =5 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2400L// ADC Voltage Reference (mV)
           =5 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_DAC                           0//是能DAC模块
           =5 /*****************************************************************************/
           =5 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          0//是能MODBUS RTU从站
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 89  

           =5 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =5 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =5 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =5 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =5 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =5 /*****************************************************************************/
           =5 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =5 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =5 #define DISABLE_INTERRUPT                                       EA = 0;
           =5 #define ENABLE_INTERRUPT                                        EA = 1;
           =5 /*****************************************************************************/
           =5 //线圈 保持 8 * 16 = 128BIT
           =5 #define MR_START                                                0
           =5 #define MR_END                                                  3
           =5 //线圈寄存器 非保持 8 * 16 = 128BIT
           =5 #define R_START                                                 4
           =5 #define R_END                                                   11
           =5 //数据寄存器 保持 8
           =5 #define DM_START                                                12
           =5 #define DM_END                                                  19
           =5 //数据寄存器 非保持 140个字
           =5 #define EM_START                                                20
           =5 #define EM_END                                                  159
           =5 //延时线圈
           =5 //1MS 1 * 16 = 16BIT
           =5 #define T_1MS_START                                             160
           =5 #define T_1MS_END                                               160
           =5 //10MS 1 * 16 = 16BIT
           =5 #define T_10MS_START                                    161
           =5 #define T_10MS_END                                              161
           =5 //100MS 1 * 16 = 16BIT
           =5 #define T_100MS_START                                   162
           =5 #define T_100MS_END                                             162
           =5 //延时计时器 
           =5 //1MS 16
           =5 #define TD_1MS_START                                    163
           =5 #define TD_1MS_END                                              178
           =5 //10MS 16
           =5 #define TD_10MS_START                                   179
           =5 #define TD_10MS_END                                             194
           =5 //100MS 16
           =5 #define TD_100MS_START                                  195
           =5 #define TD_100MS_END                                    210
           =5 //计数器 1
           =5 #define C_START                                                 211
           =5 #define C_END                                                   211
           =5 //输入位寄存器 1 * 16 = 16个
           =5 #define X_START                                                 212
           =5 #define X_END                                                   212             
           =5 //输出位寄存器 1 * 16 = 16个
           =5 #define Y_START                                                 213
           =5 #define Y_END                                                   213
           =5 //特殊寄存器 24个字
           =5 #define SPREG_START                                             214
           =5 #define SPREG_END                                               237
           =5 //特殊线圈      4 * 16 = 64个
           =5 #define SPCOIL_START                                    238
           =5 #define SPCOIL_END                                              241
           =5 /*****************************************************************************/
           =5 #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
           =5 /*****************************************************************************/
           =5 #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 90  

           =5 #define SPCOIL_START_UP                                 (SPCOIL_START * 16 + 1)//初次上电
           =5 #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 2)//1mS间隔 50%占空比脉冲
           =5 #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 3)//10mS
           =5 #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 4)//100mS  
           =5 #define SPCOIL_PS1000MS                                 (SPCOIL_START * 16 + 5)//1000mS 
           =5 
           =5 #define SPCOIL_NVRAM_FAIL                               (SPCOIL_START * 16 + 14)//NVRAM校验码错误
           =5 #define SPCOIL_WATCHDOG                                 (SPCOIL_START * 16 + 15)//看门狗溢出
           =5 #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 16)//UART1发送忙
           =5 #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 17)//UART1接收忙
           =5 #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 18)//发送完成
           =5 #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 19)//接收完成
           =5 #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 20)//UART1发送忙
           =5 #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 21)//UART1接收忙
           =5 #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 22)//发送完成
           =5 #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 23)//接收完成
           =5 /*****************************************************************************/
           =5 #define SPREG_RUNTIME_L                                 (SPREG_START + 0)//累计运行时间秒 32BIT
           =5 #define SPREG_RUNTIME_H                                 (SPREG_START + 1)//累计运行时间秒 32BIT         
           =5 /*****************************************************************************/
           =5 #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
           =5 #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
           =5 #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
           =5 #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
           =5 #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
           =5 #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
           =5 /*****************************************************************************/
           =5 #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
           =5 #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
           =5 #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
           =5 #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
           =5 #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
           =5 #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
           =5 /*****************************************************************************/
           =5 #define SPREG_CLEAR_NVRAM0                              (SPREG_END)//清除NVRAM后重新启动
           =5 /*****************************************************************************/
           =5 
           =5 #endif
   5      =4  #include "sPlcPort.h"
   1      =5  #ifndef __SPLCPORT_H__
           =5 #define __SPLCPORT_H__
           =5 /*****************************************************************************/
           =5 #include "sPlc.h"
           =5 #include "sPlcConfig.h"
           =5 #include "stdint.h"
           =5 #include "stdbool.h"
           =5 #include "endian.h"
           =5 #include "si_toolchain.h"
           =5 #include "compiler_defs.h"
           =5 #include "C8051F580_defs.h"
           =5 /*****************************************************************************/
           =5 
           =5 
           =5 
           =5 /*****************************************************************************/
           =5 //#include "InitDeviceF580.h"
           =5 //#include "delay.h"
           =5 //#include "i2c0.h"
           =5 //#include "i2c1.h"
           =5 //#include "i2c2.h"
           =5 //#include "i2c3.h"
           =5 //#include "i2c4.h"
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 91  

           =5 //#include "i2c5.h"
           =5 //#include "i2c6.h"
           =5 //#include "eprom.h"
           =5 //#include "mcp47x6.h"
           =5 //#include "inPca9554.h"
           =5 //#include "outPca9554.h"
           =5 /*****************************************************************************/
           =5 #include "InitDeviceF020.h"
           =5 #include "delay.h"
           =5 
           =5 #include "sPlcTimer.h"
           =5 #include "sPlcInt.h"
           =5 #if CONFIG_SPLC_USING_UART1 == 1
           =5 #include "sPlcUart.h"
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_ADC == 1
           =5 #include "sPlcChipAdc.h"
           =5 #endif
           =5 #if CONFIG_SPLC_USING_DAC == 1
           =5 #include "sPlcDac.h"
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
           =5 #include "Modbus.h"
           =5 #include "ModbusPort.h"
           =5 #endif
           =5 
           =5 
           =5 
           =5 #if CONFIG_SPLC_USING_LED == 1
           =5 #include "sPlcLed.h"
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_IO_INPUT == 1
           =5 #include "sPlcIo.h"
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_IO_OUTPUT == 1
           =5 #endif
           =5 
           =5 #if CONFIG_SPLC_USING_WDT == 1
           =5 #include "sPlcWatchDog.h"
           =5 #endif
           =5 
           =5 /*****************************************************************************/
           =5 
           =5 
           =5 
           =5 #endif
   6      =4  
   7      =4  
   8      =4  #endif
  36      =3  #if CONFIG_SPLC_USING_UART1 == 1
           =3 #include "sPlcUart.h"
           =3 #endif
  39      =3  
  40      =3  #if CONFIG_SPLC_USING_ADC == 1
           =3 #include "sPlcChipAdc.h"
           =3 #endif
  43      =3  #if CONFIG_SPLC_USING_DAC == 1
           =3 #include "sPlcDac.h"
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 92  

           =3 #endif
  46      =3  
  47      =3  #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
           =3 #include "Modbus.h"
           =3 #include "ModbusPort.h"
           =3 #endif
  51      =3  
  52      =3  
  53      =3  
  54      =3  #if CONFIG_SPLC_USING_LED == 1
           =3 #include "sPlcLed.h"
           =3 #endif
  57      =3  
  58      =3  #if CONFIG_SPLC_USING_IO_INPUT == 1
           =3 #include "sPlcIo.h"
           =3 #endif
  61      =3  
  62      =3  #if CONFIG_SPLC_USING_IO_OUTPUT == 1
           =3 #endif
  64      =3  
  65      =3  #if CONFIG_SPLC_USING_WDT == 1
           =3 #include "sPlcWatchDog.h"
           =3 #endif
  68      =3  
  69      =3  /*****************************************************************************/
  70      =3  
  71      =3  
  72      =3  
  73      =3  #endif
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDIO.H
   3      =3  
   4      =3  Prototypes for standard I/O functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __STDIO_H__
  10      =3  #define __STDIO_H__
  11      =3  
  12      =3  #ifndef EOF
  13      =3   #define EOF -1
  14      =3  #endif
  15      =3  
  16      =3  #ifndef NULL
           =3  #define NULL ((void *) 0)
           =3 #endif
  19      =3  
  20      =3  #ifndef _SIZE_T
  21      =3   #define _SIZE_T
  22      =3   typedef unsigned int size_t;
  23      =3  #endif
  24      =3  
  25      =3  #pragma SAVE
  26      =3  #pragma REGPARMS
  27      =3  extern char _getkey (void);
  28      =3  extern char getchar (void);
  29      =3  extern char ungetchar (char);
  30      =3  extern char putchar (char);
  31      =3  extern int printf   (const char *, ...);
  32      =3  extern int sprintf  (char *, const char *, ...);
  33      =3  extern int vprintf  (const char *, char *);
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 93  

  34      =3  extern int vsprintf (char *, const char *, char *);
  35      =3  extern char *gets (char *, int n);
  36      =3  extern int scanf (const char *, ...);
  37      =3  extern int sscanf (char *, const char *, ...);
  38      =3  extern int puts (const char *);
  39      =3  
  40      =3  #pragma RESTORE
  41      =3  
  42      =3  #endif
  43      =3  
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDLIB.H
   3      =3  
   4      =3  Standard functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STDLIB_H__
  11      =3  #define __STDLIB_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #ifndef _WCHAR_T_DEFINED_
  23      =3  #define _WCHAR_T_DEFINED_
  24      =3  typedef char wchar_t;
  25      =3  #endif
  26      =3  
  27      =3  #if defined (__CX2__)
           =3 #ifndef _DIV_T_DEFINED
           =3 typedef struct _div_t {
           =3         int quot;
           =3         int rem;
           =3 } div_t;
           =3 typedef struct _ldiv_t {
           =3         long quot;
           =3         long rem;
           =3 } ldiv_t;
           =3 #define _DIV_T_DEFINED
           =3 #endif // _DIV_T_DEFINED
           =3 #endif // __CX2__
  40      =3  
  41      =3  #ifndef RAND_MAX
  42      =3   #define RAND_MAX  32767u
  43      =3  #endif
  44      =3  
  45      =3  #if defined (__CX2__)
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif // __CX2__
  52      =3  
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 94  

  53      =3  #pragma SAVE
  54      =3  #pragma REGPARMS
  55      =3  
  56      =3  extern char   cabs (char  val);
  57      =3  #if !defined (__CX2__)
  58      =3  extern int    abs  (int   val);
  59      =3  #endif // __CX2__
  60      =3  extern long   labs (long  val);
  61      =3  
  62      =3  extern float  atof (const char *s1);
  63      =3  extern long   atol (const char *s1);
  64      =3  extern int    atoi (const char *s1);
  65      =3  extern int    rand (void);
  66      =3  extern void   srand (unsigned int seed);
  67      =3  
  68      =3  #ifdef _DIV_T_DEFINED
           =3 extern div_t  __div (int numer, int denom);
           =3 #define div(numer,denom)  __div((numer),(denom));
           =3 extern ldiv_t ldiv (long numer, long denom);
           =3 #endif // _DIV_T_DEFINED
  73      =3  
  74      =3  extern float         strtod  (const char *nptr, char **endptr);
  75      =3  extern long          strtol  (const char *nptr, char **endptr, unsigned char base);
  76      =3  extern unsigned long strtoul (const char *nptr, char **endptr, unsigned char base);
  77      =3  
  78      =3  #define _MALLOC_MEM_    xdata
  79      =3  
  80      =3  extern void init_mempool          (void _MALLOC_MEM_ *p, size_t size);
  81      =3  extern void _MALLOC_MEM_ *malloc  (size_t size);
  82      =3  extern void free                  (void _MALLOC_MEM_ *p);
  83      =3  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, size_t size);
  84      =3  extern void _MALLOC_MEM_ *calloc  (size_t nmemb, size_t size);
  85      =3  
  86      =3  #if defined (__CX2__)
           =3 extern void abort(void);
           =3 #endif // __CX2__
  89      =3  
  90      =3  #pragma RESTORE
  91      =3  
  92      =3  #endif // __STDLIB_H__
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STRING.H
   3      =3  
   4      =3  String functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STRING_H__
  11      =3  #define __STRING_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #pragma SAVE
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 95  

  23      =3  #pragma REGPARMS
  24      =3  extern char  *strcat  (char *s1, const char *s2);
  25      =3  extern char  *strncat (char *s1, const char *s2, size_t n);
  26      =3  
  27      =3  extern char   strcmp  (const char *s1, const char *s2);
  28      =3  extern char   strncmp (const char *s1, const char *s2, size_t n);
  29      =3  
  30      =3  extern char  *strcpy  (char *s1, const char *s2);
  31      =3  extern char  *strncpy (char *s1, const char *s2, size_t n);
  32      =3  
  33      =3  extern size_t strlen  (const char *);
  34      =3  
  35      =3  extern char  *strchr  (const char *s, char c);
  36      =3  extern int    strpos  (const char *s, char c);
  37      =3  extern char  *strrchr (const char *s, char c);
  38      =3  extern int    strrpos (const char *s, char c);
  39      =3  
  40      =3  extern size_t strspn  (const char *s, const char *set);
  41      =3  extern size_t strcspn (const char *s, const char *set);
  42      =3  extern char  *strpbrk (const char *s, const char *set);
  43      =3  extern char  *strrpbrk(const char *s, const char *set);
  44      =3  extern char  *strstr  (const char *s, const char *sub);
  45      =3  extern char  *strtok  (char *str, const char *set);
  46      =3  
  47      =3  extern char   memcmp  (const void *s1, const void *s2, size_t n);
  48      =3  extern void  *memcpy  (void *s1, const void *s2, size_t n);
  49      =3  extern void  *memchr  (const void *s, char val, size_t n);
  50      =3  extern void  *memccpy (void *s1, const void *s2, char val, size_t n);
  51      =3  extern void  *memmove (void *s1, const void *s2, size_t n);
  52      =3  extern void  *memset  (void *s, char val, size_t n);
  53      =3  #pragma RESTORE
  54      =3  
  55      =3  #endif
   1      =3  /*--------------------------------------------------------------------------
   2      =3  INTRINS.H
   3      =3  
   4      =3  Intrinsic functions for C51.
   5      =3  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __INTRINS_H__
  10      =3  #define __INTRINS_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  
  14      =3  #if defined (__CX2__)
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 #endif
  18      =3  
  19      =3  extern void          _nop_     (void);
  20      =3  extern bit           _testbit_ (bit);
  21      =3  extern unsigned char _cror_    (unsigned char, unsigned char);
  22      =3  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  23      =3  extern unsigned long _lror_    (unsigned long, unsigned char);
  24      =3  extern unsigned char _crol_    (unsigned char, unsigned char);
  25      =3  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  26      =3  extern unsigned long _lrol_    (unsigned long, unsigned char);
  27      =3  extern unsigned char _chkfloat_(float);
  28      =3  #if defined (__CX2__)
           =3 extern int           abs       (int);
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 96  

           =3 extern void          _illop_   (void);
           =3 #endif
  32      =3  #if !defined (__CX2__)
  33      =3  extern void          _push_    (unsigned char _sfr);
  34      =3  extern void          _pop_     (unsigned char _sfr);
  35      =3  #endif
  36      =3  
  37      =3  #pragma RESTORE
  38      =3  
  39      =3  #endif
  40      =3  
   1      =3  /*--------------------------------------------------------------------------
   2      =3  CTYPE.H
   3      =3  
   4      =3  Prototypes for character functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __CTYPE_H__
  10      =3  #define __CTYPE_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  #pragma REGPARMS
  14      =3  extern bit isalpha (unsigned char);
  15      =3  extern bit isalnum (unsigned char);
  16      =3  extern bit iscntrl (unsigned char);
  17      =3  extern bit isdigit (unsigned char);
  18      =3  extern bit isgraph (unsigned char);
  19      =3  extern bit isprint (unsigned char);
  20      =3  extern bit ispunct (unsigned char);
  21      =3  extern bit islower (unsigned char);
  22      =3  extern bit isupper (unsigned char);
  23      =3  extern bit isspace (unsigned char);
  24      =3  extern bit isxdigit (unsigned char);
  25      =3  extern unsigned char tolower (unsigned char);
  26      =3  extern unsigned char toupper (unsigned char);
  27      =3  extern unsigned char toint (unsigned char);
  28      =3  
  29      =3  #define _tolower(c) ( (c)-'A'+'a' )
  30      =3  #define _toupper(c) ( (c)-'a'+'A' )
  31      =3  #define toascii(c)  ( (c) & 0x7F )
  32      =3  #pragma RESTORE
  33      =3  
  34      =3  #endif
   1      =3  /*--------------------------------------------------------------------------
   2      =3  LIMITS.H
   3      =3  
   4      =3  ANSI standard include file.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2009 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __LIMITS_H__
  11      =3  #define __LIMITS_H__
  12      =3  
  13      =3  #define CHAR_BIT         8              /* Number of bits in any "char" */
  14      =3  #define CHAR_MAX         127            /* Max             "char" value */
  15      =3  #define CHAR_MIN       (-128)           /* Min             "char" value */
  16      =3  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  17      =3  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 97  

  18      =3  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  19      =3  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  20      =3  #define SHRT_MIN       (-32767-1)       /* Min ("signed") "short" value */
  21      =3  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  22      =3  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  23      =3  #define INT_MIN        (-32767-1)       /* Min ("signed")   "int" value */
  24      =3  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  25      =3  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  26      =3  #define LONG_MIN   (-2147483647L-1L)    /* Min ("signed")  "long" value */
  27      =3  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
  28      =3  
  29      =3  #endif
   1      =3  /*--------------------------------------------------------------------------
   2      =3  MATH.H
   3      =3  
   4      =3  Prototypes for mathematic functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __MATH_H__
  11      =3  #define __MATH_H__
  12      =3  
  13      =3  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
           =3 #ifndef HUGE_VAL
           =3 #define HUGE_VAL __inf__
           =3 #endif // HUGE_VAL
           =3 
           =3 #ifndef NAN
           =3 #define NAN __nan__
           =3 #endif // NAN
           =3 
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif
  28      =3  
  29      =3  #pragma SAVE
  30      =3  #pragma REGPARMS
  31      =3  #if !defined (__CX2__)
  32      =3  extern char  cabs  (char  val);
  33      =3  extern int    abs  (int   val);
  34      =3  extern long  labs  (long  val);
  35      =3  #endif
  36      =3  
  37      =3  extern float fabs  (float val);
  38      =3  extern float sqrt  (float val);
  39      =3  extern float exp   (float val);
  40      =3  extern float log   (float val);
  41      =3  extern float log10 (float val);
  42      =3  extern float sin   (float val);
  43      =3  extern float cos   (float val);
  44      =3  extern float tan   (float val);
  45      =3  extern float asin  (float val);
  46      =3  extern float acos  (float val);
  47      =3  extern float atan  (float val);
  48      =3  extern float sinh  (float val);
  49      =3  extern float cosh  (float val);
  50      =3  extern float tanh  (float val);
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 98  

  51      =3  extern float atan2 (float y, float x);
  52      =3  
  53      =3  extern float ceil  (float val);
  54      =3  extern float floor (float val);
  55      =3  extern float modf  (float val, float *n);
  56      =3  extern float fmod  (float x, float y);
  57      =3  extern float pow   (float x, float y);
  58      =3  
  59      =3  #if defined (__CX2__)
           =3 extern float frexp (float val, int *exp);
           =3 extern float ldexp (float val, int exp);
           =3 #endif
  63      =3  
  64      =3  #pragma RESTORE
  65      =3  
  66      =3  #endif
   5      =1  /*****************************************************************************/
   6      =1  
   7      =1  #endif
   8      =1  
   9      =1  
  10      =1  
   2          #include "sPlcTest.h"
   1      =1  #ifndef __SPLCTEST_H__
   2      =1  #define __SPLCTEST_H__
   3      =1  /*****************************************************************************/
   4      =1  #include "sPlc.h"
   1      =2  #ifndef __SPLC_H__
           =2 #define __SPLC_H__
           =2 /*****************************************************************************/
           =2 #include "sPlcConfig.h"
           =2 #include "sPlcFun.h"
           =2 #include "sPlcPort.h"
           =2 /*****************************************************************************/
           =2 #include <stdio.h>
           =2 #include <stdlib.h> 
           =2 #include <string.h>
           =2 #include <INTRINS.H>
           =2 #include <ctype.h>
           =2 #include <LIMITS.H>
           =2 #include <math.h>
           =2 /*****************************************************************************/
           =2 extern xdata int16_t volatile NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
           =2 extern xdata int16_t volatile NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
           =2 extern idata volatile uint8_t TimerCounter_1mS;
           =2 extern idata volatile uint8_t TimerCounter_10mS;
           =2 extern idata volatile uint8_t TimerCounter_100mS;
           =2 extern idata volatile uint8_t Timer0_L, Timer0_H;
           =2 /*****************************************************************************/
           =2 void sPlcInit(void);//软逻辑初始化
           =2 
           =2 void sPlcProcessStart(void);//sPLC轮询起始
           =2 void sPlcProcessEnd(void);//sPLC轮询结束
           =2 extern void initWatchDog(void);//看门狗初始化
           =2 extern void feedWatchDog(void) reentrant;//喂狗
           =2 extern void enableWatchDog(void);//使能看门狗
           =2 extern void disableWatchDog(void);//关闭看门狗(未锁定)
           =2 void checkWatchDog(void);//检查看门狗状态
           =2 /*****************************************************************************/
           =2 void assertCoilAddress(uint16_t adr) reentrant;
           =2 void assertRegisterAddress(uint16_t adr) reentrant;
           =2 /*****************************************************************************/
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 99  

           =2 void clearX(void);
           =2 void clearY(void);
           =2 void clearDM(void);
           =2 void clearEM(void);
           =2 void clearR(void);
           =2 void clearT(void);
           =2 void clearTD(void);
           =2 void clearC(void);
           =2 void clearSPCOIL();
           =2 void clearSPREG(void);
           =2 extern void loadNvram(void);
           =2 extern void clearNvram(void);
           =2 extern void saveNvram(void);
           =2 extern void updataNvram(void);
           =2 /*****************************************************************************/
           =2 void enterSplcIsr(void);
           =2 void exitSplcIsr(void);
           =2 /*****************************************************************************/
           =2 void initSplcTimer(void);
           =2 void chipDacInit(void);
           =2 void chipAdcInit(void);
           =2 void sPlcInit(void);
           =2 void refreshDac(void);
           =2 /*****************************************************************************/
           =2 #endif
   5      =1  /*****************************************************************************/
   6      =1  void sPlcTest(void);
   7      =1  /*****************************************************************************/
   8      =1  #endif
   9      =1  
   3          /*****************************************************************************/
   4          ////C8051F020 仿真计时器功能定义
   5          ////TIMER0 ->SPLC_FRAME
   6          ////TIMER1 ->
   7          ////TIMER2 ->UART0 Buadrate
   8          //<<<<<<< HEAD
   9          ////TIMER3 ->Modbus RTU TIMER
  10          //=======
  11          ////TIMER3 ->NO FUNCTION
  12          //>>>>>>> MCFCL_25MP
  13          ////TIMER4 ->UART1 Buadrate
  14          ////C8051F580 计时器功能定义
  15          ////TIMER0 ->SPLC_FRAME
  16          ////TIMER1 ->UART1 Baud Rate Generator
  17          ////TIMER2 ->SPLC_LASER
  18          ////TIMER3 ->MODBUS RTU TIMER
  19          ////TIMER4 ->EXT TIMER OUT
  20          ////TIMER5 ->BEEM
  21          ///*****************************************************************************/
  22          //#define DM_TOTAL_TIME_L                                       (DM_START + 0)
  23          //#define DM_TOTAL_TIME_H                                       (DM_START + 1)
  24          /*****************************************************************************/
  25          //<<<<<<< HEAD
  26          //#define ENUM_MODE_CW                                  0//连续模式
  27          //#define ENUM_MODE_SP                                  1//单脉冲模式
  28          //#define ENUM_MODE_MP                                  2//多脉冲模式
  29          //#define ENUM_MODE_GP                                  3//群脉冲模式
  30          //#define ENUM_MODE_CC                                  4//校正模式
  31          ///*****************************************************************************/
  32          ///*****************************************************************************/
  33          //#define STEPNUM_FAULT                                 -1//故障
  34          //#define STEPNUM_INIT                                  0//初始化
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 100 

  35          //#define STEPNUM_STANDBY                                       1//待机
  36          //#define STEPNUM_INTO_READY                            2//进入准备
  37          //#define STEPNUM_READY                                 3//准备
  38          //#define STEPNUM_LASERON                                       4//激光开始
  39          
  40          /*****************************************************************************/
  41          
  42          void main(void){
  43   1              initDeviceF020();
  44   1              sPlcInit();//初始化软逻辑
  45   1              while(1){
  46   2                      sPlcProcessStart();
  47   2                      if(LD(SPCOIL_START_UP)){//执行一次的代码
  48   3                      
  49   3                      }
  50   2                      sPlcTest();
  51   2                      sPlcProcessEnd();
  52   2              }
  53   1      }
  54          
  55          
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 101 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
0000 120000      E     LCALL   initDeviceF020
                                           ; SOURCE LINE # 44
0003 120000      E     LCALL   sPlcInit
0006         ?C0001:
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0006 120000      E     LCALL   sPlcProcessStart
                                           ; SOURCE LINE # 47
0009 7E0E              MOV     R6,#0EH
000B 7FE1              MOV     R7,#0E1H
000D 120000      E     LCALL   _?LD
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
0010 120000      E     LCALL   sPlcTest
                                           ; SOURCE LINE # 51
0013 120000      E     LCALL   sPlcProcessEnd
                                           ; SOURCE LINE # 52
0016 80EE              SJMP    ?C0001
             ; FUNCTION main (END)

C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 102 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
fp32_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
fp64_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
bool . . . . . . . . . . . . . . . . .  TYPEDEF  -----  BIT      -----  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
U8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
U16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
U32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
S8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
S16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
S32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
UU16 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
C51 COMPILER V9.59.0.0   MAINAPP                                                           01/29/2019 16:14:45 PAGE 103 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU16 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU32 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
UU32 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_GENERIC_PTR . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GENERIC_PTR . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
_?LD . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
initDeviceF020 . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
sPlcInit . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
sPlcProcessStart . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
sPlcProcessEnd . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
sPlcTest . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     24    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
