C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE SPLC
OBJECT MODULE PLACED IN .\Objects\sPlc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MainApp\sPlc.c OPTIMIZE(9,SPEED) REGFILE(.\Objects\dwLaser_F020.ORC) BRO
                    -WSE ORDER INCDIR(.\Lib;.\Driver;.\MainApp;.\Modbus) DEFINE(C8051F020) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(
                    -.\Listings\sPlc.lst) PREPRINT(.\Listings\sPlc.i) OBJECT(.\Objects\sPlc.obj)

line level    source

   1          #include "sPlc.h"
   1      =1  #ifndef __SPLC_H__
   2      =1  #define __SPLC_H__
   3      =1  /*****************************************************************************/
   4      =1  #include "appConfig.h"
   1      =2  #ifndef __APPCONFIG_H__
   2      =2  #define __APPCONFIG_H__
   3      =2  /*****************************************************************************/
   4      =2  #define CONFIG_SYSCLK                       (22118400L)
   5      =2  #ifdef C8051F020
   6      =2  #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
   7      =2  #endif
   8      =2  #define CONFIG_DEBUG                        0//调试功能
   9      =2  #define CONFIG_USING_WDT                                        0//使能看门狗
  10      =2  #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
  11      =2  #define CONFIG_LADDER_SECTORS_START                     64//指令起始地址
  12      =2  #define CONFIG_LADDER_SECTORS_END                       128//指令结束地址
  13      =2  #define CONFIG_LASERTIMER_OVERFLOW_US           1000L//定时器周期 1mS
  14      =2  #define CONFIG_VERSION                                          0x0001
  15      =2  #define CONFIG_CHECK_CODE                                       0x5A00
  16      =2  /*****************************************************************************/
  17      =2  #define CONFIG_UART0_BAUDRATE                           57600//串口波特率
  18      =2  #define CONFIG_UART0_PARITY                                     NONE
  19      =2  #define CONFIG_UART0_STOPBIT                            1
  20      =2  #define CONFIG_UART0_DATABIT                            8
  21      =2  
  22      =2  #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
  23      =2  #define CONFIG_UART1_PARITY                                     NONE
  24      =2  #define CONFIG_UART1_STOPBIT                            1
  25      =2  #define CONFIG_UART1_DATABIT                            8
  26      =2  /*****************************************************************************/
  27      =2  #define CONFIG_I2C0_FREQ                                        (100000L)               
  28      =2  #define CONFIG_I2C1_FREQ                                        (100000L)
  29      =2  #define CONFIG_I2C2_FREQ                                        (100000L)
  30      =2  #define CONFIG_I2C3_FREQ                                        (100000L)
  31      =2  #define CONFIG_I2C4_FREQ                                        (100000L)
  32      =2  /*****************************************************************************/
  33      =2  #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
  34      =2  #define CONFIG_AT24C02_SIZE                             256
  35      =2  #define CONFIG_AT24C04_SIZE                             512
  36      =2  #define CONFIG_AT24C08_SIZE                             1024
  37      =2  #define CONFIG_AT24C16_SIZE                             2048
  38      =2  #define CONFIG_AT24C32_SIZE                             4096
  39      =2  #define CONFIG_AT24C64_SIZE                                     8192
  40      =2  #define CONFIG_AT24C128_SIZE                            16384
  41      =2  #define CONFIG_AT24C256_SIZE                            32768
  42      =2  #define CONFIG_EPROM_ADDRESS                            0x50
  43      =2  #define CONFIG_EPROM_FRAM                                       0//铁电存储体无写入等待
  44      =2  #define CONFIG_EPROM_FREQ                                       1//
  45      =2  /*****************************************************************************/
  46      =2  //SPLC设置
  47      =2  #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
  48      =2  #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 2   

  49      =2  /*****************************************************************************/
  50      =2  #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
  51      =2  /*****************************************************************************/
  52      =2  #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
  53      =2  /*****************************************************************************/
  54      =2  #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
  55      =2  /*****************************************************************************/
  56      =2  #define CONFIG_SPLC_USING_EPROM                         1//EPROM掉电存储启用
  57      =2  /*****************************************************************************/
  58      =2  #define CONFIG_SPLC_USING_ADC                           1//使能ADC模块
  59      =2  #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
  60      =2  #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
  61      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
  62      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
  63      =2  #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
  64      =2  #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
  65      =2  /*****************************************************************************/
  66      =2  #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
  67      =2  /*****************************************************************************/
  68      =2  #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
  69      =2  #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
  70      =2  #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
  71      =2  #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
  72      =2  #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
  73      =2  #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
  74      =2  /*****************************************************************************/
  75      =2  /*****************************************************************************/
  76      =2  #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
  77      =2  #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
  78      =2  #define DISABLE_INTERRUPT                                       EA = 0;
  79      =2  #define ENABLE_INTERRUPT                                        EA = 1;
  80      =2  /*****************************************************************************/
  81      =2  #define BOX_CMD_STX                                                     0x81
  82      =2  #define BOX_CMD_ETX                                                     0x84
  83      =2  /*****************************************************************************/
  84      =2  #include "stdint.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDINT_H
   8      =3  #define STDINT_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef unsigned char uint8_t;
  13      =3  typedef unsigned short uint16_t;
  14      =3  typedef unsigned long uint32_t;
  15      =3  typedef uint32_t uint64_t[2];
  16      =3  
  17      =3  typedef signed char int8_t;
  18      =3  typedef short int16_t;
  19      =3  typedef long int32_t;
  20      =3  typedef int32_t int64_t[2];
  21      =3  typedef float fp32_t;
  22      =3  typedef double fp64_t;
  23      =3  
  24      =3  #elif defined __ICC8051__
           =3 
           =3 /* Fixed size types. These are all optional. */
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 3   

           =3 #ifdef __INT8_T_TYPE__
           =3   typedef __INT8_T_TYPE__   int8_t;
           =3   typedef __UINT8_T_TYPE__ uint8_t;
           =3 #endif /* __INT8_T_TYPE__ */
           =3 
           =3 #ifdef __INT16_T_TYPE__
           =3   typedef __INT16_T_TYPE__   int16_t;
           =3   typedef __UINT16_T_TYPE__ uint16_t;
           =3 #endif /* __INT16_T_TYPE__ */
           =3 
           =3 #ifdef __INT32_T_TYPE__
           =3   typedef __INT32_T_TYPE__   int32_t;
           =3   typedef __UINT32_T_TYPE__ uint32_t;
           =3 #endif /* __INT32_T_TYPE__ */
           =3 
           =3 #ifdef __INT64_T_TYPE__
           =3   #pragma language=save
           =3   #pragma language=extended
           =3   typedef __INT64_T_TYPE__   int64_t;
           =3   typedef __UINT64_T_TYPE__ uint64_t;
           =3   #pragma language=restore
           =3 #endif /* __INT64_T_TYPE__ */
           =3 
           =3 #endif
  51      =3  
  52      =3  #endif
  85      =2  #include "stdbool.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDBOOL_H
   8      =3  #define STDBOOL_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef bit bool;
  13      =3  enum{
  14      =3    false = 0,
  15      =3    true = 1,
  16      =3  };
  17      =3  
  18      =3  #elif defined __ICC8051__
           =3 
           =3 #ifndef _SYSTEM_BUILD
           =3   #pragma system_include
           =3 #endif
           =3 
           =3 #ifndef __cplusplus
           =3 
           =3 #define bool _Bool
           =3 #define true 1
           =3 #define false 0
           =3 
           =3 #define __bool_true_false_are_defined 1
           =3 
           =3 #endif /* !__cplusplus */
           =3 
           =3 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 4   

           =3 typedef bit bool;
           =3 enum{
           =3   false = 0,
           =3   true = 1,
           =3 };
           =3 
           =3 #endif
  43      =3  
  44      =3  #endif //STDBOOL_H
  45      =3  
  86      =2  #include "endian.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __ENDIAN_H__
   8      =3  #define __ENDIAN_H__
   9      =3  
  10      =3  #define bswapu16(x) (((x) >> 8) | ((x) << 8))
  11      =3  #define bswapu32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) \
  12      =3                    | (((x) & 0x0000FF00) << 8) | ((x) << 24))
  13      =3  
  14      =3  #define bswap16(x) bswapu16((uint16_t)(x))
  15      =3  #define bswap32(x) bswapu32((uint32_t)(x))
  16      =3  
  17      =3  // Big Endian Compilers
  18      =3  #if ((defined __C51__) || (defined __RC51__) || (defined _CC51))
  19      =3  
  20      =3  #define htobe16(x) (x)
  21      =3  #define htobe32(x) (x)
  22      =3  #define be16toh(x) (x)
  23      =3  #define be32toh(x) (x)
  24      =3  
  25      =3  #define htole16(x) bswap16(x)
  26      =3  #define htole32(x) bswap32(x)
  27      =3  #define le16toh(x) bswap16(x)
  28      =3  #define le32toh(x) bswap32(x)
  29      =3  
  30      =3  #elif ((defined SDCC) || (defined HI_TECH_C) || (defined __ICC8051__))
           =3 
           =3 #define htobe16(x) bswap16(x)
           =3 #define htobe32(x) bswap32(x)
           =3 #define be16toh(x) bswap16(x)
           =3 #define be32toh(x) bswap32(x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #else
           =3 
           =3 #define htobe16(x) (x)
           =3 #define htobe32(x) (x)
           =3 #define be16toh(x) (x)
           =3 #define be32toh(x) (x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 5   

           =3 #define le32toh(x) (x)
           =3 
           =3 #endif  // Compiler Definitions
  55      =3  
  56      =3  #endif  // __ENDIAN_H__
  87      =2  #include "si_toolchain.h"
   1      =3  /******************************************************************************
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __SI_TOOLCHAIN_H__
   8      =3  #define __SI_TOOLCHAIN_H__
   9      =3  
  10      =3  #include <stdint.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 6   

           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
  11      =3  #include <stdbool.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
  12      =3  
  13      =3  /**************************************************************************//**
  14      =3   *
  15      =3   * @addtogroup toolchain_group Toolchain Abstraction
  16      =3   *
  17      =3   * @brief Macros for toolchain abstraction.
  18      =3   *
  19      =3   * # Introduction #
  20      =3   *
  21      =3   * This header file contains macros that are used to provide an abstraction
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 7   

  22      =3   * for toolchain use in source code.  The 8051 compiler requires C-language
  23      =3   * extensions in order to fully use features of the 8051 architecture.  All
  24      =3   * compilers for 8051 implement a set of extensions but use different names
  25      =3   * and ways of implementing those extensions.  This header file provides
  26      =3   * macros that are defined for each supported toolchain and can be used in
  27      =3   * the source code.  This allows the source code to use 8051 extensions and
  28      =3   * remain independent of which toolchain is used for compilation.
  29      =3   *
  30      =3   * ## Variable and Pointer Declarations ##
  31      =3   *
  32      =3   * It is often useful to specify the memory area (or segment) of a variable,
  33      =3   * pointer, or pointer target.  For example, you may wish to place all
  34      =3   * variables in XDATA by default, but for variables used in time-sensitive
  35      =3   * code you use DATA for efficient access.  In this case you declare the
  36      =3   * XDATA variable in the normal C way, but declare the variables to be located
  37      =3   * in the DATA segment using @ref SI_SEGMENT_VARIABLE.
  38      =3   *
  39      =3   * Pointers are more complicated because there are two memory spaces
  40      =3   * associated with a pointer, the pointer target, and the pointer variable
  41      =3   * itself.  When using default memory segment for the pointer location and
  42      =3   * target, then no special macro is needed.  But if you wish to specify the
  43      =3   * pointer variable location, or target memory segment, then you can use one
  44      =3   * of the following macros to do this in a toolchain-independent way.
  45      =3   *
  46      =3   * |Pointer segment|Target segment|Macro                                   |
  47      =3   * |---------------|--------------|----------------------------------------|
  48      =3   * |default        |generic       |None                                    |
  49      =3   * |default        |specific      |@ref SI_VARIABLE_SEGMENT_POINTER        |
  50      =3   * |specific       |generic       |@ref SI_SEGMENT_POINTER                 |
  51      =3   * |specific       |specific      |@ref SI_SEGMENT_VARIABLE_SEGMENT_POINTER|
  52      =3   *
  53      =3   * ## Prior Toolchain Abstraction Header File ##
  54      =3   *
  55      =3   * This file supercedes an earlier header file named `compiler_defs.h`.  We
  56      =3   * are deprecating the use of compiler_defs.h, however it will remain for
  57      =3   * backwards compatibility.  This file was created to normalize macro names,
  58      =3   * remove unused macros, and to provide documentation.
  59      =3   *
  60      =3   * ## Supported Toolchains ##
  61      =3   *
  62      =3   * - Keil/ARM C51
  63      =3   *
  64      =3   * @{
  65      =3   *
  66      =3   *****************************************************************************/
  67      =3  
  68      =3  // Make sure there is a NULL defined if the toolchain does not provide it.
  69      =3  #ifndef NULL
  70      =3  #define NULL ((void *)0)
  71      =3  #endif
  72      =3  
  73      =3  // -------------------------------
  74      =3  // Keil/ARM C51
  75      =3  //
  76      =3  #if defined(__C51__)
  77      =3  
  78      =3  /// Used with pointers, declares a generic pointer.  Generic pointers
  79      =3  /// work with any memory space but are inefficient.
  80      =3  #define SI_SEG_GENERIC
  81      =3  
  82      =3  /// Declares a variable to be located in 8051 DATA space.
  83      =3  #define SI_SEG_DATA data
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 8   

  84      =3  
  85      =3  /// Declares a variable to be located in 8051 IDATA space.
  86      =3  #define SI_SEG_IDATA idata
  87      =3  
  88      =3  /// Declares a variable to be located in 8051 XDATA space.
  89      =3  #define SI_SEG_XDATA xdata
  90      =3  
  91      =3  /// Declares a variable to be located in 8051 PDATA space.
  92      =3  #define SI_SEG_PDATA pdata
  93      =3  
  94      =3  /// Declares a variable to be located in 8051 BDATA (bit-addressable) space.
  95      =3  #define SI_SEG_BDATA bdata
  96      =3  
  97      =3  /// Declares a variable to be located in 8051 CODE space.
  98      =3  #define SI_SEG_CODE code
  99      =3  
 100      =3  /**************************************************************************//**
 101      =3   * Declares a bit variable in a bit-addressable memory space.
 102      =3   *
 103      =3   * @param name The name of the bit variable.
 104      =3   *****************************************************************************/
 105      =3  #define SI_BIT(name) bit name
 106      =3  
 107      =3  /**************************************************************************//**
 108      =3   * Declares a bit variable in a bit-addressable SFR or memory space.
 109      =3   *
 110      =3   * @param name The name of the bit variable.
 111      =3   * @param address The address of the byte containing the bit.
 112      =3   * @param bitnum The bit number (0-7) within the byte.
 113      =3   *
 114      =3   * This cannot be used to make any arbitrary SFR or variable into
 115      =3   * a bit variable.  The underlying memory must support bit-addressability.
 116      =3   *****************************************************************************/
 117      =3  #define SI_SBIT(name, address, bitnum) sbit name = address^bitnum
 118      =3  
 119      =3  /**************************************************************************//**
 120      =3   * Declares an 8-bit special function register (SFR) variable.
 121      =3   *
 122      =3   * @param name The name of the SFR variable.
 123      =3   * @param address The address of the SFR.
 124      =3   *
 125      =3   * This creates a C variable (8-bit) that maps to a physical special function
 126      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 127      =3   * location into an SFR.  The _address_ must map to a real SFR in the memory
 128      =3   * map.
 129      =3   *****************************************************************************/
 130      =3  #define SI_SFR(name, address) sfr name = address
 131      =3  
 132      =3  /**************************************************************************//**
 133      =3   * Declares a 16-bit special function register (SFR) variable.
 134      =3   *
 135      =3   * @param name The name of the SFR variable.
 136      =3   * @param address The address of the 16-bit SFR.
 137      =3   *
 138      =3   * This creates a C variable (16-bit) that maps to a physical special function
 139      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 140      =3   * location into an SFR.  The _address_ must map to a real 16-bit SFR in the
 141      =3   * memory map.
 142      =3   *****************************************************************************/
 143      =3  #define SI_SFR16(name, address) sfr16 name = address
 144      =3  
 145      =3  #ifndef __SLS_IDE__
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 9   

 146      =3  /**************************************************************************//**
 147      =3   * Define an interrupt handler function for an interrupt vector.
 148      =3   *
 149      =3   * @param name The name of the interrupt handler function.
 150      =3   * @param vector The interrupt vector number.
 151      =3   *
 152      =3   * This macro defines a function to be an interrupt handler.  The _vector_
 153      =3   * parameter is the 8051 interrupt vector number, not the address.  This
 154      =3   * will cause the compiler to treat the function as the interrupt handler
 155      =3   * and generate the appropriate prolog/epilog code.
 156      =3   *
 157      =3   * @note This macro is used to define the function implementation.  To declare
 158      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO.
 159      =3   *****************************************************************************/
 160      =3  #define SI_INTERRUPT(name, vector) void name (void) interrupt vector
 161      =3  
 162      =3  /**************************************************************************//**
 163      =3   * Define an interrupt handler function using a specific register bank.
 164      =3   *
 165      =3   * @param name The name of the interrupt handler function.
 166      =3   * @param vector The interrupt vector number.
 167      =3   * @param regnum The register bank number (0-3).
 168      =3   *
 169      =3   * This macro defines a function to be an interrupt handler, using a specific
 170      =3   * register bank for the interrupt code.  The _vector_ parameter is the 8051
 171      =3   * interrupt vector number, not the address.  The _regnum_ parameter is the
 172      =3   * register bank number (0-3) that will be used as general purpose registers
 173      =3   * for the instructions in the compiled code.  Using dedicated register banks
 174      =3   * for interrupt handlers allows the prolog code to just switch banks instead
 175      =3   * of saving and restoring all the general purpose registers.  This can make
 176      =3   * interrupt entry/exit faster but requires dedicating a register bank for
 177      =3   * the interrupt handler.
 178      =3   *
 179      =3   * @note This macro is used to define the function implementation.  To declare
 180      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO_USING.
 181      =3   *****************************************************************************/
 182      =3  #define SI_INTERRUPT_USING(name, vector, regnum)                             \
 183      =3               void name (void) interrupt vector using regnum
 184      =3  
 185      =3  /**************************************************************************//**
 186      =3   * Declare an interrupt handler prototype for an interrupt vector.
 187      =3   *
 188      =3   * @param name The name of the interrupt handler function.
 189      =3   * @param vector The interrupt vector number.
 190      =3   *
 191      =3   * This macro declares a function prototype for an interrupt handler.  The
 192      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 193      =3   * Declaring the function prototype this way will cause the compiler to
 194      =3   * recognize that the function is an interrupt handler and not a normal C
 195      =3   * function.
 196      =3   *
 197      =3   * @note This macro is used to declare a prototype for the interrupt function.
 198      =3   * To define the interrupt function implementation, use @ref SI_INTERRUPT.
 199      =3   *****************************************************************************/
 200      =3  #define SI_INTERRUPT_PROTO(name, vector) void name (void)
 201      =3  
 202      =3  /**************************************************************************//**
 203      =3   * Declare an interrupt handler prototype using a specific register bank.
 204      =3   *
 205      =3   * @param name The name of the interrupt handler function.
 206      =3   * @param vector The interrupt vector number.
 207      =3   * @param regnum The register bank number (0-3).
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 10  

 208      =3   *
 209      =3   * This macro declares a function prototype for an interrupt handler, for a
 210      =3   * function that uses a specific register bank for the interrupt code.  The
 211      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 212      =3   * The _regnum_ parameter is the register bank number (0-3) that will be used
 213      =3   * as general purpose registers in the function.  Declaring the function
 214      =3   * prototype this way will cause the compiler to recognize that the function
 215      =3   * is an interrupt handler and is not a normal C function.
 216      =3   *
 217      =3   * @note This macro is used to declare a prototype for the interrupt function.
 218      =3   * To define the interrupt function implementation,
 219      =3   * use @ref SI_INTERRUPT_USING.
 220      =3   *****************************************************************************/
 221      =3  #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 222      =3  
 223      =3  /**************************************************************************//**
 224      =3   * Define a function to be reentrant (store local variables on the stack).
 225      =3   *
 226      =3   * @param name The name of the function.
 227      =3   * @param return_type The data type of the function return value
 228      =3   * (void, int, etc).
 229      =3   * @param parameter One C function parameter (or "void") (type and name).
 230      =3   *
 231      =3   * This macro defines a function to be reentrant.
 232      =3   *
 233      =3   * You must specify the _return_type_ which is the type of the function.  It
 234      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 235      =3   * is the list of function parameters.  It can be `void` or else it must be
 236      =3   * a parameter data type and name.  It can also be multiple parameters but
 237      =3   * they must be enclosed in parentheses and separated by commas.
 238      =3   *
 239      =3   * __Example__
 240      =3   *
 241      =3   * ~~~~~~~~.c
 242      =3   * // The following is used to implement a function with the following
 243      =3   * // signature...
 244      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 245      =3   *
 246      =3   * SI_REENTRANT_FUNCTION(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2))
 247      =3   * {
 248      =3   *   // Function implementation body
 249      =3   * }
 250      =3   * ~~~~~~~~
 251      =3   *
 252      =3   * @note This macro is used to define the function implementation.  To declare
 253      =3   * the function prototype, use @ref SI_REENTRANT_FUNCTION_PROTO.
 254      =3   *****************************************************************************/
 255      =3  #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
 256      =3    return_type name parameter reentrant
 257      =3  
 258      =3  /**************************************************************************//**
 259      =3   * Declare a function to be reentrant (store local variables on the stack).
 260      =3   *
 261      =3   * @param name The name of the function.
 262      =3   * @param return_type The data type of the function return value
 263      =3   * (void, int, etc).
 264      =3   * @param parameter One C function parameter (or "void") (type and name).
 265      =3   *
 266      =3   * This macro declares a function prototype for a C function that is reentrant.
 267      =3   * See the documentation for @ref SI_REENTRANT_FUNCTION for an explanation of
 268      =3   * the macro arguments.  This is an advanced feature.
 269      =3   *
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 11  

 270      =3   * @note This macro is used to declare a prototype for the function.  To
 271      =3   * define the function implementation, use @ref SI_REENTRANT_FUNCTION.
 272      =3   *****************************************************************************/
 273      =3  #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
 274      =3    return_type name parameter reentrant
 275      =3                 
 276      =3  /**************************************************************************//**
 277      =3   * Define a function to use a specific register bank.
 278      =3   *
 279      =3   * @param name The name of the function.
 280      =3   * @param return_value The data type of the function return value
 281      =3   * (void, int, etc).
 282      =3   * @param parameter One C function parameter (or "void") (type and name).
 283      =3   * @param regnum The register bank number (0-3).
 284      =3   *
 285      =3   * This macro defines a function that uses a specific register bank.  The
 286      =3   * _regnum_ parameter is the register bank number (0-3) that will be used as
 287      =3   * general purpose registers for the instructions in the compiled function
 288      =3   * code.  Using dedicated register banks for a function can reduce the amount
 289      =3   * of registers saving and restoring needed on entry and exit to the
 290      =3   * function.  However, this is an advanced feature and you should not use it
 291      =3   * unless you fully understand how and when to use register banking.
 292      =3   *
 293      =3   * You must specify the _return_value_ which is the type of the function.  It
 294      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 295      =3   * is the list of function parameters.  It can be `void` or else it must be
 296      =3   * a parameter data type and name.  It can also be multiple parameters but
 297      =3   * they must be enclosed in parentheses and separated by commas.
 298      =3   *
 299      =3   * __Example__
 300      =3   *
 301      =3   * ~~~~~~~~.c
 302      =3   * // The following is used to implement a function with the following
 303      =3   * // signature, and that uses register bank 3 ...
 304      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 305      =3   *
 306      =3   * SI_FUNCTION_USING(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2), 3)
 307      =3   * {
 308      =3   *   // Function implementation body
 309      =3   * }
 310      =3   * ~~~~~~~~
 311      =3   *
 312      =3   * @note This macro is used to define the function implementation.  To declare
 313      =3   * the function prototype, use @ref SI_FUNCTION_PROTO_USING.
 314      =3   *****************************************************************************/
 315      =3  #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
 316      =3               return_value name parameter using regnum
 317      =3  
 318      =3  /**************************************************************************//**
 319      =3   * Declare a function that uses a specific register bank.
 320      =3   *
 321      =3   * @param name The name of the function.
 322      =3   * @param return_value The data type of the function return value
 323      =3   * (void, int, etc).
 324      =3   * @param parameter One C function parameter (or "void") (type and name).
 325      =3   * @param regnum The register bank number (0-3).
 326      =3   *
 327      =3   * This macro declares a function prototype for a C function that uses a
 328      =3   * specific register its working registers.  See the documentation for
 329      =3   * @ref SI_FUNCTION_USING for an explanation of the macro arguments.  This is
 330      =3   * an advanced feature.
 331      =3   *
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 12  

 332      =3   * @note This macro is used to declare a prototype for the function.  To
 333      =3   * define the function implementation, use @ref SI_FUNCTION_USING.
 334      =3   *****************************************************************************/
 335      =3  #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
 336      =3               return_value name parameter
 337      =3  
 338      =3  /**************************************************************************//**
 339      =3   * Declare a variable to be located in a specific memory segment.
 340      =3   *
 341      =3   * @param name The variable name.
 342      =3   * @param vartype The variable data type.* @param memseg The memory segment to use for the variable.
 343      =3   *
 344      =3   * This macro declares a variable to be located in a specific memory area
 345      =3   * (or segment) of the 8051 memory space.  It is only necessary to use this
 346      =3   * macro if you want to force the variable into a specific memory space instead
 347      =3   * of the default memory space used by the compiler.  The segment can be
 348      =3   * one of the following:
 349      =3   *
 350      =3   * - @ref SI_SEG_DATA
 351      =3   * - @ref SI_SEG_IDATA
 352      =3   * - @ref SI_SEG_BDATA
 353      =3   * - @ref SI_SEG_PDATA
 354      =3   * - @ref SI_SEG_XDATA
 355      =3   * - @ref SI_SEG_CODE
 356      =3   *
 357      =3   * __Example__
 358      =3   *
 359      =3   * ~~~~~~~~.c
 360      =3   * // The following macro can be used to create a variable located in
 361      =3   * // XDATA with the following signature:
 362      =3   * uint8_t myVar;
 363      =3   *
 364      =3   * SI_SEGMENT_VARIABLE(myVar, uint8_t, SEG_XDATA);
 365      =3   * ~~~~~~~~
 366      =3   *****************************************************************************/
 367      =3  #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype memseg name
 368      =3  
 369      =3  /**************************************************************************//**
 370      =3   * Declare a memory segment specific pointer variable.
 371      =3   *
 372      =3   * @param name The pointer variable name.
 373      =3   * @param vartype The pointer data type.
 374      =3   * @param targseg The target memory segment for the pointer.
 375      =3   *
 376      =3   * This macro declares a pointer that points at a specific memory area
 377      =3   * (or segment).  The memory segment of the pointer variable itself is not
 378      =3   * specified and the default is used.  The segment can be one of the following:
 379      =3   *
 380      =3   * - @ref SI_SEG_DATA
 381      =3   * - @ref SI_SEG_IDATA
 382      =3   * - @ref SI_SEG_BDATA
 383      =3   * - @ref SI_SEG_PDATA
 384      =3   * - @ref SI_SEG_XDATA
 385      =3   * - @ref SI_SEG_CODE
 386      =3   *
 387      =3   * __Example__
 388      =3   *
 389      =3   * ~~~~~~~~.c
 390      =3   * // The following macro can be used to create a pointer that points to
 391      =3   * // a location in XDATA with the following signature:
 392      =3   * uint8_t *pVar; // where pVar is pointing at XDATA
 393      =3   *
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 13  

 394      =3   * SI_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA);
 395      =3   * ~~~~~~~~
 396      =3   *****************************************************************************/
 397      =3  #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
 398      =3               vartype targseg * name
 399      =3  
 400      =3  /**************************************************************************//**
 401      =3   * Declare a memory segment specific pointer variable, in a specific segment.
 402      =3   *
 403      =3   * @param name The pointer variable name.
 404      =3   * @param vartype The pointer data type.
 405      =3   * @param targseg The target memory segment for the pointer.
 406      =3   * @param memseg The memory segment to use for the pointer variable.
 407      =3   *
 408      =3   * This macro declares a pointer that points at a specific memory area
 409      =3   * (or segment).  The pointer variable itself is also located in a specified
 410      =3   * memory segment by _memseg_.  The arguments _targseg_ and _memseg_ can be
 411      =3   * one of the following:
 412      =3   *
 413      =3   * - @ref SI_SEG_DATA
 414      =3   * - @ref SI_SEG_IDATA
 415      =3   * - @ref SI_SEG_BDATA
 416      =3   * - @ref SI_SEG_PDATA
 417      =3   * - @ref SI_SEG_XDATA
 418      =3   * - @ref SI_SEG_CODE
 419      =3   *
 420      =3   * __Example__
 421      =3   *
 422      =3   * ~~~~~~~~.c
 423      =3   * // The following macro can be used to create a pointer that points to
 424      =3   * // a location in XDATA while the pointer itself is located in DATA, with
 425      =3   * // the following signature:
 426      =3   * uint8_t *pVar; // where pVar is located in DATA and is pointing at XDATA
 427      =3   *
 428      =3   * SI_SEGMENT_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA, SEG_DATA);
 429      =3   * ~~~~~~~~
 430      =3   *****************************************************************************/
 431      =3  #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
 432      =3               vartype targseg * memseg name
 433      =3  
 434      =3  /**************************************************************************//**
 435      =3   * Declare a generic pointer variable that is located in a specific segment.
 436      =3   *
 437      =3   * @param name The pointer variable name.
 438      =3   * @param vartype The pointer data type.
 439      =3   * @param memseg The memory segment to use for the pointer variable.
 440      =3   *
 441      =3   * This macro declares a pointer that is a generic pointer.  This means it can
 442      =3   * point at any kind of memory location.  However the pointer variable itself
 443      =3   * is located in a specific memory segment by _memseg_, which can be one of
 444      =3   * the following:
 445      =3   *
 446      =3   * - @ref SI_SEG_DATA
 447      =3   * - @ref SI_SEG_IDATA
 448      =3   * - @ref SI_SEG_BDATA
 449      =3   * - @ref SI_SEG_PDATA
 450      =3   * - @ref SI_SEG_XDATA
 451      =3   * - @ref SI_SEG_CODE
 452      =3   *
 453      =3   * __Example__
 454      =3   *
 455      =3   * ~~~~~~~~.c
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 14  

 456      =3   * // The following macro can be used to create a generic pointer that
 457      =3   * // is located in DATA and points at any memory type, with the
 458      =3   * // following signature:
 459      =3   * uint8_t *pVar; // where pVar is located in DATA and is a generic pointer
 460      =3   *
 461      =3   * SI_SEGMENT_POINTER(pVar, uint8_t, SEG_DATA);
 462      =3   * ~~~~~~~~
 463      =3   *****************************************************************************/
 464      =3  #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * memseg name
 465      =3  
 466      =3  /**************************************************************************//**
 467      =3   * Declare an uninitialized variable that is located at a specific address.
 468      =3   *
 469      =3   * @param name The variable name.
 470      =3   * @param vartype The variable data type.
 471      =3   * @param memseg The memory segment to use for the variable.
 472      =3   * @param address The memory address of the variable.
 473      =3   *
 474      =3   * This macro allows declaring a variable that can be placed at a specific
 475      =3   * location in memory.  This can only be used for variables that do not need
 476      =3   * initializers.  The _address_ is the memory address within the specified
 477      =3   * segment.  The memory segment, _memseg_, can be one of the following:
 478      =3   *
 479      =3   * - @ref SI_SEG_DATA
 480      =3   * - @ref SI_SEG_IDATA
 481      =3   * - @ref SI_SEG_BDATA
 482      =3   * - @ref SI_SEG_PDATA
 483      =3   * - @ref SI_SEG_XDATA
 484      =3   * - @ref SI_SEG_CODE
 485      =3   *
 486      =3   * __Example__
 487      =3   *
 488      =3   * ~~~~~~~~.c
 489      =3   * // The following declares a variable located at 0x4000 in XDATA with
 490      =3   * // the following signature:
 491      =3   * uint8_t myMemVar;
 492      =3   *
 493      =3   * SI_LOCATED_VARIABLE_NO_INIT(myMemVar, uint8_t, SEG_DATA, 0x4000);
 494      =3   * ~~~~~~~~
 495      =3   *****************************************************************************/
 496      =3  #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
 497      =3               vartype memseg name _at_ address
 498      =3  
 499      =3  
 500      =3  #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 #define SI_REENTRANT_FUNCTION(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_value, parameter, regnum) return_value name (parameter)
           =3 
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 15  

           =3 #endif // __SLS_IDE__
 519      =3  
 520      =3  // The following are used for byte ordering when referring to individual
 521      =3  // bytes within a SI_UU32_t.  B0 is the least significant byte.
 522      =3  #define B0 3 ///< Least significant byte of a 4 byte word
 523      =3  #define B1 2 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
 524      =3  #define B2 1 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
 525      =3  #define B3 0 ///< Most significant byte of a 4-byte word
 526      =3  
 527      =3  #define LSB 1 ///< Index to least significant bit of a 2 byte word
 528      =3  #define MSB 0 ///< Index to most significant bit of a 2 byte word
 529      =3  
 530      =3  /// A union type to make it easier to access individual bytes of a 16-bit
 531      =3  /// word, and to use as signed or unsigned type.
 532      =3  typedef union SI_UU16
 533      =3  {
 534      =3    uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
 535      =3    int16_t s16;    ///< The two byte value as a 16-bit signed integer.
 536      =3    uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
 537      =3    int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
 538      =3  } SI_UU16_t;
 539      =3  
 540      =3  /// A union type to make it easier to access individual bytes within a
 541      =3  /// 32-bit word, or to access it as variations of 16-bit words, or to
 542      =3  /// use as signed or unsigned type.
 543      =3  typedef union SI_UU32
 544      =3  {
 545      =3    uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
 546      =3    int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
 547      =3    SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
 548      =3    uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
 549      =3    int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
 550      =3    uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
 551      =3    int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
 552      =3  } SI_UU32_t;
 553      =3  
 554      =3  // Generic pointer memory segment constants.
 555      =3  #define SI_GPTR                   ///< Generic pointer indeterminate type.
 556      =3  #define SI_GPTR_MTYPE_DATA  0x00  ///< Generic pointer for DATA segment.
 557      =3  #define SI_GPTR_MTYPE_IDATA 0x00  ///< Generic pointer for IDATA segment.
 558      =3  #define SI_GPTR_MTYPE_BDATA 0x00  ///< Generic pointer for BDATA segment.
 559      =3  #define SI_GPTR_MTYPE_PDATA 0xFE  ///< Generic pointer for PDATA segment.
 560      =3  #define SI_GPTR_MTYPE_XDATA 0x01  ///< Generic pointer for XDATA segment.
 561      =3  #define SI_GPTR_MTYPE_CODE  0xFF  ///< Generic pointer for CODE segment.
 562      =3  
 563      =3  /// Generic pointer structure containing the type and address.
 564      =3  typedef struct
 565      =3  {
 566      =3    uint8_t memtype;    ///< The type of memory of the generic pointer.
 567      =3    SI_UU16_t address;  ///< The address of the generic pointer.
 568      =3  } GPTR_t;
 569      =3  
 570      =3  /// A union type to allow access to the fields of a generic pointer.
 571      =3  /// A generic pointer has a field indicating the type of memory and an
 572      =3  /// address within the memory.
 573      =3  typedef union SI_GEN_PTR
 574      =3  {
 575      =3    uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
 576      =3    GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
 577      =3  } SI_GEN_PTR_t;
 578      =3  
 579      =3  // Declaration of Keil intrinisc
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 16  

 580      =3  extern void _nop_(void);
 581      =3  /// Macro to insert a no-operation (NOP) instruction.
 582      =3  #define NOP() _nop_()
 583      =3  
 584      =3  // -------------------------------
 585      =3  // GCC for ARM Cortex-M
 586      =3  // Provides support for code that can be compiled for 8 or 32-bit
 587      =3  //
 588      =3  #elif defined (__GNUC__)
           =3 #if defined(__ARMEL__) && ((__ARMEL__ == 1) && ((__ARM_ARCH == 6) || (__ARM_ARCH == 7)))
           =3 
           =3 // these ignore any memory segment directives
           =3 #define SI_SEG_GENERIC
           =3 #define SI_SEG_DATA
           =3 #define SI_SEG_IDATA
           =3 #define SI_SEG_XDATA
           =3 #define SI_SEG_PDATA
           =3 #define SI_SEG_BDATA
           =3 #define SI_SEG_CODE
           =3 
           =3 // the following create a variable of the specified name but ignore the
           =3 // address and bit number.  If the using-code cares about the actual
           =3 // address or bit number, this probably will break it
           =3 #define SI_SBIT(name, address, bitnum) uint8_t name
           =3 #define SI_SFR(name, address) uint8_t name
           =3 #define SI_SFR16(name, address) uint16_t name
           =3 
           =3 // the following create function and variable names of the specified types
           =3 // but the 8051-specific aspects (like memory segment) are ignored
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name (parameter)
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =3              vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =3              vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =3              vartype name
           =3 
           =3 #define B0 0
           =3 #define B1 1
           =3 #define B2 2
           =3 #define B3 3
           =3 #define LSB 0
           =3 #define MSB 1
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;
           =3   int16_t s16;
           =3   uint8_t u8[2];
           =3   int8_t s8[2];
           =3 } SI_UU16_t;
           =3 
           =3 typedef union SI_UU32
           =3 {
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 17  

           =3   uint32_t u32;
           =3   int32_t s32;
           =3   SI_UU16_t uu16[2];
           =3   uint16_t u16[2];
           =3   int16_t s16[2];
           =3   uint8_t u8[4];
           =3   int8_t s8[4];
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer stuff is left out because if you are accessing
           =3 // generic pointer fields then it will need to be rewritten for 32-bit
           =3 
           =3 // __NOP should be declared in cmsis header core_cmInstr.h
           =3 extern void __NOP(void);
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __NOP()
           =3 
           =3 #else // ARM_ARCH 6 | 7
           =3 #error unsupported ARM arch
           =3 #endif
           =3 
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <intrinsics.h>
           =3 
           =3 #define SI_BIT(name)              __no_init bool __bit name
           =3 #define SI_SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 #define SI_SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 #define SI_SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 
           =3 #define SI_SEG_GENERIC __generic
           =3 #define SI_SEG_FAR  __xdata
           =3 #define SI_SEG_DATA __data
           =3 #define SI_SEG_NEAR __data
           =3 #define SI_SEG_IDATA __idata
           =3 #define SI_SEG_XDATA __xdata
           =3 #define SI_SEG_PDATA __pdata
           =3 #define SI_SEG_CODE  __code
           =3 #define SI_SEG_BDATA __bdata
           =3 
           =3 #define _PPTOSTR_(x) #x
           =3 #define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 #define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 #define SI_INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __in
             -terrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 #if (__DATA_MODEL__ == 0) /* TINY */ || \
           =3     (__DATA_MODEL__ == 1) /* SMALL */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #elif (__DATA_MODEL__ == 2) /* LARGE */ || \
           =3       (__DATA_MODEL__ == 3) /* GENERIC */ || \
           =3       (__DATA_MODEL__ == 4) /* FAR */
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 18  

           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name (parameter)
           =3 #else
           =3 #error "Illegal memory model setting."
           =3 #endif
           =3 
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name parameter
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name parameter
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment)  vartype locsegment name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * 
             -locsegment name
           =3                
           =3 #define SI_SEGMENT_POINTER(name, vartype, ptrseg) vartype __generic * ptrseg name
           =3 
           =3 #define SI_LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ add
             -r
           =3 
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment __no_init vartype name @ a
             -ddr
           =3 
           =3 // The following are used for byte ordering when referring to individual
           =3 // bytes within a SI_UU32_t.  B0 is the least significant byte.
           =3 #define B0 0 ///< Least significant byte of a 4 byte word
           =3 #define B1 1 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
           =3 #define B2 2 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
           =3 #define B3 3 ///< Most significant byte of a 4-byte word
           =3 
           =3 #define LSB 0 ///< Index to least significant bit of a 2 byte word
           =3 #define MSB 1 ///< Index to most significant bit of a 2 byte word
           =3 
           =3 /// A union type to make it easier to access individual bytes of a 16-bit
           =3 /// word, and to use as signed or unsigned type.
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
           =3   int16_t s16;    ///< The two byte value as a 16-bit signed integer.
           =3   uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
           =3   int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
           =3 } SI_UU16_t;
           =3 
           =3 /// A union type to make it easier to access individual bytes within a
           =3 /// 32-bit word, or to access it as variations of 16-bit words, or to
           =3 /// use as signed or unsigned type.
           =3 typedef union SI_UU32
           =3 {
           =3   uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
           =3   int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
           =3   SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
           =3   uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
           =3   int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
           =3   uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
           =3   int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
           =3 } SI_UU32_t;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 19  

           =3 
           =3 // Generic pointer memory segment constants.
           =3 #define SI_GPTR                   ///< Generic pointer indeterminate type.
           =3 #define SI_GPTR_MTYPE_DATA  0x01  ///< Generic pointer for DATA segment.
           =3 #define SI_GPTR_MTYPE_IDATA 0x01  ///< Generic pointer for IDATA segment.
           =3 #define SI_GPTR_MTYPE_BDATA 0x01  ///< Generic pointer for BDATA segment.
           =3 #define SI_GPTR_MTYPE_PDATA 0x00  ///< Generic pointer for PDATA segment.
           =3 #define SI_GPTR_MTYPE_XDATA 0x00  ///< Generic pointer for XDATA segment.
           =3 #define SI_GPTR_MTYPE_CODE  0x80  ///< Generic pointer for CODE segment.
           =3 
           =3 /// Generic pointer structure containing the type and address.
           =3 typedef struct
           =3 {
           =3   SI_UU16_t address;  ///< The address of the generic pointer.
           =3   uint8_t memtype;    ///< The type of memory of the generic pointer.  
           =3 } GPTR_t;
           =3 
           =3 /// A union type to allow access to the fields of a generic pointer.
           =3 /// A generic pointer has a field indicating the type of memory and an
           =3 /// address within the memory.
           =3 typedef union SI_GEN_PTR
           =3 {
           =3   uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
           =3   GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
           =3 } SI_GEN_PTR_t;
           =3 
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __no_operation()
           =3 
           =3 #else // unknown toolchain
           =3 #error Unrecognized toolchain in si_toolchain.h
           =3 #endif
 794      =3  
 795      =3  /** @} */
 796      =3  
 797      =3  #endif
  88      =2  #include "compiler_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // compiler_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Portions of this file are copyright Maarten Brock
   5      =3  // http://sdcc.sourceforge.net
   6      =3  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
   7      =3  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =3  //
   9      =3  // GNU LGPL boilerplate:
  10      =3  /** This library is free software; you can redistribute it and/or
  11      =3    * modify it under the terms of the GNU Lesser General Public
  12      =3    * License as published by the Free Software Foundation; either
  13      =3    * version 2.1 of the License, or (at your option) any later version.
  14      =3    *
  15      =3    * This library is distributed in the hope that it will be useful,
  16      =3    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =3    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  18      =3    * Lesser General Public License for more details.
  19      =3    *
  20      =3    * You should have received a copy of the GNU Lesser General Public
  21      =3    * License along with this library; if not, write to the Free Software
  22      =3    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =3    *
  24      =3    * In other words, you are welcome to use, share and improve this program.
  25      =3    * You are forbidden to forbid anyone else to use, share and improve
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 20  

  26      =3    * what you give them. Help stamp out software-hoarding!
  27      =3  **/
  28      =3  // Program Description:
  29      =3  //
  30      =3  // **Important Note**: This header file should be included before including
  31      =3  // a device-specific header file such as C8051F300_defs.h.
  32      =3  //
  33      =3  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =3  // special function registers and other 8051-specific features such as NOP
  35      =3  // generation, and locating variables in memory-specific segments.  The
  36      =3  // compilers are identified by their unique predefined macros. See also:
  37      =3  // http://predef.sourceforge.net/precomp.html
  38      =3  //
  39      =3  // SBIT and SFR define special bit and special function registers at the given
  40      =3  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =3  // little-endian format. SFR16E and SFR32E define sfr combinations without
  42      =3  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =3  // combinations will guarantee the order in which they are accessed when read
  44      =3  // or written.
  45      =3  //
  46      =3  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
  47      =3  // to avoid portability issues because of compiler endianness.
  48      =3  //
  49      =3  // Example:
  50      =3  // // my_mcu.c: main 'c' file for my mcu
  51      =3  // #include <compiler_defs.h>  // this file
  52      =3  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =3  //
  54      =3  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =3  // SFR   (P0, 0x80);           // Port 0
  56      =3  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
  57      =3  //                             // xdata memory at 0xE600
  58      =3  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =3  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =3  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =3  //                             // lsb at 0x93, msb at 0x96
  62      =3  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =3  //                             // lsb at 0xE2, msb at 0xE5
  64      =3  //
  65      =3  // Target:         C8051xxxx
  66      =3  // Tool chain:     Generic
  67      =3  // Command Line:   None
  68      =3  // 
  69      =3  // Release 2.7 - 25 JUN 2014 (JM)
  70      =3  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =3  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =3  //     pointed at by a generic poitner
  73      =3  // Release 2.6 - 14 DEC 2012 (GO)
  74      =3  //        -Added define for deprecated SDCC keyword 'at'
  75      =3  // Release 2.5 - 12 SEP 2012 (TP)
  76      =3  //    -Added defines for deprecated SDCC keywords bit and code
  77      =3  // Release 2.4 - 27 AUG 2012 (TP)
  78      =3  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =3  // Release 2.3 - 27 MAY 2010 (DM)
  80      =3  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =3  // Release 2.2 - 06 APR 2010 (ES)
  82      =3  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =3  // Release 2.1 - 16 JUL 2009 (ES)
  84      =3  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =3  // Release 2.0 - 19 MAY 2009 (ES)
  87      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 21  

  88      =3  // Release 1.9 - 23 OCT 2008 (ES)
  89      =3  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =3  //    -Added SFR16 macro defintion for Hi-Tech
  91      =3  // Release 1.8 - 31 JUL 2008 (ES)
  92      =3  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =3  //    -Added macro's for IAR
  94      =3  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =3  // Release 1.7 - 11 SEP 2007 (BW)
  96      =3  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =3  // Release 1.6 - 27 AUG 2007 (BW)
  98      =3  //    -Updated copyright notice per agreement with Maartin Brock
  99      =3  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =3  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =3  // Release 1.5 - 24 AUG 2007 (BW)
 102      =3  //    -Added support for NOP () macro
 103      =3  //    -Added support for Hi-Tech ver 9.01
 104      =3  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =3  //    -Removed FID and fixed formatting.
 106      =3  // Release 1.3 - 30 SEP 2007 (TP)
 107      =3  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =3  //     under SDCC.
 109      =3  // Release 1.2 - (BW)
 110      =3  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =3  // Release 1.1 - (BW)
 112      =3  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =3  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =3  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =3  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =3  //    -Initial revision
 117      =3  
 118      =3  //-----------------------------------------------------------------------------
 119      =3  // Header File Preprocessor Directive
 120      =3  //-----------------------------------------------------------------------------
 121      =3  
 122      =3  #ifndef COMPILER_DEFS_H
 123      =3  #define COMPILER_DEFS_H
 124      =3  
 125      =3  #include "stdbool.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 22  

           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
 126      =3  #include "stdint.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 23  

           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
 127      =3  
 128      =3  //-----------------------------------------------------------------------------
 129      =3  // Macro definitions
 130      =3  //-----------------------------------------------------------------------------
 131      =3  
 132      =3  //SDK Version
 133      =3  #define SDK_VERSION   2
 134      =3  
 135      =3  #ifndef NULL
           =3 #define NULL ((void*) 0)
           =3 #endif
 138      =3  
 139      =3  
 140      =3  // SDCC - Small Device C Compiler
 141      =3  // http://sdcc.sourceforge.net
 142      =3  
 143      =3  #if defined SDCC
           =3 
           =3 #if (SDCC >= 300)
           =3 
           =3 #define interrupt __interrupt
           =3 #define _asm __asm
           =3 #define _endasm __endasm
           =3 #define bit __bit
           =3 #define code __code
           =3 #define at __at
           =3 
           =3 #endif
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   __xdata
           =3 # define SEG_DATA  __data
           =3 # define SEG_NEAR  __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =3 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =3 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
           =3 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =3 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
           =3 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =3 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 24  

           =3 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
             -regnum)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() _asm NOP _endasm
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x40
           =3 #define SI_GPTR_MTYPE_IDATA      0x40
           =3 #define SI_GPTR_MTYPE_BDATA      0x40
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 25  

           =3 #define SI_GPTR_MTYPE_PDATA      0x60
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Raisonance (must be placed before Keil C51)
           =3 // http://www.raisonance.com
           =3 
           =3 #elif defined __RC51__
           =3 
           =3 //#error Raisonance C51 detected.
           =3 
           =3 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =3 # define SEG_FAR   xdata
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  data
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =3 # define SFR(name, addr)        sfr at addr                name
           =3 # define SFR16(name, addr)      sfr16 at addr              name
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =3 
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 26  

           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support -- NOP is opcode 0x00
           =3 #define NOP() asm { 0x00 }
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x04
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x04
           =3 #define SI_GPTR_MTYPE_PDATA      0x03
           =3 #define SI_GPTR_MTYPE_XDATA      0x02
           =3 #define SI_GPTR_MTYPE_CODE       0x05
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         U8 MTYPE;
           =3         UU16 ADDR;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // Keil C51
           =3 // http://www.keil.com
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 27  

           =3 
           =3 #elif defined __C51__
 360      =3  
 361      =3  //#error Keil C51 detected.
 362      =3  
 363      =3  # define SEG_GENERIC
 364      =3  # define SEG_FAR   xdata
 365      =3  # define SEG_DATA  data
 366      =3  # define SEG_NEAR  data
 367      =3  # define SEG_IDATA idata
 368      =3  # define SEG_XDATA xdata
 369      =3  # define SEG_PDATA pdata
 370      =3  # define SEG_CODE  code
 371      =3  # define SEG_BDATA bdata
 372      =3  
 373      =3  # define SBIT(name, addr, bit)  sbit  name = addr^bit
 374      =3  # define SFR(name, addr)        sfr   name = addr
 375      =3  # define SFR16(name, addr)      sfr16 name = addr
 376      =3  # define SFR16E(name, fulladdr) /* not supported */
 377      =3  # define SFR32(name, fulladdr)  /* not supported */
 378      =3  # define SFR32E(name, fulladdr) /* not supported */
 379      =3  
 380      =3  # ifndef __SLS_IDE__
 381      =3  
 382      =3  # define INTERRUPT(name, vector) void name (void) interrupt vector
 383      =3  # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
 384      =3  # define INTERRUPT_PROTO(name, vector) void name (void)
 385      =3  # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 386      =3  
 387      =3  # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
 388      =3  # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
 389      =3  // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
 390      =3  
 391      =3  # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
 392      =3  # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
 393      =3  # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
 394      =3  # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
 395      =3  # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
 396      =3  
 397      =3  # else  // __SLS_IDE__
           =3 
           =3 # define INTERRUPT(name, vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 
           =3 # endif // __SLS_IDE__
 415      =3  
 416      =3  // used with UU16
 417      =3  # define LSB 1
 418      =3  # define MSB 0
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 28  

 419      =3  
 420      =3  // used with UU32 (b0 is least-significant byte)
 421      =3  # define b0 3
 422      =3  # define b1 2
 423      =3  # define b2 1
 424      =3  # define b3 0
 425      =3  
 426      =3  typedef unsigned char U8;
 427      =3  typedef unsigned int U16;
 428      =3  typedef unsigned long U32;
 429      =3  
 430      =3  typedef signed char S8;
 431      =3  typedef signed int S16;
 432      =3  typedef signed long S32;
 433      =3  
 434      =3  typedef union UU16
 435      =3  {
 436      =3     U16 U16;
 437      =3     S16 S16;
 438      =3     U8 U8[2];
 439      =3     S8 S8[2];
 440      =3  } UU16;
 441      =3  
 442      =3  typedef union UU32
 443      =3  {
 444      =3     U32 U32;
 445      =3     S32 S32;
 446      =3     UU16 UU16[2];
 447      =3     U16 U16[2];
 448      =3     S16 S16[2];
 449      =3     U8 U8[4];
 450      =3     S8 S8[4];
 451      =3  } UU32;
 452      =3  
 453      =3  // NOP () macro support
 454      =3  extern void _nop_ (void);
 455      =3  #define NOP() _nop_()
 456      =3  
 457      =3  // generic pointer memory type specifiers
 458      =3  #define SI_GPTR
 459      =3  #define SI_GPTR_MTYPE_DATA      0x00
 460      =3  #define SI_GPTR_MTYPE_IDATA     0x00
 461      =3  #define SI_GPTR_MTYPE_BDATA     0x00
 462      =3  #define SI_GPTR_MTYPE_PDATA     0xFE
 463      =3  #define SI_GPTR_MTYPE_XDATA     0x01
 464      =3  #define SI_GPTR_MTYPE_CODE      0xFF
 465      =3  
 466      =3  // generic pointer access struct
 467      =3  typedef union SI_GENERIC_PTR
 468      =3  {
 469      =3      U8 U8[3];
 470      =3      struct
 471      =3      {
 472      =3          U8 MTYPE;
 473      =3          UU16 ADDR;
 474      =3      } GPTR;
 475      =3  } SI_GENERIC_PTR;
 476      =3  
 477      =3  //-----------------------------------------------------------------------------
 478      =3  
 479      =3  // Hi-Tech 8051
 480      =3  // http://www.htsoft.com
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 29  

 481      =3  
 482      =3  #elif defined HI_TECH_C
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   far
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  near
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 
           =3 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =3 # define SFR(name, addr)          static volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =3 # define INTERRUPT_PROTO(name, vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: Hi-Tech does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 30  

           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() asm(" nop ")
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Tasking / Altium
           =3 // http://www.altium.com/tasking
           =3 
           =3 
           =3 #elif defined _CC51
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   _xdat
           =3 # define SEG_DATA  _data
           =3 # define SEG_NEAR  _data
           =3 # define SEG_IDATA _idat
           =3 # define SEG_XDATA _xdat
           =3 # define SEG_PDATA _pdat
           =3 # define SEG_CODE  _rom
           =3 # define SEG_BDATA _bdat
           =3 
           =3 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =3 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =3 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =3 #if _CC51 > 71
           =3 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =3 #else
           =3 # define SFR16(name, addr)      /* not supported */
           =3 #endif
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 
           =3 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =3 // is also using the same register bank. If not, the compiler will generate an error.
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
             -ameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 31  

             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 extern void _nop (void);
           =3 #define NOP() _nop()
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <stdbool.h>
           =3 #include <intrinsics.h>
           =3 
           =3 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr) /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 32  

           =3 
           =3 # define SEG_GENERIC __generic
           =3 # define SEG_FAR  __xdata
           =3 # define SEG_DATA __data
           =3 # define SEG_NEAR __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 #define bit bool
           =3 
           =3 # define _PPTOSTR_(x) #x
           =3 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 33  

           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 
           =3 #define NOP() __no_operation();
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x01
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x01
           =3 #define SI_GPTR_MTYPE_PDATA      0x00
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Crossware
           =3 // http://www.crossware.com
           =3 
           =3 #elif defined _XC51_VER
           =3 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =3 # define SFR(name, addr)        _sfr     name = addr
           =3 # define SFR16(name, addr)      _sfrword name = addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Wickenh盲user
           =3 // http://www.wickenhaeuser.de
           =3 
           =3 #elif defined __UC__
           =3 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =3 # define SFR(name, addr)        near unsigned char name @ addr
           =3 # define SFR16(name, addr)      /* not supported */
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Default
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 34  

           =3 // Unknown compiler
           =3 
           =3 #else
           =3 # warning unrecognized compiler
           =3 # define SBIT(name, addr, bit)  volatile bool           name
           =3 # define SFR(name, addr)        volatile unsigned char  name
           =3 # define SFRX(name, addr)       volatile unsigned char  name
           =3 # define SFR16(name, addr)      volatile unsigned short name
           =3 # define SFR16E(name, fulladdr) volatile unsigned short name
           =3 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =3 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =3 
           =3 #endif
 798      =3  
 799      =3  //-----------------------------------------------------------------------------
 800      =3  // Header File PreProcessor Directive
 801      =3  //-----------------------------------------------------------------------------
 802      =3  
 803      =3  #endif                                 // #define COMPILER_DEFS_H
 804      =3  
 805      =3  //-----------------------------------------------------------------------------
 806      =3  // End Of File
 807      =3  //-----------------------------------------------------------------------------
  89      =2  #include "C8051F020_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // C8051F020_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Copyright 2007, Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Register/bit definitions for the C8051F02x family.
  10      =3  // **Important Note**: The compiler_defs.h header file should be included
  11      =3  // before including this header file.
  12      =3  //
  13      =3  // Target:         C8051F020, 'F021, 'F022, 'F023
  14      =3  // Tool chain:     Generic
  15      =3  // Command Line:   None
  16      =3  //
  17      =3  // Release 1.4 - 20 AUG 2012 (TP)
  18      =3  //    -Added #define for _XPAGE to provide support for SDCC memory paging
  19      =3  //     (pdata)
  20      =3  // Release 1.3 - 07 AUG 2007 (PKC)
  21      =3  //    -Removed #include <compiler_defs.h>. The C source file should include it.
  22      =3  // Release 1.2 - 09 JUL 2007 (PKC)
  23      =3  //    -Reformatted header file to enable portable SFR definitions
  24      =3  
  25      =3  //-----------------------------------------------------------------------------
  26      =3  // Header File Preprocessor Directive
  27      =3  //-----------------------------------------------------------------------------
  28      =3  
  29      =3  #ifndef C8051F020_DEFS_H
  30      =3  #define C8051F020_DEFS_H
  31      =3  
  32      =3  //-----------------------------------------------------------------------------
  33      =3  // Byte Registers
  34      =3  //-----------------------------------------------------------------------------
  35      =3  
  36      =3  SFR (P0, 0x80);                        // Port 0 Latch
  37      =3  SFR (SP, 0x81);                        // Stack Pointer
  38      =3  SFR (DPL, 0x82);                       // Data Pointer Low
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 35  

  39      =3  SFR (DPH, 0x83);                       // Data Pointer High
  40      =3  SFR (P4, 0x84);                        // Port 4 Latch
  41      =3  SFR (P5, 0x85);                        // Port 5 Latch
  42      =3  SFR (P6, 0x86);                        // Port 6 Latch
  43      =3  SFR (PCON, 0x87);                      // Power Control
  44      =3  SFR (TCON, 0x88);                      // Timer/Counter Control
  45      =3  SFR (TMOD, 0x89);                      // Timer/Counter Mode
  46      =3  SFR (TL0, 0x8A);                       // Timer/Counter 0 Low
  47      =3  SFR (TL1, 0x8B);                       // Timer/Counter 1 Low
  48      =3  SFR (TH0, 0x8C);                       // Timer/Counter 0 High
  49      =3  SFR (TH1, 0x8D);                       // Timer/Counter 1 High
  50      =3  SFR (CKCON, 0x8E);                     // Clock Control
  51      =3  SFR (PSCTL, 0x8F);                     // Program Store R/W Control
  52      =3  SFR (P1, 0x90);                        // Port 1 Latch
  53      =3  SFR (TMR3CN, 0x91);                    // Timer/Counter 3 Control
  54      =3  SFR (TMR3RLL, 0x92);                   // Timer/Counter 3 Reload Low
  55      =3  SFR (TMR3RLH, 0x93);                   // Timer/Counter 3 Reload High
  56      =3  SFR (TMR3L, 0x94);                     // Timer/Counter 3 Low
  57      =3  SFR (TMR3H, 0x95);                     // Timer/Counter 3 High
  58      =3  SFR (P7, 0x96);                        // Port 7 Latch
  59      =3  SFR (SCON0, 0x98);                     // Serial Port UART0 Control
  60      =3  SFR (SBUF0, 0x99);                     // Serial Port UART0 Data Buffer
  61      =3  SFR (SPI0CFG, 0x9A);                   // SPI0 Configuration
  62      =3  SFR (SPI0DAT, 0x9B);                   // SPI0 Data
  63      =3  SFR (ADC1, 0x9C);                      // ADC1 Data
  64      =3  SFR (SPI0CKR, 0x9D);                   // SPI0 Clock Rate Control
  65      =3  SFR (CPT0CN, 0x9E);                    // Comparator 0 Control
  66      =3  SFR (CPT1CN, 0x9F);                    // Comparator 1 Control
  67      =3  SFR (P2, 0xA0);                        // Port 2 Latch
  68      =3  SFR (EMI0TC, 0xA1);                    // EMIF Timing Control
  69      =3  SFR (EMI0CF, 0xA3);                    // EMIF Configuration
  70      =3  SFR (P0MDOUT, 0xA4);                   // Port 0 Output Mode Configuration
  71      =3  SFR (P1MDOUT, 0xA5);                   // Port 1 Output Mode Configuration
  72      =3  SFR (P2MDOUT, 0xA6);                   // Port 2 Output Mode Configuration
  73      =3  SFR (P3MDOUT, 0xA7);                   // Port 3 Output Mode Configuration
  74      =3  SFR (IE, 0xA8);                        // Interrupt Enable
  75      =3  SFR (SADDR0, 0xA9);                    // Serial Port UART0 Slave Address
  76      =3  SFR (ADC1CN, 0xAA);                    // ADC1 Control
  77      =3  SFR (ADC1CF, 0xAB);                    // ADC1 Analog Mux Configuration
  78      =3  SFR (AMX1SL, 0xAC);                    // ADC1 Analog Mux Channel Select
  79      =3  SFR (P3IF, 0xAD);                      // Port 3 External Interrupt Flags
  80      =3  SFR (SADEN1, 0xAE);                    // Serial Port UART1 Slave Address Mask
  81      =3  SFR (EMI0CN, 0xAF);                    // EMIF Control
  82      =3  SFR (P3, 0xB0);                        // Port 3 Latch
  83      =3  SFR (OSCXCN, 0xB1);                    // External Oscillator Control
  84      =3  SFR (OSCICN, 0xB2);                    // Internal Oscillator Control
  85      =3  SFR (P74OUT, 0xB5);                    // Ports 4 - 7 Output Mode
  86      =3  SFR (FLSCL, 0xB6);                     // Flash Memory Timing Prescaler
  87      =3  SFR (FLACL, 0xB7);                     // Flash Acess Limit
  88      =3  SFR (IP, 0xB8);                        // Interrupt Priority
  89      =3  SFR (SADEN0, 0xB9);                    // Serial Port UART0 Slave Address Mask
  90      =3  SFR (AMX0CF, 0xBA);                    // ADC0 Mux Configuration
  91      =3  SFR (AMX0SL, 0xBB);                    // ADC0 Mux Channel Selection
  92      =3  SFR (ADC0CF, 0xBC);                    // ADC0 Configuration
  93      =3  SFR (P1MDIN, 0xBD);                    // Port 1 Input Mode
  94      =3  SFR (ADC0L, 0xBE);                     // ADC0 Data Low
  95      =3  SFR (ADC0H, 0xBF);                     // ADC0 Data High
  96      =3  SFR (SMB0CN, 0xC0);                    // SMBus0 Control
  97      =3  SFR (SMB0STA, 0xC1);                   // SMBus0 Status
  98      =3  SFR (SMB0DAT, 0xC2);                   // SMBus0 Data
  99      =3  SFR (SMB0ADR, 0xC3);                   // SMBus0 Slave Address
 100      =3  SFR (ADC0GTL, 0xC4);                   // ADC0 Greater-Than Register Low
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 36  

 101      =3  SFR (ADC0GTH, 0xC5);                   // ADC0 Greater-Than Register High
 102      =3  SFR (ADC0LTL, 0xC6);                   // ADC0 Less-Than Register Low
 103      =3  SFR (ADC0LTH, 0xC7);                   // ADC0 Less-Than Register High
 104      =3  SFR (T2CON, 0xC8);                     // Timer/Counter 2 Control
 105      =3  SFR (T4CON, 0xC9);                     // Timer/Counter 4 Control
 106      =3  SFR (RCAP2L, 0xCA);                    // Timer/Counter 2 Capture Low
 107      =3  SFR (RCAP2H, 0xCB);                    // Timer/Counter 2 Capture High
 108      =3  SFR (TL2, 0xCC);                       // Timer/Counter 2 Low
 109      =3  SFR (TH2, 0xCD);                       // Timer/Counter 2 High
 110      =3  SFR (SMB0CR, 0xCF);                    // SMBus0 Clock Rate
 111      =3  SFR (PSW, 0xD0);                       // Program Status Word
 112      =3  SFR (REF0CN, 0xD1);                    // Voltage Reference 0 Control
 113      =3  SFR (DAC0L, 0xD2);                     // DAC0 Register Low
 114      =3  SFR (DAC0H, 0xD3);                     // DAC0 Register High
 115      =3  SFR (DAC0CN, 0xD4);                    // DAC0 Control
 116      =3  SFR (DAC1L, 0xD5);                     // DAC1 Register Low
 117      =3  SFR (DAC1H, 0xD6);                     // DAC1 Register High
 118      =3  SFR (DAC1CN, 0xD7);                    // DAC1 Control
 119      =3  SFR (PCA0CN, 0xD8);                    // PCA0 Control
 120      =3  SFR (PCA0MD, 0xD9);                    // PCA0 Mode
 121      =3  SFR (PCA0CPM0, 0xDA);                  // PCA0 Module 0 Mode Register
 122      =3  SFR (PCA0CPM1, 0xDB);                  // PCA0 Module 1 Mode Register
 123      =3  SFR (PCA0CPM2, 0xDC);                  // PCA0 Module 2 Mode Register
 124      =3  SFR (PCA0CPM3, 0xDD);                  // PCA0 Module 3 Mode Register
 125      =3  SFR (PCA0CPM4, 0xDE);                  // PCA0 Module 4 Mode Register
 126      =3  SFR (ACC, 0xE0);                       // Accumulator
 127      =3  SFR (XBR0, 0xE1);                      // Port I/O Crossbar Control 0
 128      =3  SFR (XBR1, 0xE2);                      // Port I/O Crossbar Control 1
 129      =3  SFR (XBR2, 0xE3);                      // Port I/O Crossbar Control 2
 130      =3  SFR (RCAP4L, 0xE4);                    // Timer 4 Capture Register Low
 131      =3  SFR (RCAP4H, 0xE5);                    // Timer 4 Capture Register High
 132      =3  SFR (EIE1, 0xE6);                      // External Interrupt Enable 1
 133      =3  SFR (EIE2, 0xE7);                      // External Interrupt Enable 2
 134      =3  SFR (ADC0CN, 0xE8);                    // ADC0 Control
 135      =3  SFR (PCA0L, 0xE9);                     // PCA0 Counter Low
 136      =3  SFR (PCA0CPL0, 0xEA);                  // PCA0 Capture 0 Low
 137      =3  SFR (PCA0CPL1, 0xEB);                  // PCA0 Capture 1 Low
 138      =3  SFR (PCA0CPL2, 0xEC);                  // PCA0 Capture 2 Low
 139      =3  SFR (PCA0CPL3, 0xED);                  // PCA0 Capture 3 Low
 140      =3  SFR (PCA0CPL4, 0xEE);                  // PCA0 Capture 4 Low
 141      =3  SFR (RSTSRC, 0xEF);                    // Reset Source Configuration/Status
 142      =3  SFR (B, 0xF0);                         // B Register
 143      =3  SFR (SCON1, 0xF1);                     // Serial Port UART1 Control
 144      =3  SFR (SBUF1, 0xF2);                     // Serail Port UART1 Data
 145      =3  SFR (SADDR1, 0xF3);                    // Serail Port UART1 Slave Address
 146      =3  SFR (TL4, 0xF4);                       // Timer/Counter 4 Low
 147      =3  SFR (TH4, 0xF5);                       // Timer/Counter 4 High
 148      =3  SFR (EIP1, 0xF6);                      // External Interrupt Priority 1
 149      =3  SFR (EIP2, 0xF7);                      // External Interrupt Priority 2
 150      =3  SFR (SPI0CN, 0xF8);                    // SPI0 Control
 151      =3  SFR (PCA0H, 0xF9);                     // PCA0 Counter High
 152      =3  SFR (PCA0CPH0, 0xFA);                  // PCA0 Capture 0 High
 153      =3  SFR (PCA0CPH1, 0xFB);                  // PCA0 Capture 1 High
 154      =3  SFR (PCA0CPH2, 0xFC);                  // PCA0 Capture 2 High
 155      =3  SFR (PCA0CPH3, 0xFD);                  // PCA0 Capture 3 High
 156      =3  SFR (PCA0CPH4, 0xFE);                  // PCA0 Capture 4 High
 157      =3  SFR (WDTCN, 0xFF);                     // Watchdog Timer Control
 158      =3  
 159      =3  //-----------------------------------------------------------------------------
 160      =3  // 16-bit Register Definitions (might not be supported by all compilers)
 161      =3  //-----------------------------------------------------------------------------
 162      =3  
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 37  

 163      =3  SFR16 (DP, 0x82);                      // Data Pointer
 164      =3  SFR16 (TMR3RL, 0x92);                  // Timer3 Reload Value
 165      =3  SFR16 (TMR3, 0x94);                    // Timer3 Counter
 166      =3  SFR16 (ADC0, 0xBE);                    // ADC0 Data
 167      =3  SFR16 (ADC0GT, 0xC4);                  // ADC0 Greater Than Window
 168      =3  SFR16 (ADC0LT, 0xC6);                  // ADC0 Less Than Window
 169      =3  SFR16 (RCAP2, 0xCA);                   // Timer2 Capture/Reload
 170      =3  SFR16 (T2, 0xCC);                      // Timer2 Counter
 171      =3  SFR16 (TMR2RL, 0xCA);                  // Timer2 Capture/Reload
 172      =3  SFR16 (TMR2, 0xCC);                    // Timer2 Counter
 173      =3  SFR16 (RCAP4, 0xE4);                   // Timer4 Capture/Reload
 174      =3  SFR16 (T4, 0xF4);                      // Timer4 Counter
 175      =3  SFR16 (TMR4RL, 0xE4);                  // Timer4 Capture/Reload
 176      =3  SFR16 (TMR4, 0xF4);                    // Timer4 Counter
 177      =3  SFR16 (DAC0, 0xD2);                    // DAC0 Data
 178      =3  SFR16 (DAC1, 0xD5);                    // DAC1 Data
 179      =3  
 180      =3  //-----------------------------------------------------------------------------
 181      =3  // Address Definitions for bit-addressable SFRs
 182      =3  //-----------------------------------------------------------------------------
 183      =3  
 184      =3  #define SFR_P0       0x80
 185      =3  #define SFR_TCON     0x88
 186      =3  #define SFR_P1       0x90
 187      =3  #define SFR_SCON0    0x98
 188      =3  #define SFR_P2       0xA0
 189      =3  #define SFR_IE       0xA8
 190      =3  #define SFR_P3       0xB0
 191      =3  #define SFR_IP       0xB8
 192      =3  #define SFR_SMB0CN   0xC0
 193      =3  #define SFR_T2CON    0xC8
 194      =3  #define SFR_PSW      0xD0
 195      =3  #define SFR_PCA0CN   0xD8
 196      =3  #define SFR_ACC      0xE0
 197      =3  #define SFR_ADC0CN   0xE8
 198      =3  #define SFR_B        0xF0
 199      =3  #define SFR_SPI0CN   0xF8
 200      =3  
 201      =3  //-----------------------------------------------------------------------------
 202      =3  // Bit Definitions
 203      =3  //-----------------------------------------------------------------------------
 204      =3  
 205      =3  // TCON 0x88
 206      =3  SBIT (TF1, SFR_TCON, 7);               // Timer 1 Overflow Flag
 207      =3  SBIT (TR1, SFR_TCON, 6);               // Timer 1 On/Off Control
 208      =3  SBIT (TF0, SFR_TCON, 5);               // Timer 0 Overflow Flag
 209      =3  SBIT (TR0, SFR_TCON, 4);               // Timer 0 On/Off Control
 210      =3  SBIT (IE1, SFR_TCON, 3);               // Ext. Interrupt 1 Edge Flag
 211      =3  SBIT (IT1, SFR_TCON, 2);               // Ext. Interrupt 1 Type
 212      =3  SBIT (IE0, SFR_TCON, 1);               // Ext. Interrupt 0 Edge Flag
 213      =3  SBIT (IT0, SFR_TCON, 0);               // Ext. Interrupt 0 Type
 214      =3  
 215      =3  // SCON0 0x98
 216      =3  SBIT (SM00, SFR_SCON0, 7);             // Serial Mode Control Bit 0
 217      =3  SBIT (SM10, SFR_SCON0, 6);             // Serial Mode Control Bit 1
 218      =3  SBIT (SM20, SFR_SCON0, 5);             // Multiprocessor Communication Enable
 219      =3  SBIT (REN0, SFR_SCON0, 4);             // Receive Enable
 220      =3  SBIT (TB80, SFR_SCON0, 3);             // Transmit Bit 8
 221      =3  SBIT (RB80, SFR_SCON0, 2);             // Receive Bit 8
 222      =3  SBIT (TI0, SFR_SCON0, 1);              // Transmit Interrupt Flag
 223      =3  SBIT (RI0, SFR_SCON0, 0);              // Receive Interrupt Flag
 224      =3  
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 38  

 225      =3  // IE 0xA8
 226      =3  SBIT (EA, SFR_IE, 7);                  // Global Interrupt Enable
 227      =3  SBIT (IEGF0, SFR_IE, 6);               // General Purpose Flag 0
 228      =3  SBIT (ET2, SFR_IE, 5);                 // Timer 2 Interrupt Enable
 229      =3  SBIT (ES0, SFR_IE, 4);                 // Uart0 Interrupt Enable
 230      =3  SBIT (ET1, SFR_IE, 3);                 // Timer 1 Interrupt Enable
 231      =3  SBIT (EX1, SFR_IE, 2);                 // External Interrupt 1 Enable
 232      =3  SBIT (ET0, SFR_IE, 1);                 // Timer 0 Interrupt Enable
 233      =3  SBIT (EX0, SFR_IE, 0);                 // External Interrupt 0 Enable
 234      =3  
 235      =3  // IP 0xB8
 236      =3                                         // Bit7 UNUSED
 237      =3                                         // Bit6 UNUSED
 238      =3  SBIT (PT2, SFR_IP, 5);                 // Timer 2 Priority
 239      =3  SBIT (PS, SFR_IP, 4);                  // Serial Port Priority
 240      =3  SBIT (PT1, SFR_IP, 3);                 // Timer 1 Priority
 241      =3  SBIT (PX1, SFR_IP, 2);                 // External Interrupt 1 Priority
 242      =3  SBIT (PT0, SFR_IP, 1);                 // Timer 0 Priority
 243      =3  SBIT (PX0, SFR_IP, 0);                 // External Interrupt 0 Priority
 244      =3  
 245      =3  // SMB0CN 0xC0
 246      =3  SBIT (BUSY, SFR_SMB0CN, 7);            // SMBus 0 Busy
 247      =3  SBIT (ENSMB, SFR_SMB0CN, 6);           // SMBus 0 Enable
 248      =3  SBIT (STA, SFR_SMB0CN, 5);             // SMBus 0 Start Flag
 249      =3  SBIT (STO, SFR_SMB0CN, 4);             // SMBus 0 Stop Flag
 250      =3  SBIT (SI, SFR_SMB0CN, 3);              // SMBus 0 Interrupt Pending Flag
 251      =3  SBIT (AA, SFR_SMB0CN, 2);              // SMBus 0 Assert/Acknowledge Flag
 252      =3  SBIT (SMBFTE, SFR_SMB0CN, 1);          // SMBus 0 Free Timer Enable
 253      =3  SBIT (SMBTOE, SFR_SMB0CN, 0);          // SMBus 0 Timeout Enable
 254      =3  
 255      =3  // T2CON 0xC8
 256      =3  SBIT (TF2, SFR_T2CON, 7);              // Timer 2 Overflow Flag
 257      =3  SBIT (EXF2, SFR_T2CON, 6);             // External Flag
 258      =3  SBIT (RCLK0, SFR_T2CON, 5);            // Uart0 Rx Clock Source
 259      =3  SBIT (TCLK0, SFR_T2CON, 4);            // Uart0 Tx Clock Source
 260      =3  SBIT (EXEN2, SFR_T2CON, 3);            // Timer 2 External Enable Flag
 261      =3  SBIT (TR2, SFR_T2CON, 2);              // Timer 2 On/Off Control
 262      =3  SBIT (CT2, SFR_T2CON, 1);              // Timer Or Counter Select
 263      =3  SBIT (CPRL2, SFR_T2CON, 0);            // Capture Or Reload Select
 264      =3  
 265      =3  //  PSW 0xD0
 266      =3  SBIT (CY, SFR_PSW, 7);                 // Carry Flag
 267      =3  SBIT (AC, SFR_PSW, 6);                 // Auxiliary Carry Flag
 268      =3  SBIT (F0, SFR_PSW, 5);                 // User Flag 0
 269      =3  SBIT (RS1, SFR_PSW, 4);                // Register Bank Select 1
 270      =3  SBIT (RS0, SFR_PSW, 3);                // Register Bank Select 0
 271      =3  SBIT (OV, SFR_PSW, 2);                 // Overflow Flag
 272      =3  SBIT (F1, SFR_PSW, 1);                 // User Flag 1
 273      =3  SBIT (P, SFR_PSW, 0);                  // Accumulator Parity Flag
 274      =3  
 275      =3  // PCA0CN 0xD8
 276      =3  SBIT (CF, SFR_PCA0CN, 7);              // PCA 0 Counter Overflow Flag
 277      =3  SBIT (CR, SFR_PCA0CN, 6);              // PCA 0 Counter Run Control Bit
 278      =3                                         // Bit5 UNUSED
 279      =3  SBIT (CCF4, SFR_PCA0CN, 4);            // PCA 0 Module 4 Interrupt Flag
 280      =3  SBIT (CCF3, SFR_PCA0CN, 3);            // PCA 0 Module 3 Interrupt Flag
 281      =3  SBIT (CCF2, SFR_PCA0CN, 2);            // PCA 0 Module 2 Interrupt Flag
 282      =3  SBIT (CCF1, SFR_PCA0CN, 1);            // PCA 0 Module 1 Interrupt Flag
 283      =3  SBIT (CCF0, SFR_PCA0CN, 0);            // PCA 0 Module 0 Interrupt Flag
 284      =3  
 285      =3  // ADC0CN 0xE8
 286      =3  SBIT (AD0EN, SFR_ADC0CN, 7);           // ADC 0 Enable
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 39  

 287      =3  SBIT (AD0TM, SFR_ADC0CN, 6);           // ADC 0 Track Mode
 288      =3  SBIT (AD0INT, SFR_ADC0CN, 5);          // ADC 0 Converision Complete Interrupt Flag
 289      =3  SBIT (AD0BUSY, SFR_ADC0CN, 4);         // ADC 0 Busy Flag
 290      =3  SBIT (AD0CM1, SFR_ADC0CN, 3);          // ADC 0 Start Of Conversion Mode Bit 1
 291      =3  SBIT (AD0CM0, SFR_ADC0CN, 2);          // ADC 0 Start Of Conversion Mode Bit 0
 292      =3  SBIT (AD0WINT, SFR_ADC0CN, 1);         // ADC 0 Window Compare Interrupt Flag
 293      =3  SBIT (AD0LJST, SFR_ADC0CN, 0);         // ADC 0 Right Justify Data Bit
 294      =3  
 295      =3  // SPI0CN 0xF8
 296      =3  SBIT (SPIF, SFR_SPI0CN, 7);            // SPI 0 Interrupt Flag
 297      =3  SBIT (WCOL, SFR_SPI0CN, 6);            // SPI 0 Write Collision Flag
 298      =3  SBIT (MODF, SFR_SPI0CN, 5);            // SPI 0 Mode Fault Flag
 299      =3  SBIT (RXOVRN, SFR_SPI0CN, 4);          // SPI 0 Rx Overrun Flag
 300      =3  SBIT (TXBSY, SFR_SPI0CN, 3);           // SPI 0 Tx Busy Flag
 301      =3  SBIT (SLVSEL, SFR_SPI0CN, 2);          // SPI 0 Slave Select
 302      =3  SBIT (MSTEN, SFR_SPI0CN, 1);           // SPI 0 Master Enable
 303      =3  SBIT (SPIEN, SFR_SPI0CN, 0);           // SPI 0 SPI Enable
 304      =3  
 305      =3  //-----------------------------------------------------------------------------
 306      =3  // Interrupt Priorities
 307      =3  //-----------------------------------------------------------------------------
 308      =3  
 309      =3  #define INTERRUPT_INT0           0     // External Interrupt 0
 310      =3  #define INTERRUPT_TIMER0         1     // Timer0 Overflow
 311      =3  #define INTERRUPT_INT1           2     // External Interrupt 1
 312      =3  #define INTERRUPT_TIMER1         3     // Timer1 Overflow
 313      =3  #define INTERRUPT_UART0          4     // Serial Port UART0
 314      =3  #define INTERRUPT_TIMER2         5     // Timer2 Overflow
 315      =3  #define INTERRUPT_SPI0           6     // SPI0 Interface
 316      =3  #define INTERRUPT_SMBUS0         7     // SMBus0 Interface
 317      =3  #define INTERRUPT_ADC0_WINDOW    8     // ADC0 Window Comparison
 318      =3  #define INTERRUPT_PCA0           9     // PCA0 Peripheral
 319      =3  #define INTERRUPT_COMPARATOR0F   10    // Comparator0 Falling Edge
 320      =3  #define INTERRUPT_COMPARATOR0R   11    // Comparator0 Rising Edge
 321      =3  #define INTERRUPT_COMPARATOR1F   12    // Comparator1 Falling Edge
 322      =3  #define INTERRUPT_COMPARATOR1R   13    // Comparator1 Rising Edge
 323      =3  #define INTERRUPT_TIMER3         14    // Timer3 Overflow
 324      =3  #define INTERRUPT_ADC0_EOC       15    // ADC0 End Of Conversion
 325      =3  #define INTERRUPT_TIMER4         16    // Timer4 Overflow
 326      =3  #define INTERRUPT_ADC1_EOC       17    // ADC1 End Of Conversion
 327      =3  #define INTERRUPT_INT6           18    // External Interrupt 6
 328      =3  #define INTERRUPT_INT7           19    // External Interrupt 7
 329      =3  #define INTERRUPT_UART1          20    // Serial Port UART1
 330      =3  #define INTERRUPT_XTAL_READY     21    // External Crystal Oscillator Ready
 331      =3  
 332      =3  //-----------------------------------------------------------------------------
 333      =3  // SDCC PDATA External Memory Paging Support
 334      =3  //-----------------------------------------------------------------------------
 335      =3  
 336      =3  #if defined SDCC
           =3 
           =3 SFR(_XPAGE, 0xAF); // Point to the EMI0CN register
           =3 
           =3 #endif
 341      =3  
 342      =3  //-----------------------------------------------------------------------------
 343      =3  // Header File PreProcessor Directive
 344      =3  //-----------------------------------------------------------------------------
 345      =3  
 346      =3  #endif                                 // #define C8051F020_DEFS_H
 347      =3  
 348      =3  //-----------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 40  

 349      =3  // End Of File
 350      =3  //-----------------------------------------------------------------------------
  90      =2  /*****************************************************************************/
  91      =2  #include <stdio.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDIO.H
   3      =3  
   4      =3  Prototypes for standard I/O functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __STDIO_H__
  10      =3  #define __STDIO_H__
  11      =3  
  12      =3  #ifndef EOF
  13      =3   #define EOF -1
  14      =3  #endif
  15      =3  
  16      =3  #ifndef NULL
           =3  #define NULL ((void *) 0)
           =3 #endif
  19      =3  
  20      =3  #ifndef _SIZE_T
  21      =3   #define _SIZE_T
  22      =3   typedef unsigned int size_t;
  23      =3  #endif
  24      =3  
  25      =3  #pragma SAVE
  26      =3  #pragma REGPARMS
  27      =3  extern char _getkey (void);
  28      =3  extern char getchar (void);
  29      =3  extern char ungetchar (char);
  30      =3  extern char putchar (char);
  31      =3  extern int printf   (const char *, ...);
  32      =3  extern int sprintf  (char *, const char *, ...);
  33      =3  extern int vprintf  (const char *, char *);
  34      =3  extern int vsprintf (char *, const char *, char *);
  35      =3  extern char *gets (char *, int n);
  36      =3  extern int scanf (const char *, ...);
  37      =3  extern int sscanf (char *, const char *, ...);
  38      =3  extern int puts (const char *);
  39      =3  
  40      =3  #pragma RESTORE
  41      =3  
  42      =3  #endif
  43      =3  
  92      =2  #include <stdlib.h> 
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDLIB.H
   3      =3  
   4      =3  Standard functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STDLIB_H__
  11      =3  #define __STDLIB_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 41  

           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #ifndef _WCHAR_T_DEFINED_
  23      =3  #define _WCHAR_T_DEFINED_
  24      =3  typedef char wchar_t;
  25      =3  #endif
  26      =3  
  27      =3  #if defined (__CX2__)
           =3 #ifndef _DIV_T_DEFINED
           =3 typedef struct _div_t {
           =3         int quot;
           =3         int rem;
           =3 } div_t;
           =3 typedef struct _ldiv_t {
           =3         long quot;
           =3         long rem;
           =3 } ldiv_t;
           =3 #define _DIV_T_DEFINED
           =3 #endif // _DIV_T_DEFINED
           =3 #endif // __CX2__
  40      =3  
  41      =3  #ifndef RAND_MAX
  42      =3   #define RAND_MAX  32767u
  43      =3  #endif
  44      =3  
  45      =3  #if defined (__CX2__)
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif // __CX2__
  52      =3  
  53      =3  #pragma SAVE
  54      =3  #pragma REGPARMS
  55      =3  
  56      =3  extern char   cabs (char  val);
  57      =3  #if !defined (__CX2__)
  58      =3  extern int    abs  (int   val);
  59      =3  #endif // __CX2__
  60      =3  extern long   labs (long  val);
  61      =3  
  62      =3  extern float  atof (const char *s1);
  63      =3  extern long   atol (const char *s1);
  64      =3  extern int    atoi (const char *s1);
  65      =3  extern int    rand (void);
  66      =3  extern void   srand (unsigned int seed);
  67      =3  
  68      =3  #ifdef _DIV_T_DEFINED
           =3 extern div_t  __div (int numer, int denom);
           =3 #define div(numer,denom)  __div((numer),(denom));
           =3 extern ldiv_t ldiv (long numer, long denom);
           =3 #endif // _DIV_T_DEFINED
  73      =3  
  74      =3  extern float         strtod  (const char *nptr, char **endptr);
  75      =3  extern long          strtol  (const char *nptr, char **endptr, unsigned char base);
  76      =3  extern unsigned long strtoul (const char *nptr, char **endptr, unsigned char base);
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 42  

  77      =3  
  78      =3  #define _MALLOC_MEM_    xdata
  79      =3  
  80      =3  extern void init_mempool          (void _MALLOC_MEM_ *p, size_t size);
  81      =3  extern void _MALLOC_MEM_ *malloc  (size_t size);
  82      =3  extern void free                  (void _MALLOC_MEM_ *p);
  83      =3  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, size_t size);
  84      =3  extern void _MALLOC_MEM_ *calloc  (size_t nmemb, size_t size);
  85      =3  
  86      =3  #if defined (__CX2__)
           =3 extern void abort(void);
           =3 #endif // __CX2__
  89      =3  
  90      =3  #pragma RESTORE
  91      =3  
  92      =3  #endif // __STDLIB_H__
  93      =2  #include <string.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STRING.H
   3      =3  
   4      =3  String functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STRING_H__
  11      =3  #define __STRING_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #pragma SAVE
  23      =3  #pragma REGPARMS
  24      =3  extern char  *strcat  (char *s1, const char *s2);
  25      =3  extern char  *strncat (char *s1, const char *s2, size_t n);
  26      =3  
  27      =3  extern char   strcmp  (const char *s1, const char *s2);
  28      =3  extern char   strncmp (const char *s1, const char *s2, size_t n);
  29      =3  
  30      =3  extern char  *strcpy  (char *s1, const char *s2);
  31      =3  extern char  *strncpy (char *s1, const char *s2, size_t n);
  32      =3  
  33      =3  extern size_t strlen  (const char *);
  34      =3  
  35      =3  extern char  *strchr  (const char *s, char c);
  36      =3  extern int    strpos  (const char *s, char c);
  37      =3  extern char  *strrchr (const char *s, char c);
  38      =3  extern int    strrpos (const char *s, char c);
  39      =3  
  40      =3  extern size_t strspn  (const char *s, const char *set);
  41      =3  extern size_t strcspn (const char *s, const char *set);
  42      =3  extern char  *strpbrk (const char *s, const char *set);
  43      =3  extern char  *strrpbrk(const char *s, const char *set);
  44      =3  extern char  *strstr  (const char *s, const char *sub);
  45      =3  extern char  *strtok  (char *str, const char *set);
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 43  

  46      =3  
  47      =3  extern char   memcmp  (const void *s1, const void *s2, size_t n);
  48      =3  extern void  *memcpy  (void *s1, const void *s2, size_t n);
  49      =3  extern void  *memchr  (const void *s, char val, size_t n);
  50      =3  extern void  *memccpy (void *s1, const void *s2, char val, size_t n);
  51      =3  extern void  *memmove (void *s1, const void *s2, size_t n);
  52      =3  extern void  *memset  (void *s, char val, size_t n);
  53      =3  #pragma RESTORE
  54      =3  
  55      =3  #endif
  94      =2  #include <INTRINS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  INTRINS.H
   3      =3  
   4      =3  Intrinsic functions for C51.
   5      =3  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __INTRINS_H__
  10      =3  #define __INTRINS_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  
  14      =3  #if defined (__CX2__)
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 #endif
  18      =3  
  19      =3  extern void          _nop_     (void);
  20      =3  extern bit           _testbit_ (bit);
  21      =3  extern unsigned char _cror_    (unsigned char, unsigned char);
  22      =3  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  23      =3  extern unsigned long _lror_    (unsigned long, unsigned char);
  24      =3  extern unsigned char _crol_    (unsigned char, unsigned char);
  25      =3  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  26      =3  extern unsigned long _lrol_    (unsigned long, unsigned char);
  27      =3  extern unsigned char _chkfloat_(float);
  28      =3  #if defined (__CX2__)
           =3 extern int           abs       (int);
           =3 extern void          _illop_   (void);
           =3 #endif
  32      =3  #if !defined (__CX2__)
  33      =3  extern void          _push_    (unsigned char _sfr);
  34      =3  extern void          _pop_     (unsigned char _sfr);
  35      =3  #endif
  36      =3  
  37      =3  #pragma RESTORE
  38      =3  
  39      =3  #endif
  40      =3  
  95      =2  #include <ctype.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  CTYPE.H
   3      =3  
   4      =3  Prototypes for character functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __CTYPE_H__
  10      =3  #define __CTYPE_H__
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 44  

  11      =3  
  12      =3  #pragma SAVE
  13      =3  #pragma REGPARMS
  14      =3  extern bit isalpha (unsigned char);
  15      =3  extern bit isalnum (unsigned char);
  16      =3  extern bit iscntrl (unsigned char);
  17      =3  extern bit isdigit (unsigned char);
  18      =3  extern bit isgraph (unsigned char);
  19      =3  extern bit isprint (unsigned char);
  20      =3  extern bit ispunct (unsigned char);
  21      =3  extern bit islower (unsigned char);
  22      =3  extern bit isupper (unsigned char);
  23      =3  extern bit isspace (unsigned char);
  24      =3  extern bit isxdigit (unsigned char);
  25      =3  extern unsigned char tolower (unsigned char);
  26      =3  extern unsigned char toupper (unsigned char);
  27      =3  extern unsigned char toint (unsigned char);
  28      =3  
  29      =3  #define _tolower(c) ( (c)-'A'+'a' )
  30      =3  #define _toupper(c) ( (c)-'a'+'A' )
  31      =3  #define toascii(c)  ( (c) & 0x7F )
  32      =3  #pragma RESTORE
  33      =3  
  34      =3  #endif
  96      =2  #include <LIMITS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  LIMITS.H
   3      =3  
   4      =3  ANSI standard include file.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2009 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __LIMITS_H__
  11      =3  #define __LIMITS_H__
  12      =3  
  13      =3  #define CHAR_BIT         8              /* Number of bits in any "char" */
  14      =3  #define CHAR_MAX         127            /* Max             "char" value */
  15      =3  #define CHAR_MIN       (-128)           /* Min             "char" value */
  16      =3  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  17      =3  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
  18      =3  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  19      =3  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  20      =3  #define SHRT_MIN       (-32767-1)       /* Min ("signed") "short" value */
  21      =3  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  22      =3  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  23      =3  #define INT_MIN        (-32767-1)       /* Min ("signed")   "int" value */
  24      =3  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  25      =3  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  26      =3  #define LONG_MIN   (-2147483647L-1L)    /* Min ("signed")  "long" value */
  27      =3  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
  28      =3  
  29      =3  #endif
  97      =2  #include <math.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  MATH.H
   3      =3  
   4      =3  Prototypes for mathematic functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 45  

   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __MATH_H__
  11      =3  #define __MATH_H__
  12      =3  
  13      =3  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
           =3 #ifndef HUGE_VAL
           =3 #define HUGE_VAL __inf__
           =3 #endif // HUGE_VAL
           =3 
           =3 #ifndef NAN
           =3 #define NAN __nan__
           =3 #endif // NAN
           =3 
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif
  28      =3  
  29      =3  #pragma SAVE
  30      =3  #pragma REGPARMS
  31      =3  #if !defined (__CX2__)
  32      =3  extern char  cabs  (char  val);
  33      =3  extern int    abs  (int   val);
  34      =3  extern long  labs  (long  val);
  35      =3  #endif
  36      =3  
  37      =3  extern float fabs  (float val);
  38      =3  extern float sqrt  (float val);
  39      =3  extern float exp   (float val);
  40      =3  extern float log   (float val);
  41      =3  extern float log10 (float val);
  42      =3  extern float sin   (float val);
  43      =3  extern float cos   (float val);
  44      =3  extern float tan   (float val);
  45      =3  extern float asin  (float val);
  46      =3  extern float acos  (float val);
  47      =3  extern float atan  (float val);
  48      =3  extern float sinh  (float val);
  49      =3  extern float cosh  (float val);
  50      =3  extern float tanh  (float val);
  51      =3  extern float atan2 (float y, float x);
  52      =3  
  53      =3  extern float ceil  (float val);
  54      =3  extern float floor (float val);
  55      =3  extern float modf  (float val, float *n);
  56      =3  extern float fmod  (float x, float y);
  57      =3  extern float pow   (float x, float y);
  58      =3  
  59      =3  #if defined (__CX2__)
           =3 extern float frexp (float val, int *exp);
           =3 extern float ldexp (float val, int exp);
           =3 #endif
  63      =3  
  64      =3  #pragma RESTORE
  65      =3  
  66      =3  #endif
  98      =2  #include "crc32.h"
   1      =3  #ifndef __CRC32_H__
   2      =3  #define __CRC32_H__
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 46  

   3      =3  
   4      =3  //#ifdef __cplusplus
   5      =3  //extern "C" {
   6      =3  //#endif
   7      =3  /*****************************************************************************/
   8      =3  #include "AppConfig.h"
   1      =4  #ifndef __APPCONFIG_H__
           =4 #define __APPCONFIG_H__
           =4 /*****************************************************************************/
           =4 #define CONFIG_SYSCLK                       (22118400L)
           =4 #ifdef C8051F020
           =4 #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
           =4 #endif
           =4 #define CONFIG_DEBUG                        0//调试功能
           =4 #define CONFIG_USING_WDT                                        0//使能看门狗
           =4 #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
           =4 #define CONFIG_LADDER_SECTORS_START                     64//指令起始地址
           =4 #define CONFIG_LADDER_SECTORS_END                       128//指令结束地址
           =4 #define CONFIG_LASERTIMER_OVERFLOW_US           1000L//定时器周期 1mS
           =4 #define CONFIG_VERSION                                          0x0001
           =4 #define CONFIG_CHECK_CODE                                       0x5A00
           =4 /*****************************************************************************/
           =4 #define CONFIG_UART0_BAUDRATE                           57600//串口波特率
           =4 #define CONFIG_UART0_PARITY                                     NONE
           =4 #define CONFIG_UART0_STOPBIT                            1
           =4 #define CONFIG_UART0_DATABIT                            8
           =4 
           =4 #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
           =4 #define CONFIG_UART1_PARITY                                     NONE
           =4 #define CONFIG_UART1_STOPBIT                            1
           =4 #define CONFIG_UART1_DATABIT                            8
           =4 /*****************************************************************************/
           =4 #define CONFIG_I2C0_FREQ                                        (100000L)               
           =4 #define CONFIG_I2C1_FREQ                                        (100000L)
           =4 #define CONFIG_I2C2_FREQ                                        (100000L)
           =4 #define CONFIG_I2C3_FREQ                                        (100000L)
           =4 #define CONFIG_I2C4_FREQ                                        (100000L)
           =4 /*****************************************************************************/
           =4 #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
           =4 #define CONFIG_AT24C02_SIZE                             256
           =4 #define CONFIG_AT24C04_SIZE                             512
           =4 #define CONFIG_AT24C08_SIZE                             1024
           =4 #define CONFIG_AT24C16_SIZE                             2048
           =4 #define CONFIG_AT24C32_SIZE                             4096
           =4 #define CONFIG_AT24C64_SIZE                                     8192
           =4 #define CONFIG_AT24C128_SIZE                            16384
           =4 #define CONFIG_AT24C256_SIZE                            32768
           =4 #define CONFIG_EPROM_ADDRESS                            0x50
           =4 #define CONFIG_EPROM_FRAM                                       0//铁电存储体无写入等待
           =4 #define CONFIG_EPROM_FREQ                                       1//
           =4 /*****************************************************************************/
           =4 //SPLC设置
           =4 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =4 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_EPROM                         1//EPROM掉电存储启用
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 47  

           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_ADC                           1//使能ADC模块
           =4 #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
           =4 #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =4 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
           =4 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
           =4 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =4 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =4 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =4 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =4 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =4 /*****************************************************************************/
           =4 /*****************************************************************************/
           =4 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =4 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =4 #define DISABLE_INTERRUPT                                       EA = 0;
           =4 #define ENABLE_INTERRUPT                                        EA = 1;
           =4 /*****************************************************************************/
           =4 #define BOX_CMD_STX                                                     0x81
           =4 #define BOX_CMD_ETX                                                     0x84
           =4 /*****************************************************************************/
           =4 #include "stdint.h"
           =4 #include "stdbool.h"
           =4 #include "endian.h"
           =4 #include "si_toolchain.h"
           =4 #include "compiler_defs.h"
           =4 #include "C8051F020_defs.h"
           =4 /*****************************************************************************/
           =4 #include <stdio.h>
           =4 #include <stdlib.h> 
           =4 #include <string.h>
           =4 #include <INTRINS.H>
           =4 #include <ctype.h>
           =4 #include <LIMITS.H>
           =4 #include <math.h>
           =4 #include "crc32.h"
           =4 /*****************************************************************************/
           =4 #include "InitDeviceF020.h"
           =4 #include "delay.h"
           =4 #include "i2c0.h"
           =4 #include "eprom.h"
           =4 #include "dac8568_0.h"
           =4 #include "dac8568_1.h"
           =4 #include "dac8568_2.h"
           =4 #include "dac8568_3.h"
           =4 #include "boxCmd.h"
           =4 /*****************************************************************************/
           =4 #include "Modbus.h"
           =4 #include "ModbusPort.h"
           =4 /*****************************************************************************/
           =4 #include "sPLC.h"
           =4 /*****************************************************************************/
           =4 #endif
   9      =3  /*****************************************************************************/
  10      =3  uint32_t crc32Calculate(uint8_t *buf, uint32_t len);//CRC32 计算数组
  11      =3  uint32_t crc32CalculateAdd(uint8_t dat);//CRC32 计算连续字节
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 48  

  12      =3  void crc32Clear(void);//清空旧CRC32结果
  13      =3  void crc32SetCrcOld(uint32_t old);
  14      =3  /*****************************************************************************/
  15      =3  //#ifdef __cplusplus
  16      =3  //}
  17      =3  //#endif
  18      =3  #endif
  19      =3  
  20      =3  
  21      =3  
  99      =2  /*****************************************************************************/
 100      =2  #include "InitDeviceF020.h"
   1      =3  #ifndef __INITDEVICEF020_H__
   2      =3  #define __INITDEVICEF020_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "compiler_defs.h"
   1      =4  //-----------------------------------------------------------------------------
   2      =4  // compiler_defs.h
   3      =4  //-----------------------------------------------------------------------------
   4      =4  // Portions of this file are copyright Maarten Brock
   5      =4  // http://sdcc.sourceforge.net
   6      =4  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
   7      =4  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =4  //
   9      =4  // GNU LGPL boilerplate:
  10      =4  /** This library is free software; you can redistribute it and/or
  11      =4    * modify it under the terms of the GNU Lesser General Public
  12      =4    * License as published by the Free Software Foundation; either
  13      =4    * version 2.1 of the License, or (at your option) any later version.
  14      =4    *
  15      =4    * This library is distributed in the hope that it will be useful,
  16      =4    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =4    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  18      =4    * Lesser General Public License for more details.
  19      =4    *
  20      =4    * You should have received a copy of the GNU Lesser General Public
  21      =4    * License along with this library; if not, write to the Free Software
  22      =4    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =4    *
  24      =4    * In other words, you are welcome to use, share and improve this program.
  25      =4    * You are forbidden to forbid anyone else to use, share and improve
  26      =4    * what you give them. Help stamp out software-hoarding!
  27      =4  **/
  28      =4  // Program Description:
  29      =4  //
  30      =4  // **Important Note**: This header file should be included before including
  31      =4  // a device-specific header file such as C8051F300_defs.h.
  32      =4  //
  33      =4  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =4  // special function registers and other 8051-specific features such as NOP
  35      =4  // generation, and locating variables in memory-specific segments.  The
  36      =4  // compilers are identified by their unique predefined macros. See also:
  37      =4  // http://predef.sourceforge.net/precomp.html
  38      =4  //
  39      =4  // SBIT and SFR define special bit and special function registers at the given
  40      =4  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =4  // little-endian format. SFR16E and SFR32E define sfr combinations without
  42      =4  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =4  // combinations will guarantee the order in which they are accessed when read
  44      =4  // or written.
  45      =4  //
  46      =4  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 49  

  47      =4  // to avoid portability issues because of compiler endianness.
  48      =4  //
  49      =4  // Example:
  50      =4  // // my_mcu.c: main 'c' file for my mcu
  51      =4  // #include <compiler_defs.h>  // this file
  52      =4  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =4  //
  54      =4  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =4  // SFR   (P0, 0x80);           // Port 0
  56      =4  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
  57      =4  //                             // xdata memory at 0xE600
  58      =4  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =4  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =4  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =4  //                             // lsb at 0x93, msb at 0x96
  62      =4  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =4  //                             // lsb at 0xE2, msb at 0xE5
  64      =4  //
  65      =4  // Target:         C8051xxxx
  66      =4  // Tool chain:     Generic
  67      =4  // Command Line:   None
  68      =4  // 
  69      =4  // Release 2.7 - 25 JUN 2014 (JM)
  70      =4  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =4  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =4  //     pointed at by a generic poitner
  73      =4  // Release 2.6 - 14 DEC 2012 (GO)
  74      =4  //        -Added define for deprecated SDCC keyword 'at'
  75      =4  // Release 2.5 - 12 SEP 2012 (TP)
  76      =4  //    -Added defines for deprecated SDCC keywords bit and code
  77      =4  // Release 2.4 - 27 AUG 2012 (TP)
  78      =4  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =4  // Release 2.3 - 27 MAY 2010 (DM)
  80      =4  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =4  // Release 2.2 - 06 APR 2010 (ES)
  82      =4  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =4  // Release 2.1 - 16 JUL 2009 (ES)
  84      =4  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =4  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =4  // Release 2.0 - 19 MAY 2009 (ES)
  87      =4  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
  88      =4  // Release 1.9 - 23 OCT 2008 (ES)
  89      =4  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =4  //    -Added SFR16 macro defintion for Hi-Tech
  91      =4  // Release 1.8 - 31 JUL 2008 (ES)
  92      =4  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =4  //    -Added macro's for IAR
  94      =4  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =4  // Release 1.7 - 11 SEP 2007 (BW)
  96      =4  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =4  // Release 1.6 - 27 AUG 2007 (BW)
  98      =4  //    -Updated copyright notice per agreement with Maartin Brock
  99      =4  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =4  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =4  // Release 1.5 - 24 AUG 2007 (BW)
 102      =4  //    -Added support for NOP () macro
 103      =4  //    -Added support for Hi-Tech ver 9.01
 104      =4  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =4  //    -Removed FID and fixed formatting.
 106      =4  // Release 1.3 - 30 SEP 2007 (TP)
 107      =4  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =4  //     under SDCC.
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 50  

 109      =4  // Release 1.2 - (BW)
 110      =4  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =4  // Release 1.1 - (BW)
 112      =4  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =4  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =4  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =4  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =4  //    -Initial revision
 117      =4  
 118      =4  //-----------------------------------------------------------------------------
 119      =4  // Header File Preprocessor Directive
 120      =4  //-----------------------------------------------------------------------------
 121      =4  
 122      =4  #ifndef COMPILER_DEFS_H
           =4 #define COMPILER_DEFS_H
           =4 
           =4 #include "stdbool.h"
           =4 #include "stdint.h"
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Macro definitions
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 //SDK Version
           =4 #define SDK_VERSION   2
           =4 
           =4 #ifndef NULL
           =4 #define NULL ((void*) 0)
           =4 #endif
           =4 
           =4 
           =4 // SDCC - Small Device C Compiler
           =4 // http://sdcc.sourceforge.net
           =4 
           =4 #if defined SDCC
           =4 
           =4 #if (SDCC >= 300)
           =4 
           =4 #define interrupt __interrupt
           =4 #define _asm __asm
           =4 #define _endasm __endasm
           =4 #define bit __bit
           =4 #define code __code
           =4 #define at __at
           =4 
           =4 #endif
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   __xdata
           =4 # define SEG_DATA  __data
           =4 # define SEG_NEAR  __data
           =4 # define SEG_IDATA __idata
           =4 # define SEG_XDATA __xdata
           =4 # define SEG_PDATA __pdata
           =4 # define SEG_CODE  __code
           =4 # define SEG_BDATA __bdata
           =4 
           =4 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =4 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =4 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
           =4 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =4 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 51  

           =4 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =4 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =4 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
             -)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
             -regnum)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 #define NOP() _asm NOP _endasm
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 52  

           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x40
           =4 #define SI_GPTR_MTYPE_IDATA      0x40
           =4 #define SI_GPTR_MTYPE_BDATA      0x40
           =4 #define SI_GPTR_MTYPE_PDATA      0x60
           =4 #define SI_GPTR_MTYPE_XDATA      0x00
           =4 #define SI_GPTR_MTYPE_CODE       0x80
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         UU16 ADDR;
           =4         U8 MTYPE;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Raisonance (must be placed before Keil C51)
           =4 // http://www.raisonance.com
           =4 
           =4 #elif defined __RC51__
           =4 
           =4 //#error Raisonance C51 detected.
           =4 
           =4 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =4 # define SEG_FAR   xdata
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  data
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =4 # define SFR(name, addr)        sfr at addr                name
           =4 # define SFR16(name, addr)      sfr16 at addr              name
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 53  

           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =4 
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support -- NOP is opcode 0x00
           =4 #define NOP() asm { 0x00 }
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x04
           =4 #define SI_GPTR_MTYPE_IDATA      0x01
           =4 #define SI_GPTR_MTYPE_BDATA      0x04
           =4 #define SI_GPTR_MTYPE_PDATA      0x03
           =4 #define SI_GPTR_MTYPE_XDATA      0x02
           =4 #define SI_GPTR_MTYPE_CODE       0x05
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         U8 MTYPE;
           =4         UU16 ADDR;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 54  

           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 
           =4 // Keil C51
           =4 // http://www.keil.com
           =4 
           =4 #elif defined __C51__
           =4 
           =4 //#error Keil C51 detected.
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   xdata
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  data
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 # define SBIT(name, addr, bit)  sbit  name = addr^bit
           =4 # define SFR(name, addr)        sfr   name = addr
           =4 # define SFR16(name, addr)      sfr16 name = addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # ifndef __SLS_IDE__
           =4 
           =4 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
           =4 
           =4 # else  // __SLS_IDE__
           =4 
           =4 # define INTERRUPT(name, vector) void name (void)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 # define INTERRUPT_PROTO(name, vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =4 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =4 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 55  

           =4 
           =4 # endif // __SLS_IDE__
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 extern void _nop_ (void);
           =4 #define NOP() _nop_()
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA      0x00
           =4 #define SI_GPTR_MTYPE_IDATA     0x00
           =4 #define SI_GPTR_MTYPE_BDATA     0x00
           =4 #define SI_GPTR_MTYPE_PDATA     0xFE
           =4 #define SI_GPTR_MTYPE_XDATA     0x01
           =4 #define SI_GPTR_MTYPE_CODE      0xFF
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         U8 MTYPE;
           =4         UU16 ADDR;
           =4     } GPTR;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 56  

           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Hi-Tech 8051
           =4 // http://www.htsoft.com
           =4 
           =4 #elif defined HI_TECH_C
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   far
           =4 # define SEG_DATA  data
           =4 # define SEG_NEAR  near
           =4 # define SEG_IDATA idata
           =4 # define SEG_XDATA xdata
           =4 # define SEG_PDATA pdata
           =4 # define SEG_CODE  code
           =4 # define SEG_BDATA bdata
           =4 
           =4 
           =4 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =4 # define SFR(name, addr)          static volatile unsigned char name @ addr
           =4 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =4 # define INTERRUPT_PROTO(name, vector)
           =4 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =4 // Note: Hi-Tech does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 57  

           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 #define NOP() asm(" nop ")
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Tasking / Altium
           =4 // http://www.altium.com/tasking
           =4 
           =4 
           =4 #elif defined _CC51
           =4 
           =4 # define SEG_GENERIC
           =4 # define SEG_FAR   _xdat
           =4 # define SEG_DATA  _data
           =4 # define SEG_NEAR  _data
           =4 # define SEG_IDATA _idat
           =4 # define SEG_XDATA _xdat
           =4 # define SEG_PDATA _pdat
           =4 # define SEG_CODE  _rom
           =4 # define SEG_BDATA _bdat
           =4 
           =4 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =4 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =4 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =4 #if _CC51 > 71
           =4 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =4 #else
           =4 # define SFR16(name, addr)      /* not supported */
           =4 #endif
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =4 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =4 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =4 
           =4 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =4 // is also using the same register bank. If not, the compiler will generate an error.
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
             -)
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 58  

             -ameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =4 
           =4 // used with UU16
           =4 # define LSB 1
           =4 # define MSB 0
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 3
           =4 # define b1 2
           =4 # define b2 1
           =4 # define b3 0
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 // NOP () macro support
           =4 extern void _nop (void);
           =4 #define NOP() _nop()
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 
           =4 // IAR 8051
           =4 // http://www.iar.com
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #include <stdbool.h>
           =4 #include <intrinsics.h>
           =4 
           =4 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 59  

           =4 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =4 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =4 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr) /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 # define SEG_GENERIC __generic
           =4 # define SEG_FAR  __xdata
           =4 # define SEG_DATA __data
           =4 # define SEG_NEAR __data
           =4 # define SEG_IDATA __idata
           =4 # define SEG_XDATA __xdata
           =4 # define SEG_PDATA __pdata
           =4 # define SEG_CODE  __code
           =4 # define SEG_BDATA __bdata
           =4 
           =4 #define bit bool
           =4 
           =4 # define _PPTOSTR_(x) #x
           =4 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =4 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =4 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =4 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =4 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =4 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =4 
           =4 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =4 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =4 // Note: IAR does not support functions using different register banks. Register
           =4 //       banks can only be specified in interrupts. If a function is called from
           =4 //       inside an interrupt, it will use the same register bank as the interrupt.
           =4 
           =4 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =4 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =4 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =4 
           =4 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =4 
           =4 // used with UU16
           =4 # define LSB 0
           =4 # define MSB 1
           =4 
           =4 // used with UU32 (b0 is least-significant byte)
           =4 # define b0 0
           =4 # define b1 1
           =4 # define b2 2
           =4 # define b3 3
           =4 
           =4 typedef unsigned char U8;
           =4 typedef unsigned int U16;
           =4 typedef unsigned long U32;
           =4 
           =4 typedef signed char S8;
           =4 typedef signed int S16;
           =4 typedef signed long S32;
           =4 
           =4 typedef union UU16
           =4 {
           =4    U16 U16;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 60  

           =4    S16 S16;
           =4    U8 U8[2];
           =4    S8 S8[2];
           =4 } UU16;
           =4 
           =4 typedef union UU32
           =4 {
           =4    U32 U32;
           =4    S32 S32;
           =4    UU16 UU16[2];
           =4    U16 U16[2];
           =4    S16 S16[2];
           =4    U8 U8[4];
           =4    S8 S8[4];
           =4 } UU32;
           =4 
           =4 
           =4 #define NOP() __no_operation();
           =4 
           =4 // generic pointer memory type specifiers
           =4 #define SI_GPTR
           =4 #define SI_GPTR_MTYPE_DATA       0x01
           =4 #define SI_GPTR_MTYPE_IDATA      0x01
           =4 #define SI_GPTR_MTYPE_BDATA      0x01
           =4 #define SI_GPTR_MTYPE_PDATA      0x00
           =4 #define SI_GPTR_MTYPE_XDATA      0x00
           =4 #define SI_GPTR_MTYPE_CODE       0x80
           =4 
           =4 // generic pointer access struct
           =4 typedef union SI_GENERIC_PTR
           =4 {
           =4     U8 U8[3];
           =4     struct
           =4     {
           =4         UU16 ADDR;
           =4         U8 MTYPE;
           =4     } GPTR;
           =4 } SI_GENERIC_PTR;
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Crossware
           =4 // http://www.crossware.com
           =4 
           =4 #elif defined _XC51_VER
           =4 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =4 # define SFR(name, addr)        _sfr     name = addr
           =4 # define SFR16(name, addr)      _sfrword name = addr
           =4 # define SFR16E(name, fulladdr) /* not supported */
           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Wickenh盲user
           =4 // http://www.wickenhaeuser.de
           =4 
           =4 #elif defined __UC__
           =4 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =4 # define SFR(name, addr)        near unsigned char name @ addr
           =4 # define SFR16(name, addr)      /* not supported */
           =4 # define SFR16E(name, fulladdr) /* not supported */
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 61  

           =4 # define SFR32(name, fulladdr)  /* not supported */
           =4 # define SFR32E(name, fulladdr) /* not supported */
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // Default
           =4 // Unknown compiler
           =4 
           =4 #else
           =4 # warning unrecognized compiler
           =4 # define SBIT(name, addr, bit)  volatile bool           name
           =4 # define SFR(name, addr)        volatile unsigned char  name
           =4 # define SFRX(name, addr)       volatile unsigned char  name
           =4 # define SFR16(name, addr)      volatile unsigned short name
           =4 # define SFR16E(name, fulladdr) volatile unsigned short name
           =4 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =4 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =4 
           =4 #endif
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Header File PreProcessor Directive
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #endif                                 // #define COMPILER_DEFS_H
 804      =4  
 805      =4  //-----------------------------------------------------------------------------
 806      =4  // End Of File
 807      =4  //-----------------------------------------------------------------------------
   5      =3  #include "C8051F020_defs.h"
   1      =4  //-----------------------------------------------------------------------------
   2      =4  // C8051F020_defs.h
   3      =4  //-----------------------------------------------------------------------------
   4      =4  // Copyright 2007, Silicon Laboratories, Inc.
   5      =4  // http://www.silabs.com
   6      =4  //
   7      =4  // Program Description:
   8      =4  //
   9      =4  // Register/bit definitions for the C8051F02x family.
  10      =4  // **Important Note**: The compiler_defs.h header file should be included
  11      =4  // before including this header file.
  12      =4  //
  13      =4  // Target:         C8051F020, 'F021, 'F022, 'F023
  14      =4  // Tool chain:     Generic
  15      =4  // Command Line:   None
  16      =4  //
  17      =4  // Release 1.4 - 20 AUG 2012 (TP)
  18      =4  //    -Added #define for _XPAGE to provide support for SDCC memory paging
  19      =4  //     (pdata)
  20      =4  // Release 1.3 - 07 AUG 2007 (PKC)
  21      =4  //    -Removed #include <compiler_defs.h>. The C source file should include it.
  22      =4  // Release 1.2 - 09 JUL 2007 (PKC)
  23      =4  //    -Reformatted header file to enable portable SFR definitions
  24      =4  
  25      =4  //-----------------------------------------------------------------------------
  26      =4  // Header File Preprocessor Directive
  27      =4  //-----------------------------------------------------------------------------
  28      =4  
  29      =4  #ifndef C8051F020_DEFS_H
           =4 #define C8051F020_DEFS_H
           =4 
           =4 //-----------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 62  

           =4 // Byte Registers
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 SFR (P0, 0x80);                        // Port 0 Latch
           =4 SFR (SP, 0x81);                        // Stack Pointer
           =4 SFR (DPL, 0x82);                       // Data Pointer Low
           =4 SFR (DPH, 0x83);                       // Data Pointer High
           =4 SFR (P4, 0x84);                        // Port 4 Latch
           =4 SFR (P5, 0x85);                        // Port 5 Latch
           =4 SFR (P6, 0x86);                        // Port 6 Latch
           =4 SFR (PCON, 0x87);                      // Power Control
           =4 SFR (TCON, 0x88);                      // Timer/Counter Control
           =4 SFR (TMOD, 0x89);                      // Timer/Counter Mode
           =4 SFR (TL0, 0x8A);                       // Timer/Counter 0 Low
           =4 SFR (TL1, 0x8B);                       // Timer/Counter 1 Low
           =4 SFR (TH0, 0x8C);                       // Timer/Counter 0 High
           =4 SFR (TH1, 0x8D);                       // Timer/Counter 1 High
           =4 SFR (CKCON, 0x8E);                     // Clock Control
           =4 SFR (PSCTL, 0x8F);                     // Program Store R/W Control
           =4 SFR (P1, 0x90);                        // Port 1 Latch
           =4 SFR (TMR3CN, 0x91);                    // Timer/Counter 3 Control
           =4 SFR (TMR3RLL, 0x92);                   // Timer/Counter 3 Reload Low
           =4 SFR (TMR3RLH, 0x93);                   // Timer/Counter 3 Reload High
           =4 SFR (TMR3L, 0x94);                     // Timer/Counter 3 Low
           =4 SFR (TMR3H, 0x95);                     // Timer/Counter 3 High
           =4 SFR (P7, 0x96);                        // Port 7 Latch
           =4 SFR (SCON0, 0x98);                     // Serial Port UART0 Control
           =4 SFR (SBUF0, 0x99);                     // Serial Port UART0 Data Buffer
           =4 SFR (SPI0CFG, 0x9A);                   // SPI0 Configuration
           =4 SFR (SPI0DAT, 0x9B);                   // SPI0 Data
           =4 SFR (ADC1, 0x9C);                      // ADC1 Data
           =4 SFR (SPI0CKR, 0x9D);                   // SPI0 Clock Rate Control
           =4 SFR (CPT0CN, 0x9E);                    // Comparator 0 Control
           =4 SFR (CPT1CN, 0x9F);                    // Comparator 1 Control
           =4 SFR (P2, 0xA0);                        // Port 2 Latch
           =4 SFR (EMI0TC, 0xA1);                    // EMIF Timing Control
           =4 SFR (EMI0CF, 0xA3);                    // EMIF Configuration
           =4 SFR (P0MDOUT, 0xA4);                   // Port 0 Output Mode Configuration
           =4 SFR (P1MDOUT, 0xA5);                   // Port 1 Output Mode Configuration
           =4 SFR (P2MDOUT, 0xA6);                   // Port 2 Output Mode Configuration
           =4 SFR (P3MDOUT, 0xA7);                   // Port 3 Output Mode Configuration
           =4 SFR (IE, 0xA8);                        // Interrupt Enable
           =4 SFR (SADDR0, 0xA9);                    // Serial Port UART0 Slave Address
           =4 SFR (ADC1CN, 0xAA);                    // ADC1 Control
           =4 SFR (ADC1CF, 0xAB);                    // ADC1 Analog Mux Configuration
           =4 SFR (AMX1SL, 0xAC);                    // ADC1 Analog Mux Channel Select
           =4 SFR (P3IF, 0xAD);                      // Port 3 External Interrupt Flags
           =4 SFR (SADEN1, 0xAE);                    // Serial Port UART1 Slave Address Mask
           =4 SFR (EMI0CN, 0xAF);                    // EMIF Control
           =4 SFR (P3, 0xB0);                        // Port 3 Latch
           =4 SFR (OSCXCN, 0xB1);                    // External Oscillator Control
           =4 SFR (OSCICN, 0xB2);                    // Internal Oscillator Control
           =4 SFR (P74OUT, 0xB5);                    // Ports 4 - 7 Output Mode
           =4 SFR (FLSCL, 0xB6);                     // Flash Memory Timing Prescaler
           =4 SFR (FLACL, 0xB7);                     // Flash Acess Limit
           =4 SFR (IP, 0xB8);                        // Interrupt Priority
           =4 SFR (SADEN0, 0xB9);                    // Serial Port UART0 Slave Address Mask
           =4 SFR (AMX0CF, 0xBA);                    // ADC0 Mux Configuration
           =4 SFR (AMX0SL, 0xBB);                    // ADC0 Mux Channel Selection
           =4 SFR (ADC0CF, 0xBC);                    // ADC0 Configuration
           =4 SFR (P1MDIN, 0xBD);                    // Port 1 Input Mode
           =4 SFR (ADC0L, 0xBE);                     // ADC0 Data Low
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 63  

           =4 SFR (ADC0H, 0xBF);                     // ADC0 Data High
           =4 SFR (SMB0CN, 0xC0);                    // SMBus0 Control
           =4 SFR (SMB0STA, 0xC1);                   // SMBus0 Status
           =4 SFR (SMB0DAT, 0xC2);                   // SMBus0 Data
           =4 SFR (SMB0ADR, 0xC3);                   // SMBus0 Slave Address
           =4 SFR (ADC0GTL, 0xC4);                   // ADC0 Greater-Than Register Low
           =4 SFR (ADC0GTH, 0xC5);                   // ADC0 Greater-Than Register High
           =4 SFR (ADC0LTL, 0xC6);                   // ADC0 Less-Than Register Low
           =4 SFR (ADC0LTH, 0xC7);                   // ADC0 Less-Than Register High
           =4 SFR (T2CON, 0xC8);                     // Timer/Counter 2 Control
           =4 SFR (T4CON, 0xC9);                     // Timer/Counter 4 Control
           =4 SFR (RCAP2L, 0xCA);                    // Timer/Counter 2 Capture Low
           =4 SFR (RCAP2H, 0xCB);                    // Timer/Counter 2 Capture High
           =4 SFR (TL2, 0xCC);                       // Timer/Counter 2 Low
           =4 SFR (TH2, 0xCD);                       // Timer/Counter 2 High
           =4 SFR (SMB0CR, 0xCF);                    // SMBus0 Clock Rate
           =4 SFR (PSW, 0xD0);                       // Program Status Word
           =4 SFR (REF0CN, 0xD1);                    // Voltage Reference 0 Control
           =4 SFR (DAC0L, 0xD2);                     // DAC0 Register Low
           =4 SFR (DAC0H, 0xD3);                     // DAC0 Register High
           =4 SFR (DAC0CN, 0xD4);                    // DAC0 Control
           =4 SFR (DAC1L, 0xD5);                     // DAC1 Register Low
           =4 SFR (DAC1H, 0xD6);                     // DAC1 Register High
           =4 SFR (DAC1CN, 0xD7);                    // DAC1 Control
           =4 SFR (PCA0CN, 0xD8);                    // PCA0 Control
           =4 SFR (PCA0MD, 0xD9);                    // PCA0 Mode
           =4 SFR (PCA0CPM0, 0xDA);                  // PCA0 Module 0 Mode Register
           =4 SFR (PCA0CPM1, 0xDB);                  // PCA0 Module 1 Mode Register
           =4 SFR (PCA0CPM2, 0xDC);                  // PCA0 Module 2 Mode Register
           =4 SFR (PCA0CPM3, 0xDD);                  // PCA0 Module 3 Mode Register
           =4 SFR (PCA0CPM4, 0xDE);                  // PCA0 Module 4 Mode Register
           =4 SFR (ACC, 0xE0);                       // Accumulator
           =4 SFR (XBR0, 0xE1);                      // Port I/O Crossbar Control 0
           =4 SFR (XBR1, 0xE2);                      // Port I/O Crossbar Control 1
           =4 SFR (XBR2, 0xE3);                      // Port I/O Crossbar Control 2
           =4 SFR (RCAP4L, 0xE4);                    // Timer 4 Capture Register Low
           =4 SFR (RCAP4H, 0xE5);                    // Timer 4 Capture Register High
           =4 SFR (EIE1, 0xE6);                      // External Interrupt Enable 1
           =4 SFR (EIE2, 0xE7);                      // External Interrupt Enable 2
           =4 SFR (ADC0CN, 0xE8);                    // ADC0 Control
           =4 SFR (PCA0L, 0xE9);                     // PCA0 Counter Low
           =4 SFR (PCA0CPL0, 0xEA);                  // PCA0 Capture 0 Low
           =4 SFR (PCA0CPL1, 0xEB);                  // PCA0 Capture 1 Low
           =4 SFR (PCA0CPL2, 0xEC);                  // PCA0 Capture 2 Low
           =4 SFR (PCA0CPL3, 0xED);                  // PCA0 Capture 3 Low
           =4 SFR (PCA0CPL4, 0xEE);                  // PCA0 Capture 4 Low
           =4 SFR (RSTSRC, 0xEF);                    // Reset Source Configuration/Status
           =4 SFR (B, 0xF0);                         // B Register
           =4 SFR (SCON1, 0xF1);                     // Serial Port UART1 Control
           =4 SFR (SBUF1, 0xF2);                     // Serail Port UART1 Data
           =4 SFR (SADDR1, 0xF3);                    // Serail Port UART1 Slave Address
           =4 SFR (TL4, 0xF4);                       // Timer/Counter 4 Low
           =4 SFR (TH4, 0xF5);                       // Timer/Counter 4 High
           =4 SFR (EIP1, 0xF6);                      // External Interrupt Priority 1
           =4 SFR (EIP2, 0xF7);                      // External Interrupt Priority 2
           =4 SFR (SPI0CN, 0xF8);                    // SPI0 Control
           =4 SFR (PCA0H, 0xF9);                     // PCA0 Counter High
           =4 SFR (PCA0CPH0, 0xFA);                  // PCA0 Capture 0 High
           =4 SFR (PCA0CPH1, 0xFB);                  // PCA0 Capture 1 High
           =4 SFR (PCA0CPH2, 0xFC);                  // PCA0 Capture 2 High
           =4 SFR (PCA0CPH3, 0xFD);                  // PCA0 Capture 3 High
           =4 SFR (PCA0CPH4, 0xFE);                  // PCA0 Capture 4 High
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 64  

           =4 SFR (WDTCN, 0xFF);                     // Watchdog Timer Control
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // 16-bit Register Definitions (might not be supported by all compilers)
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 SFR16 (DP, 0x82);                      // Data Pointer
           =4 SFR16 (TMR3RL, 0x92);                  // Timer3 Reload Value
           =4 SFR16 (TMR3, 0x94);                    // Timer3 Counter
           =4 SFR16 (ADC0, 0xBE);                    // ADC0 Data
           =4 SFR16 (ADC0GT, 0xC4);                  // ADC0 Greater Than Window
           =4 SFR16 (ADC0LT, 0xC6);                  // ADC0 Less Than Window
           =4 SFR16 (RCAP2, 0xCA);                   // Timer2 Capture/Reload
           =4 SFR16 (T2, 0xCC);                      // Timer2 Counter
           =4 SFR16 (TMR2RL, 0xCA);                  // Timer2 Capture/Reload
           =4 SFR16 (TMR2, 0xCC);                    // Timer2 Counter
           =4 SFR16 (RCAP4, 0xE4);                   // Timer4 Capture/Reload
           =4 SFR16 (T4, 0xF4);                      // Timer4 Counter
           =4 SFR16 (TMR4RL, 0xE4);                  // Timer4 Capture/Reload
           =4 SFR16 (TMR4, 0xF4);                    // Timer4 Counter
           =4 SFR16 (DAC0, 0xD2);                    // DAC0 Data
           =4 SFR16 (DAC1, 0xD5);                    // DAC1 Data
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Address Definitions for bit-addressable SFRs
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #define SFR_P0       0x80
           =4 #define SFR_TCON     0x88
           =4 #define SFR_P1       0x90
           =4 #define SFR_SCON0    0x98
           =4 #define SFR_P2       0xA0
           =4 #define SFR_IE       0xA8
           =4 #define SFR_P3       0xB0
           =4 #define SFR_IP       0xB8
           =4 #define SFR_SMB0CN   0xC0
           =4 #define SFR_T2CON    0xC8
           =4 #define SFR_PSW      0xD0
           =4 #define SFR_PCA0CN   0xD8
           =4 #define SFR_ACC      0xE0
           =4 #define SFR_ADC0CN   0xE8
           =4 #define SFR_B        0xF0
           =4 #define SFR_SPI0CN   0xF8
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Bit Definitions
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 // TCON 0x88
           =4 SBIT (TF1, SFR_TCON, 7);               // Timer 1 Overflow Flag
           =4 SBIT (TR1, SFR_TCON, 6);               // Timer 1 On/Off Control
           =4 SBIT (TF0, SFR_TCON, 5);               // Timer 0 Overflow Flag
           =4 SBIT (TR0, SFR_TCON, 4);               // Timer 0 On/Off Control
           =4 SBIT (IE1, SFR_TCON, 3);               // Ext. Interrupt 1 Edge Flag
           =4 SBIT (IT1, SFR_TCON, 2);               // Ext. Interrupt 1 Type
           =4 SBIT (IE0, SFR_TCON, 1);               // Ext. Interrupt 0 Edge Flag
           =4 SBIT (IT0, SFR_TCON, 0);               // Ext. Interrupt 0 Type
           =4 
           =4 // SCON0 0x98
           =4 SBIT (SM00, SFR_SCON0, 7);             // Serial Mode Control Bit 0
           =4 SBIT (SM10, SFR_SCON0, 6);             // Serial Mode Control Bit 1
           =4 SBIT (SM20, SFR_SCON0, 5);             // Multiprocessor Communication Enable
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 65  

           =4 SBIT (REN0, SFR_SCON0, 4);             // Receive Enable
           =4 SBIT (TB80, SFR_SCON0, 3);             // Transmit Bit 8
           =4 SBIT (RB80, SFR_SCON0, 2);             // Receive Bit 8
           =4 SBIT (TI0, SFR_SCON0, 1);              // Transmit Interrupt Flag
           =4 SBIT (RI0, SFR_SCON0, 0);              // Receive Interrupt Flag
           =4 
           =4 // IE 0xA8
           =4 SBIT (EA, SFR_IE, 7);                  // Global Interrupt Enable
           =4 SBIT (IEGF0, SFR_IE, 6);               // General Purpose Flag 0
           =4 SBIT (ET2, SFR_IE, 5);                 // Timer 2 Interrupt Enable
           =4 SBIT (ES0, SFR_IE, 4);                 // Uart0 Interrupt Enable
           =4 SBIT (ET1, SFR_IE, 3);                 // Timer 1 Interrupt Enable
           =4 SBIT (EX1, SFR_IE, 2);                 // External Interrupt 1 Enable
           =4 SBIT (ET0, SFR_IE, 1);                 // Timer 0 Interrupt Enable
           =4 SBIT (EX0, SFR_IE, 0);                 // External Interrupt 0 Enable
           =4 
           =4 // IP 0xB8
           =4                                        // Bit7 UNUSED
           =4                                        // Bit6 UNUSED
           =4 SBIT (PT2, SFR_IP, 5);                 // Timer 2 Priority
           =4 SBIT (PS, SFR_IP, 4);                  // Serial Port Priority
           =4 SBIT (PT1, SFR_IP, 3);                 // Timer 1 Priority
           =4 SBIT (PX1, SFR_IP, 2);                 // External Interrupt 1 Priority
           =4 SBIT (PT0, SFR_IP, 1);                 // Timer 0 Priority
           =4 SBIT (PX0, SFR_IP, 0);                 // External Interrupt 0 Priority
           =4 
           =4 // SMB0CN 0xC0
           =4 SBIT (BUSY, SFR_SMB0CN, 7);            // SMBus 0 Busy
           =4 SBIT (ENSMB, SFR_SMB0CN, 6);           // SMBus 0 Enable
           =4 SBIT (STA, SFR_SMB0CN, 5);             // SMBus 0 Start Flag
           =4 SBIT (STO, SFR_SMB0CN, 4);             // SMBus 0 Stop Flag
           =4 SBIT (SI, SFR_SMB0CN, 3);              // SMBus 0 Interrupt Pending Flag
           =4 SBIT (AA, SFR_SMB0CN, 2);              // SMBus 0 Assert/Acknowledge Flag
           =4 SBIT (SMBFTE, SFR_SMB0CN, 1);          // SMBus 0 Free Timer Enable
           =4 SBIT (SMBTOE, SFR_SMB0CN, 0);          // SMBus 0 Timeout Enable
           =4 
           =4 // T2CON 0xC8
           =4 SBIT (TF2, SFR_T2CON, 7);              // Timer 2 Overflow Flag
           =4 SBIT (EXF2, SFR_T2CON, 6);             // External Flag
           =4 SBIT (RCLK0, SFR_T2CON, 5);            // Uart0 Rx Clock Source
           =4 SBIT (TCLK0, SFR_T2CON, 4);            // Uart0 Tx Clock Source
           =4 SBIT (EXEN2, SFR_T2CON, 3);            // Timer 2 External Enable Flag
           =4 SBIT (TR2, SFR_T2CON, 2);              // Timer 2 On/Off Control
           =4 SBIT (CT2, SFR_T2CON, 1);              // Timer Or Counter Select
           =4 SBIT (CPRL2, SFR_T2CON, 0);            // Capture Or Reload Select
           =4 
           =4 //  PSW 0xD0
           =4 SBIT (CY, SFR_PSW, 7);                 // Carry Flag
           =4 SBIT (AC, SFR_PSW, 6);                 // Auxiliary Carry Flag
           =4 SBIT (F0, SFR_PSW, 5);                 // User Flag 0
           =4 SBIT (RS1, SFR_PSW, 4);                // Register Bank Select 1
           =4 SBIT (RS0, SFR_PSW, 3);                // Register Bank Select 0
           =4 SBIT (OV, SFR_PSW, 2);                 // Overflow Flag
           =4 SBIT (F1, SFR_PSW, 1);                 // User Flag 1
           =4 SBIT (P, SFR_PSW, 0);                  // Accumulator Parity Flag
           =4 
           =4 // PCA0CN 0xD8
           =4 SBIT (CF, SFR_PCA0CN, 7);              // PCA 0 Counter Overflow Flag
           =4 SBIT (CR, SFR_PCA0CN, 6);              // PCA 0 Counter Run Control Bit
           =4                                        // Bit5 UNUSED
           =4 SBIT (CCF4, SFR_PCA0CN, 4);            // PCA 0 Module 4 Interrupt Flag
           =4 SBIT (CCF3, SFR_PCA0CN, 3);            // PCA 0 Module 3 Interrupt Flag
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 66  

           =4 SBIT (CCF2, SFR_PCA0CN, 2);            // PCA 0 Module 2 Interrupt Flag
           =4 SBIT (CCF1, SFR_PCA0CN, 1);            // PCA 0 Module 1 Interrupt Flag
           =4 SBIT (CCF0, SFR_PCA0CN, 0);            // PCA 0 Module 0 Interrupt Flag
           =4 
           =4 // ADC0CN 0xE8
           =4 SBIT (AD0EN, SFR_ADC0CN, 7);           // ADC 0 Enable
           =4 SBIT (AD0TM, SFR_ADC0CN, 6);           // ADC 0 Track Mode
           =4 SBIT (AD0INT, SFR_ADC0CN, 5);          // ADC 0 Converision Complete Interrupt Flag
           =4 SBIT (AD0BUSY, SFR_ADC0CN, 4);         // ADC 0 Busy Flag
           =4 SBIT (AD0CM1, SFR_ADC0CN, 3);          // ADC 0 Start Of Conversion Mode Bit 1
           =4 SBIT (AD0CM0, SFR_ADC0CN, 2);          // ADC 0 Start Of Conversion Mode Bit 0
           =4 SBIT (AD0WINT, SFR_ADC0CN, 1);         // ADC 0 Window Compare Interrupt Flag
           =4 SBIT (AD0LJST, SFR_ADC0CN, 0);         // ADC 0 Right Justify Data Bit
           =4 
           =4 // SPI0CN 0xF8
           =4 SBIT (SPIF, SFR_SPI0CN, 7);            // SPI 0 Interrupt Flag
           =4 SBIT (WCOL, SFR_SPI0CN, 6);            // SPI 0 Write Collision Flag
           =4 SBIT (MODF, SFR_SPI0CN, 5);            // SPI 0 Mode Fault Flag
           =4 SBIT (RXOVRN, SFR_SPI0CN, 4);          // SPI 0 Rx Overrun Flag
           =4 SBIT (TXBSY, SFR_SPI0CN, 3);           // SPI 0 Tx Busy Flag
           =4 SBIT (SLVSEL, SFR_SPI0CN, 2);          // SPI 0 Slave Select
           =4 SBIT (MSTEN, SFR_SPI0CN, 1);           // SPI 0 Master Enable
           =4 SBIT (SPIEN, SFR_SPI0CN, 0);           // SPI 0 SPI Enable
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // Interrupt Priorities
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #define INTERRUPT_INT0           0     // External Interrupt 0
           =4 #define INTERRUPT_TIMER0         1     // Timer0 Overflow
           =4 #define INTERRUPT_INT1           2     // External Interrupt 1
           =4 #define INTERRUPT_TIMER1         3     // Timer1 Overflow
           =4 #define INTERRUPT_UART0          4     // Serial Port UART0
           =4 #define INTERRUPT_TIMER2         5     // Timer2 Overflow
           =4 #define INTERRUPT_SPI0           6     // SPI0 Interface
           =4 #define INTERRUPT_SMBUS0         7     // SMBus0 Interface
           =4 #define INTERRUPT_ADC0_WINDOW    8     // ADC0 Window Comparison
           =4 #define INTERRUPT_PCA0           9     // PCA0 Peripheral
           =4 #define INTERRUPT_COMPARATOR0F   10    // Comparator0 Falling Edge
           =4 #define INTERRUPT_COMPARATOR0R   11    // Comparator0 Rising Edge
           =4 #define INTERRUPT_COMPARATOR1F   12    // Comparator1 Falling Edge
           =4 #define INTERRUPT_COMPARATOR1R   13    // Comparator1 Rising Edge
           =4 #define INTERRUPT_TIMER3         14    // Timer3 Overflow
           =4 #define INTERRUPT_ADC0_EOC       15    // ADC0 End Of Conversion
           =4 #define INTERRUPT_TIMER4         16    // Timer4 Overflow
           =4 #define INTERRUPT_ADC1_EOC       17    // ADC1 End Of Conversion
           =4 #define INTERRUPT_INT6           18    // External Interrupt 6
           =4 #define INTERRUPT_INT7           19    // External Interrupt 7
           =4 #define INTERRUPT_UART1          20    // Serial Port UART1
           =4 #define INTERRUPT_XTAL_READY     21    // External Crystal Oscillator Ready
           =4 
           =4 //-----------------------------------------------------------------------------
           =4 // SDCC PDATA External Memory Paging Support
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #if defined SDCC
           =4 
           =4 SFR(_XPAGE, 0xAF); // Point to the EMI0CN register
           =4 
           =4 #endif
           =4 
           =4 //-----------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 67  

           =4 // Header File PreProcessor Directive
           =4 //-----------------------------------------------------------------------------
           =4 
           =4 #endif                                 // #define C8051F020_DEFS_H
 347      =4  
 348      =4  //-----------------------------------------------------------------------------
 349      =4  // End Of File
 350      =4  //-----------------------------------------------------------------------------
   6      =3  /*****************************************************************************/
   7      =3  void initDeviceF020(void);
   8      =3  #endif
 101      =2  #include "delay.h"
   1      =3  #ifndef __DELAY_H__
   2      =3  #define __DELAY_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
           =2 #include "i2c0.h"
           =2 #include "eprom.h"
           =2 #include "dac8568_0.h"
           =2 #include "dac8568_1.h"
           =2 #include "dac8568_2.h"
           =2 #include "dac8568_3.h"
           =2 #include "boxCmd.h"
           =2 /*****************************************************************************/
           =2 #include "Modbus.h"
           =2 #include "ModbusPort.h"
           =2 /*****************************************************************************/
           =2 #include "sPLC.h"
           =2 /*****************************************************************************/
           =2 #endif
   4      =3  #ifndef __DELAY_H__
   4      =3  #define __DELAY_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void delayMs(uint8_t ms) reentrant;
   7      =3  void delayUs(uint8_t us) reentrant;
   8      =3  void hwDelayInit(uint8_t reload_h, uint8_t reload_l);
   9      =3  void hwDelay(uint8_t control, uint8_t reload_h, uint8_t reload_l);
  10      =3  /*****************************************************************************/
  11      =3  #endif
  12      =3  
   1      =3  #ifndef __I2C0_H__
   2      =3  #define __I2C0_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C0_H__
   4      =3  #define __I2C0_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic0Init(void);
   9      =3  void iic0Start(void);
  10      =3  void iic0Stop(void);
  11      =3  uint8_t iic0WaitAck(void);
  12      =3  void iic0Ack(void);
  13      =3  void iic0NAck(void);
  14      =3  void iic0SendByte(uint8_t txd);
  15      =3  uint8_t iic0ReadByte(uint8_t ack);
  16      =3  
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 68  

  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __EPROM_H__
   2      =3  #define __EPROM_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __EPROM_H__
   4      =3  #define __EPROM_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  /*****************************************************************************/
   7      =3  void epromInit(void);
   8      =3  uint8_t epromReadOneByte(uint16_t ReadAddr);
   9      =3  void epromWriteOneByte(uint16_t WriteAddr, uint8_t DataToWrite);
  10      =3  void epromWriteLenByte(uint16_t WriteAddr, uint32_t DataToWrite, uint8_t Len);
  11      =3  uint32_t epromReadLenByte(uint16_t ReadAddr, uint8_t Len);
  12      =3  void epromRead(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead);
  13      =3  void epromWrite(uint16_t WriteAddr, uint8_t *pBuffer, uint16_t NumToWrite);
  14      =3  void epromTest(void);
  15      =3  #endif
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_0_Init(void);
   4      =3  void dac8568_0_Update(uint8_t ch);
   5      =3  void dac8568_0_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_0_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_0_Clear(void);
   8      =3  void dac8568_0_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_1_Init(void);
   4      =3  void dac8568_1_Update(uint8_t ch);
   5      =3  void dac8568_1_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_1_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_1_Clear(void);
   8      =3  void dac8568_1_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_2_Init(void);
   4      =3  void dac8568_2_Update(uint8_t ch);
   5      =3  void dac8568_2_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_2_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_2_Clear(void);
   8      =3  void dac8568_2_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_3_Init(void);
   4      =3  void dac8568_3_Update(uint8_t ch);
   5      =3  void dac8568_3_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_3_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_3_Clear(void);
   8      =3  void dac8568_3_Reset(void);
   1      =3  #ifndef __BOXCMD_H__
   2      =3  #define __BOXCMD_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 69  

   4      =3  #ifndef __BOXCMD_H__
   4      =3  #define __BOXCMD_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void initboxSerial(uint32_t baudrate);
   7      =3  void boxRedLedRefresh(void);
   8      =3  void boxGreenLedRefresh(void);
   9      =3  #endif
   1      =3  #ifndef __MODBUS__H__
   2      =3  #define __MODBUS__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUS__H__
   4      =3  #define __MODBUS__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern volatile uint16_t modbusTimerValue;
   7      =3  extern volatile uint8_t modbusReceiveCounter;// Collected data number
   8      =3  extern xdata volatile uint8_t modbusReceiveBuffer[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];
   9      =3  /*****************************************************************************/
  10      =3  extern void initModbus(uint8_t modbusSlaveAddress, uint32_t bd);
  11      =3  extern void modbusPorcess(void);
  12      =3  #endif
   1      =3  #ifndef __MODBUSPORT__H__
   2      =3  #define __MODBUSPORT__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUSPORT__H__
   4      =3  #define __MODBUSPORT__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern void modBusUartInitialise(uint32_t baudrate);
   7      =3  extern void modBusTimerInitialise(void);
   8      =3  extern void modBusUartPutch(uint8_t c);
   9      =3  extern uint8_t modBusUartString(uint8_t *s, uint16_t Length);
  10      =3  extern void receiveInterrupt(uint8_t Data);
  11      =3  /*****************************************************************************/
  12      =3  #endif
   1      =3  #ifndef __SPLC_H__
           =3 #define __SPLC_H__
           =3 /*****************************************************************************/
           =3 #include "appConfig.h"
           =3 /*****************************************************************************/
           =3 //线圈 保持 4 * 16 = 64BIT
           =3 #define MR_START                                                0
           =3 #define MR_END                                                  3
           =3 //线圈寄存器 非保持 4 * 16 = 64BIT
           =3 #define R_START                                                 4
           =3 #define R_END                                                   7
           =3 //数据寄存器 保持 8
           =3 #define DM_START                                                8
           =3 #define DM_END                                                  15
           =3 //数据寄存器 非保持 128个字
           =3 #define EM_START                                                16
           =3 #define EM_END                                                  143
           =3 //延时线圈
           =3 //1MS 1 * 16 = 16BIT
           =3 #define T_1MS_START                                             144
           =3 #define T_1MS_END                                               144
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 70  

           =3 //10MS 1 * 16 = 16BIT
           =3 #define T_10MS_START                                    145
           =3 #define T_10MS_END                                              145
           =3 //100MS 1 * 16 = 16BIT
           =3 #define T_100MS_START                                   146
           =3 #define T_100MS_END                                             146
           =3 //延时计时器 
           =3 //1MS 32
           =3 #define TD_1MS_START                                    147
           =3 #define TD_1MS_END                                              162
           =3 //10MS 32
           =3 #define TD_10MS_START                                   163
           =3 #define TD_10MS_END                                             178
           =3 //100MS 32
           =3 #define TD_100MS_START                                  179
           =3 #define TD_100MS_END                                    194
           =3 //计数器 1
           =3 #define C_START                                                 195
           =3 #define C_END                                                   195
           =3 //输入位寄存器 1 * 16 = 128个
           =3 #define X_START                                                 196
           =3 #define X_END                                                   196                     
           =3 //输出位寄存器 1 * 16 = 128个
           =3 #define Y_START                                                 197
           =3 #define Y_END                                                   197
           =3 //特殊寄存器 4个字
           =3 #define SPREG_START                                             198
           =3 #define SPREG_END                                               201
           =3 //特殊线圈      4 * 16 = 64个
           =3 #define SPCOIL_START                                    202
           =3 #define SPCOIL_END                                              205
           =3 /*****************************************************************************/
           =3 #define EM_ADC_0                                                (EM_START + 0)//ADC0->MLD0
           =3 #define EM_ADC_1                                                (EM_START + 1)//ADC1->MLD1
           =3 #define EM_ADC_2                                                (EM_START + 2)//ADC2->MLD2
           =3 #define EM_ADC_3                                                (EM_START + 3)//ADC3->MLD3
           =3 #define EM_ADC_4                                                (EM_START + 4)//ADC4->MLD4
           =3 #define EM_ADC_5                                                (EM_START + 5)//ADC5->MLD5
           =3 #define EM_ADC_6                                                (EM_START + 6)//ADC6->MLD6
           =3 #define EM_ADC_7                                                (EM_START + 7)//ADC7->MLD7
           =3 #define EM_ADC_8                                                (EM_START + 8)//ADC8->MLD8
           =3 #define EM_ADC_9                                                (EM_START + 9)//ADC9->MLD9
           =3 #define EM_ADC_10                                               (EM_START + 10)//ADC10->MLD10
           =3 #define EM_ADC_11                                               (EM_START + 11)//ADC11->MLD11
           =3 #define EM_ADC_12                                               (EM_START + 12)//ADC12->MLD12
           =3 #define EM_ADC_13                                               (EM_START + 13)//ADC13->MLD13
           =3 #define EM_ADC_14                                               (EM_START + 14)//ADC14->MLD14
           =3 #define EM_ADC_15                                               (EM_START + 15)//ADC15->MLD15
           =3 #define EM_ADC_16                                               (EM_START + 16)//ADC16->MLD16
           =3 #define EM_ADC_17                                               (EM_START + 17)//ADC17->MLD17
           =3 #define EM_ADC_18                                               (EM_START + 18)//ADC18->MLD18
           =3 #define EM_ADC_19                                               (EM_START + 19)//ADC19->MLD19
           =3 #define EM_ADC_20                                               (EM_START + 20)//ADC20->MLD20
           =3 #define EM_ADC_21                                               (EM_START + 21)//ADC21->MLD21
           =3 #define EM_ADC_22                                               (EM_START + 22)//ADC22->MLD22
           =3 #define EM_ADC_23                                               (EM_START + 23)//ADC23->MLD23
           =3 #define EM_ADC_24                                               (EM_START + 24)//ADC24->MLD24
           =3 #define EM_ADC_25                                               (EM_START + 25)//ADC25->MLD25
           =3 #define EM_ADC_26                                               (EM_START + 26)//ADC26->MLD26
           =3 #define EM_ADC_27                                               (EM_START + 27)//ADC27->MLD27
           =3 #define EM_ADC_28                                               (EM_START + 28)//ADC28->MLD28
           =3 #define EM_ADC_29                                               (EM_START + 29)//ADC29->MLD29
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 71  

           =3 #define EM_ADC_30                                               (EM_START + 30)//ADC30->MLD30
           =3 #define EM_ADC_31                                               (EM_START + 31)//ADC31->MLD31
           =3 #define EM_ADC_32                                               (EM_START + 32)//ADC32->MPD0
           =3 #define EM_ADC_33                                               (EM_START + 33)//ADC33->MPD1
           =3 #define EM_ADC_34                                               (EM_START + 34)//ADC34->MPD2
           =3 #define EM_ADC_35                                               (EM_START + 35)//ADC35->MPD3
           =3 #define EM_ADC_36                                               (EM_START + 36)//ADC36->MPD4
           =3 #define EM_ADC_37                                               (EM_START + 37)//ADC37->MPD5
           =3 #define EM_ADC_38                                               (EM_START + 38)//ADC38->MPD6
           =3 #define EM_ADC_39                                               (EM_START + 39)//ADC39->MPD7
           =3 #define EM_ADC_40                                               (EM_START + 40)//ADC40->MPD8
           =3 #define EM_ADC_41                                               (EM_START + 41)//ADC41->MPD9
           =3 #define EM_ADC_42                                               (EM_START + 42)//ADC42->MPD10
           =3 #define EM_ADC_43                                               (EM_START + 43)//ADC42->MPD11
           =3 #define EM_ADC_44                                               (EM_START + 44)//ADC42->MPD12
           =3 #define EM_ADC_45                                               (EM_START + 45)//ADC42->MPD13
           =3 #define EM_ADC_46                                               (EM_START + 46)//ADC42->MPD14
           =3 #define EM_ADC_47                                               (EM_START + 47)//ADC42->MPD15
           =3 #define EM_ADC_48                                               (EM_START + 48)//ADC42->MPD16
           =3 #define EM_ADC_49                                               (EM_START + 49)//ADC42->MPD17
           =3 #define EM_ADC_50                                               (EM_START + 50)//ADC42->MPD18
           =3 #define EM_ADC_51                                               (EM_START + 51)//ADC42->MPD19
           =3 #define EM_ADC_52                                               (EM_START + 52)//ADC42->MPD20
           =3 #define EM_ADC_53                                               (EM_START + 53)//ADC43->MPD21
           =3 #define EM_ADC_54                                               (EM_START + 54)//ADC44->MPD22
           =3 #define EM_ADC_55                                               (EM_START + 55)//ADC45->MPD23
           =3 #define EM_ADC_56                                               (EM_START + 56)//ADC46->MPD24
           =3 #define EM_ADC_57                                               (EM_START + 57)//ADC47->MPD25
           =3 #define EM_ADC_58                                               (EM_START + 58)//ADC48->MPD26
           =3 #define EM_ADC_59                                               (EM_START + 59)//ADC49->MPD27
           =3 #define EM_ADC_60                                               (EM_START + 60)//ADC50->MPD28
           =3 #define EM_ADC_61                                               (EM_START + 61)//ADC50->MPD29
           =3 #define EM_ADC_62                                               (EM_START + 62)//ADC50->MPD30
           =3 #define EM_ADC_63                                               (EM_START + 63)//ADC50->MPD31
           =3 #define EM_DAC_0                                                (EM_START + 64)//DAC0
           =3 #define EM_DAC_1                                                (EM_START + 65)//DAC1
           =3 #define EM_DAC_2                                                (EM_START + 66)//DAC2
           =3 #define EM_DAC_3                                                (EM_START + 67)//DAC3
           =3 #define EM_DAC_4                                                (EM_START + 68)//DAC4
           =3 #define EM_DAC_5                                                (EM_START + 69)//DAC5
           =3 #define EM_DAC_6                                                (EM_START + 70)//DAC6
           =3 #define EM_DAC_7                                                (EM_START + 71)//DAC7
           =3 #define EM_DAC_8                                                (EM_START + 72)//DAC8
           =3 #define EM_DAC_9                                                (EM_START + 73)//DAC9
           =3 #define EM_DAC_10                                               (EM_START + 74)//DAC10
           =3 #define EM_DAC_11                                               (EM_START + 75)//DAC11
           =3 #define EM_DAC_12                                               (EM_START + 76)//DAC12
           =3 #define EM_DAC_13                                               (EM_START + 77)//DAC13
           =3 #define EM_DAC_14                                               (EM_START + 78)//DAC14
           =3 #define EM_DAC_15                                               (EM_START + 79)//DAC15
           =3 #define EM_DAC_16                                               (EM_START + 80)//DAC16
           =3 #define EM_DAC_17                                               (EM_START + 81)//DAC17
           =3 #define EM_DAC_18                                               (EM_START + 82)//DAC18
           =3 #define EM_DAC_19                                               (EM_START + 83)//DAC19
           =3 #define EM_DAC_20                                               (EM_START + 84)//DAC20
           =3 #define EM_DAC_21                                               (EM_START + 85)//DAC21
           =3 #define EM_DAC_22                                               (EM_START + 86)//DAC22
           =3 #define EM_DAC_23                                               (EM_START + 87)//DAC23
           =3 #define EM_DAC_24                                               (EM_START + 88)//DAC24
           =3 #define EM_DAC_25                                               (EM_START + 89)//DAC25
           =3 #define EM_DAC_26                                               (EM_START + 90)//DAC26
           =3 #define EM_DAC_27                                               (EM_START + 91)//DAC27
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 72  

           =3 #define EM_DAC_28                                               (EM_START + 92)//DAC28
           =3 #define EM_DAC_29                                               (EM_START + 93)//DAC29
           =3 #define EM_DAC_30                                               (EM_START + 94)//DAC30
           =3 #define EM_DAC_31                                               (EM_START + 95)//DAC31
           =3 /*****************************************************************************/
           =3 #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
           =3 /*****************************************************************************/
           =3 #define SPCOIL_ON                                               0//长通线圈
           =3 #define SPCOIL_PS1MS                                    1//1mS间隔 50%占空比脉冲
           =3 #define SPCOIL_PS10MS                                   2//10mS
           =3 #define SPCOIL_PS100MS                                  3//100mS
           =3 /*****************************************************************************/
           =3 #define SP_EM_MODBUS_SLAVE_ERR                  300
           =3 #define SP_R_ON                                                 800//上电ON
           =3 #define SP_R_TICK_1MS                                   801//
           =3 #define SP_R_TICK_10MS                                  802//
           =3 #define SP_R_TICK_100MS                                 803//
           =3 #define SP_R_TICK_1S                                    804//
           =3 /*****************************************************************************/
           =3 typedef struct{//ADC滤波器
           =3         uint16_t dat[CONFIG_SPLC_ADC_FILTER_TAP];
           =3         uint16_t out;
           =3         uint8_t wIndex;//写入指针
           =3 }adcTempDat_t;
           =3 /*****************************************************************************/
           =3 extern uint16_t ModbusSlaveAsciiOverTimeCounter;//Modbus Slave通信超时计时器
           =3 extern xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
           =3 extern xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
           =3 /*****************************************************************************/
           =3 void wdtDisable(void);//看门狗屏蔽
           =3 void sPlcInit(void);//软逻辑初始化
           =3 void sPlcProcessStart(void);//sPLC轮询起始
           =3 void sPlcProcessEnd(void);//sPLC轮询结束
           =3 /*****************************************************************************/
           =3 void assertCoilAddress(uint16_t adr);
           =3 void assertRegisterAddress(uint16_t adr);
           =3 /*****************************************************************************/
           =3 void nvramUpdata(void);
           =3 void clearDM(void);
           =3 void clearEM(void);
           =3 void clearR(void);
           =3 void clearT(void);
           =3 void clearTD(void);
           =3 void clearC(void);
           =3 void nvramLoad(void);
           =3 void nvramSave(void);
           =3 void nvramUpdata(void);
           =3 /*****************************************************************************/
           =3 void SET(uint16_t A);//置位
           =3 void RESET(uint16_t A);//复位
           =3 void FLIP(uint16_t A);//翻转
           =3 uint8_t LD(uint16_t A);//载入
           =3 uint8_t LDP(uint16_t A);//脉冲上升沿
           =3 uint8_t LDN(uint16_t A);//脉冲下降沿
           =3 void T100US(uint8_t A, uint8_t start, uint16_t value);
           =3 void T1MS(uint8_t A, uint8_t start, uint16_t value);
           =3 void T10MS(uint8_t A, uint8_t start, uint16_t value);
           =3 void T100MS(uint8_t A, uint8_t start, uint16_t value);
           =3 /*****************************************************************************/
           =3 void chipDacInit(void);
           =3 void chipAdcInit(void);
           =3 void sPlcInit(void);
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 73  

           =3 void refreshInput(void);
           =3 void refreshOutput(void);
           =3 void refreshDac(void);
           =3 /*****************************************************************************/
           =3 #endif
   5      =1  /*****************************************************************************/
   6      =1  //线圈 保持 4 * 16 = 64BIT
   7      =1  #define MR_START                                                0
   8      =1  #define MR_END                                                  3
   9      =1  //线圈寄存器 非保持 4 * 16 = 64BIT
  10      =1  #define R_START                                                 4
  11      =1  #define R_END                                                   7
  12      =1  //数据寄存器 保持 8
  13      =1  #define DM_START                                                8
  14      =1  #define DM_END                                                  15
  15      =1  //数据寄存器 非保持 128个字
  16      =1  #define EM_START                                                16
  17      =1  #define EM_END                                                  143
  18      =1  //延时线圈
  19      =1  //1MS 1 * 16 = 16BIT
  20      =1  #define T_1MS_START                                             144
  21      =1  #define T_1MS_END                                               144
  22      =1  //10MS 1 * 16 = 16BIT
  23      =1  #define T_10MS_START                                    145
  24      =1  #define T_10MS_END                                              145
  25      =1  //100MS 1 * 16 = 16BIT
  26      =1  #define T_100MS_START                                   146
  27      =1  #define T_100MS_END                                             146
  28      =1  //延时计时器 
  29      =1  //1MS 32
  30      =1  #define TD_1MS_START                                    147
  31      =1  #define TD_1MS_END                                              162
  32      =1  //10MS 32
  33      =1  #define TD_10MS_START                                   163
  34      =1  #define TD_10MS_END                                             178
  35      =1  //100MS 32
  36      =1  #define TD_100MS_START                                  179
  37      =1  #define TD_100MS_END                                    194
  38      =1  //计数器 1
  39      =1  #define C_START                                                 195
  40      =1  #define C_END                                                   195
  41      =1  //输入位寄存器 1 * 16 = 128个
  42      =1  #define X_START                                                 196
  43      =1  #define X_END                                                   196                     
  44      =1  //输出位寄存器 1 * 16 = 128个
  45      =1  #define Y_START                                                 197
  46      =1  #define Y_END                                                   197
  47      =1  //特殊寄存器 4个字
  48      =1  #define SPREG_START                                             198
  49      =1  #define SPREG_END                                               201
  50      =1  //特殊线圈      4 * 16 = 64个
  51      =1  #define SPCOIL_START                                    202
  52      =1  #define SPCOIL_END                                              205
  53      =1  /*****************************************************************************/
  54      =1  #define EM_ADC_0                                                (EM_START + 0)//ADC0->MLD0
  55      =1  #define EM_ADC_1                                                (EM_START + 1)//ADC1->MLD1
  56      =1  #define EM_ADC_2                                                (EM_START + 2)//ADC2->MLD2
  57      =1  #define EM_ADC_3                                                (EM_START + 3)//ADC3->MLD3
  58      =1  #define EM_ADC_4                                                (EM_START + 4)//ADC4->MLD4
  59      =1  #define EM_ADC_5                                                (EM_START + 5)//ADC5->MLD5
  60      =1  #define EM_ADC_6                                                (EM_START + 6)//ADC6->MLD6
  61      =1  #define EM_ADC_7                                                (EM_START + 7)//ADC7->MLD7
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 74  

  62      =1  #define EM_ADC_8                                                (EM_START + 8)//ADC8->MLD8
  63      =1  #define EM_ADC_9                                                (EM_START + 9)//ADC9->MLD9
  64      =1  #define EM_ADC_10                                               (EM_START + 10)//ADC10->MLD10
  65      =1  #define EM_ADC_11                                               (EM_START + 11)//ADC11->MLD11
  66      =1  #define EM_ADC_12                                               (EM_START + 12)//ADC12->MLD12
  67      =1  #define EM_ADC_13                                               (EM_START + 13)//ADC13->MLD13
  68      =1  #define EM_ADC_14                                               (EM_START + 14)//ADC14->MLD14
  69      =1  #define EM_ADC_15                                               (EM_START + 15)//ADC15->MLD15
  70      =1  #define EM_ADC_16                                               (EM_START + 16)//ADC16->MLD16
  71      =1  #define EM_ADC_17                                               (EM_START + 17)//ADC17->MLD17
  72      =1  #define EM_ADC_18                                               (EM_START + 18)//ADC18->MLD18
  73      =1  #define EM_ADC_19                                               (EM_START + 19)//ADC19->MLD19
  74      =1  #define EM_ADC_20                                               (EM_START + 20)//ADC20->MLD20
  75      =1  #define EM_ADC_21                                               (EM_START + 21)//ADC21->MLD21
  76      =1  #define EM_ADC_22                                               (EM_START + 22)//ADC22->MLD22
  77      =1  #define EM_ADC_23                                               (EM_START + 23)//ADC23->MLD23
  78      =1  #define EM_ADC_24                                               (EM_START + 24)//ADC24->MLD24
  79      =1  #define EM_ADC_25                                               (EM_START + 25)//ADC25->MLD25
  80      =1  #define EM_ADC_26                                               (EM_START + 26)//ADC26->MLD26
  81      =1  #define EM_ADC_27                                               (EM_START + 27)//ADC27->MLD27
  82      =1  #define EM_ADC_28                                               (EM_START + 28)//ADC28->MLD28
  83      =1  #define EM_ADC_29                                               (EM_START + 29)//ADC29->MLD29
  84      =1  #define EM_ADC_30                                               (EM_START + 30)//ADC30->MLD30
  85      =1  #define EM_ADC_31                                               (EM_START + 31)//ADC31->MLD31
  86      =1  #define EM_ADC_32                                               (EM_START + 32)//ADC32->MPD0
  87      =1  #define EM_ADC_33                                               (EM_START + 33)//ADC33->MPD1
  88      =1  #define EM_ADC_34                                               (EM_START + 34)//ADC34->MPD2
  89      =1  #define EM_ADC_35                                               (EM_START + 35)//ADC35->MPD3
  90      =1  #define EM_ADC_36                                               (EM_START + 36)//ADC36->MPD4
  91      =1  #define EM_ADC_37                                               (EM_START + 37)//ADC37->MPD5
  92      =1  #define EM_ADC_38                                               (EM_START + 38)//ADC38->MPD6
  93      =1  #define EM_ADC_39                                               (EM_START + 39)//ADC39->MPD7
  94      =1  #define EM_ADC_40                                               (EM_START + 40)//ADC40->MPD8
  95      =1  #define EM_ADC_41                                               (EM_START + 41)//ADC41->MPD9
  96      =1  #define EM_ADC_42                                               (EM_START + 42)//ADC42->MPD10
  97      =1  #define EM_ADC_43                                               (EM_START + 43)//ADC42->MPD11
  98      =1  #define EM_ADC_44                                               (EM_START + 44)//ADC42->MPD12
  99      =1  #define EM_ADC_45                                               (EM_START + 45)//ADC42->MPD13
 100      =1  #define EM_ADC_46                                               (EM_START + 46)//ADC42->MPD14
 101      =1  #define EM_ADC_47                                               (EM_START + 47)//ADC42->MPD15
 102      =1  #define EM_ADC_48                                               (EM_START + 48)//ADC42->MPD16
 103      =1  #define EM_ADC_49                                               (EM_START + 49)//ADC42->MPD17
 104      =1  #define EM_ADC_50                                               (EM_START + 50)//ADC42->MPD18
 105      =1  #define EM_ADC_51                                               (EM_START + 51)//ADC42->MPD19
 106      =1  #define EM_ADC_52                                               (EM_START + 52)//ADC42->MPD20
 107      =1  #define EM_ADC_53                                               (EM_START + 53)//ADC43->MPD21
 108      =1  #define EM_ADC_54                                               (EM_START + 54)//ADC44->MPD22
 109      =1  #define EM_ADC_55                                               (EM_START + 55)//ADC45->MPD23
 110      =1  #define EM_ADC_56                                               (EM_START + 56)//ADC46->MPD24
 111      =1  #define EM_ADC_57                                               (EM_START + 57)//ADC47->MPD25
 112      =1  #define EM_ADC_58                                               (EM_START + 58)//ADC48->MPD26
 113      =1  #define EM_ADC_59                                               (EM_START + 59)//ADC49->MPD27
 114      =1  #define EM_ADC_60                                               (EM_START + 60)//ADC50->MPD28
 115      =1  #define EM_ADC_61                                               (EM_START + 61)//ADC50->MPD29
 116      =1  #define EM_ADC_62                                               (EM_START + 62)//ADC50->MPD30
 117      =1  #define EM_ADC_63                                               (EM_START + 63)//ADC50->MPD31
 118      =1  #define EM_DAC_0                                                (EM_START + 64)//DAC0
 119      =1  #define EM_DAC_1                                                (EM_START + 65)//DAC1
 120      =1  #define EM_DAC_2                                                (EM_START + 66)//DAC2
 121      =1  #define EM_DAC_3                                                (EM_START + 67)//DAC3
 122      =1  #define EM_DAC_4                                                (EM_START + 68)//DAC4
 123      =1  #define EM_DAC_5                                                (EM_START + 69)//DAC5
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 75  

 124      =1  #define EM_DAC_6                                                (EM_START + 70)//DAC6
 125      =1  #define EM_DAC_7                                                (EM_START + 71)//DAC7
 126      =1  #define EM_DAC_8                                                (EM_START + 72)//DAC8
 127      =1  #define EM_DAC_9                                                (EM_START + 73)//DAC9
 128      =1  #define EM_DAC_10                                               (EM_START + 74)//DAC10
 129      =1  #define EM_DAC_11                                               (EM_START + 75)//DAC11
 130      =1  #define EM_DAC_12                                               (EM_START + 76)//DAC12
 131      =1  #define EM_DAC_13                                               (EM_START + 77)//DAC13
 132      =1  #define EM_DAC_14                                               (EM_START + 78)//DAC14
 133      =1  #define EM_DAC_15                                               (EM_START + 79)//DAC15
 134      =1  #define EM_DAC_16                                               (EM_START + 80)//DAC16
 135      =1  #define EM_DAC_17                                               (EM_START + 81)//DAC17
 136      =1  #define EM_DAC_18                                               (EM_START + 82)//DAC18
 137      =1  #define EM_DAC_19                                               (EM_START + 83)//DAC19
 138      =1  #define EM_DAC_20                                               (EM_START + 84)//DAC20
 139      =1  #define EM_DAC_21                                               (EM_START + 85)//DAC21
 140      =1  #define EM_DAC_22                                               (EM_START + 86)//DAC22
 141      =1  #define EM_DAC_23                                               (EM_START + 87)//DAC23
 142      =1  #define EM_DAC_24                                               (EM_START + 88)//DAC24
 143      =1  #define EM_DAC_25                                               (EM_START + 89)//DAC25
 144      =1  #define EM_DAC_26                                               (EM_START + 90)//DAC26
 145      =1  #define EM_DAC_27                                               (EM_START + 91)//DAC27
 146      =1  #define EM_DAC_28                                               (EM_START + 92)//DAC28
 147      =1  #define EM_DAC_29                                               (EM_START + 93)//DAC29
 148      =1  #define EM_DAC_30                                               (EM_START + 94)//DAC30
 149      =1  #define EM_DAC_31                                               (EM_START + 95)//DAC31
 150      =1  /*****************************************************************************/
 151      =1  #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
 152      =1  /*****************************************************************************/
 153      =1  #define SPCOIL_ON                                               0//长通线圈
 154      =1  #define SPCOIL_PS1MS                                    1//1mS间隔 50%占空比脉冲
 155      =1  #define SPCOIL_PS10MS                                   2//10mS
 156      =1  #define SPCOIL_PS100MS                                  3//100mS
 157      =1  /*****************************************************************************/
 158      =1  #define SP_EM_MODBUS_SLAVE_ERR                  300
 159      =1  #define SP_R_ON                                                 800//上电ON
 160      =1  #define SP_R_TICK_1MS                                   801//
 161      =1  #define SP_R_TICK_10MS                                  802//
 162      =1  #define SP_R_TICK_100MS                                 803//
 163      =1  #define SP_R_TICK_1S                                    804//
 164      =1  /*****************************************************************************/
 165      =1  typedef struct{//ADC滤波器
 166      =1          uint16_t dat[CONFIG_SPLC_ADC_FILTER_TAP];
 167      =1          uint16_t out;
 168      =1          uint8_t wIndex;//写入指针
 169      =1  }adcTempDat_t;
 170      =1  /*****************************************************************************/
 171      =1  extern uint16_t ModbusSlaveAsciiOverTimeCounter;//Modbus Slave通信超时计时器
 172      =1  extern xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
 173      =1  extern xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
 174      =1  /*****************************************************************************/
 175      =1  void wdtDisable(void);//看门狗屏蔽
 176      =1  void sPlcInit(void);//软逻辑初始化
 177      =1  void sPlcProcessStart(void);//sPLC轮询起始
 178      =1  void sPlcProcessEnd(void);//sPLC轮询结束
 179      =1  /*****************************************************************************/
 180      =1  void assertCoilAddress(uint16_t adr);
 181      =1  void assertRegisterAddress(uint16_t adr);
 182      =1  /*****************************************************************************/
 183      =1  void nvramUpdata(void);
 184      =1  void clearDM(void);
 185      =1  void clearEM(void);
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 76  

 186      =1  void clearR(void);
 187      =1  void clearT(void);
 188      =1  void clearTD(void);
 189      =1  void clearC(void);
 190      =1  void nvramLoad(void);
 191      =1  void nvramSave(void);
 192      =1  void nvramUpdata(void);
 193      =1  /*****************************************************************************/
 194      =1  void SET(uint16_t A);//置位
 195      =1  void RESET(uint16_t A);//复位
 196      =1  void FLIP(uint16_t A);//翻转
 197      =1  uint8_t LD(uint16_t A);//载入
 198      =1  uint8_t LDP(uint16_t A);//脉冲上升沿
 199      =1  uint8_t LDN(uint16_t A);//脉冲下降沿
 200      =1  void T100US(uint8_t A, uint8_t start, uint16_t value);
 201      =1  void T1MS(uint8_t A, uint8_t start, uint16_t value);
 202      =1  void T10MS(uint8_t A, uint8_t start, uint16_t value);
 203      =1  void T100MS(uint8_t A, uint8_t start, uint16_t value);
 204      =1  /*****************************************************************************/
 205      =1  void chipDacInit(void);
 206      =1  void chipAdcInit(void);
 207      =1  void sPlcInit(void);
 208      =1  void refreshInput(void);
 209      =1  void refreshOutput(void);
 210      =1  void refreshDac(void);
 211      =1  /*****************************************************************************/
 212      =1  #endif
   2          /*****************************************************************************/
   3          //ADC MUX3253 CH0-CH3
   4          sbit ADCMUX_0_3_S0 = P1^4;
   5          sbit ADCMUX_0_3_S1      = P1^7;
   6          sbit ADCMUX_0_3_OE1 = P1^6;
   7          sbit ADCMUX_0_3_OE2 = P1^5;
   8          //ADC MUX3253 CH4-CH7
   9          sbit ADCMUX_4_7_S0 = P1^2;
  10          sbit ADCMUX_4_7_S1 = P1^1;
  11          sbit ADCMUC_4_7_OE1 = P1^0;
  12          sbit ADCMUC_4_7_OE2 = P1^3;
  13          //ADC MUX3253 CH8-CH11
  14          sbit ADCMUX_8_11_S0 = P2^4;
  15          sbit ADCMUX_8_11_S1 = P2^6;
  16          sbit ADCMUX_8_11_OE1 = P2^7;
  17          sbit ADCMUX_8_11_OE2 = P2^5;
  18          //ADC MUX3253 CH12-CH15
  19          sbit ADCMUX_12_15_S0 = P2^0;
  20          sbit ADCMUX_12_15_S1 = P2^2;
  21          sbit ADCMUX_12_15_OE1 = P2^3;
  22          sbit ADCMUX_12_15_OE2 = P2^1;
  23          //ADC MUX3253 CH16-CH19
  24          sbit ADCMUX_16_19_S0 = P3^5;
  25          sbit ADCMUX_16_19_S1 = P3^7;
  26          sbit ADCMUX_16_19_OE1 = P3^6;
  27          sbit ADCMUX_16_19_OE2 = P3^4;
  28          //ADC MUX3253 CH20-CH23
  29          sbit ADCMUX_20_23_S0 = P3^1;
  30          sbit ADCMUX_20_23_S1 = P3^3;
  31          sbit ADCMUX_20_23_OE1 = P3^2;
  32          sbit ADCMUX_20_23_OE2 = P3^0;
  33          //ADC MUX3253 CH24-CH27
  34          sbit ADCMUX_24_27_S0 = P0^5;
  35          sbit ADCMUX_24_27_S1 = P0^7;
  36          sbit ADCMUX_24_27_OE1 = P0^6;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 77  

  37          sbit ADCMUX_24_27_OE2 = P0^4;
  38          /*****************************************************************************/
  39          xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
  40          xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
  41          static data uint8_t TimerCounter_1mS = 0;
  42          static data uint8_t TimerCounter_10mS = 0;
  43          static data uint8_t Timer0_L, Timer0_H;
  44          /*****************************************************************************/
  45          static pdata int8_t inputFilter[(X_END - X_START + 1) * 16];//IO输入滤波器缓冲区
  46          static xdata adcTempDat_t adcTempDat[CONFIG_SPLC_ADC_CHANNLE];
  47          static uint8_t adcSelect;//ADC通道选择
  48          static void refreshAdcData(adcTempDat_t *s , uint16_t dat);
  49          static void adcProcess(void);
  50          static void initAdcData(adcTempDat_t *s);
  51          static void chipDacInit(void);
  52          static void chipAdcInit(void);
  53          /******************************************************************************/
  54          static void setLedRun(uint8_t st) reentrant{//LED RUN P7_0
  55   1              if(st){
  56   2                      P7 |= (uint8_t)(1 << 0);
  57   2              }
  58   1              else{
  59   2                      P7 &= ~(uint8_t)(1 << 0);
  60   2              }
  61   1      }
  62          static uint8_t getLedRun(void) reentrant{//LED RUN P7_0
  63   1              return (uint8_t)((P7 >> 0) & 0x01);
  64   1      }
  65          static void setLedEprom(uint8_t st) reentrant{//LED EPROM P7_1
  66   1              if(st){
  67   2                      P7 |= (uint8_t)(1 << 1);
  68   2              }
  69   1              else{
  70   2                      P7 &= ~(uint8_t)(1 << 1);
  71   2              }
  72   1      }
  73          static uint8_t getLedEprom(void) reentrant{//LED EPROM P7_1
  74   1              return (uint8_t)((P7 >> 1) & 0x01);
  75   1      }
  76          static void setLedDac(uint8_t st) reentrant{//LED DAC P7_2
  77   1              if(st){
  78   2                      P7 |= (uint8_t)(1 << 2);
  79   2              }
  80   1              else{
  81   2                      P7 &= ~(uint8_t)(1 << 2);
  82   2              }
  83   1      }
  84          static uint8_t getLedDac(void) reentrant{//LED DAC P7_2
  85   1              return (uint8_t)((P7 >> 2) & 0x01);
  86   1      }
  87          static void setLedError(uint8_t st) reentrant{//LED ERROR P7_3
  88   1              if(st){
  89   2                      P7 |= (uint8_t)(1 << 3);
  90   2              }
  91   1              else{
  92   2                      P7 &= ~(uint8_t)(1 << 3);
  93   2              }
  94   1      }
  95          static uint8_t getLedError(void) reentrant{
  96   1              return (uint8_t)((P7 >> 3) & 0x01);
  97   1      }
  98          static void adcProcess(void){//循环采集ADC
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 78  

  99   1              uint16_t result = 0;
 100   1      #ifdef C8051F020
 101   1              while(!AD0INT);
 102   1      #endif
 103   1              result = (uint16_t)(ADC0H << 8) + (uint16_t)(ADC0L);
 104   1              refreshAdcData(&adcTempDat[adcSelect], result);
 105   1              NVRAM0[EM_ADC_0 + adcSelect] = adcTempDat[adcSelect].out;
 106   1              if(adcSelect < (CONFIG_SPLC_ADC_CHANNLE - 1)){
 107   2                      adcSelect ++;
 108   2              }
 109   1              else{
 110   2                      adcSelect = 0;
 111   2              }
 112   1              switch(adcSelect){
 113   2                      case 0:{//MLD0
 114   3                              //ADC MUX
 115   3                              AMX0SL = 0x00;
 116   3                              //CHIP0
 117   3                              ADCMUX_0_3_OE1 = false;
 118   3                              ADCMUX_0_3_OE2 = true;
 119   3                              ADCMUX_0_3_S1 = false;
 120   3                              ADCMUX_0_3_S0 = true;
 121   3                              //CHIP1
 122   3                              ADCMUC_4_7_OE1 = true;
 123   3                              ADCMUC_4_7_OE2 = true;
 124   3                              //CHIP2
 125   3                              ADCMUX_8_11_OE1 = true;
 126   3                              ADCMUX_8_11_OE2 = true;
 127   3                              //CHIP3
 128   3                              ADCMUX_12_15_OE1 = true;
 129   3                              ADCMUX_12_15_OE2 = true;
 130   3                              //CHIP4
 131   3                              ADCMUX_16_19_OE1 = true;
 132   3                              ADCMUX_16_19_OE2 = true;
 133   3                              //CHIP5
 134   3                              ADCMUX_20_23_OE1 = true;
 135   3                              ADCMUX_20_23_OE2 = true;
 136   3                              //CHIP6
 137   3                              ADCMUX_24_27_OE1 = true;
 138   3                              ADCMUX_24_27_OE2 = true;
 139   3                              break;
 140   3                      }
 141   2                      case 1:{//MLD1
 142   3                              //ADC MUX
 143   3                              AMX0SL = 0x00;
 144   3                              //CHIP0
 145   3                              ADCMUX_0_3_OE1 = false;
 146   3                              ADCMUX_0_3_OE2 = true;
 147   3                              ADCMUX_0_3_S1 = true;
 148   3                              ADCMUX_0_3_S0 = true;
 149   3                              //CHIP1
 150   3                              ADCMUC_4_7_OE1 = true;
 151   3                              ADCMUC_4_7_OE2 = true;
 152   3                              //CHIP2
 153   3                              ADCMUX_8_11_OE1 = true;
 154   3                              ADCMUX_8_11_OE2 = true;
 155   3                              //CHIP3
 156   3                              ADCMUX_12_15_OE1 = true;
 157   3                              ADCMUX_12_15_OE2 = true;
 158   3                              //CHIP4
 159   3                              ADCMUX_16_19_OE1 = true;
 160   3                              ADCMUX_16_19_OE2 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 79  

 161   3                              //CHIP5
 162   3                              ADCMUX_20_23_OE1 = true;
 163   3                              ADCMUX_20_23_OE2 = true;
 164   3                              //CHIP6
 165   3                              ADCMUX_24_27_OE1 = true;
 166   3                              ADCMUX_24_27_OE2 = true;
 167   3                              break;
 168   3                      }
 169   2                      case 2:{//MLD2
 170   3                              //ADC MUX
 171   3                              AMX0SL = 0x00;
 172   3                              //CHIP0
 173   3                              ADCMUX_0_3_OE1 = true;
 174   3                              ADCMUX_0_3_OE2 = false;
 175   3                              ADCMUX_0_3_S1 = false;
 176   3                              ADCMUX_0_3_S0 = true;
 177   3                              //CHIP1
 178   3                              ADCMUC_4_7_OE1 = true;
 179   3                              ADCMUC_4_7_OE2 = true;
 180   3                              //CHIP2
 181   3                              ADCMUX_8_11_OE1 = true;
 182   3                              ADCMUX_8_11_OE2 = true;
 183   3                              //CHIP3
 184   3                              ADCMUX_12_15_OE1 = true;
 185   3                              ADCMUX_12_15_OE2 = true;
 186   3                              //CHIP4
 187   3                              ADCMUX_16_19_OE1 = true;
 188   3                              ADCMUX_16_19_OE2 = true;
 189   3                              //CHIP5
 190   3                              ADCMUX_20_23_OE1 = true;
 191   3                              ADCMUX_20_23_OE2 = true;
 192   3                              //CHIP6
 193   3                              ADCMUX_24_27_OE1 = true;
 194   3                              ADCMUX_24_27_OE2 = true;
 195   3                              break;
 196   3                      }
 197   2                      case 3:{//MLD3
 198   3                              //ADC MUX
 199   3                              AMX0SL = 0x00;
 200   3                              //CHIP0
 201   3                              ADCMUX_0_3_OE1 = true;
 202   3                              ADCMUX_0_3_OE2 = false;
 203   3                              ADCMUX_0_3_S1 = true;
 204   3                              ADCMUX_0_3_S0 = true;
 205   3                              //CHIP1
 206   3                              ADCMUC_4_7_OE1 = true;
 207   3                              ADCMUC_4_7_OE2 = true;
 208   3                              //CHIP2
 209   3                              ADCMUX_8_11_OE1 = true;
 210   3                              ADCMUX_8_11_OE2 = true;
 211   3                              //CHIP3
 212   3                              ADCMUX_12_15_OE1 = true;
 213   3                              ADCMUX_12_15_OE2 = true;
 214   3                              //CHIP4
 215   3                              ADCMUX_16_19_OE1 = true;
 216   3                              ADCMUX_16_19_OE2 = true;
 217   3                              //CHIP5
 218   3                              ADCMUX_20_23_OE1 = true;
 219   3                              ADCMUX_20_23_OE2 = true;
 220   3                              //CHIP6
 221   3                              ADCMUX_24_27_OE1 = true;
 222   3                              ADCMUX_24_27_OE2 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 80  

 223   3                              break;
 224   3                      }
 225   2                      case 4:{//MLD4
 226   3                              //ADC MUX
 227   3                              AMX0SL = 0x01;
 228   3                              //CHIP0
 229   3                              ADCMUX_0_3_OE1 = true;
 230   3                              ADCMUX_0_3_OE2 = true;
 231   3                              //CHIP1
 232   3                              ADCMUC_4_7_OE1 = false;
 233   3                              ADCMUC_4_7_OE2 = true;
 234   3                              ADCMUX_4_7_S1 = false;
 235   3                              ADCMUX_4_7_S0 = true;
 236   3                              //CHIP2
 237   3                              ADCMUX_8_11_OE1 = true;
 238   3                              ADCMUX_8_11_OE2 = true;
 239   3                              //CHIP3
 240   3                              ADCMUX_12_15_OE1 = true;
 241   3                              ADCMUX_12_15_OE2 = true;
 242   3                              //CHIP4
 243   3                              ADCMUX_16_19_OE1 = true;
 244   3                              ADCMUX_16_19_OE2 = true;
 245   3                              //CHIP5
 246   3                              ADCMUX_20_23_OE1 = true;
 247   3                              ADCMUX_20_23_OE2 = true;
 248   3                              //CHIP6
 249   3                              ADCMUX_24_27_OE1 = true;
 250   3                              ADCMUX_24_27_OE2 = true;
 251   3                              break;
 252   3                      }
 253   2                      case 5:{//MLD5
 254   3                              //ADC MUX
 255   3                              AMX0SL = 0x01;
 256   3                              //CHIP0
 257   3                              ADCMUX_0_3_OE1 = true;
 258   3                              ADCMUX_0_3_OE2 = true;
 259   3                              //CHIP1
 260   3                              ADCMUC_4_7_OE1 = false;
 261   3                              ADCMUC_4_7_OE2 = true;
 262   3                              ADCMUX_0_3_S1 = true;
 263   3                              ADCMUX_0_3_S0 = true;
 264   3                              //CHIP2
 265   3                              ADCMUX_8_11_OE1 = true;
 266   3                              ADCMUX_8_11_OE2 = true;
 267   3                              //CHIP3
 268   3                              ADCMUX_12_15_OE1 = true;
 269   3                              ADCMUX_12_15_OE2 = true;
 270   3                              //CHIP4
 271   3                              ADCMUX_16_19_OE1 = true;
 272   3                              ADCMUX_16_19_OE2 = true;
 273   3                              //CHIP5
 274   3                              ADCMUX_20_23_OE1 = true;
 275   3                              ADCMUX_20_23_OE2 = true;
 276   3                              //CHIP6
 277   3                              ADCMUX_24_27_OE1 = true;
 278   3                              ADCMUX_24_27_OE2 = true;
 279   3                              break;
 280   3                      }
 281   2                      case 6:{//MLD6
 282   3                              //ADC MUX
 283   3                              AMX0SL = 0x01;
 284   3                              //CHIP0
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 81  

 285   3                              ADCMUX_0_3_OE1 = true;
 286   3                              ADCMUX_0_3_OE2 = true;
 287   3                              //CHIP1
 288   3                              ADCMUC_4_7_OE1 = true;
 289   3                              ADCMUC_4_7_OE2 = false;
 290   3                              ADCMUX_4_7_S1 = true;
 291   3                              ADCMUX_4_7_S0 = false;
 292   3                              //CHIP2
 293   3                              ADCMUX_8_11_OE1 = true;
 294   3                              ADCMUX_8_11_OE2 = true;
 295   3                              //CHIP3
 296   3                              ADCMUX_12_15_OE1 = true;
 297   3                              ADCMUX_12_15_OE2 = true;
 298   3                              //CHIP4
 299   3                              ADCMUX_16_19_OE1 = true;
 300   3                              ADCMUX_16_19_OE2 = true;
 301   3                              //CHIP5
 302   3                              ADCMUX_20_23_OE1 = true;
 303   3                              ADCMUX_20_23_OE2 = true;
 304   3                              //CHIP6
 305   3                              ADCMUX_24_27_OE1 = true;
 306   3                              ADCMUX_24_27_OE2 = true;
 307   3                              break;
 308   3                      }
 309   2                      case 7:{//MLD7
 310   3                              //ADC MUX
 311   3                              AMX0SL = 0x01;
 312   3                              //CHIP0
 313   3                              ADCMUX_0_3_OE1 = true;
 314   3                              ADCMUX_0_3_OE2 = true;
 315   3                              //CHIP1
 316   3                              ADCMUC_4_7_OE1 = true;
 317   3                              ADCMUC_4_7_OE2 = false;
 318   3                              ADCMUX_4_7_S1 = true;
 319   3                              ADCMUX_4_7_S0 = true;
 320   3                              //CHIP2
 321   3                              ADCMUX_8_11_OE1 = true;
 322   3                              ADCMUX_8_11_OE2 = true;
 323   3                              //CHIP3
 324   3                              ADCMUX_12_15_OE1 = true;
 325   3                              ADCMUX_12_15_OE2 = true;
 326   3                              //CHIP4
 327   3                              ADCMUX_16_19_OE1 = true;
 328   3                              ADCMUX_16_19_OE2 = true;
 329   3                              //CHIP5
 330   3                              ADCMUX_20_23_OE1 = true;
 331   3                              ADCMUX_20_23_OE2 = true;
 332   3                              //CHIP6
 333   3                              ADCMUX_24_27_OE1 = true;
 334   3                              ADCMUX_24_27_OE2 = true;
 335   3                              break;
 336   3                      }
 337   2                      case 8:{//MLD8
 338   3                              //ADC MUX
 339   3                              AMX0SL = 0x02;
 340   3                              //CHIP0
 341   3                              ADCMUX_0_3_OE1 = true;
 342   3                              ADCMUX_0_3_OE2 = true;
 343   3                              //CHIP1
 344   3                              ADCMUC_4_7_OE1 = true;
 345   3                              ADCMUC_4_7_OE2 = true;
 346   3                              //CHIP2
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 82  

 347   3                              ADCMUX_8_11_OE1 = false;
 348   3                              ADCMUX_8_11_OE2 = true;
 349   3                              ADCMUX_8_11_S1 = false;
 350   3                              ADCMUX_8_11_S0 = true;
 351   3                              //CHIP3
 352   3                              ADCMUX_12_15_OE1 = true;
 353   3                              ADCMUX_12_15_OE2 = true;
 354   3                              //CHIP4
 355   3                              ADCMUX_16_19_OE1 = true;
 356   3                              ADCMUX_16_19_OE2 = true;
 357   3                              //CHIP5
 358   3                              ADCMUX_20_23_OE1 = true;
 359   3                              ADCMUX_20_23_OE2 = true;
 360   3                              //CHIP6
 361   3                              ADCMUX_24_27_OE1 = true;
 362   3                              ADCMUX_24_27_OE2 = true;
 363   3                              break;
 364   3                      }
 365   2                      case 9:{//MLD9
 366   3                              //ADC MUX
 367   3                              AMX0SL = 0x02;
 368   3                              //CHIP0
 369   3                              ADCMUX_0_3_OE1 = true;
 370   3                              ADCMUX_0_3_OE2 = true;
 371   3                              //CHIP1
 372   3                              ADCMUC_4_7_OE1 = true;
 373   3                              ADCMUC_4_7_OE2 = true;
 374   3                              //CHIP2
 375   3                              ADCMUX_8_11_OE1 = false;
 376   3                              ADCMUX_8_11_OE2 = true;
 377   3                              ADCMUX_8_11_S1 = true;
 378   3                              ADCMUX_8_11_S0 = true;
 379   3                              //CHIP3
 380   3                              ADCMUX_12_15_OE1 = true;
 381   3                              ADCMUX_12_15_OE2 = true;
 382   3                              //CHIP4
 383   3                              ADCMUX_16_19_OE1 = true;
 384   3                              ADCMUX_16_19_OE2 = true;
 385   3                              //CHIP5
 386   3                              ADCMUX_20_23_OE1 = true;
 387   3                              ADCMUX_20_23_OE2 = true;
 388   3                              //CHIP6
 389   3                              ADCMUX_24_27_OE1 = true;
 390   3                              ADCMUX_24_27_OE2 = true;
 391   3                              break;
 392   3                      }
 393   2                      case 10:{//MLD10
 394   3                              //ADC MUX
 395   3                              AMX0SL = 0x02;
 396   3                              //CHIP0
 397   3                              ADCMUX_0_3_OE1 = true;
 398   3                              ADCMUX_0_3_OE2 = true;
 399   3                              //CHIP1
 400   3                              ADCMUC_4_7_OE1 = true;
 401   3                              ADCMUC_4_7_OE2 = true;
 402   3                              //CHIP2
 403   3                              ADCMUX_8_11_OE1 = true;
 404   3                              ADCMUX_8_11_OE2 = false;
 405   3                              ADCMUX_8_11_S1 = false;
 406   3                              ADCMUX_8_11_S0 = true;
 407   3                              //CHIP3
 408   3                              ADCMUX_12_15_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 83  

 409   3                              ADCMUX_12_15_OE2 = true;
 410   3                              //CHIP4
 411   3                              ADCMUX_16_19_OE1 = true;
 412   3                              ADCMUX_16_19_OE2 = true;
 413   3                              //CHIP5
 414   3                              ADCMUX_20_23_OE1 = true;
 415   3                              ADCMUX_20_23_OE2 = true;
 416   3                              //CHIP6
 417   3                              ADCMUX_24_27_OE1 = true;
 418   3                              ADCMUX_24_27_OE2 = true;
 419   3                              break;
 420   3                      }
 421   2                      case 11:{//MLD11
 422   3                              //ADC MUX
 423   3                              AMX0SL = 0x02;
 424   3                              //CHIP0
 425   3                              ADCMUX_0_3_OE1 = true;
 426   3                              ADCMUX_0_3_OE2 = true;
 427   3                              //CHIP1
 428   3                              ADCMUC_4_7_OE1 = true;
 429   3                              ADCMUC_4_7_OE2 = true;
 430   3                              //CHIP2
 431   3                              ADCMUX_8_11_OE1 = true;
 432   3                              ADCMUX_8_11_OE2 = false;
 433   3                              ADCMUX_8_11_S1 = true;
 434   3                              ADCMUX_8_11_S0 = true;
 435   3                              //CHIP3
 436   3                              ADCMUX_12_15_OE1 = true;
 437   3                              ADCMUX_12_15_OE2 = true;
 438   3                              //CHIP4
 439   3                              ADCMUX_16_19_OE1 = true;
 440   3                              ADCMUX_16_19_OE2 = true;
 441   3                              //CHIP5
 442   3                              ADCMUX_20_23_OE1 = true;
 443   3                              ADCMUX_20_23_OE2 = true;
 444   3                              //CHIP6
 445   3                              ADCMUX_24_27_OE1 = true;
 446   3                              ADCMUX_24_27_OE2 = true;
 447   3                              break;
 448   3                      }
 449   2                      case 12:{//MLD12
 450   3                              //ADC MUX
 451   3                              AMX0SL = 0x03;
 452   3                              //CHIP0
 453   3                              ADCMUX_0_3_OE1 = true;
 454   3                              ADCMUX_0_3_OE2 = true;
 455   3                              //CHIP1
 456   3                              ADCMUC_4_7_OE1 = true;
 457   3                              ADCMUC_4_7_OE2 = true;
 458   3                              //CHIP2
 459   3                              ADCMUX_8_11_OE1 = true;
 460   3                              ADCMUX_8_11_OE2 = true;
 461   3                              //CHIP3
 462   3                              ADCMUX_12_15_OE1 = false;
 463   3                              ADCMUX_12_15_OE2 = true;
 464   3                              ADCMUX_12_15_S1 = false;
 465   3                              ADCMUX_12_15_S0 = true;
 466   3                              //CHIP4
 467   3                              ADCMUX_16_19_OE1 = true;
 468   3                              ADCMUX_16_19_OE2 = true;
 469   3                              //CHIP5
 470   3                              ADCMUX_20_23_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 84  

 471   3                              ADCMUX_20_23_OE2 = true;
 472   3                              //CHIP6
 473   3                              ADCMUX_24_27_OE1 = true;
 474   3                              ADCMUX_24_27_OE2 = true;
 475   3                              break;
 476   3                      }
 477   2                      case 13:{//MLD13
 478   3                              //ADC MUX
 479   3                              AMX0SL = 0x03;
 480   3                              //CHIP0
 481   3                              ADCMUX_0_3_OE1 = true;
 482   3                              ADCMUX_0_3_OE2 = true;
 483   3                              //CHIP1
 484   3                              ADCMUC_4_7_OE1 = true;
 485   3                              ADCMUC_4_7_OE2 = true;
 486   3                              //CHIP2
 487   3                              ADCMUX_8_11_OE1 = true;
 488   3                              ADCMUX_8_11_OE2 = true;
 489   3                              //CHIP3
 490   3                              ADCMUX_12_15_OE1 = false;
 491   3                              ADCMUX_12_15_OE2 = true;
 492   3                              ADCMUX_12_15_S1 = true;
 493   3                              ADCMUX_12_15_S0 = true;
 494   3                              //CHIP4
 495   3                              ADCMUX_16_19_OE1 = true;
 496   3                              ADCMUX_16_19_OE2 = true;
 497   3                              //CHIP5
 498   3                              ADCMUX_20_23_OE1 = true;
 499   3                              ADCMUX_20_23_OE2 = true;
 500   3                              //CHIP6
 501   3                              ADCMUX_24_27_OE1 = true;
 502   3                              ADCMUX_24_27_OE2 = true;
 503   3                              break;
 504   3                      }
 505   2                      case 14:{//MLD14
 506   3                              //ADC MUX
 507   3                              AMX0SL = 0x03;
 508   3                              //CHIP0
 509   3                              ADCMUX_0_3_OE1 = true;
 510   3                              ADCMUX_0_3_OE2 = true;
 511   3                              //CHIP1
 512   3                              ADCMUC_4_7_OE1 = true;
 513   3                              ADCMUC_4_7_OE2 = true;
 514   3                              //CHIP2
 515   3                              ADCMUX_8_11_OE1 = true;
 516   3                              ADCMUX_8_11_OE2 = true;
 517   3                              //CHIP3
 518   3                              ADCMUX_12_15_OE1 = true;
 519   3                              ADCMUX_12_15_OE2 = false;
 520   3                              ADCMUX_12_15_S1 = false;
 521   3                              ADCMUX_12_15_S0 = true;
 522   3                              //CHIP4
 523   3                              ADCMUX_16_19_OE1 = true;
 524   3                              ADCMUX_16_19_OE2 = true;
 525   3                              //CHIP5
 526   3                              ADCMUX_20_23_OE1 = true;
 527   3                              ADCMUX_20_23_OE2 = true;
 528   3                              //CHIP6
 529   3                              ADCMUX_24_27_OE1 = true;
 530   3                              ADCMUX_24_27_OE2 = true;
 531   3                              break;
 532   3                      }
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 85  

 533   2                      case 15:{//MLD15
 534   3                              //ADC MUX
 535   3                              AMX0SL = 0x03;
 536   3                              //CHIP0
 537   3                              ADCMUX_0_3_OE1 = true;
 538   3                              ADCMUX_0_3_OE2 = true;
 539   3                              //CHIP1
 540   3                              ADCMUC_4_7_OE1 = true;
 541   3                              ADCMUC_4_7_OE2 = true;
 542   3                              //CHIP2
 543   3                              ADCMUX_8_11_OE1 = true;
 544   3                              ADCMUX_8_11_OE2 = true;
 545   3                              //CHIP3
 546   3                              ADCMUX_12_15_OE1 = true;
 547   3                              ADCMUX_12_15_OE2 = false;
 548   3                              ADCMUX_12_15_S1 = true;
 549   3                              ADCMUX_12_15_S0 = true;
 550   3                              //CHIP4
 551   3                              ADCMUX_16_19_OE1 = true;
 552   3                              ADCMUX_16_19_OE2 = true;
 553   3                              //CHIP5
 554   3                              ADCMUX_20_23_OE1 = true;
 555   3                              ADCMUX_20_23_OE2 = true;
 556   3                              //CHIP6
 557   3                              ADCMUX_24_27_OE1 = true;
 558   3                              ADCMUX_24_27_OE2 = true;
 559   3                              break;
 560   3                      }
 561   2                      case 16:{//MLD16
 562   3                              //ADC MUX
 563   3                              AMX0SL = 0x04;
 564   3                              //CHIP0
 565   3                              ADCMUX_0_3_OE1 = true;
 566   3                              ADCMUX_0_3_OE2 = true;
 567   3                              //CHIP1
 568   3                              ADCMUC_4_7_OE1 = true;
 569   3                              ADCMUC_4_7_OE2 = true;
 570   3                              //CHIP2
 571   3                              ADCMUX_8_11_OE1 = true;
 572   3                              ADCMUX_8_11_OE2 = true;
 573   3                              //CHIP3
 574   3                              ADCMUX_12_15_OE1 = true;
 575   3                              ADCMUX_12_15_OE2 = true;
 576   3                              //CHIP4
 577   3                              ADCMUX_16_19_OE1 = false;
 578   3                              ADCMUX_16_19_OE2 = true;
 579   3                              ADCMUX_16_19_S1 = false;
 580   3                              ADCMUX_16_19_S0 = true;
 581   3                              //CHIP5
 582   3                              ADCMUX_20_23_OE1 = true;
 583   3                              ADCMUX_20_23_OE2 = true;
 584   3                              //CHIP6
 585   3                              ADCMUX_24_27_OE1 = true;
 586   3                              ADCMUX_24_27_OE2 = true;
 587   3                              break;
 588   3                      }
 589   2                      case 17:{//MLD17
 590   3                              //ADC MUX
 591   3                              AMX0SL = 0x04;
 592   3                              //CHIP0
 593   3                              ADCMUX_0_3_OE1 = true;
 594   3                              ADCMUX_0_3_OE2 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 86  

 595   3                              //CHIP1
 596   3                              ADCMUC_4_7_OE1 = true;
 597   3                              ADCMUC_4_7_OE2 = true;
 598   3                              //CHIP2
 599   3                              ADCMUX_8_11_OE1 = true;
 600   3                              ADCMUX_8_11_OE2 = true;
 601   3                              //CHIP3
 602   3                              ADCMUX_12_15_OE1 = true;
 603   3                              ADCMUX_12_15_OE2 = true;
 604   3                              //CHIP4
 605   3                              ADCMUX_16_19_OE1 = false;
 606   3                              ADCMUX_16_19_OE2 = true;
 607   3                              ADCMUX_16_19_S1 = true;
 608   3                              ADCMUX_16_19_S0 = true;
 609   3                              //CHIP5
 610   3                              ADCMUX_20_23_OE1 = true;
 611   3                              ADCMUX_20_23_OE2 = true;
 612   3                              //CHIP6
 613   3                              ADCMUX_24_27_OE1 = true;
 614   3                              ADCMUX_24_27_OE2 = true;
 615   3                              break;
 616   3                      }
 617   2                      case 18:{//MLD18
 618   3                              //ADC MUX
 619   3                              AMX0SL = 0x04;
 620   3                              //CHIP0
 621   3                              ADCMUX_0_3_OE1 = true;
 622   3                              ADCMUX_0_3_OE2 = true;
 623   3                              //CHIP1
 624   3                              ADCMUC_4_7_OE1 = true;
 625   3                              ADCMUC_4_7_OE2 = true;
 626   3                              //CHIP2
 627   3                              ADCMUX_8_11_OE1 = true;
 628   3                              ADCMUX_8_11_OE2 = true;
 629   3                              //CHIP3
 630   3                              ADCMUX_12_15_OE1 = true;
 631   3                              ADCMUX_12_15_OE2 = true;
 632   3                              //CHIP4
 633   3                              ADCMUX_16_19_OE1 = true;
 634   3                              ADCMUX_16_19_OE2 = false;
 635   3                              ADCMUX_16_19_S1 = false;
 636   3                              ADCMUX_16_19_S0 = true;
 637   3                              //CHIP5
 638   3                              ADCMUX_20_23_OE1 = true;
 639   3                              ADCMUX_20_23_OE2 = true;
 640   3                              //CHIP6
 641   3                              ADCMUX_24_27_OE1 = true;
 642   3                              ADCMUX_24_27_OE2 = true;
 643   3                              break;
 644   3                      }
 645   2                      case 19:{//MLD19
 646   3                              //ADC MUX
 647   3                              AMX0SL = 0x04;
 648   3                              //CHIP0
 649   3                              ADCMUX_0_3_OE1 = true;
 650   3                              ADCMUX_0_3_OE2 = true;
 651   3                              //CHIP1
 652   3                              ADCMUC_4_7_OE1 = true;
 653   3                              ADCMUC_4_7_OE2 = true;
 654   3                              //CHIP2
 655   3                              ADCMUX_8_11_OE1 = true;
 656   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 87  

 657   3                              //CHIP3
 658   3                              ADCMUX_12_15_OE1 = true;
 659   3                              ADCMUX_12_15_OE2 = true;
 660   3                              //CHIP4
 661   3                              ADCMUX_16_19_OE1 = true;
 662   3                              ADCMUX_16_19_OE2 = false;
 663   3                              ADCMUX_16_19_S1 = true;
 664   3                              ADCMUX_16_19_S0 = true;
 665   3                              //CHIP5
 666   3                              ADCMUX_20_23_OE1 = true;
 667   3                              ADCMUX_20_23_OE2 = true;
 668   3                              //CHIP6
 669   3                              ADCMUX_24_27_OE1 = true;
 670   3                              ADCMUX_24_27_OE2 = true;
 671   3                              break;
 672   3                      }
 673   2                      case 20:{//MLD20
 674   3                              //ADC MUX
 675   3                              AMX0SL = 0x04;
 676   3                              //CHIP0
 677   3                              ADCMUX_0_3_OE1 = true;
 678   3                              ADCMUX_0_3_OE2 = true;
 679   3                              //CHIP1
 680   3                              ADCMUC_4_7_OE1 = true;
 681   3                              ADCMUC_4_7_OE2 = true;
 682   3                              //CHIP2
 683   3                              ADCMUX_8_11_OE1 = true;
 684   3                              ADCMUX_8_11_OE2 = true;
 685   3                              //CHIP3
 686   3                              ADCMUX_12_15_OE1 = true;
 687   3                              ADCMUX_12_15_OE2 = true;
 688   3                              //CHIP4
 689   3                              ADCMUX_16_19_OE1 = true;
 690   3                              ADCMUX_16_19_OE2 = true;
 691   3                              //CHIP5
 692   3                              ADCMUX_20_23_OE1 = false;
 693   3                              ADCMUX_20_23_OE2 = true;
 694   3                              ADCMUX_20_23_S1 = false;
 695   3                              ADCMUX_20_23_S0 = true;
 696   3                              //CHIP6
 697   3                              ADCMUX_24_27_OE1 = true;
 698   3                              ADCMUX_24_27_OE2 = true;
 699   3                              break;
 700   3                      }
 701   2                      case 21:{//MLD21
 702   3                              //ADC MUX
 703   3                              AMX0SL = 0x05;
 704   3                              //CHIP0
 705   3                              ADCMUX_0_3_OE1 = true;
 706   3                              ADCMUX_0_3_OE2 = true;
 707   3                              //CHIP1
 708   3                              ADCMUC_4_7_OE1 = true;
 709   3                              ADCMUC_4_7_OE2 = true;
 710   3                              //CHIP2
 711   3                              ADCMUX_8_11_OE1 = true;
 712   3                              ADCMUX_8_11_OE2 = true;
 713   3                              //CHIP3
 714   3                              ADCMUX_12_15_OE1 = true;
 715   3                              ADCMUX_12_15_OE2 = true;
 716   3                              //CHIP4
 717   3                              ADCMUX_16_19_OE1 = true;
 718   3                              ADCMUX_16_19_OE2 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 88  

 719   3                              //CHIP5
 720   3                              ADCMUX_20_23_OE1 = false;
 721   3                              ADCMUX_20_23_OE2 = true;
 722   3                              ADCMUX_20_23_S1 = true;
 723   3                              ADCMUX_20_23_S0 = true;
 724   3                              //CHIP6
 725   3                              ADCMUX_24_27_OE1 = false;
 726   3                              ADCMUX_24_27_OE2 = true;
 727   3                              ADCMUX_24_27_S1 = false;
 728   3                              ADCMUX_24_27_S0 = true;
 729   3                              break;
 730   3                      }
 731   2                      case 22:{//MLD22
 732   3                              //ADC MUX
 733   3                              AMX0SL = 0x05;
 734   3                              //CHIP0
 735   3                              ADCMUX_0_3_OE1 = true;
 736   3                              ADCMUX_0_3_OE2 = true;
 737   3                              //CHIP1
 738   3                              ADCMUC_4_7_OE1 = true;
 739   3                              ADCMUC_4_7_OE2 = true;
 740   3                              //CHIP2
 741   3                              ADCMUX_8_11_OE1 = true;
 742   3                              ADCMUX_8_11_OE2 = true;
 743   3                              //CHIP3
 744   3                              ADCMUX_12_15_OE1 = true;
 745   3                              ADCMUX_12_15_OE2 = true;
 746   3                              //CHIP4
 747   3                              ADCMUX_16_19_OE1 = true;
 748   3                              ADCMUX_16_19_OE2 = true;
 749   3                              //CHIP5
 750   3                              ADCMUX_20_23_OE1 = true;
 751   3                              ADCMUX_20_23_OE2 = false;
 752   3                              ADCMUX_20_23_S1 = false;
 753   3                              ADCMUX_20_23_S0 = true;
 754   3                              //CHIP6
 755   3                              ADCMUX_24_27_OE1 = true;
 756   3                              ADCMUX_24_27_OE2 = true;
 757   3                              break;
 758   3                      }
 759   2                      case 23:{//MLD23
 760   3                              //ADC MUX
 761   3                              AMX0SL = 0x05;
 762   3                              //CHIP0
 763   3                              ADCMUX_0_3_OE1 = true;
 764   3                              ADCMUX_0_3_OE2 = true;
 765   3                              //CHIP1
 766   3                              ADCMUC_4_7_OE1 = true;
 767   3                              ADCMUC_4_7_OE2 = true;
 768   3                              //CHIP2
 769   3                              ADCMUX_8_11_OE1 = true;
 770   3                              ADCMUX_8_11_OE2 = true;
 771   3                              //CHIP3
 772   3                              ADCMUX_12_15_OE1 = true;
 773   3                              ADCMUX_12_15_OE2 = true;
 774   3                              //CHIP4
 775   3                              ADCMUX_16_19_OE1 = true;
 776   3                              ADCMUX_16_19_OE2 = true;
 777   3                              //CHIP5
 778   3                              ADCMUX_20_23_OE1 = true;
 779   3                              ADCMUX_20_23_OE2 = false;
 780   3                              ADCMUX_20_23_S1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 89  

 781   3                              ADCMUX_20_23_S0 = true;
 782   3                              //CHIP6
 783   3                              ADCMUX_24_27_OE1 = true;
 784   3                              ADCMUX_24_27_OE2 = true;
 785   3                              break;
 786   3                      }
 787   2                      case 24:{//MLD24
 788   3                              //ADC MUX
 789   3                              AMX0SL = 0x06;
 790   3                              //CHIP0
 791   3                              ADCMUX_0_3_OE1 = true;
 792   3                              ADCMUX_0_3_OE2 = true;
 793   3                              //CHIP1
 794   3                              ADCMUC_4_7_OE1 = true;
 795   3                              ADCMUC_4_7_OE2 = true;
 796   3                              //CHIP2
 797   3                              ADCMUX_8_11_OE1 = true;
 798   3                              ADCMUX_8_11_OE2 = true;
 799   3                              //CHIP3
 800   3                              ADCMUX_12_15_OE1 = true;
 801   3                              ADCMUX_12_15_OE2 = true;
 802   3                              //CHIP4
 803   3                              ADCMUX_16_19_OE1 = true;
 804   3                              ADCMUX_16_19_OE2 = true;
 805   3                              //CHIP5
 806   3                              ADCMUX_20_23_OE1 = true;
 807   3                              ADCMUX_20_23_OE2 = true;
 808   3                              //CHIP6
 809   3                              ADCMUX_24_27_OE1 = false;
 810   3                              ADCMUX_24_27_OE2 = true;
 811   3                              ADCMUX_24_27_S1 = false;
 812   3                              ADCMUX_24_27_S0 = true;
 813   3                              break;
 814   3                      }
 815   2                      case 25:{//MLD25
 816   3                              //ADC MUX
 817   3                              AMX0SL = 0x06;
 818   3                              //CHIP0
 819   3                              ADCMUX_0_3_OE1 = true;
 820   3                              ADCMUX_0_3_OE2 = true;
 821   3                              //CHIP1
 822   3                              ADCMUC_4_7_OE1 = true;
 823   3                              ADCMUC_4_7_OE2 = true;
 824   3                              //CHIP2
 825   3                              ADCMUX_8_11_OE1 = true;
 826   3                              ADCMUX_8_11_OE2 = true;
 827   3                              //CHIP3
 828   3                              ADCMUX_12_15_OE1 = true;
 829   3                              ADCMUX_12_15_OE2 = true;
 830   3                              //CHIP4
 831   3                              ADCMUX_16_19_OE1 = true;
 832   3                              ADCMUX_16_19_OE2 = true;
 833   3                              //CHIP5
 834   3                              ADCMUX_20_23_OE1 = true;
 835   3                              ADCMUX_20_23_OE2 = true;
 836   3                              //CHIP6
 837   3                              ADCMUX_24_27_OE1 = false;
 838   3                              ADCMUX_24_27_OE2 = true;
 839   3                              ADCMUX_24_27_S1 = true;
 840   3                              ADCMUX_24_27_S0 = true;
 841   3                              break;
 842   3                      }
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 90  

 843   2                      case 26:{//MLD26
 844   3                              //ADC MUX
 845   3                              AMX0SL = 0x06;
 846   3                              //CHIP0
 847   3                              ADCMUX_0_3_OE1 = true;
 848   3                              ADCMUX_0_3_OE2 = true;
 849   3                              //CHIP1
 850   3                              ADCMUC_4_7_OE1 = true;
 851   3                              ADCMUC_4_7_OE2 = true;
 852   3                              //CHIP2
 853   3                              ADCMUX_8_11_OE1 = true;
 854   3                              ADCMUX_8_11_OE2 = true;
 855   3                              //CHIP3
 856   3                              ADCMUX_12_15_OE1 = true;
 857   3                              ADCMUX_12_15_OE2 = true;
 858   3                              //CHIP4
 859   3                              ADCMUX_16_19_OE1 = true;
 860   3                              ADCMUX_16_19_OE2 = true;
 861   3                              //CHIP5
 862   3                              ADCMUX_20_23_OE1 = true;
 863   3                              ADCMUX_20_23_OE2 = true;
 864   3                              //CHIP6
 865   3                              ADCMUX_24_27_OE1 = true;
 866   3                              ADCMUX_24_27_OE2 = false;
 867   3                              ADCMUX_24_27_S1 = false;
 868   3                              ADCMUX_24_27_S0 = true;
 869   3                              break;
 870   3                      }
 871   2                      case 27:{//MLD27
 872   3                              //ADC MUX
 873   3                              AMX0SL = 0x06;
 874   3                              //CHIP0
 875   3                              ADCMUX_0_3_OE1 = true;
 876   3                              ADCMUX_0_3_OE2 = true;
 877   3                              //CHIP1
 878   3                              ADCMUC_4_7_OE1 = true;
 879   3                              ADCMUC_4_7_OE2 = true;
 880   3                              //CHIP2
 881   3                              ADCMUX_8_11_OE1 = true;
 882   3                              ADCMUX_8_11_OE2 = true;
 883   3                              //CHIP3
 884   3                              ADCMUX_12_15_OE1 = true;
 885   3                              ADCMUX_12_15_OE2 = true;
 886   3                              //CHIP4
 887   3                              ADCMUX_16_19_OE1 = true;
 888   3                              ADCMUX_16_19_OE2 = true;
 889   3                              //CHIP5
 890   3                              ADCMUX_20_23_OE1 = true;
 891   3                              ADCMUX_20_23_OE2 = true;
 892   3                              //CHIP6
 893   3                              ADCMUX_24_27_OE1 = true;
 894   3                              ADCMUX_24_27_OE2 = false;
 895   3                              ADCMUX_24_27_S1 = true;
 896   3                              ADCMUX_24_27_S0 = true;
 897   3                              break;
 898   3                      }
 899   2                      case 32:{//MPD0
 900   3                              //ADC MUX
 901   3                              AMX0SL = 0x00;
 902   3                              //CHIP0
 903   3                              ADCMUX_0_3_OE1 = false;
 904   3                              ADCMUX_0_3_OE2 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 91  

 905   3                              ADCMUX_0_3_S1 = false;
 906   3                              ADCMUX_0_3_S0 = false;
 907   3                              //CHIP1
 908   3                              ADCMUC_4_7_OE1 = true;
 909   3                              ADCMUC_4_7_OE2 = true;
 910   3                              //CHIP2
 911   3                              ADCMUX_8_11_OE1 = true;
 912   3                              ADCMUX_8_11_OE2 = true;
 913   3                              //CHIP3
 914   3                              ADCMUX_12_15_OE1 = true;
 915   3                              ADCMUX_12_15_OE2 = true;
 916   3                              //CHIP4
 917   3                              ADCMUX_16_19_OE1 = true;
 918   3                              ADCMUX_16_19_OE2 = true;
 919   3                              //CHIP5
 920   3                              ADCMUX_20_23_OE1 = true;
 921   3                              ADCMUX_20_23_OE2 = true;
 922   3                              //CHIP6
 923   3                              ADCMUX_24_27_OE1 = true;
 924   3                              ADCMUX_24_27_OE2 = true;
 925   3                              break;
 926   3                      }
 927   2                      case 33:{//MPD1
 928   3                              //ADC MUX
 929   3                              AMX0SL = 0x00;
 930   3                              //CHIP0
 931   3                              ADCMUX_0_3_OE1 = false;
 932   3                              ADCMUX_0_3_OE2 = true;
 933   3                              ADCMUX_0_3_S1 = true;
 934   3                              ADCMUX_0_3_S0 = false;
 935   3                              //CHIP1
 936   3                              ADCMUC_4_7_OE1 = true;
 937   3                              ADCMUC_4_7_OE2 = true;
 938   3                              //CHIP2
 939   3                              ADCMUX_8_11_OE1 = true;
 940   3                              ADCMUX_8_11_OE2 = true;
 941   3                              //CHIP3
 942   3                              ADCMUX_12_15_OE1 = true;
 943   3                              ADCMUX_12_15_OE2 = true;
 944   3                              //CHIP4
 945   3                              ADCMUX_16_19_OE1 = true;
 946   3                              ADCMUX_16_19_OE2 = true;
 947   3                              //CHIP5
 948   3                              ADCMUX_20_23_OE1 = true;
 949   3                              ADCMUX_20_23_OE2 = true;
 950   3                              //CHIP6
 951   3                              ADCMUX_24_27_OE1 = true;
 952   3                              ADCMUX_24_27_OE2 = true;
 953   3                      }
 954   2                      case 34:{//MPD2
 955   3                              //ADC MUX
 956   3                              AMX0SL = 0x00;
 957   3                              //CHIP0
 958   3                              ADCMUX_0_3_OE1 = true;
 959   3                              ADCMUX_0_3_OE2 = false;
 960   3                              ADCMUX_0_3_S1 = false;
 961   3                              ADCMUX_0_3_S0 = false;
 962   3                              //CHIP1
 963   3                              ADCMUC_4_7_OE1 = true;
 964   3                              ADCMUC_4_7_OE2 = true;
 965   3                              //CHIP2
 966   3                              ADCMUX_8_11_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 92  

 967   3                              ADCMUX_8_11_OE2 = true;
 968   3                              //CHIP3
 969   3                              ADCMUX_12_15_OE1 = true;
 970   3                              ADCMUX_12_15_OE2 = true;
 971   3                              //CHIP4
 972   3                              ADCMUX_16_19_OE1 = true;
 973   3                              ADCMUX_16_19_OE2 = true;
 974   3                              //CHIP5
 975   3                              ADCMUX_20_23_OE1 = true;
 976   3                              ADCMUX_20_23_OE2 = true;
 977   3                              //CHIP6
 978   3                              ADCMUX_24_27_OE1 = true;
 979   3                              ADCMUX_24_27_OE2 = true;
 980   3                              break;
 981   3                      }
 982   2                      case 35:{//MPD3
 983   3                              //ADC MUX
 984   3                              AMX0SL = 0x00;
 985   3                              //CHIP0
 986   3                              ADCMUX_0_3_OE1 = true;
 987   3                              ADCMUX_0_3_OE2 = false;
 988   3                              ADCMUX_0_3_S1 = true;
 989   3                              ADCMUX_0_3_S0 = false;
 990   3                              //CHIP1
 991   3                              ADCMUC_4_7_OE1 = true;
 992   3                              ADCMUC_4_7_OE2 = true;
 993   3                              //CHIP2
 994   3                              ADCMUX_8_11_OE1 = true;
 995   3                              ADCMUX_8_11_OE2 = true;
 996   3                              //CHIP3
 997   3                              ADCMUX_12_15_OE1 = true;
 998   3                              ADCMUX_12_15_OE2 = true;
 999   3                              //CHIP4
1000   3                              ADCMUX_16_19_OE1 = true;
1001   3                              ADCMUX_16_19_OE2 = true;
1002   3                              //CHIP5
1003   3                              ADCMUX_20_23_OE1 = true;
1004   3                              ADCMUX_20_23_OE2 = true;
1005   3                              //CHIP6
1006   3                              ADCMUX_24_27_OE1 = true;
1007   3                              ADCMUX_24_27_OE2 = true;
1008   3                              break;
1009   3                      }
1010   2                      case 36:{//MPD4
1011   3                              //ADC MUX
1012   3                              AMX0SL = 0x01;
1013   3                              //CHIP0
1014   3                              ADCMUX_0_3_OE1 = true;
1015   3                              ADCMUX_0_3_OE2 = true;
1016   3                              //CHIP1
1017   3                              ADCMUC_4_7_OE1 = false;
1018   3                              ADCMUC_4_7_OE2 = true;
1019   3                              ADCMUX_4_7_S1 = false;
1020   3                              ADCMUX_4_7_S0 = false;
1021   3                              //CHIP2
1022   3                              ADCMUX_8_11_OE1 = true;
1023   3                              ADCMUX_8_11_OE2 = true;
1024   3                              //CHIP3
1025   3                              ADCMUX_12_15_OE1 = true;
1026   3                              ADCMUX_12_15_OE2 = true;
1027   3                              //CHIP4
1028   3                              ADCMUX_16_19_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 93  

1029   3                              ADCMUX_16_19_OE2 = true;
1030   3                              //CHIP5
1031   3                              ADCMUX_20_23_OE1 = true;
1032   3                              ADCMUX_20_23_OE2 = true;
1033   3                              //CHIP6
1034   3                              ADCMUX_24_27_OE1 = true;
1035   3                              ADCMUX_24_27_OE2 = true;
1036   3                              break;
1037   3                      }
1038   2                      case 37:{//MPD5
1039   3                              //ADC MUX
1040   3                              AMX0SL = 0x01;
1041   3                              //CHIP0
1042   3                              ADCMUX_0_3_OE1 = true;
1043   3                              ADCMUX_0_3_OE2 = true;
1044   3                              //CHIP1
1045   3                              ADCMUC_4_7_OE1 = false;
1046   3                              ADCMUC_4_7_OE2 = true;
1047   3                              ADCMUX_4_7_S1 = true;
1048   3                              ADCMUX_4_7_S0 = false;
1049   3                              //CHIP2
1050   3                              ADCMUX_8_11_OE1 = true;
1051   3                              ADCMUX_8_11_OE2 = true;
1052   3                              //CHIP3
1053   3                              ADCMUX_12_15_OE1 = true;
1054   3                              ADCMUX_12_15_OE2 = true;
1055   3                              //CHIP4
1056   3                              ADCMUX_16_19_OE1 = true;
1057   3                              ADCMUX_16_19_OE2 = true;
1058   3                              //CHIP5
1059   3                              ADCMUX_20_23_OE1 = true;
1060   3                              ADCMUX_20_23_OE2 = true;
1061   3                              //CHIP6
1062   3                              ADCMUX_24_27_OE1 = true;
1063   3                              ADCMUX_24_27_OE2 = true;
1064   3                              break;
1065   3                      }
1066   2                      case 38:{//MPD6
1067   3                              //ADC MUX
1068   3                              AMX0SL = 0x01;
1069   3                              //CHIP0
1070   3                              ADCMUX_0_3_OE1 = true;
1071   3                              ADCMUX_0_3_OE2 = true;
1072   3                              //CHIP1
1073   3                              ADCMUC_4_7_OE1 = true;
1074   3                              ADCMUC_4_7_OE2 = false;
1075   3                              ADCMUX_4_7_S1 = false;
1076   3                              ADCMUX_4_7_S0 = false;
1077   3                              //CHIP2
1078   3                              ADCMUX_8_11_OE1 = true;
1079   3                              ADCMUX_8_11_OE2 = true;
1080   3                              //CHIP3
1081   3                              ADCMUX_12_15_OE1 = true;
1082   3                              ADCMUX_12_15_OE2 = true;
1083   3                              //CHIP4
1084   3                              ADCMUX_16_19_OE1 = true;
1085   3                              ADCMUX_16_19_OE2 = true;
1086   3                              //CHIP5
1087   3                              ADCMUX_20_23_OE1 = true;
1088   3                              ADCMUX_20_23_OE2 = true;
1089   3                              //CHIP6
1090   3                              ADCMUX_24_27_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 94  

1091   3                              ADCMUX_24_27_OE2 = true;
1092   3                              break;
1093   3                      }
1094   2                      case 39:{//MPD7
1095   3                              //ADC MUX
1096   3                              AMX0SL = 0x01;
1097   3                              //CHIP0
1098   3                              ADCMUX_0_3_OE1 = true;
1099   3                              ADCMUX_0_3_OE2 = true;
1100   3                              //CHIP1
1101   3                              ADCMUC_4_7_OE1 = true;
1102   3                              ADCMUC_4_7_OE2 = false;
1103   3                              ADCMUX_4_7_S1 = true;
1104   3                              ADCMUX_4_7_S0 = false;
1105   3                              //CHIP2
1106   3                              ADCMUX_8_11_OE1 = true;
1107   3                              ADCMUX_8_11_OE2 = true;
1108   3                              //CHIP3
1109   3                              ADCMUX_12_15_OE1 = true;
1110   3                              ADCMUX_12_15_OE2 = true;
1111   3                              //CHIP4
1112   3                              ADCMUX_16_19_OE1 = true;
1113   3                              ADCMUX_16_19_OE2 = true;
1114   3                              //CHIP5
1115   3                              ADCMUX_20_23_OE1 = true;
1116   3                              ADCMUX_20_23_OE2 = true;
1117   3                              //CHIP6
1118   3                              ADCMUX_24_27_OE1 = true;
1119   3                              ADCMUX_24_27_OE2 = true;
1120   3                              break;
1121   3                      }
1122   2                      case 40:{//MPD8
1123   3                              //ADC MUX
1124   3                              AMX0SL = 0x02;
1125   3                              //CHIP0
1126   3                              ADCMUX_0_3_OE1 = true;
1127   3                              ADCMUX_0_3_OE2 = true;
1128   3                              //CHIP1
1129   3                              ADCMUC_4_7_OE1 = true;
1130   3                              ADCMUC_4_7_OE2 = true;
1131   3                              //CHIP2
1132   3                              ADCMUX_8_11_OE1 = false;
1133   3                              ADCMUX_8_11_OE2 = true;
1134   3                              ADCMUX_8_11_S1 = false;
1135   3                              ADCMUX_8_11_S0 = false;
1136   3                              //CHIP3
1137   3                              ADCMUX_12_15_OE1 = true;
1138   3                              ADCMUX_12_15_OE2 = true;
1139   3                              //CHIP4
1140   3                              ADCMUX_16_19_OE1 = true;
1141   3                              ADCMUX_16_19_OE2 = true;
1142   3                              //CHIP5
1143   3                              ADCMUX_20_23_OE1 = true;
1144   3                              ADCMUX_20_23_OE2 = true;
1145   3                              //CHIP6
1146   3                              ADCMUX_24_27_OE1 = true;
1147   3                              ADCMUX_24_27_OE2 = true;
1148   3                              break;
1149   3                      }
1150   2                      case 41:{//MPD9
1151   3                              //ADC MUX
1152   3                              AMX0SL = 0x02;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 95  

1153   3                              //CHIP0
1154   3                              ADCMUX_0_3_OE1 = true;
1155   3                              ADCMUX_0_3_OE2 = true;
1156   3                              //CHIP1
1157   3                              ADCMUC_4_7_OE1 = true;
1158   3                              ADCMUC_4_7_OE2 = true;
1159   3                              //CHIP2
1160   3                              ADCMUX_8_11_OE1 = false;
1161   3                              ADCMUX_8_11_OE2 = true;
1162   3                              ADCMUX_8_11_S1 = true;
1163   3                              ADCMUX_8_11_S0 = false;
1164   3                              //CHIP3
1165   3                              ADCMUX_12_15_OE1 = true;
1166   3                              ADCMUX_12_15_OE2 = true;
1167   3                              //CHIP4
1168   3                              ADCMUX_16_19_OE1 = true;
1169   3                              ADCMUX_16_19_OE2 = true;
1170   3                              //CHIP5
1171   3                              ADCMUX_20_23_OE1 = true;
1172   3                              ADCMUX_20_23_OE2 = true;
1173   3                              //CHIP6
1174   3                              ADCMUX_24_27_OE1 = true;
1175   3                              ADCMUX_24_27_OE2 = true;
1176   3                              break;
1177   3                      }
1178   2                      case 42:{//MPD10
1179   3                              //ADC MUX
1180   3                              AMX0SL = 0x02;
1181   3                              //CHIP0
1182   3                              ADCMUX_0_3_OE1 = true;
1183   3                              ADCMUX_0_3_OE2 = true;
1184   3                              //CHIP1
1185   3                              ADCMUC_4_7_OE1 = true;
1186   3                              ADCMUC_4_7_OE2 = true;
1187   3                              //CHIP2
1188   3                              ADCMUX_8_11_OE1 = false;
1189   3                              ADCMUX_8_11_OE2 = true;
1190   3                              ADCMUX_8_11_S1 = false;
1191   3                              ADCMUX_8_11_S0 = false;
1192   3                              //CHIP3
1193   3                              ADCMUX_12_15_OE1 = true;
1194   3                              ADCMUX_12_15_OE2 = true;
1195   3                              //CHIP4
1196   3                              ADCMUX_16_19_OE1 = true;
1197   3                              ADCMUX_16_19_OE2 = true;
1198   3                              //CHIP5
1199   3                              ADCMUX_20_23_OE1 = true;
1200   3                              ADCMUX_20_23_OE2 = true;
1201   3                              //CHIP6
1202   3                              ADCMUX_24_27_OE1 = true;
1203   3                              ADCMUX_24_27_OE2 = true;
1204   3                              break;
1205   3                      }
1206   2                      case 43:{//MPD11
1207   3                              //ADC MUX
1208   3                              AMX0SL = 0x02;
1209   3                              //CHIP0
1210   3                              ADCMUX_0_3_OE1 = true;
1211   3                              ADCMUX_0_3_OE2 = true;
1212   3                              //CHIP1
1213   3                              ADCMUC_4_7_OE1 = true;
1214   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 96  

1215   3                              //CHIP2
1216   3                              ADCMUX_8_11_OE1 = false;
1217   3                              ADCMUX_8_11_OE2 = false;
1218   3                              ADCMUX_8_11_S1 = true;
1219   3                              ADCMUX_8_11_S0 = false;
1220   3                              //CHIP3
1221   3                              ADCMUX_12_15_OE1 = true;
1222   3                              ADCMUX_12_15_OE2 = true;
1223   3                              //CHIP4
1224   3                              ADCMUX_16_19_OE1 = true;
1225   3                              ADCMUX_16_19_OE2 = true;
1226   3                              //CHIP5
1227   3                              ADCMUX_20_23_OE1 = true;
1228   3                              ADCMUX_20_23_OE2 = true;
1229   3                              //CHIP6
1230   3                              ADCMUX_24_27_OE1 = true;
1231   3                              ADCMUX_24_27_OE2 = true;
1232   3                              break;
1233   3                      }
1234   2                      case 44:{//MPD12
1235   3                              //ADC MUX
1236   3                              AMX0SL = 0x03;
1237   3                              //CHIP0
1238   3                              ADCMUX_0_3_OE1 = true;
1239   3                              ADCMUX_0_3_OE2 = true;
1240   3                              //CHIP1
1241   3                              ADCMUC_4_7_OE1 = true;
1242   3                              ADCMUC_4_7_OE2 = true;
1243   3                              //CHIP2
1244   3                              ADCMUX_8_11_OE1 = true;
1245   3                              ADCMUX_8_11_OE2 = true;
1246   3                              //CHIP3
1247   3                              ADCMUX_12_15_OE1 = false;
1248   3                              ADCMUX_12_15_OE2 = true;
1249   3                              ADCMUX_12_15_S1 = false;
1250   3                              ADCMUX_12_15_S0 = false;
1251   3                              //CHIP4
1252   3                              ADCMUX_16_19_OE1 = true;
1253   3                              ADCMUX_16_19_OE2 = true;
1254   3                              //CHIP5
1255   3                              ADCMUX_20_23_OE1 = true;
1256   3                              ADCMUX_20_23_OE2 = true;
1257   3                              //CHIP6
1258   3                              ADCMUX_24_27_OE1 = true;
1259   3                              ADCMUX_24_27_OE2 = true;
1260   3                              break;
1261   3                      }
1262   2                      case 45:{//MPD13
1263   3                              //ADC MUX
1264   3                              AMX0SL = 0x03;
1265   3                              //CHIP0
1266   3                              ADCMUX_0_3_OE1 = true;
1267   3                              ADCMUX_0_3_OE2 = true;
1268   3                              //CHIP1
1269   3                              ADCMUC_4_7_OE1 = true;
1270   3                              ADCMUC_4_7_OE2 = true;
1271   3                              //CHIP2
1272   3                              ADCMUX_8_11_OE1 = true;
1273   3                              ADCMUX_8_11_OE2 = true;
1274   3                              //CHIP3
1275   3                              ADCMUX_12_15_OE1 = false;
1276   3                              ADCMUX_12_15_OE2 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 97  

1277   3                              ADCMUX_12_15_S1 = true;
1278   3                              ADCMUX_12_15_S0 = false;
1279   3                              //CHIP4
1280   3                              ADCMUX_16_19_OE1 = true;
1281   3                              ADCMUX_16_19_OE2 = true;
1282   3                              //CHIP5
1283   3                              ADCMUX_20_23_OE1 = true;
1284   3                              ADCMUX_20_23_OE2 = true;
1285   3                              //CHIP6
1286   3                              ADCMUX_24_27_OE1 = true;
1287   3                              ADCMUX_24_27_OE2 = true;
1288   3                              break;
1289   3                      }
1290   2                      case 46:{//MPD14
1291   3                              //ADC MUX
1292   3                              AMX0SL = 0x03;
1293   3                              //CHIP0
1294   3                              ADCMUX_0_3_OE1 = true;
1295   3                              ADCMUX_0_3_OE2 = true;
1296   3                              //CHIP1
1297   3                              ADCMUC_4_7_OE1 = true;
1298   3                              ADCMUC_4_7_OE2 = true;
1299   3                              //CHIP2
1300   3                              ADCMUX_8_11_OE1 = true;
1301   3                              ADCMUX_8_11_OE2 = true;
1302   3                              //CHIP3
1303   3                              ADCMUX_12_15_OE1 = true;
1304   3                              ADCMUX_12_15_OE2 = false;
1305   3                              ADCMUX_12_15_S1 = false;
1306   3                              ADCMUX_12_15_S0 = false;
1307   3                              //CHIP4
1308   3                              ADCMUX_16_19_OE1 = true;
1309   3                              ADCMUX_16_19_OE2 = true;
1310   3                              //CHIP5
1311   3                              ADCMUX_20_23_OE1 = true;
1312   3                              ADCMUX_20_23_OE2 = true;
1313   3                              //CHIP6
1314   3                              ADCMUX_24_27_OE1 = true;
1315   3                              ADCMUX_24_27_OE2 = true;
1316   3                              break;
1317   3                      }
1318   2                      case 47:{//MPD15
1319   3                              //ADC MUX
1320   3                              AMX0SL = 0x03;
1321   3                              //CHIP0
1322   3                              ADCMUX_0_3_OE1 = true;
1323   3                              ADCMUX_0_3_OE2 = true;
1324   3                              //CHIP1
1325   3                              ADCMUC_4_7_OE1 = true;
1326   3                              ADCMUC_4_7_OE2 = true;
1327   3                              //CHIP2
1328   3                              ADCMUX_8_11_OE1 = true;
1329   3                              ADCMUX_8_11_OE2 = true;
1330   3                              //CHIP3
1331   3                              ADCMUX_12_15_OE1 = true;
1332   3                              ADCMUX_12_15_OE2 = false;
1333   3                              ADCMUX_12_15_S1 = true;
1334   3                              ADCMUX_12_15_S0 = false;
1335   3                              //CHIP4
1336   3                              ADCMUX_16_19_OE1 = true;
1337   3                              ADCMUX_16_19_OE2 = true;
1338   3                              //CHIP5
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 98  

1339   3                              ADCMUX_20_23_OE1 = true;
1340   3                              ADCMUX_20_23_OE2 = true;
1341   3                              //CHIP6
1342   3                              ADCMUX_24_27_OE1 = true;
1343   3                              ADCMUX_24_27_OE2 = true;
1344   3                              break;
1345   3                      }
1346   2                      case 48:{//MPD16
1347   3                              //ADC MUX
1348   3                              AMX0SL = 0x04;
1349   3                              //CHIP0
1350   3                              ADCMUX_0_3_OE1 = true;
1351   3                              ADCMUX_0_3_OE2 = true;
1352   3                              //CHIP1
1353   3                              ADCMUC_4_7_OE1 = true;
1354   3                              ADCMUC_4_7_OE2 = true;
1355   3                              //CHIP2
1356   3                              ADCMUX_8_11_OE1 = true;
1357   3                              ADCMUX_8_11_OE2 = true;
1358   3                              //CHIP3
1359   3                              ADCMUX_12_15_OE1 = true;
1360   3                              ADCMUX_12_15_OE2 = true;
1361   3                              //CHIP4
1362   3                              ADCMUX_16_19_OE1 = false;
1363   3                              ADCMUX_16_19_OE2 = true;
1364   3                              ADCMUX_16_19_S1 = false;
1365   3                              ADCMUX_16_19_S0 = false;
1366   3                              //CHIP5
1367   3                              ADCMUX_20_23_OE1 = true;
1368   3                              ADCMUX_20_23_OE2 = true;
1369   3                              //CHIP6
1370   3                              ADCMUX_24_27_OE1 = true;
1371   3                              ADCMUX_24_27_OE2 = true;
1372   3                              break;
1373   3                      }
1374   2                      case 49:{//MPD17
1375   3                              //ADC MUX
1376   3                              AMX0SL = 0x04;
1377   3                              //CHIP0
1378   3                              ADCMUX_0_3_OE1 = true;
1379   3                              ADCMUX_0_3_OE2 = true;
1380   3                              //CHIP1
1381   3                              ADCMUC_4_7_OE1 = true;
1382   3                              ADCMUC_4_7_OE2 = true;
1383   3                              //CHIP2
1384   3                              ADCMUX_8_11_OE1 = true;
1385   3                              ADCMUX_8_11_OE2 = true;
1386   3                              //CHIP3
1387   3                              ADCMUX_12_15_OE1 = true;
1388   3                              ADCMUX_12_15_OE2 = true;
1389   3                              //CHIP4
1390   3                              ADCMUX_16_19_OE1 = false;
1391   3                              ADCMUX_16_19_OE2 = true;
1392   3                              ADCMUX_16_19_S1 = true;
1393   3                              ADCMUX_16_19_S0 = false;
1394   3                              //CHIP5
1395   3                              ADCMUX_20_23_OE1 = true;
1396   3                              ADCMUX_20_23_OE2 = true;
1397   3                              //CHIP6
1398   3                              ADCMUX_24_27_OE1 = true;
1399   3                              ADCMUX_24_27_OE2 = true;
1400   3                              break;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 99  

1401   3                      }
1402   2                      case 50:{//MPD18
1403   3                              //ADC MUX
1404   3                              AMX0SL = 0x04;
1405   3                              //CHIP0
1406   3                              ADCMUX_0_3_OE1 = true;
1407   3                              ADCMUX_0_3_OE2 = true;
1408   3                              //CHIP1
1409   3                              ADCMUC_4_7_OE1 = true;
1410   3                              ADCMUC_4_7_OE2 = true;
1411   3                              //CHIP2
1412   3                              ADCMUX_8_11_OE1 = true;
1413   3                              ADCMUX_8_11_OE2 = true;
1414   3                              //CHIP3
1415   3                              ADCMUX_12_15_OE1 = true;
1416   3                              ADCMUX_12_15_OE2 = true;
1417   3                              //CHIP4
1418   3                              ADCMUX_16_19_OE1 = true;
1419   3                              ADCMUX_16_19_OE2 = false;
1420   3                              ADCMUX_16_19_S1 = true;
1421   3                              ADCMUX_16_19_S0 = false;
1422   3                              //CHIP5
1423   3                              ADCMUX_20_23_OE1 = true;
1424   3                              ADCMUX_20_23_OE2 = true;
1425   3                              //CHIP6
1426   3                              ADCMUX_24_27_OE1 = true;
1427   3                              ADCMUX_24_27_OE2 = true;
1428   3                              break;
1429   3                      }
1430   2                      case 51:{//MPD19
1431   3                              //ADC MUX
1432   3                              AMX0SL = 0x04;
1433   3                              //CHIP0
1434   3                              ADCMUX_0_3_OE1 = true;
1435   3                              ADCMUX_0_3_OE2 = true;
1436   3                              //CHIP1
1437   3                              ADCMUC_4_7_OE1 = true;
1438   3                              ADCMUC_4_7_OE2 = true;
1439   3                              //CHIP2
1440   3                              ADCMUX_8_11_OE1 = true;
1441   3                              ADCMUX_8_11_OE2 = true;
1442   3                              //CHIP3
1443   3                              ADCMUX_12_15_OE1 = true;
1444   3                              ADCMUX_12_15_OE2 = true;
1445   3                              //CHIP4
1446   3                              ADCMUX_16_19_OE1 = true;
1447   3                              ADCMUX_16_19_OE2 = false;
1448   3                              ADCMUX_16_19_S1 = true;
1449   3                              ADCMUX_16_19_S0 = false;
1450   3                              //CHIP5
1451   3                              ADCMUX_20_23_OE1 = true;
1452   3                              ADCMUX_20_23_OE2 = true;
1453   3                              //CHIP6
1454   3                              ADCMUX_24_27_OE1 = true;
1455   3                              ADCMUX_24_27_OE2 = true;
1456   3                              break;
1457   3                      }
1458   2                      case 52:{//MPD20
1459   3                              //ADC MUX
1460   3                              AMX0SL = 0x05;
1461   3                              //CHIP0
1462   3                              ADCMUX_0_3_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 100 

1463   3                              ADCMUX_0_3_OE2 = true;
1464   3                              //CHIP1
1465   3                              ADCMUC_4_7_OE1 = true;
1466   3                              ADCMUC_4_7_OE2 = true;
1467   3                              //CHIP2
1468   3                              ADCMUX_8_11_OE1 = true;
1469   3                              ADCMUX_8_11_OE2 = true;
1470   3                              //CHIP3
1471   3                              ADCMUX_12_15_OE1 = true;
1472   3                              ADCMUX_12_15_OE2 = true;
1473   3                              //CHIP4
1474   3                              ADCMUX_16_19_OE1 = true;
1475   3                              ADCMUX_16_19_OE2 = true;
1476   3                              //CHIP5
1477   3                              ADCMUX_20_23_OE1 = false;
1478   3                              ADCMUX_20_23_OE2 = true;
1479   3                              ADCMUX_20_23_S1 = false;
1480   3                              ADCMUX_20_23_S0 = false;
1481   3                              //CHIP6
1482   3                              ADCMUX_24_27_OE1 = true;
1483   3                              ADCMUX_24_27_OE2 = true;
1484   3                              break;
1485   3                      }
1486   2                      case 53:{//MPD21
1487   3                              //ADC MUX
1488   3                              AMX0SL = 0x05;
1489   3                              //CHIP0
1490   3                              ADCMUX_0_3_OE1 = true;
1491   3                              ADCMUX_0_3_OE2 = true;
1492   3                              //CHIP1
1493   3                              ADCMUC_4_7_OE1 = true;
1494   3                              ADCMUC_4_7_OE2 = true;
1495   3                              //CHIP2
1496   3                              ADCMUX_8_11_OE1 = true;
1497   3                              ADCMUX_8_11_OE2 = true;
1498   3                              //CHIP3
1499   3                              ADCMUX_12_15_OE1 = true;
1500   3                              ADCMUX_12_15_OE2 = true;
1501   3                              //CHIP4
1502   3                              ADCMUX_16_19_OE1 = true;
1503   3                              ADCMUX_16_19_OE2 = true;
1504   3                              //CHIP5
1505   3                              ADCMUX_20_23_OE1 = false;
1506   3                              ADCMUX_20_23_OE2 = true;
1507   3                              ADCMUX_20_23_S1 = true;
1508   3                              ADCMUX_20_23_S0 = false;
1509   3                              //CHIP6
1510   3                              ADCMUX_24_27_OE1 = true;
1511   3                              ADCMUX_24_27_OE2 = true;
1512   3                              break;
1513   3                      }
1514   2                      case 54:{//MPD22
1515   3                              //ADC MUX
1516   3                              AMX0SL = 0x05;
1517   3                              //CHIP0
1518   3                              ADCMUX_0_3_OE1 = true;
1519   3                              ADCMUX_0_3_OE2 = true;
1520   3                              //CHIP1
1521   3                              ADCMUC_4_7_OE1 = true;
1522   3                              ADCMUC_4_7_OE2 = true;
1523   3                              //CHIP2
1524   3                              ADCMUX_8_11_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 101 

1525   3                              ADCMUX_8_11_OE2 = true;
1526   3                              //CHIP3
1527   3                              ADCMUX_12_15_OE1 = true;
1528   3                              ADCMUX_12_15_OE2 = true;
1529   3                              //CHIP4
1530   3                              ADCMUX_16_19_OE1 = true;
1531   3                              ADCMUX_16_19_OE2 = true;
1532   3                              //CHIP5
1533   3                              ADCMUX_20_23_OE1 = true;
1534   3                              ADCMUX_20_23_OE2 = false;
1535   3                              ADCMUX_20_23_S1 = false;
1536   3                              ADCMUX_20_23_S0 = false;
1537   3                              //CHIP6
1538   3                              ADCMUX_24_27_OE1 = true;
1539   3                              ADCMUX_24_27_OE2 = true;
1540   3                              break;
1541   3                      }
1542   2                      case 55:{//MPD23
1543   3                              //ADC MUX
1544   3                              AMX0SL = 0x06;
1545   3                              //CHIP0
1546   3                              ADCMUX_0_3_OE1 = true;
1547   3                              ADCMUX_0_3_OE2 = true;
1548   3                              //CHIP1
1549   3                              ADCMUC_4_7_OE1 = true;
1550   3                              ADCMUC_4_7_OE2 = true;
1551   3                              //CHIP2
1552   3                              ADCMUX_8_11_OE1 = true;
1553   3                              ADCMUX_8_11_OE2 = true;
1554   3                              //CHIP3
1555   3                              ADCMUX_12_15_OE1 = true;
1556   3                              ADCMUX_12_15_OE2 = true;
1557   3                              //CHIP4
1558   3                              ADCMUX_16_19_OE1 = true;
1559   3                              ADCMUX_16_19_OE2 = true;
1560   3                              //CHIP5
1561   3                              ADCMUX_20_23_OE1 = true;
1562   3                              ADCMUX_20_23_OE2 = false;
1563   3                              ADCMUX_20_23_S1 = true;
1564   3                              ADCMUX_20_23_S0 = false;
1565   3                              //CHIP6
1566   3                              ADCMUX_24_27_OE1 = true;
1567   3                              ADCMUX_24_27_OE2 = true;
1568   3                              break;
1569   3                      }
1570   2                      case 56:{//MPD24
1571   3                              //ADC MUX
1572   3                              AMX0SL = 0x06;
1573   3                              //CHIP0
1574   3                              ADCMUX_0_3_OE1 = true;
1575   3                              ADCMUX_0_3_OE2 = true;
1576   3                              //CHIP1
1577   3                              ADCMUC_4_7_OE1 = true;
1578   3                              ADCMUC_4_7_OE2 = true;
1579   3                              //CHIP2
1580   3                              ADCMUX_8_11_OE1 = true;
1581   3                              ADCMUX_8_11_OE2 = true;
1582   3                              //CHIP3
1583   3                              ADCMUX_12_15_OE1 = true;
1584   3                              ADCMUX_12_15_OE2 = true;
1585   3                              //CHIP4
1586   3                              ADCMUX_16_19_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 102 

1587   3                              ADCMUX_16_19_OE2 = true;
1588   3                              //CHIP5
1589   3                              ADCMUX_20_23_OE1 = true;
1590   3                              ADCMUX_20_23_OE2 = true;
1591   3                              //CHIP6
1592   3                              ADCMUX_24_27_OE1 = false;
1593   3                              ADCMUX_24_27_OE2 = true;
1594   3                              ADCMUX_24_27_S1 = false;
1595   3                              ADCMUX_24_27_S0 = false;
1596   3                              break;
1597   3                      }
1598   2                      case 57:{//MPD25
1599   3                              //ADC MUX
1600   3                              AMX0SL = 0x06;
1601   3                              //CHIP0
1602   3                              ADCMUX_0_3_OE1 = true;
1603   3                              ADCMUX_0_3_OE2 = true;
1604   3                              //CHIP1
1605   3                              ADCMUC_4_7_OE1 = true;
1606   3                              ADCMUC_4_7_OE2 = true;
1607   3                              //CHIP2
1608   3                              ADCMUX_8_11_OE1 = true;
1609   3                              ADCMUX_8_11_OE2 = true;
1610   3                              //CHIP3
1611   3                              ADCMUX_12_15_OE1 = true;
1612   3                              ADCMUX_12_15_OE2 = true;
1613   3                              //CHIP4
1614   3                              ADCMUX_16_19_OE1 = true;
1615   3                              ADCMUX_16_19_OE2 = true;
1616   3                              //CHIP5
1617   3                              ADCMUX_20_23_OE1 = true;
1618   3                              ADCMUX_20_23_OE2 = true;
1619   3                              //CHIP6
1620   3                              ADCMUX_24_27_OE1 = false;
1621   3                              ADCMUX_24_27_OE2 = true;
1622   3                              ADCMUX_20_23_S1 = true;
1623   3                              ADCMUX_20_23_S0 = false;
1624   3                              break;
1625   3                      }
1626   2                      case 58:{//MPD26
1627   3                              //ADC MUX
1628   3                              AMX0SL = 0x06;
1629   3                              //CHIP0
1630   3                              ADCMUX_0_3_OE1 = true;
1631   3                              ADCMUX_0_3_OE2 = true;
1632   3                              //CHIP1
1633   3                              ADCMUC_4_7_OE1 = true;
1634   3                              ADCMUC_4_7_OE2 = true;
1635   3                              //CHIP2
1636   3                              ADCMUX_8_11_OE1 = true;
1637   3                              ADCMUX_8_11_OE2 = true;
1638   3                              //CHIP3
1639   3                              ADCMUX_12_15_OE1 = true;
1640   3                              ADCMUX_12_15_OE2 = true;
1641   3                              //CHIP4
1642   3                              ADCMUX_16_19_OE1 = true;
1643   3                              ADCMUX_16_19_OE2 = true;
1644   3                              //CHIP5
1645   3                              ADCMUX_20_23_OE1 = true;
1646   3                              ADCMUX_20_23_OE2 = true;
1647   3                              //CHIP6
1648   3                              ADCMUX_24_27_OE1 = true;
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 103 

1649   3                              ADCMUX_24_27_OE2 = false;
1650   3                              ADCMUX_24_27_S1 = false;
1651   3                              ADCMUX_24_27_S0 = false;
1652   3                              break;
1653   3                      }
1654   2                      case 59:{//MPD27
1655   3                              //ADC MUX
1656   3                              AMX0SL = 0x06;
1657   3                              //CHIP0
1658   3                              ADCMUX_0_3_OE1 = true;
1659   3                              ADCMUX_0_3_OE2 = true;
1660   3                              //CHIP1
1661   3                              ADCMUC_4_7_OE1 = true;
1662   3                              ADCMUC_4_7_OE2 = true;
1663   3                              //CHIP2
1664   3                              ADCMUX_8_11_OE1 = true;
1665   3                              ADCMUX_8_11_OE2 = true;
1666   3                              //CHIP3
1667   3                              ADCMUX_12_15_OE1 = true;
1668   3                              ADCMUX_12_15_OE2 = true;
1669   3                              //CHIP4
1670   3                              ADCMUX_16_19_OE1 = true;
1671   3                              ADCMUX_16_19_OE2 = true;
1672   3                              //CHIP5
1673   3                              ADCMUX_20_23_OE1 = true;
1674   3                              ADCMUX_20_23_OE2 = true;
1675   3                              //CHIP6
1676   3                              ADCMUX_24_27_OE1 = true;
1677   3                              ADCMUX_24_27_OE2 = false;
1678   3                              ADCMUX_24_27_S1 = true;
1679   3                              ADCMUX_24_27_S0 = false;
1680   3                              break;
1681   3                      }
1682   2                      default:{
1683   3                              break;
1684   3                      }
1685   2              }
1686   1              AD0INT = 0;
1687   1              AD0BUSY = 1;//AD0BUSY写入1
1688   1      }
1689          static void initAdcData(adcTempDat_t *s){//初始化ADC滤波器
1690   1              uint8_t i;
1691   1              for(i = 0;i < CONFIG_SPLC_ADC_FILTER_TAP; i++){
1692   2                      s->dat[i] = 0x0;
1693   2              }
1694   1              s->out = 0;
1695   1              s->wIndex = 0;
1696   1      }
1697          static void refreshAdcData(adcTempDat_t *s , uint16_t dat){//更新ADC采集值 
1698   1              uint8_t i;
1699   1              uint16_t temp;
1700   1              uint32_t sum;
1701   1              s->dat[s->wIndex] = dat;
1702   1              s->wIndex ++;
1703   1              if(s->wIndex >= CONFIG_SPLC_ADC_FILTER_TAP){
1704   2                      s->wIndex = 0;
1705   2              }
1706   1              //计算总和
1707   1              sum = 0;
1708   1              for(i = 0;i < CONFIG_SPLC_ADC_FILTER_TAP;i ++){
1709   2                      sum += s->dat[i];
1710   2              }
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 104 

1711   1              //去掉一个最大值和一个最小值
1712   1              
1713   1              temp = (uint16_t)(sum / (uint32_t)CONFIG_SPLC_ADC_FILTER_TAP);
1714   1              s->out = temp;
1715   1      }
1716          static void assertCoilAddress(uint16_t adr){//检查线圈地址
1717   1              if(adr > (SPREG_END * 16))
1718   1                      while(1);
1719   1      }
1720          static void assertRegisterAddress(uint16_t adr){//检查寄存器地址
1721   1              if(adr >= SPREG_END)
1722   1                      while(1);
1723   1      }
1724          static void clearDM(void){//清除DM寄存器
1725   1              uint16_t i;
1726   1              for(i = 0;i <= DM_END;i ++)
1727   1              {
1728   2                      NVRAM0[i] = 0x0;
1729   2                      NVRAM1[i] = 0x0;
1730   2              }
1731   1      }
1732          static void clearMR(void){//清除MR寄存器
1733   1              uint16_t i;
1734   1              for(i = MR_START;i <= MR_END;i ++)
1735   1              {
1736   2                      NVRAM0[i] = 0x0;
1737   2                      NVRAM1[i] = 0x0;
1738   2              }
1739   1      }
1740          static void clearEM(void){//清除EM寄存器
1741   1              uint16_t i;
1742   1              for(i = EM_START;i <= EM_END;i ++)
1743   1              {
1744   2                      NVRAM0[i] = 0x0;
1745   2                      NVRAM1[i] = 0x0;
1746   2              }
1747   1      }
1748          static void clearR(void){//清除R寄存器
1749   1              uint16_t i;
1750   1              for(i = R_START;i <= R_END;i ++)
1751   1              {
1752   2                      NVRAM0[i] = 0x0;
1753   2                      NVRAM1[i] = 0x0;
1754   2              }
1755   1      }
1756          static void clearT(void){//清除T寄存器
1757   1              uint16_t i;
1758   1              for(i = T_1MS_START;i <= T_1MS_END;i ++)
1759   1              {
1760   2                      NVRAM0[i] = 0x0;
1761   2                      NVRAM1[i] = 0x0;
1762   2              }
1763   1              for(i = T_10MS_START;i <= T_10MS_END;i ++)
1764   1              {
1765   2                      NVRAM0[i] = 0x0;
1766   2                      NVRAM1[i] = 0x0;
1767   2              }
1768   1              for(i = T_100MS_START;i <= T_100MS_END;i ++)
1769   1              {
1770   2                      NVRAM0[i] = 0x0;
1771   2                      NVRAM1[i] = 0x0;
1772   2              }
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 105 

1773   1      }
1774          static void clearTD(void){//清除TD寄存器
1775   1              uint16_t i;
1776   1              for(i = TD_1MS_START;i <= TD_1MS_END;i ++)
1777   1              {
1778   2                      NVRAM0[i] = 0x0;
1779   2                      NVRAM1[i] = 0x0;
1780   2              }
1781   1              for(i = TD_10MS_START;i <= TD_10MS_END;i ++)
1782   1              {
1783   2                      NVRAM0[i] = 0x0;
1784   2                      NVRAM1[i] = 0x0;
1785   2              }
1786   1              for(i = TD_100MS_START;i <= TD_100MS_END;i ++)
1787   1              {
1788   2                      NVRAM0[i] = 0x0;
1789   2                      NVRAM1[i] = 0x0;
1790   2              }
1791   1      }
1792          static void clearC(void){//清除C寄存器
1793   1              uint16_t i;
1794   1              for(i = C_START;i <= C_END;i ++){
1795   2                      NVRAM0[i] = 0x0;
1796   2                      NVRAM1[i] = 0x0;
1797   2              }
1798   1      }
1799          static void clearX(void){//清除X寄存器
1800   1              uint16_t i;
1801   1              for(i = X_START;i <= X_END;i ++){
1802   2                      NVRAM0[i] = 0x0;
1803   2                      NVRAM1[i] = 0x0;
1804   2              }
1805   1      }
1806          static void clearY(void){//清除Y寄存器
1807   1              uint16_t i;
1808   1              for(i = Y_START;i <= Y_END;i ++){
1809   2                      NVRAM0[i] = 0x0;
1810   2                      NVRAM1[i] = 0x0;
1811   2              }
1812   1      }
1813          static void clearSPREG(void){
1814   1              uint16_t i;
1815   1              for(i = SPREG_START;i <= SPREG_END;i ++){
1816   2                      NVRAM0[i] = 0x0;
1817   2                      NVRAM1[i] = 0x0;
1818   2              }
1819   1      }
1820          static void clearSPCOIL(){
1821   1              uint16_t i;
1822   1              for(i = SPCOIL_START;i <= SPCOIL_END;i ++){
1823   2                      NVRAM0[i] = 0x0;
1824   2                      NVRAM1[i] = 0x0;
1825   2              }
1826   1      }
1827          static void nvramLoad(void){//从EPROM中载入NVRAM
1828   1              memset(NVRAM0, 0x0, (CONFIG_NVRAM_SIZE * 2));//初始化NVRAM
1829   1              epromRead(0, (uint8_t*)NVRAM0, (CONFIG_NVRAM_SIZE * 2));//从EPROM中恢复MR
1830   1              clearEM();
1831   1              clearR();
1832   1              clearT();
1833   1              clearTD();
1834   1              clearC();
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 106 

1835   1              clearX();
1836   1              clearY();
1837   1              clearSPREG();
1838   1              clearSPCOIL();
1839   1              memcpy(NVRAM1, NVRAM0, CONFIG_NVRAM_SIZE);
1840   1      }
1841          static void nvramSave(void){//强制将NVRAM存入EPROM
1842   1              DISABLE_INTERRUPT//关闭中断
1843   1              epromWrite(0x0, (uint8_t*)NVRAM0, ((MR_END + 1) * 2));
1844   1              ENABLE_INTERRUPT
1845   1      }
1846          static void nvramUpdata(void){//更新NVRAM->EPROM
1847   1              uint8_t *sp0, *sp1;
1848   1              uint16_t i;
1849   1              sp0 = (uint8_t*)(NVRAM0 + (MR_START * 2));
1850   1              sp1 = (uint8_t*)(NVRAM1 + (MR_START * 2));
1851   1              for(i = MR_START;i < ((MR_END + 1) * 2);i ++){//储存MR
1852   2                      if(*(sp0 + i) != *(sp1 + i)){
1853   3                              setLedEprom(true);
1854   3                              epromWriteOneByte(i, *(sp0 + i));
1855   3                              setLedEprom(false);
1856   3                      }
1857   2              }
1858   1              sp0 = (uint8_t*)(NVRAM0 + (DM_START * 2));
1859   1              sp1 = (uint8_t*)(NVRAM1 + (DM_START * 2));
1860   1              for(i = DM_START;i < ((DM_END + 1) * 2);i ++){//储存DM
1861   2                      if(*(sp0 + i) != *(sp1 + i)){
1862   3                              setLedEprom(true);
1863   3                              epromWriteOneByte(i, *(sp0 + i));
1864   3                              setLedEprom(false);
1865   3                      }
1866   2              }
1867   1              memcpy(NVRAM1, NVRAM0, (CONFIG_NVRAM_SIZE * 2));
1868   1      }
1869          /*****************************************************************************/
1870          //软逻辑指令
1871          void SET(uint16_t A){//置位
1872   1              assertCoilAddress(A);//检查地址范围
1873   1              NVRAM0[(A / 16)] |= 1 << (A % 16);
1874   1      }
1875          void RESET(uint16_t A){//置零
1876   1              assertCoilAddress(A);//检查地址范围
1877   1              NVRAM0[(A / 16)] &= ~(1 << (A % 16));
1878   1      }
1879          void FLIP(uint16_t A){//翻转
1880   1              uint16_t temp;
1881   1              assertCoilAddress(A);//检查地址范围
1882   1              temp= NVRAM0[(A / 16)] & (1 << (A % 16));
1883   1              if(temp)
1884   1                      RESET(A);
1885   1              else
1886   1                      SET(A);
1887   1      }
1888          uint8_t LD(uint16_t A){//载入
1889   1              assertCoilAddress(A);//检查地址范围
1890   1              return (uint8_t)(NVRAM0[(A / 16)] >> NVRAM0[(A % 16)]);
1891   1      }
1892          uint8_t LDP(uint16_t A){//脉冲上升沿
1893   1              uint8_t temp0, temp1;
1894   1              assertCoilAddress(A);//检查地址范围
1895   1              temp0 = (uint8_t)(NVRAM0[(A / 16)] >> NVRAM0[(A % 16)]);
1896   1              temp1 = (uint8_t)(NVRAM1[(A / 16)] >> NVRAM1[(A % 16)]);
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 107 

1897   1              if(temp0 && !temp1)
1898   1                      return 1;
1899   1              else
1900   1                      return 0;
1901   1      }
1902          uint8_t LDN(uint16_t A){//脉冲下降沿
1903   1              uint8_t temp0, temp1;
1904   1              assertCoilAddress(A);
1905   1              temp0 = (uint8_t)(NVRAM0[(A / 16)] >> NVRAM0[(A % 16)]);
1906   1              temp1 = (uint8_t)(NVRAM1[(A / 16)] >> NVRAM1[(A % 16)]);
1907   1              if(!temp0 && temp1)
1908   1                      return 1;
1909   1              else
1910   1                      return 0;
1911   1      }
1912          void T1MS(uint8_t A, uint8_t start, uint16_t value){//1MS延时器
1913   1      #if CONFIG_DEBUG
                      if(A > (TD_1MS_END - TD_1MS_START + 1))
                              printf("T1MS:%d Over Num\n", A);
              #endif
1917   1              if(start){
1918   2                      if(NVRAM0[(TD_1MS_START + A)] >= value){
1919   3                              NVRAM0[(T_1MS_START + (A / 16))] |= 1 << (A % 16);
1920   3                      }
1921   2                      else{
1922   3                              NVRAM0[(T_1MS_START + (A / 16))] &= ~(1 << (A % 16));
1923   3                      }
1924   2                              
1925   2              }
1926   1              else{
1927   2                      NVRAM0[(T_1MS_START + (A / 16))] &= ~(1 << (A % 16));
1928   2                      NVRAM0[(TD_1MS_START + A)] = 0x0;
1929   2              }       
1930   1      }
1931          void T10MS(uint8_t A, uint8_t start, uint16_t value){//10MS延时器
1932   1      #if CONFIG_DEBUG
                      if(A > (TD_10MS_END - TD_10MS_START + 1))
                              printf("T10MS:%d Over Num\n", A);
              #endif
1936   1              if(start){
1937   2                      if(NVRAM0[(TD_10MS_START + A)] >= value){
1938   3                              NVRAM0[(T_10MS_START + (A / 16))] |= 1 << (A % 16);
1939   3                      }
1940   2                      else{
1941   3                              NVRAM0[(T_10MS_START + (A / 16))] &= ~(1 << (A % 16));
1942   3                      }
1943   2              }
1944   1              else{
1945   2                      NVRAM0[(T_10MS_START + (A / 16))] &= ~(1 << (A % 16));
1946   2                      NVRAM0[(TD_10MS_START + A)] = 0x0;
1947   2              }       
1948   1      }
1949          void T100MS(uint8_t A, uint8_t start, uint16_t value){//100MS延时器
1950   1      #if CONFIG_DEBUG
                      if(A > (TD_100MS_END - TD_100MS_START + 1))
                              printf("T100MS:%d Over Num\n", A);
              #endif
1954   1              if(start){
1955   2                      if(NVRAM0[(TD_100MS_START + A)] >= value){
1956   3                              NVRAM0[(T_100MS_START + (A / 16))] |= 1 << (A % 16);
1957   3                      }
1958   2                      else{
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 108 

1959   3                              NVRAM0[(T_100MS_START + (A / 16))] &= ~(1 << (A % 16));
1960   3                      }       
1961   2              }
1962   1              else{
1963   2                      NVRAM0[(T_100MS_START + (A / 16))] &= ~(1 << (A % 16));
1964   2                      NVRAM0[(TD_100MS_START + A)] = 0x0;
1965   2              }
1966   1      }
1967          int16_t TNTC(int16_t dat){//CODE转换为NTC测量温度温度
1968   1              uint16_t temp;
1969   1              fp32_t ftemp;
1970   1              if(dat >= CONFIG_SPLC_ADC_INTERNAL_VREF) dat = CONFIG_SPLC_ADC_INTERNAL_VREF;//限制输入最大值
1971   1              if(dat < 0) dat = 0;
1972   1              
1973   1              temp = (int16_t)(CONFIG_SPLC_ADC_INTERNAL_VREF * dat / 4096);//单位mV
1974   1              temp = 10000 * 5000 / (5000 - temp);//电源5V 分压电阻10K
1975   1              
1976   1              ftemp = ((1.0 / 3477)*log((fp32_t)(temp) / 10000)) + (1 / (25+273.0));//limo R25=10740,B=3450    uniquemode
             - 3988
1977   1              ftemp = ( 1.0 / ftemp ) - 273.0;
1978   1              if(ftemp >= 100) ftemp = 100;
1979   1              if(ftemp <= -100) ftemp = -100;
1980   1              return (int16_t)(ftemp * 10);
1981   1      }
1982          int16_t TENV(int16_t dat){//CODE转换为环境温度
1983   1              uint16_t temp;
1984   1              temp = (int16_t)(CONFIG_SPLC_ADC_INTERNAL_VREF * dat / 4096);//单位mV
1985   1              temp = (int16_t)((temp - CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET) * 1000 / CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN);
1986   1              return temp;
1987   1      }
1988          int16_t MAX(int16_t *s, uint8_t len){//找出长度为len的数据s中的最大值
1989   1              int16_t max;
1990   1              uint8_t i;
1991   1              max = *s;
1992   1              for(i = 0;i < len;i ++){
1993   2                      if(*(s +i) > max){
1994   3                              max = *(s + i);
1995   3                      }
1996   2              }
1997   1              return max;
1998   1      }
1999          int16_t MIN(int16_t *s, uint8_t len){//找出长度为len的数据s中的最小值
2000   1              int16_t min;
2001   1              uint8_t i;
2002   1              min = *s;
2003   1              for(i = 0;i < len;i ++){
2004   2                      if(*(s +i) < min){
2005   3                              min = *(s + i);
2006   3                      }
2007   2              }
2008   1              return min;
2009   1      }
2010          /*****************************************************************************/
2011          static void wdtInit(void){//看门狗初始化
2012   1      #ifdef C8051F020
2013   1              WDTCN = 0;//47mS
2014   1      #endif
2015   1      }
2016          static void wdtEnable(void){//使能看门狗
2017   1      #ifdef C8051F020
2018   1              WDTCN = 0xA5;
2019   1      #endif
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 109 

2020   1      }
2021          static void wdtDisable(void){//关闭看门狗(未锁定)
2022   1              uint8_t flagEA;
2023   1              flagEA = EA;
2024   1              EA = 0;
2025   1      #ifdef C8051F020
2026   1              WDTCN = 0xDE;
2027   1          WDTCN = 0xAD;
2028   1      #endif
2029   1      #ifdef C8051F020
2030   1      #endif
2031   1              EA = flagEA;
2032   1      }
2033          static void wdtFeed(void){//喂狗
2034   1      #ifdef C8051F020
2035   1              WDTCN = 0xA5;
2036   1      #endif
2037   1      }
2038          
2039          static void pcaInit(void){//硬件PCA初始化
2040   1      }
2041          static void timer0Init(void){//硬件sTimer计时器初始化
2042   1              data uint16_t temp;
2043   1              TimerCounter_1mS = 0;
2044   1              TimerCounter_10mS = 0;
2045   1      #ifdef C8051F020
2046   1              temp = (uint16_t)(65536 - (CONFIG_SYSCLK / 12 /CONFIG_SOFTPLC_HWTIME));
2047   1              Timer0_L = temp & 0xFF;
2048   1              Timer0_H = (temp >> 8) & 0xFF;
2049   1              TH0 = Timer0_H;// Init T0 High register
2050   1              TL0 = Timer0_L;// Init T0 Low register
2051   1              CKCON &= ~(1 << 3);//SYSCLK / 12        
2052   1              TMOD &= 0xF0;
2053   1              TMOD |= (1 << 0);// T0 in 16-bit mode
2054   1              ET0 = 1;// T0 interrupt enabled
2055   1              TR0 = 1;// T0 ON
2056   1      #endif
2057   1      }
2058          static void timer0Isr(void) interrupt INTERRUPT_TIMER0{//硬件sTimer计时器中断 1mS
2059   1              uint16_t i;
2060   1              TF0 = 0;
2061   1              TR0 = 0;
2062   1              TH0 = Timer0_H;
2063   1              TL0 = Timer0_L;
2064   1              TR0 = 1;
2065   1              if((NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] >> (SPCOIL_PS1MS % 16)) & 0x01){//ON
2066   2                      NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS1MS % 16));
2067   2              }
2068   1              else{//OFF
2069   2                      NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS1MS % 16));
2070   2              }
2071   1              
2072   1              for(i = TD_1MS_START;i <= TD_1MS_END;i ++){//1mS计时
2073   2                      if(NVRAM0[i] < SHRT_MAX){
2074   3                              NVRAM0[i] ++;
2075   3                      }
2076   2              }
2077   1              if(TimerCounter_1mS >= 10){//10mS计算
2078   2                      if((NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] >> (SPCOIL_PS10MS % 16)) & 0x01){//ON
2079   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS10MS % 16));
2080   3                      }
2081   2                      else{//OFF
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 110 

2082   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS10MS % 16));
2083   3                      }
2084   2                      for(i = TD_10MS_START;i <= TD_10MS_END;i ++){
2085   3                              if(NVRAM0[i] < SHRT_MAX){
2086   4                                      NVRAM0[i] ++;
2087   4                              }
2088   3                      }
2089   2                      TimerCounter_10mS ++;
2090   2                      TimerCounter_1mS = 0;
2091   2              }
2092   1              if(TimerCounter_10mS >= 10){//100ms计算
2093   2                      if((NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] >> (SPCOIL_PS100MS % 16)) & 0x01){//ON
2094   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS100MS % 16));
2095   3                      }
2096   2                      else{//OFF
2097   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS100MS % 16));
2098   3                      }
2099   2                      for(i = TD_100MS_START;i < TD_100MS_END;i ++){
2100   3                              if(NVRAM0[i] < SHRT_MAX){
2101   4                                      NVRAM0[i] ++;
2102   4                              }
2103   3                      }
2104   2                      TimerCounter_10mS = 0;
2105   2                      if(getLedRun()){
2106   3                              setLedRun(false);
2107   3                      }
2108   2                      else{
2109   3                              setLedRun(true);
2110   3                      }
2111   2              }
2112   1      #if CONFIG_SPLC_USING_ADC == 1
2113   1              adcProcess();//ADC扫描
2114   1      #endif
2115   1              TimerCounter_1mS ++;
2116   1      }
2117          
2118          static void inputInit(void){//IO输入滤波器初始化
2119   1              memset(inputFilter, 0x0, (X_END - X_START + 1) * 16);
2120   1      }
2121          static void outputInit(void){
2122   1      #ifdef C8051F020
2123   1              
2124   1      #endif
2125   1      }
2126          static void inputRefresh(void){//获取输入IO
2127   1              uint8_t ctemp0;
2128   1              ctemp0 = ((P6 >> 7) & 0x01);
2129   1              if(ctemp0){
2130   2                      if(inputFilter[0] < CONFIG_INPUT_FILTER_TIME){
2131   3                              inputFilter[0] ++;
2132   3                      }
2133   2                      else{
2134   3                              NVRAM0[X_START] |= (int16_t)(1 << 0);
2135   3                      }
2136   2              }
2137   1              else{
2138   2                      if(inputFilter[0] > (CONFIG_INPUT_FILTER_TIME * -1)){
2139   3                              inputFilter[0] --;
2140   3                      }
2141   2                      else{
2142   3                              NVRAM0[X_START] &= ~(uint16_t)(1 << 0);
2143   3                      }
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 111 

2144   2              }
2145   1              ctemp0 = ((P6 >> 6) & 0x01);
2146   1              if(ctemp0){
2147   2                      if(inputFilter[1] < CONFIG_INPUT_FILTER_TIME){
2148   3                              inputFilter[1] ++;
2149   3                      }
2150   2                      else{
2151   3                              NVRAM0[X_START] |= (int16_t)(1 << 1);
2152   3                      }
2153   2              }
2154   1              else{
2155   2                      if(inputFilter[1] > (CONFIG_INPUT_FILTER_TIME * -1)){
2156   3                              inputFilter[1] --;
2157   3                      }
2158   2                      else{
2159   3                              NVRAM0[X_START] &= ~(uint16_t)(1 << 1);
2160   3                      }
2161   2              }
2162   1      }
2163          static void outputRefresh(void){//设置输出IO
2164   1              if((NVRAM0[Y_START] >> 0) & 0x01){//P6_5
2165   2                      P6 |= (uint8_t)(1 << 5);
2166   2              }
2167   1              else{
2168   2                      P6 &= ~(uint8_t)(1 << 5);
2169   2              }
2170   1              if((NVRAM0[Y_START] >> 1) & 0x01){//P6_4
2171   2                      P6 |= (uint8_t)(1 << 4);
2172   2              }
2173   1              else{
2174   2                      P6 &= ~(uint8_t)(1 << 4);
2175   2              }
2176   1      }
2177          static void chipAdcInit(void){//ADC模块初始化
2178   1              uint8_t i;
2179   1              //CHIP0
2180   1              ADCMUX_0_3_OE1 = true;
2181   1              ADCMUX_0_3_OE2 = true;
2182   1              //CHIP1
2183   1              ADCMUC_4_7_OE1 = true;
2184   1              ADCMUC_4_7_OE2 = true;
2185   1              //CHIP2
2186   1              ADCMUX_8_11_OE1 = true;
2187   1              ADCMUX_8_11_OE2 = true;
2188   1              //CHIP3
2189   1              ADCMUX_12_15_OE1 = true;
2190   1              ADCMUX_12_15_OE2 = true;
2191   1              //CHIP4
2192   1              ADCMUX_16_19_OE1 = true;
2193   1              ADCMUX_16_19_OE2 = true;
2194   1              //CHIP5
2195   1              ADCMUX_20_23_OE1 = true;
2196   1              ADCMUX_20_23_OE2 = true;
2197   1              //CHIP6
2198   1              ADCMUX_24_27_OE1 = true;
2199   1              ADCMUX_24_27_OE2 = true;
2200   1      #ifdef C8051F020
2201   1              ADC0CN = 0x0;//软件触发
2202   1              ADC0CN |= (1 << 6);//AD0TM = 1 启用跟踪
2203   1              ADC0CN |= (1 << 7);//AD0EN = 1 
2204   1              ADC0CF = 0x0;
2205   1              ADC0CF |= (CONFIG_SYSCLK / SAR_CLK) << 3;     // ADC conversion clock = 2.5MHz
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 112 

2206   1              AMX0CF = 0x00;                      // AIN inputs are single-ended (default)
2207   1              AMX0SL = 0x00;                      // Select AIN0.1 pin as ADC mux input
2208   1              AD0INT = 0;
2209   1              AD0BUSY = 1;//AD0BUSY写入1
2210   1      #endif
2211   1              adcSelect = 0;
2212   1              for(i = 0;i <= CONFIG_SPLC_ADC_CHANNLE;i ++){
2213   2                      initAdcData(&adcTempDat[i]);
2214   2              }
2215   1      }
2216          static void refreshDac(void){//刷新DAC
2217   1              //LD板0
2218   1              if(NVRAM0[EM_DAC_0] != NVRAM1[EM_DAC_0]){//CH0
2219   2                      setLedDac(true);
2220   2                      dac8568_0_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_0]);
2221   2                      setLedDac(false);
2222   2              }
2223   1              if(NVRAM0[EM_DAC_1] != NVRAM1[EM_DAC_1]){//CH1
2224   2                      setLedDac(true);
2225   2                      dac8568_0_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_1]);
2226   2                      setLedDac(false);
2227   2              }
2228   1              if(NVRAM0[EM_DAC_2] != NVRAM1[EM_DAC_2]){//CH2
2229   2                      setLedDac(true);
2230   2                      dac8568_0_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_2]);
2231   2                      setLedDac(false);
2232   2              }
2233   1              if(NVRAM0[EM_DAC_3] != NVRAM1[EM_DAC_3]){//CH3
2234   2                      setLedDac(true);
2235   2                      dac8568_0_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_3]);
2236   2                      setLedDac(false);
2237   2              }
2238   1              if(NVRAM0[EM_DAC_4] != NVRAM1[EM_DAC_4]){//CH4
2239   2                      setLedDac(true);
2240   2                      dac8568_0_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_4]);
2241   2                      setLedDac(false);
2242   2              }
2243   1              if(NVRAM0[EM_DAC_5] != NVRAM1[EM_DAC_5]){//CH5
2244   2                      setLedDac(true);
2245   2                      dac8568_0_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_5]);
2246   2                      setLedDac(false);
2247   2              }
2248   1              if(NVRAM0[EM_DAC_6] != NVRAM1[EM_DAC_6]){//CH6
2249   2                      setLedDac(true);
2250   2                      dac8568_0_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_6]);
2251   2                      setLedDac(false);
2252   2              }
2253   1              if(NVRAM0[EM_DAC_7] != NVRAM1[EM_DAC_7]){//CH7
2254   2                      setLedDac(true);
2255   2                      dac8568_0_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_7]);
2256   2                      setLedDac(false);
2257   2              }
2258   1              //LD板1
2259   1              if(NVRAM0[EM_DAC_8] != NVRAM1[EM_DAC_8]){//CH8
2260   2                      setLedDac(true);
2261   2                      dac8568_1_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_8]);
2262   2                      setLedDac(false);
2263   2              }
2264   1              if(NVRAM0[EM_DAC_9] != NVRAM1[EM_DAC_9]){//CH9
2265   2                      setLedDac(true);
2266   2                      dac8568_1_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_9]);
2267   2                      setLedDac(false);
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 113 

2268   2              }
2269   1              if(NVRAM0[EM_DAC_10] != NVRAM1[EM_DAC_10]){//CH10
2270   2                      setLedDac(true);
2271   2                      dac8568_1_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_10]);
2272   2                      setLedDac(false);
2273   2              }
2274   1              if(NVRAM0[EM_DAC_11] != NVRAM1[EM_DAC_11]){//CH11
2275   2                      setLedDac(true);
2276   2                      dac8568_1_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_11]);
2277   2                      setLedDac(false);
2278   2              }
2279   1              if(NVRAM0[EM_DAC_12] != NVRAM1[EM_DAC_12]){//CH12
2280   2                      setLedDac(true);
2281   2                      dac8568_1_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_12]);
2282   2                      setLedDac(false);
2283   2              }
2284   1              if(NVRAM0[EM_DAC_13] != NVRAM1[EM_DAC_13]){//CH13
2285   2                      setLedDac(true);
2286   2                      dac8568_1_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_13]);
2287   2                      setLedDac(false);
2288   2              }
2289   1              if(NVRAM0[EM_DAC_14] != NVRAM1[EM_DAC_14]){//CH14
2290   2                      setLedDac(true);
2291   2                      dac8568_1_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_14]);
2292   2                      setLedDac(false);
2293   2              }
2294   1              if(NVRAM0[EM_DAC_15] != NVRAM1[EM_DAC_15]){//CH15
2295   2                      setLedDac(true);
2296   2                      dac8568_1_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_15]);
2297   2                      setLedDac(false);
2298   2              }
2299   1              //LD板2
2300   1              if(NVRAM0[EM_DAC_16] != NVRAM1[EM_DAC_16]){//CH16
2301   2                      setLedDac(true);
2302   2                      dac8568_2_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_16]);
2303   2                      setLedDac(false);
2304   2              }
2305   1              if(NVRAM0[EM_DAC_17] != NVRAM1[EM_DAC_17]){//CH17
2306   2                      setLedDac(true);
2307   2                      dac8568_2_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_17]);
2308   2                      setLedDac(false);
2309   2              }
2310   1              if(NVRAM0[EM_DAC_18] != NVRAM1[EM_DAC_18]){//CH18
2311   2                      setLedDac(true);
2312   2                      dac8568_2_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_18]);
2313   2                      setLedDac(false);
2314   2              }
2315   1              if(NVRAM0[EM_DAC_19] != NVRAM1[EM_DAC_19]){//CH19
2316   2                      setLedDac(true);
2317   2                      dac8568_2_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_19]);
2318   2                      setLedDac(false);
2319   2              }
2320   1              if(NVRAM0[EM_DAC_20] != NVRAM1[EM_DAC_20]){//CH20
2321   2                      setLedDac(true);
2322   2                      dac8568_2_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_20]);
2323   2                      setLedDac(false);
2324   2              }
2325   1              if(NVRAM0[EM_DAC_21] != NVRAM1[EM_DAC_21]){//CH21
2326   2                      setLedDac(true);
2327   2                      dac8568_2_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_21]);
2328   2                      setLedDac(false);
2329   2              }
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 114 

2330   1              if(NVRAM0[EM_DAC_22] != NVRAM1[EM_DAC_22]){//CH22
2331   2                      setLedDac(true);
2332   2                      dac8568_2_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_22]);
2333   2                      setLedDac(false);
2334   2              }
2335   1              if(NVRAM0[EM_DAC_23] != NVRAM1[EM_DAC_23]){//CH23
2336   2                      setLedDac(true);
2337   2                      dac8568_2_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_23]);
2338   2                      setLedDac(false);
2339   2              }
2340   1              //板4
2341   1              if(NVRAM0[EM_DAC_24] != NVRAM1[EM_DAC_24]){//CH24
2342   2                      setLedDac(true);
2343   2                      dac8568_3_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_24]);
2344   2                      setLedDac(false);
2345   2              }
2346   1              if(NVRAM0[EM_DAC_25] != NVRAM1[EM_DAC_25]){//CH25
2347   2                      setLedDac(true);
2348   2                      dac8568_3_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_26]);
2349   2                      setLedDac(false);
2350   2              }
2351   1              if(NVRAM0[EM_DAC_26] != NVRAM1[EM_DAC_26]){//CH26
2352   2                      setLedDac(true);
2353   2                      dac8568_3_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_26]);
2354   2                      setLedDac(false);
2355   2              }
2356   1              if(NVRAM0[EM_DAC_27] != NVRAM1[EM_DAC_27]){//CH27
2357   2                      setLedDac(true);
2358   2                      dac8568_3_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_27]);
2359   2                      setLedDac(false);
2360   2              }
2361   1              if(NVRAM0[EM_DAC_28] != NVRAM1[EM_DAC_28]){//CH28
2362   2                      setLedDac(true);
2363   2                      dac8568_3_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_28]);
2364   2                      setLedDac(false);
2365   2              }
2366   1              if(NVRAM0[EM_DAC_29] != NVRAM1[EM_DAC_29]){//CH29
2367   2                      setLedDac(true);
2368   2                      dac8568_3_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_29]);
2369   2                      setLedDac(false);
2370   2              }
2371   1              if(NVRAM0[EM_DAC_30] != NVRAM1[EM_DAC_30]){//CH30
2372   2                      setLedDac(true);
2373   2                      dac8568_3_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_30]);
2374   2                      setLedDac(false);
2375   2              }
2376   1              if(NVRAM0[EM_DAC_31] != NVRAM1[EM_DAC_31]){//CH31
2377   2                      setLedDac(true);
2378   2                      dac8568_3_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_31]);
2379   2                      setLedDac(false);
2380   2              }
2381   1      }
2382          static void chipDacInit(void){//初始化DAC
2383   1              dac8568_0_Init();
2384   1              dac8568_1_Init();
2385   1              dac8568_2_Init();
2386   1              dac8568_3_Init();
2387   1      }
2388          void sPlcInit(void){//软逻辑初始化
2389   1              setLedError(true);
2390   1              setLedRun(false);
2391   1              wdtInit();//看门狗使能
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 115 

2392   1              wdtDisable();//屏蔽看门狗       
2393   1      #if CONFIG_SPLC_USING_EPROM == 1
2394   1              nvramLoad();//上电恢复NVRAM
2395   1      #endif
2396   1              
2397   1      #if CONFIG_SPLC_USING_ADC == 1
2398   1              chipAdcInit();//初始化ADC模块
2399   1      #endif
2400   1              
2401   1      #if CONFIG_SPLC_USING_DAC == 1
2402   1              chipDacInit();//初始化DAC模块
2403   1      #endif
2404   1              
2405   1      #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
2406   1              initModbus(CONFIG_MB_RTU_SLAVE_ADDRESS, CONFIG_UART0_BAUDRATE);
2407   1      #endif
2408   1              timer0Init();//初始化硬件计时器模块
2409   1              NVRAM0[(SPCOIL_START + (SPCOIL_ON / 16))] |= (uint16_t)(1 << (SPCOIL_ON % 16));
2410   1              setLedError(false);
2411   1      }
2412          void sPlcProcessStart(void){//sPLC轮询起始
2413   1      #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
2414   1              modbusPorcess();//处理MODBUS
2415   1      #endif
2416   1      #if CONFIG_SPLC_USING_IO_INPUT == 1
2417   1              inputRefresh();//读取X口输入
2418   1      #endif
2419   1      #if CONFIG_SPLC_USING_WDT == 1
                      wdtFeed();
              #endif
2422   1      }
2423          void sPlcProcessEnd(void){//sPLC轮询结束
2424   1      #if CONFIG_SPLC_USING_WDT == 1
                      wdtFeed();//喂狗
              #endif
2427   1      #if CONFIG_SPLC_USING_IO_OUTPUT == 1
2428   1              outputRefresh();//更新Y口输出
2429   1      #endif
2430   1      #if CONFIG_SPLC_USING_DAC
2431   1              refreshDac();//更新DAC输出
2432   1      #endif
2433   1      #if CONFIG_SPLC_USING_EPROM == 1
2434   1              nvramUpdata();//更新NVRAM
2435   1      #endif
2436   1      }
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 116 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com01B8 (BEGIN)
0000         L?0441:
0000         L?0442:
0000 ED                MOV     A,R5
0001 25E0              ADD     A,ACC
0003 FF                MOV     R7,A
0004 EC                MOV     A,R4
0005 33                RLC     A
0006 FE                MOV     R6,A
0007 7400        R     MOV     A,#LOW NVRAM0
0009 2F                ADD     A,R7
000A F582              MOV     DPL,A
000C 7400        R     MOV     A,#HIGH NVRAM0
000E 3E                ADDC    A,R6
000F F583              MOV     DPH,A
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 F0                MOVX    @DPTR,A
0015 7400        R     MOV     A,#LOW NVRAM1
0017 2F                ADD     A,R7
0018 F582              MOV     DPL,A
001A 7400        R     MOV     A,#HIGH NVRAM1
001C         L?0443:
001C 3E                ADDC    A,R6
001D F583              MOV     DPH,A
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
0023 22                RET     
0024         L?0444:
0024         L?0445:
0024 75BB06            MOV     AMX0SL,#06H
0027         L?0446:
0027 D296              SETB    ADCMUX_0_3_OE1
0029 D295              SETB    ADCMUX_0_3_OE2
002B         L?0447:
002B D290              SETB    ADCMUC_4_7_OE1
002D D293              SETB    ADCMUC_4_7_OE2
002F         L?0448:
002F D2A7              SETB    ADCMUX_8_11_OE1
0031 D2A5              SETB    ADCMUX_8_11_OE2
0033         L?0449:
0033 D2A3              SETB    ADCMUX_12_15_OE1
0035 D2A1              SETB    ADCMUX_12_15_OE2
0037 D2B6              SETB    ADCMUX_16_19_OE1
0039 D2B4              SETB    ADCMUX_16_19_OE2
003B 22                RET     
003C         L?0450:
003C         L?0451:
003C AD07              MOV     R5,AR7
003E AC06              MOV     R4,AR6
0040 120000      R     LCALL   _assertCoilAddress
0043 ED                MOV     A,R5
0044 540F              ANL     A,#0FH
0046 25E0              ADD     A,ACC
0048 FF                MOV     R7,A
0049 E4                CLR     A
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 117 

004A 33                RLC     A
004B FE                MOV     R6,A
004C 7400        R     MOV     A,#LOW NVRAM0
004E 2F                ADD     A,R7
004F F582              MOV     DPL,A
0051 7400        R     MOV     A,#HIGH NVRAM0
0053 3E                ADDC    A,R6
0054 F583              MOV     DPH,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FB                MOV     R3,A
0059         L?0452:
0059 EC                MOV     A,R4
005A C4                SWAP    A
005B F8                MOV     R0,A
005C 54F0              ANL     A,#0F0H
005E C8                XCH     A,R0
005F 68                XRL     A,R0
0060 FE                MOV     R6,A
0061 ED                MOV     A,R5
0062         L?0453:
0062 C4                SWAP    A
0063 540F              ANL     A,#0FH
0065 48                ORL     A,R0
0066 25E0              ADD     A,ACC
0068 FF                MOV     R7,A
0069 EE                MOV     A,R6
006A         L?0454:
006A 33                RLC     A
006B FE                MOV     R6,A
006C         L?0455:
006C 7400        R     MOV     A,#LOW NVRAM0
006E 2F                ADD     A,R7
006F F582              MOV     DPL,A
0071 7400        R     MOV     A,#HIGH NVRAM0
0073 3E                ADDC    A,R6
0074 F583              MOV     DPH,A
0076 22                RET     
0077         L?0456:
0077         L?0457:
0077 75BB03            MOV     AMX0SL,#03H
007A         L?0458:
007A D296              SETB    ADCMUX_0_3_OE1
007C D295              SETB    ADCMUX_0_3_OE2
007E D290              SETB    ADCMUC_4_7_OE1
0080 D293              SETB    ADCMUC_4_7_OE2
0082 D2A7              SETB    ADCMUX_8_11_OE1
0084 D2A5              SETB    ADCMUX_8_11_OE2
0086 22                RET     
0087         L?0459:
0087 7F01              MOV     R7,#01H
0089 120000      R     LCALL   _?setLedDac
008C 900000      R     MOV     DPTR,#NVRAM0+0D4H
008F         L?0460:
008F E0                MOVX    A,@DPTR
0090 FE                MOV     R6,A
0091 A3                INC     DPTR
0092 E0                MOVX    A,@DPTR
0093 FD                MOV     R5,A
0094 AC06              MOV     R4,AR6
0096 22                RET     
0097         L?0461:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 118 

0097         L?0462:
0097 E500        R     MOV     A,A
0099         L?0463:
0099 C4                SWAP    A
009A         L?0464:
009A 540F              ANL     A,#0FH
009C         L?0465:
009C 25E0              ADD     A,ACC
009E FF                MOV     R7,A
009F E4                CLR     A
00A0 33                RLC     A
00A1 FE                MOV     R6,A
00A2 22                RET     
00A3         L?0466:
00A3         L?0467:
00A3 E500        R     MOV     A,A
00A5         L?0468:
00A5 540F              ANL     A,#0FH
00A7 FF                MOV     R7,A
00A8 7401              MOV     A,#01H
00AA 7E00              MOV     R6,#00H
00AC A807              MOV     R0,AR7
00AE 08                INC     R0
00AF 22                RET     
00B0         L?0469:
00B0 AB00        R     MOV     R3,sp1
00B2 AA00        R     MOV     R2,sp1+01H
00B4 A900        R     MOV     R1,sp1+02H
00B6 850082      R     MOV     DPL,i+01H
00B9 850083      R     MOV     DPH,i
00BC 120000      E     LCALL   ?C?CLDOPTR
00BF FF                MOV     R7,A
00C0         L?0470:
00C0 AB00        R     MOV     R3,sp0
00C2 AA00        R     MOV     R2,sp0+01H
00C4 A900        R     MOV     R1,sp0+02H
00C6 850082      R     MOV     DPL,i+01H
00C9 850083      R     MOV     DPH,i
00CC 020000      E     LJMP    ?C?CLDOPTR
00CF         L?0471:
00CF         L?0472:
00CF 75BB02            MOV     AMX0SL,#02H
00D2 D296              SETB    ADCMUX_0_3_OE1
00D4 D295              SETB    ADCMUX_0_3_OE2
00D6 D290              SETB    ADCMUC_4_7_OE1
00D8 D293              SETB    ADCMUC_4_7_OE2
00DA 22                RET     
00DB         L?0473:
00DB 7400        R     MOV     A,#LOW NVRAM1
00DD 2F                ADD     A,R7
00DE F582              MOV     DPL,A
00E0 7400        R     MOV     A,#HIGH NVRAM1
00E2 3E                ADDC    A,R6
00E3 F583              MOV     DPH,A
00E5 A3                INC     DPTR
00E6 E0                MOVX    A,@DPTR
00E7 FA                MOV     R2,A
00E8 EC                MOV     A,R4
00E9 C4                SWAP    A
00EA F8                MOV     R0,A
00EB 54F0              ANL     A,#0F0H
00ED C8                XCH     A,R0
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 119 

00EE 68                XRL     A,R0
00EF FE                MOV     R6,A
00F0 ED                MOV     A,R5
00F1 C4                SWAP    A
00F2 540F              ANL     A,#0FH
00F4 48                ORL     A,R0
00F5 25E0              ADD     A,ACC
00F7 FF                MOV     R7,A
00F8 EE                MOV     A,R6
00F9 33                RLC     A
00FA FE                MOV     R6,A
00FB 7400        R     MOV     A,#LOW NVRAM1
00FD 2F                ADD     A,R7
00FE F582              MOV     DPL,A
0100 7400        R     MOV     A,#HIGH NVRAM1
0102         L?0474:
0102 3E                ADDC    A,R6
0103 F583              MOV     DPH,A
0105 E0                MOVX    A,@DPTR
0106 FE                MOV     R6,A
0107 A3                INC     DPTR
0108 E0                MOVX    A,@DPTR
0109 22                RET     
010A         L?0475:
010A         L?0476:
010A F4                CPL     A
010B FF                MOV     R7,A
010C EE                MOV     A,R6
010D F4                CPL     A
010E FE                MOV     R6,A
010F E0                MOVX    A,@DPTR
0110 5E                ANL     A,R6
0111 FE                MOV     R6,A
0112 A3                INC     DPTR
0113 E0                MOVX    A,@DPTR
0114 5F                ANL     A,R7
0115 22                RET     
0116         L?0481:
0116         L?0482:
0116 75BB01            MOV     AMX0SL,#01H
0119 D296              SETB    ADCMUX_0_3_OE1
011B D295              SETB    ADCMUX_0_3_OE2
011D 22                RET     
011E         L?0487:
011E C2A2              CLR     ADCMUX_12_15_S1
0120         L?0488:
0120 C2A0              CLR     ADCMUX_12_15_S0
0122 D2B6              SETB    ADCMUX_16_19_OE1
0124 D2B4              SETB    ADCMUX_16_19_OE2
0126 D2B2              SETB    ADCMUX_20_23_OE1
0128 D2B0              SETB    ADCMUX_20_23_OE2
012A 22                RET     
012B         L?0489:
012B         L?0490:
012B EF                MOV     A,R7
012C         L?0491:
012C 75F002            MOV     B,#02H
012F A4                MUL     AB
0130 F582              MOV     DPL,A
0132 85F083            MOV     DPH,B
0135 22                RET     
0136         L?0492:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 120 

0136 E4                CLR     A
0137 FF                MOV     R7,A
0138 FE                MOV     R6,A
0139 7DC8              MOV     R5,#0C8H
013B         L?0493:
013B AB00        R     MOV     R3,ftemp+03H
013D AA00        R     MOV     R2,ftemp+02H
013F A900        R     MOV     R1,ftemp+01H
0141 A800        R     MOV     R0,ftemp
0143 22                RET     
0144         L?0494:
0144 EE                MOV     A,R6
0145 33                RLC     A
0146 95E0              SUBB    A,ACC
0148 FD                MOV     R5,A
0149 FC                MOV     R4,A
014A E4                CLR     A
014B 7B98              MOV     R3,#098H
014D 7A08              MOV     R2,#08H
014F F9                MOV     R1,A
0150 F8                MOV     R0,A
0151 120000      E     LCALL   ?C?LMUL
0154 E4                CLR     A
0155 FB                MOV     R3,A
0156 7A10              MOV     R2,#010H
0158 F9                MOV     R1,A
0159 F8                MOV     R0,A
015A 020000      E     LJMP    ?C?SLDIV
015D         L?0495:
015D         L?0496:
015D 1500        E     DEC     ?C_IBP
015F A800        E     MOV     R0,?C_IBP
0161 A607              MOV     @R0,AR7
0163 A800        E     MOV     R0,?C_IBP
0165 E6                MOV     A,@R0
0166 22                RET     
0167         L?0497:
0167 7800        R     MOV     R0,#LOW NVRAM1
0169 7C00        R     MOV     R4,#HIGH NVRAM1
016B 7D01              MOV     R5,#01H
016D         L?0498:
016D 7B01              MOV     R3,#01H
016F 7A00        R     MOV     R2,#HIGH NVRAM0
0171 7900        R     MOV     R1,#LOW NVRAM0
0173 22                RET     
0174         L?0499:
0174         L?0500:
0174 CE                XCH     A,R6
0175 A2E7              MOV     C,ACC.7
0177 13                RRC     A
0178 CE                XCH     A,R6
0179 13                RRC     A
017A 22                RET     
017B         L?0501:
017B         L?0502:
017B E0                MOVX    A,@DPTR
017C FA                MOV     R2,A
017D A3                INC     DPTR
017E E0                MOVX    A,@DPTR
017F C3                CLR     C
0180 94FF              SUBB    A,#0FFH
0182 EA                MOV     A,R2
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 121 

0183 6480              XRL     A,#080H
0185 94FF              SUBB    A,#0FFH
0187 22                RET     
0188         L?0503:
0188         L?0504:
0188 D2A3              SETB    ADCMUX_12_15_OE1
018A D2A1              SETB    ADCMUX_12_15_OE2
018C C2B6              CLR     ADCMUX_16_19_OE1
018E D2B4              SETB    ADCMUX_16_19_OE2
0190 22                RET     
0191         L?0505:
0191         L?0506:
0191 D2B2              SETB    ADCMUX_20_23_OE1
0193 D2B0              SETB    ADCMUX_20_23_OE2
0195 D286              SETB    ADCMUX_24_27_OE1
0197 22                RET     
0198         L?0511:
0198         L?0512:
0198 7400        R     MOV     A,#LOW NVRAM0+0120H
019A 2F                ADD     A,R7
019B F582              MOV     DPL,A
019D 7400        R     MOV     A,#HIGH NVRAM0+0120H
019F 3E                ADDC    A,R6
01A0 F583              MOV     DPH,A
01A2 22                RET     
01A3         L?0513:
01A3         L?0514:
01A3 7400        R     MOV     A,#LOW NVRAM0+0122H
01A5 2F                ADD     A,R7
01A6 F582              MOV     DPL,A
01A8 7400        R     MOV     A,#HIGH NVRAM0+0122H
01AA 3E                ADDC    A,R6
01AB F583              MOV     DPH,A
01AD 22                RET     
01AE         L?0515:
01AE         L?0516:
01AE 7400        R     MOV     A,#LOW NVRAM0+0124H
01B0 2F                ADD     A,R7
01B1 F582              MOV     DPL,A
01B3 7400        R     MOV     A,#HIGH NVRAM0+0124H
01B5 3E                ADDC    A,R6
01B6 F583              MOV     DPH,A
01B8 22                RET     
01B9         L?0517:
01B9         L?0518:
01B9 E4                CLR     A
01BA F5BB              MOV     AMX0SL,A
01BC C296              CLR     ADCMUX_0_3_OE1
01BE D295              SETB    ADCMUX_0_3_OE2
01C0 22                RET     
01C1         L?0519:
01C1         L?0520:
01C1 E4                CLR     A
01C2 F5BB              MOV     AMX0SL,A
01C4 D296              SETB    ADCMUX_0_3_OE1
01C6 C295              CLR     ADCMUX_0_3_OE2
01C8 22                RET     
01C9         L?0521:
01C9 75F01F            MOV     B,#01FH
01CC A4                MUL     AB
01CD 2400        R     ADD     A,#LOW adcTempDat
01CF F9                MOV     R1,A
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 122 

01D0 7400        R     MOV     A,#HIGH adcTempDat
01D2 35F0              ADDC    A,B
01D4 FA                MOV     R2,A
01D5 7B01              MOV     R3,#01H
01D7 22                RET     
01D8         L?0522:
01D8         L?0523:
01D8 D2A3              SETB    ADCMUX_12_15_OE1
01DA D2A1              SETB    ADCMUX_12_15_OE2
01DC D2B6              SETB    ADCMUX_16_19_OE1
01DE C2B4              CLR     ADCMUX_16_19_OE2
01E0 22                RET     
01E1         L?0524:
01E1         L?0525:
01E1 D2B2              SETB    ADCMUX_20_23_OE1
01E3 D2B0              SETB    ADCMUX_20_23_OE2
01E5 C286              CLR     ADCMUX_24_27_OE1
01E7 D284              SETB    ADCMUX_24_27_OE2
01E9 22                RET     
01EA         L?0527:
01EA         L?0528:
01EA AB00        R     MOV     R3,s
01EC AA00        R     MOV     R2,s+01H
01EE A900        R     MOV     R1,s+02H
01F0 22                RET     
01F1         L?0529:
01F1 D2B7              SETB    ADCMUX_16_19_S1
01F3         L?0530:
01F3 C2B5              CLR     ADCMUX_16_19_S0
01F5 D2B2              SETB    ADCMUX_20_23_OE1
01F7 D2B0              SETB    ADCMUX_20_23_OE2
01F9 22                RET     
01FA         L?0531:
01FA         L?0532:
01FA E0                MOVX    A,@DPTR
01FB FE                MOV     R6,A
01FC A3                INC     DPTR
01FD E0                MOVX    A,@DPTR
01FE A803              MOV     R0,AR3
0200 08                INC     R0
0201 22                RET     
0202         L?0533:
0202         L?0534:
0202 FF                MOV     R7,A
0203 E0                MOVX    A,@DPTR
0204 4E                ORL     A,R6
0205 FE                MOV     R6,A
0206 A3                INC     DPTR
0207 E0                MOVX    A,@DPTR
0208 4F                ORL     A,R7
0209 22                RET     
020A         L?0535:
020A 120000      E     LCALL   ?C?FPADD
020D 8F00        R     MOV     ftemp+03H,R7
020F 8E00        R     MOV     ftemp+02H,R6
0211 8D00        R     MOV     ftemp+01H,R5
0213 8C00        R     MOV     ftemp,R4
0215 22                RET     
0216         L?0536:
0216         L?0537:
0216 E4                CLR     A
0217 75F001            MOV     B,#01H
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 123 

021A 020000      E     LJMP    ?C?IILDX
021D         L?0538:
021D         L?0539:
021D D290              SETB    ADCMUC_4_7_OE1
021F C293              CLR     ADCMUC_4_7_OE2
0221 D291              SETB    ADCMUX_4_7_S1
0223 22                RET     
0224         L?0540:
0224 AAF0              MOV     R2,B
0226 6480              XRL     A,#080H
0228 F8                MOV     R0,A
0229 EA                MOV     A,R2
022A 6480              XRL     A,#080H
022C 98                SUBB    A,R0
022D 22                RET     
             ; FUNCTION Com01B8 (END)

             ; FUNCTION _?setLedRun (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0000 120000      R     LCALL   L?0495
0003 6005              JZ      ?C0001
                                           ; SOURCE LINE # 56
0005 439601            ORL     P7,#01H
                                           ; SOURCE LINE # 57
0008 8003              SJMP    ?C0003
000A         ?C0001:
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
000A 5396FE            ANL     P7,#0FEH
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
000D         ?C0003:
000D 0500        E     INC     ?C_IBP
000F 22                RET     
             ; FUNCTION _?setLedRun (END)

             ; FUNCTION _?getLedRun (BEGIN)
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
0000 E596              MOV     A,P7
0002 5401              ANL     A,#01H
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 64
0005         ?C0004:
0005 22                RET     
             ; FUNCTION _?getLedRun (END)

             ; FUNCTION _?setLedEprom (BEGIN)
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
0000 120000      R     LCALL   L?0495
0003 6005              JZ      ?C0005
                                           ; SOURCE LINE # 67
0005 439602            ORL     P7,#02H
                                           ; SOURCE LINE # 68
0008 8003              SJMP    ?C0007
000A         ?C0005:
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
000A 5396FD            ANL     P7,#0FDH
                                           ; SOURCE LINE # 71
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 124 

                                           ; SOURCE LINE # 72
000D         ?C0007:
000D 0500        E     INC     ?C_IBP
000F 22                RET     
             ; FUNCTION _?setLedEprom (END)

             ; FUNCTION _?getLedEprom (BEGIN)
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
0000 E596              MOV     A,P7
0002 C3                CLR     C
0003 13                RRC     A
0004 5401              ANL     A,#01H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 75
0007         ?C0008:
0007 22                RET     
             ; FUNCTION _?getLedEprom (END)

             ; FUNCTION _?setLedDac (BEGIN)
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0000 120000      R     LCALL   L?0496
0003 6005              JZ      ?C0009
                                           ; SOURCE LINE # 78
0005 439604            ORL     P7,#04H
                                           ; SOURCE LINE # 79
0008 8003              SJMP    ?C0011
000A         ?C0009:
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
000A 5396FB            ANL     P7,#0FBH
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
000D         ?C0011:
000D 0500        E     INC     ?C_IBP
000F 22                RET     
             ; FUNCTION _?setLedDac (END)

             ; FUNCTION _?getLedDac (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
0000 E596              MOV     A,P7
0002 13                RRC     A
0003 13                RRC     A
0004 5401              ANL     A,#01H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 86
0007         ?C0012:
0007 22                RET     
             ; FUNCTION _?getLedDac (END)

             ; FUNCTION _?setLedError (BEGIN)
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000 120000      R     LCALL   L?0496
0003 6005              JZ      ?C0013
                                           ; SOURCE LINE # 89
0005 439608            ORL     P7,#08H
                                           ; SOURCE LINE # 90
0008 8003              SJMP    ?C0015
000A         ?C0013:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 125 

                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
000A 5396F7            ANL     P7,#0F7H
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
000D         ?C0015:
000D 0500        E     INC     ?C_IBP
000F 22                RET     
             ; FUNCTION _?setLedError (END)

             ; FUNCTION _?getLedError (BEGIN)
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0000 E596              MOV     A,P7
0002 13                RRC     A
0003 13                RRC     A
0004 13                RRC     A
0005 5401              ANL     A,#01H
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 97
0008         ?C0016:
0008 22                RET     
             ; FUNCTION _?getLedError (END)

             ; FUNCTION adcProcess (BEGIN)
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
;---- Variable 'result' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0017:
                                           ; SOURCE LINE # 101
0003 30EDFD            JNB     AD0INT,?C0017
0006         ?C0018:
                                           ; SOURCE LINE # 103
0006 AFBF              MOV     R7,ADC0H
0008 EF                MOV     A,R7
0009 FE                MOV     R6,A
000A ADBE              MOV     R5,ADC0L
000C 7C00              MOV     R4,#00H
000E E4                CLR     A
000F 2D                ADD     A,R5
0010 FD                MOV     R5,A
0011 EC                MOV     A,R4
0012 3E                ADDC    A,R6
0013 FC                MOV     R4,A
                                           ; SOURCE LINE # 104
0014 E500        R     MOV     A,adcSelect
0016 120000      R     LCALL   L?0521
0019 120000      R     LCALL   _refreshAdcData
                                           ; SOURCE LINE # 105
001C 75F01F            MOV     B,#01FH
001F E500        R     MOV     A,adcSelect
0021 A4                MUL     AB
0022 2400        R     ADD     A,#LOW adcTempDat+01CH
0024 F582              MOV     DPL,A
0026 E5F0              MOV     A,B
0028 3400        R     ADDC    A,#HIGH adcTempDat+01CH
002A F583              MOV     DPH,A
002C E0                MOVX    A,@DPTR
002D FC                MOV     R4,A
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 126 

002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FD                MOV     R5,A
0031 E500        R     MOV     A,adcSelect
0033 120000      R     LCALL   L?0465
0036 7400        R     MOV     A,#LOW NVRAM0+020H
0038 2F                ADD     A,R7
0039 F582              MOV     DPL,A
003B 7400        R     MOV     A,#HIGH NVRAM0+020H
003D 3E                ADDC    A,R6
003E F583              MOV     DPH,A
0040 EC                MOV     A,R4
0041 F0                MOVX    @DPTR,A
0042 A3                INC     DPTR
0043 ED                MOV     A,R5
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0045 E500        R     MOV     A,adcSelect
0047 C3                CLR     C
0048 943F              SUBB    A,#03FH
004A 5004              JNC     ?C0019
                                           ; SOURCE LINE # 107
004C 0500        R     INC     adcSelect
                                           ; SOURCE LINE # 108
004E 8003              SJMP    ?C0020
0050         ?C0019:
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0050 E4                CLR     A
0051 F500        R     MOV     adcSelect,A
                                           ; SOURCE LINE # 111
0053         ?C0020:
                                           ; SOURCE LINE # 112
0053 E500        R     MOV     A,adcSelect
0055 B43C00            CJNE    A,#03CH,?C0297
0058         ?C0297:
0058 4003              JC      $ + 5H
005A 020000      R     LJMP    ?C0021
005D 900000      R     MOV     DPTR,#?C0298
0060 F8                MOV     R0,A
0061 28                ADD     A,R0
0062 28                ADD     A,R0
0063 73                JMP     @A+DPTR
0064         ?C0298:
0064 020000      R     LJMP    ?C0022
0067 020000      R     LJMP    ?C0023
006A 020000      R     LJMP    ?C0024
006D 020000      R     LJMP    ?C0025
0070 020000      R     LJMP    ?C0026
0073 020000      R     LJMP    ?C0027
0076 020000      R     LJMP    ?C0028
0079 020000      R     LJMP    ?C0029
007C 020000      R     LJMP    ?C0030
007F 020000      R     LJMP    ?C0031
0082 020000      R     LJMP    ?C0032
0085 020000      R     LJMP    ?C0033
0088 020000      R     LJMP    ?C0034
008B 020000      R     LJMP    ?C0035
008E 020000      R     LJMP    ?C0036
0091 020000      R     LJMP    ?C0037
0094 020000      R     LJMP    ?C0038
0097 020000      R     LJMP    ?C0039
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 127 

009A 020000      R     LJMP    ?C0040
009D 020000      R     LJMP    ?C0041
00A0 020000      R     LJMP    ?C0042
00A3 020000      R     LJMP    ?C0043
00A6 020000      R     LJMP    ?C0044
00A9 020000      R     LJMP    ?C0045
00AC 020000      R     LJMP    ?C0046
00AF 020000      R     LJMP    ?C0047
00B2 020000      R     LJMP    ?C0048
00B5 020000      R     LJMP    ?C0049
00B8 020000      R     LJMP    ?C0021
00BB 020000      R     LJMP    ?C0021
00BE 020000      R     LJMP    ?C0021
00C1 020000      R     LJMP    ?C0021
00C4 020000      R     LJMP    ?C0050
00C7 020000      R     LJMP    ?C0051
00CA 020000      R     LJMP    ?C0052
00CD 020000      R     LJMP    ?C0053
00D0 020000      R     LJMP    ?C0054
00D3 020000      R     LJMP    ?C0055
00D6 020000      R     LJMP    ?C0056
00D9 020000      R     LJMP    ?C0057
00DC 020000      R     LJMP    ?C0058
00DF 020000      R     LJMP    ?C0059
00E2 020000      R     LJMP    ?C0060
00E5 020000      R     LJMP    ?C0061
00E8 020000      R     LJMP    ?C0062
00EB 020000      R     LJMP    ?C0063
00EE 020000      R     LJMP    ?C0064
00F1 020000      R     LJMP    ?C0065
00F4 020000      R     LJMP    ?C0066
00F7 020000      R     LJMP    ?C0067
00FA 020000      R     LJMP    ?C0068
00FD 020000      R     LJMP    ?C0068
0100 020000      R     LJMP    ?C0070
0103 020000      R     LJMP    ?C0071
0106 020000      R     LJMP    ?C0072
0109 020000      R     LJMP    ?C0073
010C 020000      R     LJMP    ?C0074
010F 020000      R     LJMP    ?C0075
0112 020000      R     LJMP    ?C0076
0115 020000      R     LJMP    ?C0077
                                           ; SOURCE LINE # 113
0118         ?C0022:
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0118 120000      R     LCALL   L?0517
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 128 

                                           ; SOURCE LINE # 139
011B 8008              SJMP    ?C0387
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
011D         ?C0023:
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
011D 120000      R     LCALL   L?0517
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0120 800A              SJMP    ?C0388
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
0122         ?C0024:
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0122 120000      R     LCALL   L?0519
                                           ; SOURCE LINE # 175
0125         ?C0387:
0125 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
0127 8005              SJMP    ?C0389
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0129         ?C0025:
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
0129 120000      R     LCALL   L?0519
                                           ; SOURCE LINE # 203
012C         ?C0388:
012C D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 204
012E         ?C0389:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 129 

012E D294              SETB    ADCMUX_0_3_S0
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
0130 020000      R     LJMP    ?C0390
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
0133         ?C0026:
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0133 120000      R     LCALL   L?0481
                                           ; SOURCE LINE # 232
0136 C290              CLR     ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 233
0138 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 234
013A C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
013C 801F              SJMP    ?C0391
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
013E         ?C0027:
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
013E 120000      R     LCALL   L?0481
                                           ; SOURCE LINE # 260
0141 C290              CLR     ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 261
0143 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 262
0145 D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 263
0147 D294              SETB    ADCMUX_0_3_S0
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 130 

                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0149 020000      R     LJMP    ?C0394
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
014C         ?C0028:
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
014C 120000      R     LCALL   L?0482
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
014F 120000      R     LCALL   L?0538
                                           ; SOURCE LINE # 291
0152 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 293
0154         ?C0392:
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
0154 020000      R     LJMP    ?C0394
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0157         ?C0029:
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0157 120000      R     LCALL   L?0482
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
015A 120000      R     LCALL   L?0538
                                           ; SOURCE LINE # 319
015D         ?C0391:
015D D292              SETB    ADCMUX_4_7_S0
                                           ; SOURCE LINE # 321
015F         ?C0393:
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
015F 020000      R     LJMP    ?C0394
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
0162         ?C0030:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 131 

                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
0162 120000      R     LCALL   L?0471
                                           ; SOURCE LINE # 347
0165 C2A7              CLR     ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 348
0167 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0169 8010              SJMP    ?C0395
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
016B         ?C0031:
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
016B 120000      R     LCALL   L?0471
                                           ; SOURCE LINE # 375
016E C2A7              CLR     ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 376
0170 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
0172 8012              SJMP    ?C0396
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0174         ?C0032:
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
0174 120000      R     LCALL   L?0472
                                           ; SOURCE LINE # 403
0177 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 404
0179 C2A5              CLR     ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 405
017B         ?C0395:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 132 

017B C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
017D 8009              SJMP    ?C0397
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
017F         ?C0033:
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
017F 120000      R     LCALL   L?0472
                                           ; SOURCE LINE # 431
0182 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 432
0184 C2A5              CLR     ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 433
0186         ?C0396:
0186 D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 434
0188         ?C0397:
0188 D2A4              SETB    ADCMUX_8_11_S0
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
018A 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
018D         ?C0034:
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
018D 120000      R     LCALL   L?0456
                                           ; SOURCE LINE # 462
0190 C2A3              CLR     ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 463
0192 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 133 

                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
0194 8010              SJMP    ?C0399
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
0196         ?C0035:
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
0196 120000      R     LCALL   L?0456
                                           ; SOURCE LINE # 490
0199 C2A3              CLR     ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 491
019B D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
019D 8012              SJMP    ?C0400
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
019F         ?C0036:
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
019F 120000      R     LCALL   L?0457
                                           ; SOURCE LINE # 518
01A2 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 519
01A4 C2A1              CLR     ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 520
01A6         ?C0399:
01A6 C2A2              CLR     ADCMUX_12_15_S1
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
01A8 8009              SJMP    ?C0401
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
01AA         ?C0037:
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 134 

                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
01AA 120000      R     LCALL   L?0457
                                           ; SOURCE LINE # 546
01AD D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 547
01AF C2A1              CLR     ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 548
01B1         ?C0400:
01B1 D2A2              SETB    ADCMUX_12_15_S1
                                           ; SOURCE LINE # 549
01B3         ?C0401:
01B3 D2A0              SETB    ADCMUX_12_15_S0
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
01B5 020000      R     LJMP    ?C0402
                                           ; SOURCE LINE # 560
                                           ; SOURCE LINE # 561
01B8         ?C0038:
                                           ; SOURCE LINE # 563
01B8 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
01BB 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
01BE 120000      R     LCALL   L?0503
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
01C1 8014              SJMP    ?C0403
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 589
01C3         ?C0039:
                                           ; SOURCE LINE # 591
01C3 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
01C6 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 135 

                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
01C9 120000      R     LCALL   L?0503
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
01CC 8016              SJMP    ?C0404
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
01CE         ?C0040:
                                           ; SOURCE LINE # 619
01CE 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
01D1 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
01D4 120000      R     LCALL   L?0522
                                           ; SOURCE LINE # 635
01D7         ?C0403:
01D7 C2B7              CLR     ADCMUX_16_19_S1
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 643
01D9 800B              SJMP    ?C0405
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
01DB         ?C0041:
                                           ; SOURCE LINE # 647
01DB 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 649
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
01DE 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
01E1 120000      R     LCALL   L?0522
                                           ; SOURCE LINE # 663
01E4         ?C0404:
01E4 D2B7              SETB    ADCMUX_16_19_S1
                                           ; SOURCE LINE # 664
01E6         ?C0405:
01E6 D2B5              SETB    ADCMUX_16_19_S0
                                           ; SOURCE LINE # 666
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 136 

                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
01E8 020000      R     LJMP    ?C0406
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
01EB         ?C0042:
                                           ; SOURCE LINE # 675
01EB 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 680
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 690
01EE 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 692
01F1 C2B2              CLR     ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 693
01F3 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
01F5 801A              SJMP    ?C0407
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
01F7         ?C0043:
                                           ; SOURCE LINE # 703
01F7 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 708
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 718
01FA 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 720
01FD C2B2              CLR     ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 721
01FF D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 722
0201 D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 723
0203 D2B1              SETB    ADCMUX_20_23_S0
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 729
0205 8026              SJMP    ?C0408
                                           ; SOURCE LINE # 730
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 137 

                                           ; SOURCE LINE # 731
0207         ?C0044:
                                           ; SOURCE LINE # 733
0207 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 735
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 739
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
                                           ; SOURCE LINE # 744
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
020A 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 750
020D D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 751
020F C2B0              CLR     ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 752
0211         ?C0407:
0211 C2B3              CLR     ADCMUX_20_23_S1
                                           ; SOURCE LINE # 753
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
0213 800C              SJMP    ?C0409
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
0215         ?C0045:
                                           ; SOURCE LINE # 761
0215 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 776
0218 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 778
021B D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 779
021D C2B0              CLR     ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 780
021F D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 781
0221         ?C0409:
0221 D2B1              SETB    ADCMUX_20_23_S0
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
0223 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 786
                                           ; SOURCE LINE # 787
0226         ?C0046:
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 791
                                           ; SOURCE LINE # 792
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 138 

                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 800
                                           ; SOURCE LINE # 801
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
0226 120000      R     LCALL   L?0444
                                           ; SOURCE LINE # 806
0229 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 807
022B D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 809
022D         ?C0408:
022D C286              CLR     ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 810
022F D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
0231 8010              SJMP    ?C0411
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 815
0233         ?C0047:
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 819
                                           ; SOURCE LINE # 820
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 823
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 828
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
0233 120000      R     LCALL   L?0444
                                           ; SOURCE LINE # 834
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 838
0236 120000      R     LCALL   L?0524
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
                                           ; SOURCE LINE # 841
0239 8017              SJMP    ?C0412
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 843
023B         ?C0048:
                                           ; SOURCE LINE # 845
                                           ; SOURCE LINE # 847
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 853
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 859
                                           ; SOURCE LINE # 860
023B 120000      R     LCALL   L?0445
                                           ; SOURCE LINE # 862
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 139 

                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 865
023E 120000      R     LCALL   L?0505
                                           ; SOURCE LINE # 866
0241 C284              CLR     ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 867
0243         ?C0411:
0243 C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 868
0245 D285              SETB    ADCMUX_24_27_S0
                                           ; SOURCE LINE # 869
0247 020000      R     LJMP    ?C0021
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 871
024A         ?C0049:
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
024A 120000      R     LCALL   L?0445
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 893
024D 120000      R     LCALL   L?0505
                                           ; SOURCE LINE # 894
0250 C284              CLR     ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 895
0252         ?C0412:
0252 D287              SETB    ADCMUX_24_27_S1
                                           ; SOURCE LINE # 896
0254 D285              SETB    ADCMUX_24_27_S0
                                           ; SOURCE LINE # 897
0256 020000      R     LJMP    ?C0021
                                           ; SOURCE LINE # 898
                                           ; SOURCE LINE # 899
0259         ?C0050:
                                           ; SOURCE LINE # 901
                                           ; SOURCE LINE # 903
                                           ; SOURCE LINE # 904
0259 120000      R     LCALL   L?0518
                                           ; SOURCE LINE # 905
025C C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 906
025E C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 908
0260         ?C0390:
0260 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 909
0262 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 911
0264         ?C0394:
0264 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 912
0266 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 914
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 140 

0268         ?C0398:
0268 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 915
026A D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 917
026C         ?C0402:
026C D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 918
026E D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 920
0270         ?C0406:
0270 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 921
0272 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 923
0274         ?C0410:
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
0274 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 927
0277         ?C0051:
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 932
0277 120000      R     LCALL   L?0518
                                           ; SOURCE LINE # 933
027A D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 934
027C C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 937
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 943
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 946
027E 120000      R     LCALL   L?0447
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 951
0281 120000      R     LCALL   L?0506
                                           ; SOURCE LINE # 952
0284 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 954
0286         ?C0052:
                                           ; SOURCE LINE # 956
                                           ; SOURCE LINE # 958
                                           ; SOURCE LINE # 959
0286 120000      R     LCALL   L?0520
                                           ; SOURCE LINE # 960
0289 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 961
028B C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 964
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 969
                                           ; SOURCE LINE # 970
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 141 

                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
028D 120000      R     LCALL   L?0447
                                           ; SOURCE LINE # 975
0290 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 976
0292 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 978
0294         ?C0413:
                                           ; SOURCE LINE # 979
                                           ; SOURCE LINE # 980
0294 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
0297         ?C0053:
                                           ; SOURCE LINE # 984
                                           ; SOURCE LINE # 986
                                           ; SOURCE LINE # 987
0297 120000      R     LCALL   L?0520
                                           ; SOURCE LINE # 988
029A D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 989
029C C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 994
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 998
                                           ; SOURCE LINE # 1000
                                           ; SOURCE LINE # 1001
029E 120000      R     LCALL   L?0447
                                           ; SOURCE LINE # 1003
02A1 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1004
02A3 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1006
02A5         ?C0414:
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1008
02A5 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1009
                                           ; SOURCE LINE # 1010
02A8         ?C0054:
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
02A8 120000      R     LCALL   L?0482
                                           ; SOURCE LINE # 1017
02AB C290              CLR     ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1018
02AD D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1019
02AF C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1020
02B1 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1028
                                           ; SOURCE LINE # 1029
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 142 

02B3 120000      R     LCALL   L?0448
                                           ; SOURCE LINE # 1031
02B6 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1032
02B8 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1034
02BA         ?C0415:
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
02BA 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
02BD         ?C0055:
                                           ; SOURCE LINE # 1040
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
02BD 120000      R     LCALL   L?0482
                                           ; SOURCE LINE # 1045
02C0 C290              CLR     ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1046
02C2 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1047
02C4 D291              SETB    ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1048
02C6 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1051
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1057
02C8 120000      R     LCALL   L?0448
                                           ; SOURCE LINE # 1059
02CB D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1060
02CD D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1062
02CF         ?C0416:
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
02CF 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
02D2         ?C0056:
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1071
02D2 120000      R     LCALL   L?0482
                                           ; SOURCE LINE # 1073
02D5 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1074
02D7 C293              CLR     ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1075
02D9 C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1076
02DB C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1081
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1084
                                           ; SOURCE LINE # 1085
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 143 

02DD 120000      R     LCALL   L?0448
                                           ; SOURCE LINE # 1087
02E0 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1088
02E2 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1090
02E4         ?C0417:
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
02E4 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1094
02E7         ?C0057:
                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1099
02E7 120000      R     LCALL   L?0482
                                           ; SOURCE LINE # 1101
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
02EA 120000      R     LCALL   L?0539
                                           ; SOURCE LINE # 1104
02ED C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1106
                                           ; SOURCE LINE # 1107
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1112
                                           ; SOURCE LINE # 1113
02EF 120000      R     LCALL   L?0448
                                           ; SOURCE LINE # 1115
02F2 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1116
02F4 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1118
02F6         ?C0418:
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1120
02F6 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1121
                                           ; SOURCE LINE # 1122
02F9         ?C0058:
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1127
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
02F9 120000      R     LCALL   L?0472
                                           ; SOURCE LINE # 1132
02FC C2A7              CLR     ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1133
02FE D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1134
0300 C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1135
0302 C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
0304 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1143
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 144 

0307 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1144
0309 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1146
030B         ?C0419:
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
030B 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1150
030E         ?C0059:
                                           ; SOURCE LINE # 1152
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1158
030E 120000      R     LCALL   L?0472
                                           ; SOURCE LINE # 1160
0311 C2A7              CLR     ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1161
0313 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1162
0315 D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1163
0317 C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1165
                                           ; SOURCE LINE # 1166
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
0319 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1171
031C D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1172
031E D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1174
0320         ?C0420:
                                           ; SOURCE LINE # 1175
                                           ; SOURCE LINE # 1176
0320 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1177
                                           ; SOURCE LINE # 1178
0323         ?C0060:
                                           ; SOURCE LINE # 1180
                                           ; SOURCE LINE # 1182
                                           ; SOURCE LINE # 1183
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1186
0323 120000      R     LCALL   L?0472
                                           ; SOURCE LINE # 1188
0326 C2A7              CLR     ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1189
0328 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1190
032A C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1191
032C C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
                                           ; SOURCE LINE # 1196
                                           ; SOURCE LINE # 1197
032E 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1199
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 145 

0331 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1200
0333 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1202
0335         ?C0421:
                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1204
0335 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
0338         ?C0061:
                                           ; SOURCE LINE # 1208
                                           ; SOURCE LINE # 1210
                                           ; SOURCE LINE # 1211
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
0338 120000      R     LCALL   L?0472
                                           ; SOURCE LINE # 1216
033B C2A7              CLR     ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1217
033D C2A5              CLR     ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1218
033F D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1219
0341 C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
                                           ; SOURCE LINE # 1224
                                           ; SOURCE LINE # 1225
0343 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1227
0346 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1228
0348 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1230
034A         ?C0422:
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1232
034A 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1233
                                           ; SOURCE LINE # 1234
034D         ?C0062:
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1239
                                           ; SOURCE LINE # 1241
                                           ; SOURCE LINE # 1242
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
034D 120000      R     LCALL   L?0457
                                           ; SOURCE LINE # 1247
0350 C2A3              CLR     ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1248
0352 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1249
                                           ; SOURCE LINE # 1250
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1255
                                           ; SOURCE LINE # 1256
0354 120000      R     LCALL   L?0487
                                           ; SOURCE LINE # 1258
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 146 

0357         ?C0423:
                                           ; SOURCE LINE # 1259
                                           ; SOURCE LINE # 1260
0357 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1261
                                           ; SOURCE LINE # 1262
035A         ?C0063:
                                           ; SOURCE LINE # 1264
                                           ; SOURCE LINE # 1266
                                           ; SOURCE LINE # 1267
                                           ; SOURCE LINE # 1269
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1272
                                           ; SOURCE LINE # 1273
035A 120000      R     LCALL   L?0457
                                           ; SOURCE LINE # 1275
035D C2A3              CLR     ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1276
035F D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1277
0361 D2A2              SETB    ADCMUX_12_15_S1
                                           ; SOURCE LINE # 1278
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1281
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
0363 120000      R     LCALL   L?0488
                                           ; SOURCE LINE # 1286
0366         ?C0424:
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
0366 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1290
0369         ?C0064:
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1294
                                           ; SOURCE LINE # 1295
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
0369 120000      R     LCALL   L?0457
                                           ; SOURCE LINE # 1303
036C D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1304
036E C2A1              CLR     ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1306
                                           ; SOURCE LINE # 1308
                                           ; SOURCE LINE # 1309
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1312
0370 120000      R     LCALL   L?0487
                                           ; SOURCE LINE # 1314
0373         ?C0425:
                                           ; SOURCE LINE # 1315
                                           ; SOURCE LINE # 1316
0373 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
0376         ?C0065:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 147 

                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1328
                                           ; SOURCE LINE # 1329
0376 120000      R     LCALL   L?0457
                                           ; SOURCE LINE # 1331
0379 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1332
037B C2A1              CLR     ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1333
037D D2A2              SETB    ADCMUX_12_15_S1
                                           ; SOURCE LINE # 1334
                                           ; SOURCE LINE # 1336
                                           ; SOURCE LINE # 1337
                                           ; SOURCE LINE # 1339
                                           ; SOURCE LINE # 1340
037F 120000      R     LCALL   L?0488
                                           ; SOURCE LINE # 1342
0382         ?C0426:
                                           ; SOURCE LINE # 1343
                                           ; SOURCE LINE # 1344
0382 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1345
                                           ; SOURCE LINE # 1346
0385         ?C0066:
                                           ; SOURCE LINE # 1348
0385 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1350
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1353
                                           ; SOURCE LINE # 1354
                                           ; SOURCE LINE # 1356
                                           ; SOURCE LINE # 1357
0388 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 1359
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1362
                                           ; SOURCE LINE # 1363
038B 120000      R     LCALL   L?0504
                                           ; SOURCE LINE # 1364
038E C2B7              CLR     ADCMUX_16_19_S1
                                           ; SOURCE LINE # 1365
                                           ; SOURCE LINE # 1367
                                           ; SOURCE LINE # 1368
0390 120000      R     LCALL   L?0530
                                           ; SOURCE LINE # 1370
0393         ?C0427:
                                           ; SOURCE LINE # 1371
                                           ; SOURCE LINE # 1372
0393 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1374
0396         ?C0067:
                                           ; SOURCE LINE # 1376
0396 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1378
                                           ; SOURCE LINE # 1379
                                           ; SOURCE LINE # 1381
                                           ; SOURCE LINE # 1382
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 148 

                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
0399 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 1387
                                           ; SOURCE LINE # 1388
                                           ; SOURCE LINE # 1390
                                           ; SOURCE LINE # 1391
039C 120000      R     LCALL   L?0504
                                           ; SOURCE LINE # 1392
                                           ; SOURCE LINE # 1393
                                           ; SOURCE LINE # 1395
                                           ; SOURCE LINE # 1396
039F 120000      R     LCALL   L?0529
                                           ; SOURCE LINE # 1398
03A2         ?C0428:
                                           ; SOURCE LINE # 1399
                                           ; SOURCE LINE # 1400
03A2 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1401
                                           ; SOURCE LINE # 1402
03A5         ?C0068:
                                           ; SOURCE LINE # 1404
03A5 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1406
                                           ; SOURCE LINE # 1407
                                           ; SOURCE LINE # 1409
                                           ; SOURCE LINE # 1410
                                           ; SOURCE LINE # 1412
                                           ; SOURCE LINE # 1413
03A8 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
                                           ; SOURCE LINE # 1418
                                           ; SOURCE LINE # 1419
03AB 120000      R     LCALL   L?0523
                                           ; SOURCE LINE # 1420
                                           ; SOURCE LINE # 1421
                                           ; SOURCE LINE # 1423
                                           ; SOURCE LINE # 1424
03AE 120000      R     LCALL   L?0529
                                           ; SOURCE LINE # 1426
03B1         ?C0429:
                                           ; SOURCE LINE # 1427
                                           ; SOURCE LINE # 1428
03B1 020000      R     LJMP    ?C0434
                                           ; SOURCE LINE # 1429
                                           ; SOURCE LINE # 1430
                                           ; SOURCE LINE # 1457
                                           ; SOURCE LINE # 1458
03B4         ?C0070:
                                           ; SOURCE LINE # 1460
03B4 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1462
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1465
                                           ; SOURCE LINE # 1466
                                           ; SOURCE LINE # 1468
                                           ; SOURCE LINE # 1469
                                           ; SOURCE LINE # 1471
                                           ; SOURCE LINE # 1472
                                           ; SOURCE LINE # 1474
                                           ; SOURCE LINE # 1475
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 149 

03B7 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 1477
03BA C2B2              CLR     ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1478
03BC D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1479
03BE C2B3              CLR     ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1480
03C0 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1482
03C2         ?C0431:
                                           ; SOURCE LINE # 1483
                                           ; SOURCE LINE # 1484
03C2 802B              SJMP    ?C0434
                                           ; SOURCE LINE # 1485
                                           ; SOURCE LINE # 1486
03C4         ?C0071:
                                           ; SOURCE LINE # 1488
03C4 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1490
                                           ; SOURCE LINE # 1491
                                           ; SOURCE LINE # 1493
                                           ; SOURCE LINE # 1494
                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1497
                                           ; SOURCE LINE # 1499
                                           ; SOURCE LINE # 1500
                                           ; SOURCE LINE # 1502
                                           ; SOURCE LINE # 1503
03C7 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 1505
03CA C2B2              CLR     ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1506
03CC D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1507
03CE D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1508
03D0 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1510
03D2         ?C0432:
                                           ; SOURCE LINE # 1511
                                           ; SOURCE LINE # 1512
03D2 801B              SJMP    ?C0434
                                           ; SOURCE LINE # 1513
                                           ; SOURCE LINE # 1514
03D4         ?C0072:
                                           ; SOURCE LINE # 1516
03D4 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1518
                                           ; SOURCE LINE # 1519
                                           ; SOURCE LINE # 1521
                                           ; SOURCE LINE # 1522
                                           ; SOURCE LINE # 1524
                                           ; SOURCE LINE # 1525
                                           ; SOURCE LINE # 1527
                                           ; SOURCE LINE # 1528
                                           ; SOURCE LINE # 1530
                                           ; SOURCE LINE # 1531
03D7 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 1533
03DA D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1534
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 150 

03DC C2B0              CLR     ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1535
03DE C2B3              CLR     ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1536
03E0 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1538
03E2         ?C0433:
                                           ; SOURCE LINE # 1539
                                           ; SOURCE LINE # 1540
03E2 800B              SJMP    ?C0434
                                           ; SOURCE LINE # 1541
                                           ; SOURCE LINE # 1542
03E4         ?C0073:
                                           ; SOURCE LINE # 1544
                                           ; SOURCE LINE # 1546
                                           ; SOURCE LINE # 1547
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1550
                                           ; SOURCE LINE # 1552
                                           ; SOURCE LINE # 1553
                                           ; SOURCE LINE # 1555
                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1558
                                           ; SOURCE LINE # 1559
03E4 120000      R     LCALL   L?0445
                                           ; SOURCE LINE # 1561
03E7 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1562
03E9 C2B0              CLR     ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1563
03EB D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1564
03ED C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1566
03EF         ?C0434:
03EF D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1567
03F1 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1568
03F3 020000      R     LJMP    ?C0021
                                           ; SOURCE LINE # 1569
                                           ; SOURCE LINE # 1570
03F6         ?C0074:
                                           ; SOURCE LINE # 1572
                                           ; SOURCE LINE # 1574
                                           ; SOURCE LINE # 1575
                                           ; SOURCE LINE # 1577
                                           ; SOURCE LINE # 1578
                                           ; SOURCE LINE # 1580
                                           ; SOURCE LINE # 1581
                                           ; SOURCE LINE # 1583
                                           ; SOURCE LINE # 1584
                                           ; SOURCE LINE # 1586
                                           ; SOURCE LINE # 1587
03F6 120000      R     LCALL   L?0445
                                           ; SOURCE LINE # 1589
                                           ; SOURCE LINE # 1590
                                           ; SOURCE LINE # 1592
                                           ; SOURCE LINE # 1593
03F9 120000      R     LCALL   L?0524
                                           ; SOURCE LINE # 1594
                                           ; SOURCE LINE # 1595
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 151 

                                           ; SOURCE LINE # 1596
03FC 8014              SJMP    ?C0435
                                           ; SOURCE LINE # 1597
                                           ; SOURCE LINE # 1598
03FE         ?C0075:
                                           ; SOURCE LINE # 1600
                                           ; SOURCE LINE # 1602
                                           ; SOURCE LINE # 1603
                                           ; SOURCE LINE # 1605
                                           ; SOURCE LINE # 1606
                                           ; SOURCE LINE # 1608
                                           ; SOURCE LINE # 1609
                                           ; SOURCE LINE # 1611
                                           ; SOURCE LINE # 1612
                                           ; SOURCE LINE # 1614
                                           ; SOURCE LINE # 1615
03FE 120000      R     LCALL   L?0445
                                           ; SOURCE LINE # 1617
                                           ; SOURCE LINE # 1618
                                           ; SOURCE LINE # 1620
                                           ; SOURCE LINE # 1621
0401 120000      R     LCALL   L?0525
                                           ; SOURCE LINE # 1622
0404 D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1623
0406 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1624
0408 801A              SJMP    ?C0021
                                           ; SOURCE LINE # 1625
                                           ; SOURCE LINE # 1626
040A         ?C0076:
                                           ; SOURCE LINE # 1628
                                           ; SOURCE LINE # 1630
                                           ; SOURCE LINE # 1631
                                           ; SOURCE LINE # 1633
                                           ; SOURCE LINE # 1634
                                           ; SOURCE LINE # 1636
                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1639
                                           ; SOURCE LINE # 1640
                                           ; SOURCE LINE # 1642
                                           ; SOURCE LINE # 1643
040A 120000      R     LCALL   L?0445
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
                                           ; SOURCE LINE # 1648
040D 120000      R     LCALL   L?0506
                                           ; SOURCE LINE # 1649
0410 C284              CLR     ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1650
0412         ?C0435:
0412 C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 1651
0414 C285              CLR     ADCMUX_24_27_S0
                                           ; SOURCE LINE # 1652
0416 800C              SJMP    ?C0021
                                           ; SOURCE LINE # 1653
                                           ; SOURCE LINE # 1654
0418         ?C0077:
                                           ; SOURCE LINE # 1656
                                           ; SOURCE LINE # 1658
                                           ; SOURCE LINE # 1659
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 152 

                                           ; SOURCE LINE # 1661
                                           ; SOURCE LINE # 1662
                                           ; SOURCE LINE # 1664
                                           ; SOURCE LINE # 1665
                                           ; SOURCE LINE # 1667
                                           ; SOURCE LINE # 1668
                                           ; SOURCE LINE # 1670
                                           ; SOURCE LINE # 1671
0418 120000      R     LCALL   L?0445
                                           ; SOURCE LINE # 1673
                                           ; SOURCE LINE # 1674
                                           ; SOURCE LINE # 1676
041B 120000      R     LCALL   L?0506
                                           ; SOURCE LINE # 1677
041E C284              CLR     ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1678
0420 D287              SETB    ADCMUX_24_27_S1
                                           ; SOURCE LINE # 1679
0422 C285              CLR     ADCMUX_24_27_S0
                                           ; SOURCE LINE # 1680
                                           ; SOURCE LINE # 1681
                                           ; SOURCE LINE # 1682
                                           ; SOURCE LINE # 1683
                                           ; SOURCE LINE # 1684
                                           ; SOURCE LINE # 1685
0424         ?C0021:
                                           ; SOURCE LINE # 1686
0424 C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 1687
0426 D2EC              SETB    AD0BUSY
                                           ; SOURCE LINE # 1688
0428 22                RET     
             ; FUNCTION adcProcess (END)

             ; FUNCTION _initAdcData (BEGIN)
                                           ; SOURCE LINE # 1689
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 1691
;---- Variable 'i' assigned to Register 'R7' ----
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008         ?C0080:
                                           ; SOURCE LINE # 1692
0008 AB00        R     MOV     R3,s
000A AA00        R     MOV     R2,s+01H
000C A900        R     MOV     R1,s+02H
000E 120000      R     LCALL   L?0489
0011 E4                CLR     A
0012 F5F0              MOV     B,A
0014 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1693
0017 0F                INC     R7
0018 BF0EED            CJNE    R7,#0EH,?C0080
001B         ?C0081:
                                           ; SOURCE LINE # 1694
001B AB00        R     MOV     R3,s
001D AA00        R     MOV     R2,s+01H
001F A900        R     MOV     R1,s+02H
0021 90001C            MOV     DPTR,#01CH
0024 E4                CLR     A
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 153 

0025 F5F0              MOV     B,A
0027 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1695
002A 90001E            MOV     DPTR,#01EH
002D E4                CLR     A
002E 020000      E     LJMP    ?C?CSTOPTR
             ; FUNCTION _initAdcData (END)

             ; FUNCTION _refreshAdcData (BEGIN)
                                           ; SOURCE LINE # 1697
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
;---- Variable 'dat' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 1701
0006 90001E            MOV     DPTR,#01EH
0009 120000      E     LCALL   ?C?CLDOPTR
000C 120000      R     LCALL   L?0491
000F EC                MOV     A,R4
0010 8DF0              MOV     B,R5
0012 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1702
0015 120000      R     LCALL   L?0527
0018 90001E            MOV     DPTR,#01EH
001B 7401              MOV     A,#01H
001D 120000      E     LCALL   ?C?CILDOPTR
                                           ; SOURCE LINE # 1703
0020 90001E            MOV     DPTR,#01EH
0023 120000      E     LCALL   ?C?CLDOPTR
0026 C3                CLR     C
0027 940E              SUBB    A,#0EH
0029 400A              JC      ?C0084
                                           ; SOURCE LINE # 1704
002B 120000      R     LCALL   L?0527
002E 90001E            MOV     DPTR,#01EH
0031 E4                CLR     A
0032 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 1705
0035         ?C0084:
                                           ; SOURCE LINE # 1707
0035 E4                CLR     A
0036 F500        R     MOV     sum+03H,A
0038 F500        R     MOV     sum+02H,A
003A F500        R     MOV     sum+01H,A
003C F500        R     MOV     sum,A
                                           ; SOURCE LINE # 1708
003E F500        R     MOV     i,A
0040         ?C0085:
                                           ; SOURCE LINE # 1709
0040 120000      R     LCALL   L?0528
0043 E500        R     MOV     A,i
0045 120000      R     LCALL   L?0491
0048 120000      E     LCALL   ?C?ILDOPTR
004B FF                MOV     R7,A
004C AEF0              MOV     R6,B
004E E4                CLR     A
004F FC                MOV     R4,A
0050 FD                MOV     R5,A
0051 E500        R     MOV     A,sum+03H
0053 2F                ADD     A,R7
0054 F500        R     MOV     sum+03H,A
0056 E500        R     MOV     A,sum+02H
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 154 

0058 3E                ADDC    A,R6
0059 F500        R     MOV     sum+02H,A
005B ED                MOV     A,R5
005C 3500        R     ADDC    A,sum+01H
005E F500        R     MOV     sum+01H,A
0060 EC                MOV     A,R4
0061 3500        R     ADDC    A,sum
0063 F500        R     MOV     sum,A
                                           ; SOURCE LINE # 1710
0065 0500        R     INC     i
0067 E500        R     MOV     A,i
0069 B40ED4            CJNE    A,#0EH,?C0085
006C         ?C0086:
                                           ; SOURCE LINE # 1713
006C E4                CLR     A
006D 7B0E              MOV     R3,#0EH
006F FA                MOV     R2,A
0070 F9                MOV     R1,A
0071 F8                MOV     R0,A
0072 AF00        R     MOV     R7,sum+03H
0074 AE00        R     MOV     R6,sum+02H
0076 AD00        R     MOV     R5,sum+01H
0078 AC00        R     MOV     R4,sum
007A 120000      E     LCALL   ?C?ULDIV
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1714
007D 120000      R     LCALL   L?0528
0080 90001C            MOV     DPTR,#01CH
0083 EE                MOV     A,R6
0084 8FF0              MOV     B,R7
0086 020000      E     LJMP    ?C?ISTOPTR
             ; FUNCTION _refreshAdcData (END)

             ; FUNCTION _assertCoilAddress (BEGIN)
                                           ; SOURCE LINE # 1716
;---- Variable 'adr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1717
0000 D3                SETB    C
0001 EF                MOV     A,R7
0002 9490              SUBB    A,#090H
0004 EE                MOV     A,R6
0005 940C              SUBB    A,#0CH
0007 4002              JC      ?C0092
0009         ?C0090:
                                           ; SOURCE LINE # 1718
0009 80FE              SJMP    ?C0090
                                           ; SOURCE LINE # 1719
000B         ?C0092:
000B 22                RET     
             ; FUNCTION _assertCoilAddress (END)

             ; FUNCTION _assertRegisterAddress (BEGIN)
                                           ; SOURCE LINE # 1720
;---- Variable 'adr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1721
0000 C3                CLR     C
0001 EF                MOV     A,R7
0002 94C9              SUBB    A,#0C9H
0004 EE                MOV     A,R6
0005 9400              SUBB    A,#00H
0007 4002              JC      ?C0096
0009         ?C0094:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 155 

                                           ; SOURCE LINE # 1722
0009 80FE              SJMP    ?C0094
                                           ; SOURCE LINE # 1723
000B         ?C0096:
000B 22                RET     
             ; FUNCTION _assertRegisterAddress (END)

             ; FUNCTION clearDM (BEGIN)
                                           ; SOURCE LINE # 1724
                                           ; SOURCE LINE # 1726
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0097:
                                           ; SOURCE LINE # 1727
                                           ; SOURCE LINE # 1728
                                           ; SOURCE LINE # 1729
0003 120000      R     LCALL   L?0441
                                           ; SOURCE LINE # 1730
0006 0D                INC     R5
0007 BD0001            CJNE    R5,#00H,?C0299
000A 0C                INC     R4
000B         ?C0299:
000B ED                MOV     A,R5
000C 6410              XRL     A,#010H
000E 4C                ORL     A,R4
000F 70F2              JNZ     ?C0097
                                           ; SOURCE LINE # 1731
0011         ?C0100:
0011 22                RET     
             ; FUNCTION clearDM (END)

             ; FUNCTION clearMR (BEGIN)
                                           ; SOURCE LINE # 1732
                                           ; SOURCE LINE # 1734
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0101:
                                           ; SOURCE LINE # 1735
                                           ; SOURCE LINE # 1736
                                           ; SOURCE LINE # 1737
0003 120000      R     LCALL   L?0441
                                           ; SOURCE LINE # 1738
0006 0D                INC     R5
0007 BD0001            CJNE    R5,#00H,?C0300
000A 0C                INC     R4
000B         ?C0300:
000B ED                MOV     A,R5
000C 6404              XRL     A,#04H
000E 4C                ORL     A,R4
000F 70F2              JNZ     ?C0101
                                           ; SOURCE LINE # 1739
0011         ?C0104:
0011 22                RET     
             ; FUNCTION clearMR (END)

             ; FUNCTION clearEM (BEGIN)
                                           ; SOURCE LINE # 1740
                                           ; SOURCE LINE # 1742
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 156 

;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D10              MOV     R5,#010H
0002 7C00              MOV     R4,#00H
0004         ?C0105:
                                           ; SOURCE LINE # 1743
                                           ; SOURCE LINE # 1744
                                           ; SOURCE LINE # 1745
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1746
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0301
000B 0C                INC     R4
000C         ?C0301:
000C ED                MOV     A,R5
000D 6490              XRL     A,#090H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0105
                                           ; SOURCE LINE # 1747
0012         ?C0108:
0012 22                RET     
             ; FUNCTION clearEM (END)

             ; FUNCTION clearR (BEGIN)
                                           ; SOURCE LINE # 1748
                                           ; SOURCE LINE # 1750
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D04              MOV     R5,#04H
0002 7C00              MOV     R4,#00H
0004         ?C0109:
                                           ; SOURCE LINE # 1751
                                           ; SOURCE LINE # 1752
                                           ; SOURCE LINE # 1753
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1754
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0302
000B 0C                INC     R4
000C         ?C0302:
000C ED                MOV     A,R5
000D 6408              XRL     A,#08H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0109
                                           ; SOURCE LINE # 1755
0012         ?C0112:
0012 22                RET     
             ; FUNCTION clearR (END)

             ; FUNCTION clearT (BEGIN)
                                           ; SOURCE LINE # 1756
                                           ; SOURCE LINE # 1758
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D90              MOV     R5,#090H
0002 7C00              MOV     R4,#00H
0004         ?C0113:
                                           ; SOURCE LINE # 1759
                                           ; SOURCE LINE # 1760
                                           ; SOURCE LINE # 1761
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1762
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0303
000B 0C                INC     R4
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 157 

000C         ?C0303:
000C ED                MOV     A,R5
000D 6491              XRL     A,#091H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0113
0012         ?C0114:
                                           ; SOURCE LINE # 1763
0012 7C00              MOV     R4,#00H
0014 7D91              MOV     R5,#091H
0016         ?C0116:
                                           ; SOURCE LINE # 1764
                                           ; SOURCE LINE # 1765
                                           ; SOURCE LINE # 1766
0016 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1767
0019 0D                INC     R5
001A BD0001            CJNE    R5,#00H,?C0304
001D 0C                INC     R4
001E         ?C0304:
001E ED                MOV     A,R5
001F 6492              XRL     A,#092H
0021 4C                ORL     A,R4
0022 70F2              JNZ     ?C0116
0024         ?C0117:
                                           ; SOURCE LINE # 1768
0024 7C00              MOV     R4,#00H
0026 7D92              MOV     R5,#092H
0028         ?C0119:
                                           ; SOURCE LINE # 1769
                                           ; SOURCE LINE # 1770
                                           ; SOURCE LINE # 1771
0028 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1772
002B 0D                INC     R5
002C BD0001            CJNE    R5,#00H,?C0305
002F 0C                INC     R4
0030         ?C0305:
0030 ED                MOV     A,R5
0031 6493              XRL     A,#093H
0033 4C                ORL     A,R4
0034 70F2              JNZ     ?C0119
                                           ; SOURCE LINE # 1773
0036         ?C0122:
0036 22                RET     
             ; FUNCTION clearT (END)

             ; FUNCTION clearTD (BEGIN)
                                           ; SOURCE LINE # 1774
                                           ; SOURCE LINE # 1776
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D93              MOV     R5,#093H
0002 7C00              MOV     R4,#00H
0004         ?C0123:
                                           ; SOURCE LINE # 1777
                                           ; SOURCE LINE # 1778
                                           ; SOURCE LINE # 1779
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1780
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0306
000B 0C                INC     R4
000C         ?C0306:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 158 

000C ED                MOV     A,R5
000D 64A3              XRL     A,#0A3H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0123
0012         ?C0124:
                                           ; SOURCE LINE # 1781
0012 7C00              MOV     R4,#00H
0014 7DA3              MOV     R5,#0A3H
0016         ?C0126:
                                           ; SOURCE LINE # 1782
                                           ; SOURCE LINE # 1783
                                           ; SOURCE LINE # 1784
0016 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1785
0019 0D                INC     R5
001A BD0001            CJNE    R5,#00H,?C0307
001D 0C                INC     R4
001E         ?C0307:
001E ED                MOV     A,R5
001F 64B3              XRL     A,#0B3H
0021 4C                ORL     A,R4
0022 70F2              JNZ     ?C0126
0024         ?C0127:
                                           ; SOURCE LINE # 1786
0024 7C00              MOV     R4,#00H
0026 7DB3              MOV     R5,#0B3H
0028         ?C0129:
                                           ; SOURCE LINE # 1787
                                           ; SOURCE LINE # 1788
                                           ; SOURCE LINE # 1789
0028 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1790
002B 0D                INC     R5
002C BD0001            CJNE    R5,#00H,?C0308
002F 0C                INC     R4
0030         ?C0308:
0030 ED                MOV     A,R5
0031 64C3              XRL     A,#0C3H
0033 4C                ORL     A,R4
0034 70F2              JNZ     ?C0129
                                           ; SOURCE LINE # 1791
0036         ?C0132:
0036 22                RET     
             ; FUNCTION clearTD (END)

             ; FUNCTION clearC (BEGIN)
                                           ; SOURCE LINE # 1792
                                           ; SOURCE LINE # 1794
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DC3              MOV     R5,#0C3H
0002 7C00              MOV     R4,#00H
0004         ?C0133:
                                           ; SOURCE LINE # 1795
                                           ; SOURCE LINE # 1796
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1797
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0309
000B 0C                INC     R4
000C         ?C0309:
000C ED                MOV     A,R5
000D 64C4              XRL     A,#0C4H
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 159 

000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0133
                                           ; SOURCE LINE # 1798
0012         ?C0136:
0012 22                RET     
             ; FUNCTION clearC (END)

             ; FUNCTION clearX (BEGIN)
                                           ; SOURCE LINE # 1799
                                           ; SOURCE LINE # 1801
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DC4              MOV     R5,#0C4H
0002 7C00              MOV     R4,#00H
0004         ?C0137:
                                           ; SOURCE LINE # 1802
                                           ; SOURCE LINE # 1803
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1804
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0310
000B 0C                INC     R4
000C         ?C0310:
000C ED                MOV     A,R5
000D 64C5              XRL     A,#0C5H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0137
                                           ; SOURCE LINE # 1805
0012         ?C0140:
0012 22                RET     
             ; FUNCTION clearX (END)

             ; FUNCTION clearY (BEGIN)
                                           ; SOURCE LINE # 1806
                                           ; SOURCE LINE # 1808
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DC5              MOV     R5,#0C5H
0002 7C00              MOV     R4,#00H
0004         ?C0141:
                                           ; SOURCE LINE # 1809
                                           ; SOURCE LINE # 1810
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1811
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0311
000B 0C                INC     R4
000C         ?C0311:
000C ED                MOV     A,R5
000D 64C6              XRL     A,#0C6H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0141
                                           ; SOURCE LINE # 1812
0012         ?C0144:
0012 22                RET     
             ; FUNCTION clearY (END)

             ; FUNCTION clearSPREG (BEGIN)
                                           ; SOURCE LINE # 1813
                                           ; SOURCE LINE # 1815
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DC6              MOV     R5,#0C6H
0002 7C00              MOV     R4,#00H
0004         ?C0145:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 160 

                                           ; SOURCE LINE # 1816
                                           ; SOURCE LINE # 1817
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1818
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0312
000B 0C                INC     R4
000C         ?C0312:
000C ED                MOV     A,R5
000D 64CA              XRL     A,#0CAH
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0145
                                           ; SOURCE LINE # 1819
0012         ?C0148:
0012 22                RET     
             ; FUNCTION clearSPREG (END)

             ; FUNCTION clearSPCOIL (BEGIN)
                                           ; SOURCE LINE # 1820
                                           ; SOURCE LINE # 1822
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DCA              MOV     R5,#0CAH
0002 7C00              MOV     R4,#00H
0004         ?C0149:
                                           ; SOURCE LINE # 1823
                                           ; SOURCE LINE # 1824
0004 120000      R     LCALL   L?0442
                                           ; SOURCE LINE # 1825
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0313
000B 0C                INC     R4
000C         ?C0313:
000C ED                MOV     A,R5
000D 64CE              XRL     A,#0CEH
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0149
                                           ; SOURCE LINE # 1826
0012         ?C0152:
0012 22                RET     
             ; FUNCTION clearSPCOIL (END)

             ; FUNCTION nvramLoad (BEGIN)
                                           ; SOURCE LINE # 1827
                                           ; SOURCE LINE # 1828
0000 7E01              MOV     R6,#01H
0002 7F9C              MOV     R7,#09CH
0004 7D00              MOV     R5,#00H
0006 120000      R     LCALL   L?0498
0009 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 1829
000C 120000      R     LCALL   L?0498
000F 750001      E     MOV     ?_epromRead?BYTE+05H,#01H
0012 75009C      E     MOV     ?_epromRead?BYTE+06H,#09CH
0015 E4                CLR     A
0016 FF                MOV     R7,A
0017 FE                MOV     R6,A
0018 120000      E     LCALL   _epromRead
                                           ; SOURCE LINE # 1830
001B 120000      R     LCALL   clearEM
                                           ; SOURCE LINE # 1831
001E 120000      R     LCALL   clearR
                                           ; SOURCE LINE # 1832
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 161 

0021 120000      R     LCALL   clearT
                                           ; SOURCE LINE # 1833
0024 120000      R     LCALL   clearTD
                                           ; SOURCE LINE # 1834
0027 120000      R     LCALL   clearC
                                           ; SOURCE LINE # 1835
002A 120000      R     LCALL   clearX
                                           ; SOURCE LINE # 1836
002D 120000      R     LCALL   clearY
                                           ; SOURCE LINE # 1837
0030 120000      R     LCALL   clearSPREG
                                           ; SOURCE LINE # 1838
0033 120000      R     LCALL   clearSPCOIL
                                           ; SOURCE LINE # 1839
0036 120000      R     LCALL   L?0497
0039 7E00              MOV     R6,#00H
003B 7FCE              MOV     R7,#0CEH
003D 020000      E     LJMP    ?C?COPY
             ; FUNCTION nvramLoad (END)

             ; FUNCTION nvramSave (BEGIN)
                                           ; SOURCE LINE # 1841
                                           ; SOURCE LINE # 1842
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 1843
0002 120000      R     LCALL   L?0498
0005 750000      E     MOV     ?_epromWrite?BYTE+05H,#00H
0008 750008      E     MOV     ?_epromWrite?BYTE+06H,#08H
000B E4                CLR     A
000C FF                MOV     R7,A
000D FE                MOV     R6,A
000E 120000      E     LCALL   _epromWrite
                                           ; SOURCE LINE # 1844
0011 D2AF              SETB    EA
                                           ; SOURCE LINE # 1845
0013 22                RET     
             ; FUNCTION nvramSave (END)

             ; FUNCTION nvramUpdata (BEGIN)
                                           ; SOURCE LINE # 1846
                                           ; SOURCE LINE # 1849
0000 750001      R     MOV     sp0,#01H
0003 750000      R     MOV     sp0+01H,#HIGH NVRAM0
0006 750000      R     MOV     sp0+02H,#LOW NVRAM0
                                           ; SOURCE LINE # 1850
0009 750001      R     MOV     sp1,#01H
000C 750000      R     MOV     sp1+01H,#HIGH NVRAM1
000F 750000      R     MOV     sp1+02H,#LOW NVRAM1
                                           ; SOURCE LINE # 1851
0012 E4                CLR     A
0013 F500        R     MOV     i,A
0015 F500        R     MOV     i+01H,A
0017         ?C0155:
                                           ; SOURCE LINE # 1852
0017 120000      R     LCALL   L?0469
001A 6F                XRL     A,R7
001B 600B              JZ      ?C0157
                                           ; SOURCE LINE # 1853
001D 7F01              MOV     R7,#01H
001F 120000      R     LCALL   _?setLedEprom
                                           ; SOURCE LINE # 1854
0022 120000      R     LCALL   L?0470
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 162 

                                           ; SOURCE LINE # 1855
0025 120000      R     LCALL   L?0526
                                           ; SOURCE LINE # 1856
                                           ; SOURCE LINE # 1857
0028         ?C0157:
0028 0500        R     INC     i+01H
002A E500        R     MOV     A,i+01H
002C 7002              JNZ     ?C0314
002E 0500        R     INC     i
0030         ?C0314:
0030 C3                CLR     C
0031 9408              SUBB    A,#08H
0033 E500        R     MOV     A,i
0035 9400              SUBB    A,#00H
0037 40DE              JC      ?C0155
0039         ?C0156:
                                           ; SOURCE LINE # 1858
0039 750001      R     MOV     sp0,#01H
003C 750000      R     MOV     sp0+01H,#HIGH NVRAM0+020H
003F 750000      R     MOV     sp0+02H,#LOW NVRAM0+020H
                                           ; SOURCE LINE # 1859
0042 750001      R     MOV     sp1,#01H
0045 750000      R     MOV     sp1+01H,#HIGH NVRAM1+020H
0048 750000      R     MOV     sp1+02H,#LOW NVRAM1+020H
                                           ; SOURCE LINE # 1860
004B 750000      R     MOV     i,#00H
004E 750008      R     MOV     i+01H,#08H
0051         ?C0159:
                                           ; SOURCE LINE # 1861
0051 120000      R     LCALL   L?0469
0054 6F                XRL     A,R7
0055 600B              JZ      ?C0161
                                           ; SOURCE LINE # 1862
0057 7F01              MOV     R7,#01H
0059 120000      R     LCALL   _?setLedEprom
                                           ; SOURCE LINE # 1863
005C 120000      R     LCALL   L?0470
                                           ; SOURCE LINE # 1864
005F 120000      R     LCALL   L?0526
                                           ; SOURCE LINE # 1865
                                           ; SOURCE LINE # 1866
0062         ?C0161:
0062 0500        R     INC     i+01H
0064 E500        R     MOV     A,i+01H
0066 7002              JNZ     ?C0315
0068 0500        R     INC     i
006A         ?C0315:
006A C3                CLR     C
006B 9420              SUBB    A,#020H
006D E500        R     MOV     A,i
006F 9400              SUBB    A,#00H
0071 40DE              JC      ?C0159
0073         ?C0160:
                                           ; SOURCE LINE # 1867
0073 120000      R     LCALL   L?0497
0076 7E01              MOV     R6,#01H
0078 7F9C              MOV     R7,#09CH
007A 020000      E     LJMP    ?C?COPY
                                           ; SOURCE LINE # 1868
007D         L?0526:
007D FD                MOV     R5,A
007E AF00        R     MOV     R7,i+01H
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 163 

0080 AE00        R     MOV     R6,i
0082 120000      E     LCALL   _epromWriteOneByte
0085 7F00              MOV     R7,#00H
0087 120000      R     LCALL   _?setLedEprom
008A 22                RET     
             ; FUNCTION nvramUpdata (END)

             ; FUNCTION _SET (BEGIN)
                                           ; SOURCE LINE # 1871
0000 8E00        R     MOV     A,R6
0002 8F00        R     MOV     A+01H,R7
                                           ; SOURCE LINE # 1872
0004 120000      R     LCALL   _assertCoilAddress
                                           ; SOURCE LINE # 1873
0007 E500        R     MOV     A,A
0009 C4                SWAP    A
000A F8                MOV     R0,A
000B 54F0              ANL     A,#0F0H
000D C8                XCH     A,R0
000E 68                XRL     A,R0
000F FE                MOV     R6,A
0010 E500        R     MOV     A,A+01H
0012 120000      R     LCALL   L?0453
0015 C083              PUSH    DPH
0017 C082              PUSH    DPL
0019 E0                MOVX    A,@DPTR
001A FC                MOV     R4,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FD                MOV     R5,A
001E E500        R     MOV     A,A+01H
0020 120000      R     LCALL   L?0468
0023 8005              SJMP    ?C0317
0025         ?C0316:
0025 C3                CLR     C
0026 33                RLC     A
0027 CE                XCH     A,R6
0028 33                RLC     A
0029 CE                XCH     A,R6
002A         ?C0317:
002A D8F9              DJNZ    R0,?C0316
002C FF                MOV     R7,A
002D EC                MOV     A,R4
002E 4E                ORL     A,R6
002F FE                MOV     R6,A
0030 ED                MOV     A,R5
0031 4F                ORL     A,R7
0032 FF                MOV     R7,A
0033 D082              POP     DPL
0035 D083              POP     DPH
0037 EE                MOV     A,R6
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1874
003C 22                RET     
             ; FUNCTION _SET (END)

             ; FUNCTION _RESET (BEGIN)
                                           ; SOURCE LINE # 1875
0000 8E00        R     MOV     A,R6
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 164 

0002 8F00        R     MOV     A+01H,R7
                                           ; SOURCE LINE # 1876
0004 120000      R     LCALL   _assertCoilAddress
                                           ; SOURCE LINE # 1877
0007 E500        R     MOV     A,A
0009 C4                SWAP    A
000A F8                MOV     R0,A
000B 54F0              ANL     A,#0F0H
000D C8                XCH     A,R0
000E 68                XRL     A,R0
000F FE                MOV     R6,A
0010 E500        R     MOV     A,A+01H
0012 120000      R     LCALL   L?0453
0015 C083              PUSH    DPH
0017 C082              PUSH    DPL
0019 E0                MOVX    A,@DPTR
001A FC                MOV     R4,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FD                MOV     R5,A
001E E500        R     MOV     A,A+01H
0020 120000      R     LCALL   L?0468
0023 8005              SJMP    ?C0319
0025         ?C0318:
0025 C3                CLR     C
0026 33                RLC     A
0027 CE                XCH     A,R6
0028 33                RLC     A
0029 CE                XCH     A,R6
002A         ?C0319:
002A D8F9              DJNZ    R0,?C0318
002C F4                CPL     A
002D FF                MOV     R7,A
002E EE                MOV     A,R6
002F F4                CPL     A
0030 5C                ANL     A,R4
0031 FE                MOV     R6,A
0032 ED                MOV     A,R5
0033 5F                ANL     A,R7
0034 FF                MOV     R7,A
0035 D082              POP     DPL
0037 D083              POP     DPH
0039 EE                MOV     A,R6
003A F0                MOVX    @DPTR,A
003B A3                INC     DPTR
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1878
003E 22                RET     
             ; FUNCTION _RESET (END)

             ; FUNCTION _FLIP (BEGIN)
                                           ; SOURCE LINE # 1879
;---- Variable 'A' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 1881
0004 120000      R     LCALL   _assertCoilAddress
                                           ; SOURCE LINE # 1882
0007 120000      R     LCALL   L?0452
000A E0                MOVX    A,@DPTR
000B FA                MOV     R2,A
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 165 

000C A3                INC     DPTR
000D E0                MOVX    A,@DPTR
000E FB                MOV     R3,A
000F ED                MOV     A,R5
0010 120000      R     LCALL   L?0468
0013 8005              SJMP    ?C0321
0015         ?C0320:
0015 C3                CLR     C
0016 33                RLC     A
0017 CE                XCH     A,R6
0018 33                RLC     A
0019 CE                XCH     A,R6
001A         ?C0321:
001A D8F9              DJNZ    R0,?C0320
001C FF                MOV     R7,A
001D EA                MOV     A,R2
001E 5E                ANL     A,R6
001F FE                MOV     R6,A
0020 EB                MOV     A,R3
0021 5F                ANL     A,R7
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1883
0022 4E                ORL     A,R6
0023 AF05              MOV     R7,AR5
0025 AE04              MOV     R6,AR4
0027 6003              JZ      ?C0166
                                           ; SOURCE LINE # 1884
0029 020000      R     LJMP    _RESET
002C         ?C0166:
                                           ; SOURCE LINE # 1886
002C 120000      R     LCALL   _SET
                                           ; SOURCE LINE # 1887
002F         ?C0168:
002F 22                RET     
             ; FUNCTION _FLIP (END)

             ; FUNCTION _LD (BEGIN)
                                           ; SOURCE LINE # 1888
;---- Variable 'A' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 1889
                                           ; SOURCE LINE # 1890
0000 120000      R     LCALL   L?0450
0003 120000      R     LCALL   L?0531
0006 8003              SJMP    ?C0323
0008         ?C0322:
0008 120000      R     LCALL   L?0499
000B         ?C0323:
000B D8FB              DJNZ    R0,?C0322
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 1891
000E         ?C0169:
000E 22                RET     
             ; FUNCTION _LD (END)

             ; FUNCTION _LDP (BEGIN)
                                           ; SOURCE LINE # 1892
;---- Variable 'A' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 1894
                                           ; SOURCE LINE # 1895
0000 120000      R     LCALL   L?0450
0003 120000      R     LCALL   L?0531
0006 8003              SJMP    ?C0325
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 166 

0008         ?C0324:
0008 120000      R     LCALL   L?0499
000B         ?C0325:
000B D8FB              DJNZ    R0,?C0324
;---- Variable 'temp0' assigned to Register 'R3' ----
000D FB                MOV     R3,A
                                           ; SOURCE LINE # 1896
000E ED                MOV     A,R5
000F 120000      R     LCALL   L?0464
0012 120000      R     LCALL   L?0473
0015 A802              MOV     R0,AR2
0017 08                INC     R0
0018 8003              SJMP    ?C0327
001A         ?C0326:
001A 120000      R     LCALL   L?0500
001D         ?C0327:
001D D8FB              DJNZ    R0,?C0326
001F FF                MOV     R7,A
;---- Variable 'temp1' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1897
0020 EB                MOV     A,R3
0021 6006              JZ      ?C0170
0023 EF                MOV     A,R7
0024 7003              JNZ     ?C0170
                                           ; SOURCE LINE # 1898
0026 7F01              MOV     R7,#01H
0028 22                RET     
0029         ?C0170:
                                           ; SOURCE LINE # 1900
0029 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1901
002B         ?C0171:
002B 22                RET     
             ; FUNCTION _LDP (END)

             ; FUNCTION _LDN (BEGIN)
                                           ; SOURCE LINE # 1902
;---- Variable 'A' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 1904
                                           ; SOURCE LINE # 1905
0000 120000      R     LCALL   L?0451
0003 120000      R     LCALL   L?0532
0006 8003              SJMP    ?C0329
0008         ?C0328:
0008 120000      R     LCALL   L?0500
000B         ?C0329:
000B D8FB              DJNZ    R0,?C0328
;---- Variable 'temp0' assigned to Register 'R3' ----
000D FB                MOV     R3,A
                                           ; SOURCE LINE # 1906
000E ED                MOV     A,R5
000F 120000      R     LCALL   L?0464
0012 120000      R     LCALL   L?0473
0015 A802              MOV     R0,AR2
0017 08                INC     R0
0018 8003              SJMP    ?C0331
001A         ?C0330:
001A 120000      R     LCALL   L?0500
001D         ?C0331:
001D D8FB              DJNZ    R0,?C0330
001F FF                MOV     R7,A
;---- Variable 'temp1' assigned to Register 'R7' ----
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 167 

                                           ; SOURCE LINE # 1907
0020 EB                MOV     A,R3
0021 7006              JNZ     ?C0173
0023 EF                MOV     A,R7
0024 6003              JZ      ?C0173
                                           ; SOURCE LINE # 1908
0026 7F01              MOV     R7,#01H
0028 22                RET     
0029         ?C0173:
                                           ; SOURCE LINE # 1910
0029 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1911
002B         ?C0174:
002B 22                RET     
             ; FUNCTION _LDN (END)

             ; FUNCTION _T1MS (BEGIN)
                                           ; SOURCE LINE # 1912
0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1917
0002 ED                MOV     A,R5
0003 6053              JZ      ?C0176
                                           ; SOURCE LINE # 1918
0005 EF                MOV     A,R7
0006 120000      R     LCALL   L?0465
0009 7400        R     MOV     A,#LOW NVRAM0+0126H
000B 2F                ADD     A,R7
000C F582              MOV     DPL,A
000E 7400        R     MOV     A,#HIGH NVRAM0+0126H
0010 120000      R     LCALL   L?0474
0013 C3                CLR     C
0014 9B                SUBB    A,R3
0015 EE                MOV     A,R6
0016 9A                SUBB    A,R2
0017 401B              JC      ?C0177
                                           ; SOURCE LINE # 1919
0019 120000      R     LCALL   L?0461
001C 120000      R     LCALL   L?0511
001F C083              PUSH    DPH
0021 C082              PUSH    DPL
0023 120000      R     LCALL   L?0466
0026 8005              SJMP    ?C0333
0028         ?C0332:
0028 C3                CLR     C
0029 33                RLC     A
002A CE                XCH     A,R6
002B 33                RLC     A
002C CE                XCH     A,R6
002D         ?C0333:
002D D8F9              DJNZ    R0,?C0332
002F 120000      R     LCALL   L?0533
                                           ; SOURCE LINE # 1920
0032 8019              SJMP    ?C0436
0034         ?C0177:
                                           ; SOURCE LINE # 1921
                                           ; SOURCE LINE # 1922
0034 120000      R     LCALL   L?0461
0037 120000      R     LCALL   L?0511
003A C083              PUSH    DPH
003C C082              PUSH    DPL
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 168 

003E 120000      R     LCALL   L?0466
0041 8005              SJMP    ?C0335
0043         ?C0334:
0043 C3                CLR     C
0044 33                RLC     A
0045 CE                XCH     A,R6
0046 33                RLC     A
0047 CE                XCH     A,R6
0048         ?C0335:
0048 D8F9              DJNZ    R0,?C0334
004A 120000      R     LCALL   L?0475
004D         ?C0436:
004D FF                MOV     R7,A
004E D082              POP     DPL
0050 D083              POP     DPH
0052 EE                MOV     A,R6
0053 F0                MOVX    @DPTR,A
0054 A3                INC     DPTR
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1923
                                           ; SOURCE LINE # 1925
0057 22                RET     
0058         ?C0176:
                                           ; SOURCE LINE # 1926
                                           ; SOURCE LINE # 1927
0058 120000      R     LCALL   L?0462
005B 120000      R     LCALL   L?0512
005E C083              PUSH    DPH
0060 C082              PUSH    DPL
0062 120000      R     LCALL   L?0467
0065 8005              SJMP    ?C0337
0067         ?C0336:
0067 C3                CLR     C
0068 33                RLC     A
0069 CE                XCH     A,R6
006A 33                RLC     A
006B CE                XCH     A,R6
006C         ?C0337:
006C D8F9              DJNZ    R0,?C0336
006E 120000      R     LCALL   L?0475
0071 FF                MOV     R7,A
0072 D082              POP     DPL
0074 D083              POP     DPH
0076 EE                MOV     A,R6
0077 F0                MOVX    @DPTR,A
0078 A3                INC     DPTR
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1928
007B E500        R     MOV     A,A
007D 120000      R     LCALL   L?0465
0080 7400        R     MOV     A,#LOW NVRAM0+0126H
0082 2F                ADD     A,R7
0083 F582              MOV     DPL,A
0085 7400        R     MOV     A,#HIGH NVRAM0+0126H
0087 120000      R     LCALL   L?0443
                                           ; SOURCE LINE # 1929
                                           ; SOURCE LINE # 1930
008A         ?C0180:
008A 22                RET     
             ; FUNCTION _T1MS (END)
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 169 


             ; FUNCTION _T10MS (BEGIN)
                                           ; SOURCE LINE # 1931
0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1936
0002 ED                MOV     A,R5
0003 605B              JZ      ?C0181
                                           ; SOURCE LINE # 1937
0005 EF                MOV     A,R7
0006 120000      R     LCALL   L?0465
0009 7400        R     MOV     A,#LOW NVRAM0+0146H
000B 2F                ADD     A,R7
000C F582              MOV     DPL,A
000E 7400        R     MOV     A,#HIGH NVRAM0+0146H
0010 120000      R     LCALL   L?0474
0013 C3                CLR     C
0014 9B                SUBB    A,R3
0015 EE                MOV     A,R6
0016 9A                SUBB    A,R2
0017 401F              JC      ?C0182
                                           ; SOURCE LINE # 1938
0019 E500        R     MOV     A,A
001B 120000      R     LCALL   L?0463
001E 120000      R     LCALL   L?0513
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 E500        R     MOV     A,A
0027 120000      R     LCALL   L?0468
002A 8005              SJMP    ?C0339
002C         ?C0338:
002C C3                CLR     C
002D 33                RLC     A
002E CE                XCH     A,R6
002F 33                RLC     A
0030 CE                XCH     A,R6
0031         ?C0339:
0031 D8F9              DJNZ    R0,?C0338
0033 120000      R     LCALL   L?0533
                                           ; SOURCE LINE # 1939
0036 801D              SJMP    ?C0437
0038         ?C0182:
                                           ; SOURCE LINE # 1940
                                           ; SOURCE LINE # 1941
0038 E500        R     MOV     A,A
003A 120000      R     LCALL   L?0463
003D 120000      R     LCALL   L?0513
0040 C083              PUSH    DPH
0042 C082              PUSH    DPL
0044 E500        R     MOV     A,A
0046 120000      R     LCALL   L?0468
0049 8005              SJMP    ?C0341
004B         ?C0340:
004B C3                CLR     C
004C 33                RLC     A
004D CE                XCH     A,R6
004E 33                RLC     A
004F CE                XCH     A,R6
0050         ?C0341:
0050 D8F9              DJNZ    R0,?C0340
0052 120000      R     LCALL   L?0476
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 170 

0055         ?C0437:
0055 FF                MOV     R7,A
0056 D082              POP     DPL
0058 D083              POP     DPH
005A EE                MOV     A,R6
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1942
                                           ; SOURCE LINE # 1943
005F 22                RET     
0060         ?C0181:
                                           ; SOURCE LINE # 1944
                                           ; SOURCE LINE # 1945
0060 E500        R     MOV     A,A
0062 120000      R     LCALL   L?0463
0065 120000      R     LCALL   L?0514
0068 C083              PUSH    DPH
006A C082              PUSH    DPL
006C E500        R     MOV     A,A
006E 120000      R     LCALL   L?0468
0071 8005              SJMP    ?C0343
0073         ?C0342:
0073 C3                CLR     C
0074 33                RLC     A
0075 CE                XCH     A,R6
0076 33                RLC     A
0077 CE                XCH     A,R6
0078         ?C0343:
0078 D8F9              DJNZ    R0,?C0342
007A 120000      R     LCALL   L?0476
007D FF                MOV     R7,A
007E D082              POP     DPL
0080 D083              POP     DPH
0082 EE                MOV     A,R6
0083 F0                MOVX    @DPTR,A
0084 A3                INC     DPTR
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1946
0087 E500        R     MOV     A,A
0089 120000      R     LCALL   L?0465
008C 7400        R     MOV     A,#LOW NVRAM0+0146H
008E 2F                ADD     A,R7
008F F582              MOV     DPL,A
0091 7400        R     MOV     A,#HIGH NVRAM0+0146H
0093 120000      R     LCALL   L?0443
                                           ; SOURCE LINE # 1947
                                           ; SOURCE LINE # 1948
0096         ?C0185:
0096 22                RET     
             ; FUNCTION _T10MS (END)

             ; FUNCTION _T100MS (BEGIN)
                                           ; SOURCE LINE # 1949
0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1954
0002 ED                MOV     A,R5
0003 605B              JZ      ?C0186
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 171 

                                           ; SOURCE LINE # 1955
0005 EF                MOV     A,R7
0006 120000      R     LCALL   L?0465
0009 7400        R     MOV     A,#LOW NVRAM0+0166H
000B 2F                ADD     A,R7
000C F582              MOV     DPL,A
000E 7400        R     MOV     A,#HIGH NVRAM0+0166H
0010 120000      R     LCALL   L?0474
0013 C3                CLR     C
0014 9B                SUBB    A,R3
0015 EE                MOV     A,R6
0016 9A                SUBB    A,R2
0017 401F              JC      ?C0187
                                           ; SOURCE LINE # 1956
0019 E500        R     MOV     A,A
001B 120000      R     LCALL   L?0463
001E 120000      R     LCALL   L?0515
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 E500        R     MOV     A,A
0027 120000      R     LCALL   L?0468
002A 8005              SJMP    ?C0345
002C         ?C0344:
002C C3                CLR     C
002D 33                RLC     A
002E CE                XCH     A,R6
002F 33                RLC     A
0030 CE                XCH     A,R6
0031         ?C0345:
0031 D8F9              DJNZ    R0,?C0344
0033 120000      R     LCALL   L?0534
                                           ; SOURCE LINE # 1957
0036 801D              SJMP    ?C0438
0038         ?C0187:
                                           ; SOURCE LINE # 1958
                                           ; SOURCE LINE # 1959
0038 E500        R     MOV     A,A
003A 120000      R     LCALL   L?0463
003D 120000      R     LCALL   L?0515
0040 C083              PUSH    DPH
0042 C082              PUSH    DPL
0044 E500        R     MOV     A,A
0046 120000      R     LCALL   L?0468
0049 8005              SJMP    ?C0347
004B         ?C0346:
004B C3                CLR     C
004C 33                RLC     A
004D CE                XCH     A,R6
004E 33                RLC     A
004F CE                XCH     A,R6
0050         ?C0347:
0050 D8F9              DJNZ    R0,?C0346
0052 120000      R     LCALL   L?0476
0055         ?C0438:
0055 FF                MOV     R7,A
0056 D082              POP     DPL
0058 D083              POP     DPH
005A EE                MOV     A,R6
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 172 

                                           ; SOURCE LINE # 1960
                                           ; SOURCE LINE # 1961
005F 22                RET     
0060         ?C0186:
                                           ; SOURCE LINE # 1962
                                           ; SOURCE LINE # 1963
0060 E500        R     MOV     A,A
0062 120000      R     LCALL   L?0463
0065 120000      R     LCALL   L?0516
0068 C083              PUSH    DPH
006A C082              PUSH    DPL
006C E500        R     MOV     A,A
006E 120000      R     LCALL   L?0468
0071 8005              SJMP    ?C0349
0073         ?C0348:
0073 C3                CLR     C
0074 33                RLC     A
0075 CE                XCH     A,R6
0076 33                RLC     A
0077 CE                XCH     A,R6
0078         ?C0349:
0078 D8F9              DJNZ    R0,?C0348
007A 120000      R     LCALL   L?0476
007D FF                MOV     R7,A
007E D082              POP     DPL
0080 D083              POP     DPH
0082 EE                MOV     A,R6
0083 F0                MOVX    @DPTR,A
0084 A3                INC     DPTR
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1964
0087 E500        R     MOV     A,A
0089 120000      R     LCALL   L?0465
008C 7400        R     MOV     A,#LOW NVRAM0+0166H
008E 2F                ADD     A,R7
008F F582              MOV     DPL,A
0091 7400        R     MOV     A,#HIGH NVRAM0+0166H
0093 120000      R     LCALL   L?0443
                                           ; SOURCE LINE # 1965
                                           ; SOURCE LINE # 1966
0096         ?C0190:
0096 22                RET     
             ; FUNCTION _T100MS (END)

             ; FUNCTION _TNTC (BEGIN)
                                           ; SOURCE LINE # 1967
;---- Variable 'dat' assigned to Register 'DPTR' ----
0000 8F82              MOV     DPL,R7
0002 8E83              MOV     DPH,R6
                                           ; SOURCE LINE # 1970
0004 EE                MOV     A,R6
0005 33                RLC     A
0006 95E0              SUBB    A,ACC
0008 FD                MOV     R5,A
0009 FC                MOV     R4,A
000A E4                CLR     A
000B 7B98              MOV     R3,#098H
000D 7A08              MOV     R2,#08H
000F F9                MOV     R1,A
0010 F8                MOV     R0,A
0011 D3                SETB    C
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 173 

0012 120000      E     LCALL   ?C?SLCMP
0015 5003              JNC     ?C0191
0017 900898            MOV     DPTR,#0898H
001A         ?C0191:
                                           ; SOURCE LINE # 1971
001A C3                CLR     C
001B E583              MOV     A,DPH
001D 6480              XRL     A,#080H
001F 9480              SUBB    A,#080H
0021 5005              JNC     ?C0192
0023 E4                CLR     A
0024 F583              MOV     DPH,A
0026 F582              MOV     DPL,A
0028         ?C0192:
                                           ; SOURCE LINE # 1973
0028 AE83              MOV     R6,DPH
002A AF82              MOV     R7,DPL
002C 120000      R     LCALL   L?0494
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1974
002F C3                CLR     C
0030 7488              MOV     A,#088H
0032 9F                SUBB    A,R7
0033 FD                MOV     R5,A
0034 7413              MOV     A,#013H
0036 9E                SUBB    A,R6
0037 FC                MOV     R4,A
0038 7EF0              MOV     R6,#0F0H
003A 7F80              MOV     R7,#080H
003C 120000      E     LCALL   ?C?UIDIV
                                           ; SOURCE LINE # 1976
003F AD07              MOV     R5,AR7
0041 AC06              MOV     R4,AR6
0043 E4                CLR     A
0044 120000      E     LCALL   ?C?FCASTI
0047 7B00              MOV     R3,#00H
0049 7A40              MOV     R2,#040H
004B 791C              MOV     R1,#01CH
004D 7846              MOV     R0,#046H
004F 120000      E     LCALL   ?C?FPDIV
0052 120000      E     LCALL   _log
0055 7B97              MOV     R3,#097H
0057 7AC9              MOV     R2,#0C9H
0059 7996              MOV     R1,#096H
005B 7839              MOV     R0,#039H
005D 120000      E     LCALL   ?C?FPMUL
0060 7B62              MOV     R3,#062H
0062 7AEB              MOV     R2,#0EBH
0064 795B              MOV     R1,#05BH
0066 783B              MOV     R0,#03BH
0068 120000      R     LCALL   L?0535
                                           ; SOURCE LINE # 1977
006B 120000      R     LCALL   L?0493
006E E4                CLR     A
006F FF                MOV     R7,A
0070 FE                MOV     R6,A
0071 7D80              MOV     R5,#080H
0073 7C3F              MOV     R4,#03FH
0075 120000      E     LCALL   ?C?FPDIV
0078 7B00              MOV     R3,#00H
007A 7A80              MOV     R2,#080H
007C 7988              MOV     R1,#088H
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 174 

007E 78C3              MOV     R0,#0C3H
0080 120000      R     LCALL   L?0535
                                           ; SOURCE LINE # 1978
0083 7C42              MOV     R4,#042H
0085 120000      R     LCALL   L?0492
0088 120000      E     LCALL   ?C?FPCMP3
008B 400B              JC      ?C0193
008D E4                CLR     A
008E F500        R     MOV     ftemp+03H,A
0090 F500        R     MOV     ftemp+02H,A
0092 7500C8      R     MOV     ftemp+01H,#0C8H
0095 750042      R     MOV     ftemp,#042H
0098         ?C0193:
                                           ; SOURCE LINE # 1979
0098 7CC2              MOV     R4,#0C2H
009A 120000      R     LCALL   L?0492
009D 120000      E     LCALL   ?C?FPCMP3
00A0 6002              JZ      $ + 4H
00A2 500B              JNC     ?C0194
00A4 E4                CLR     A
00A5 F500        R     MOV     ftemp+03H,A
00A7 F500        R     MOV     ftemp+02H,A
00A9 7500C8      R     MOV     ftemp+01H,#0C8H
00AC 7500C2      R     MOV     ftemp,#0C2H
00AF         ?C0194:
                                           ; SOURCE LINE # 1980
00AF E4                CLR     A
00B0 FF                MOV     R7,A
00B1 FE                MOV     R6,A
00B2 7D20              MOV     R5,#020H
00B4 7C41              MOV     R4,#041H
00B6 120000      R     LCALL   L?0493
00B9 120000      E     LCALL   ?C?FPMUL
00BC 120000      E     LCALL   ?C?CASTF
                                           ; SOURCE LINE # 1981
00BF         ?C0195:
00BF 22                RET     
             ; FUNCTION _TNTC (END)

             ; FUNCTION _TENV (BEGIN)
                                           ; SOURCE LINE # 1982
;---- Variable 'dat' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1984
0000 120000      R     LCALL   L?0494
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1985
0003 EF                MOV     A,R7
0004 24A8              ADD     A,#0A8H
0006 FF                MOV     R7,A
0007 EE                MOV     A,R6
0008 34FC              ADDC    A,#0FCH
000A FE                MOV     R6,A
000B E4                CLR     A
000C 34FF              ADDC    A,#0FFH
000E FD                MOV     R5,A
000F E4                CLR     A
0010 34FF              ADDC    A,#0FFH
0012 FC                MOV     R4,A
0013 E4                CLR     A
0014 7BE8              MOV     R3,#0E8H
0016 7A03              MOV     R2,#03H
0018 F9                MOV     R1,A
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 175 

0019 F8                MOV     R0,A
001A 120000      E     LCALL   ?C?LMUL
001D E4                CLR     A
001E 7B02              MOV     R3,#02H
0020 7A0D              MOV     R2,#0DH
0022 F9                MOV     R1,A
0023 F8                MOV     R0,A
0024 120000      E     LCALL   ?C?SLDIV
                                           ; SOURCE LINE # 1986
                                           ; SOURCE LINE # 1987
0027         ?C0196:
0027 22                RET     
             ; FUNCTION _TENV (END)

             ; FUNCTION _MAX (BEGIN)
                                           ; SOURCE LINE # 1988
;---- Variable 'len' assigned to Register 'R5' ----
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 1991
0006 120000      E     LCALL   ?C?ILDPTR
0009 F500        R     MOV     max+01H,A
000B 85F000      R     MOV     max,B
                                           ; SOURCE LINE # 1992
;---- Variable 'i' assigned to Register 'R7' ----
000E E4                CLR     A
000F FF                MOV     R7,A
0010         ?C0197:
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9D                SUBB    A,R5
0013 501E              JNC     ?C0198
                                           ; SOURCE LINE # 1993
0015 AB00        R     MOV     R3,s
0017 AA00        R     MOV     R2,s+01H
0019 A900        R     MOV     R1,s+02H
001B 120000      R     LCALL   L?0489
001E 120000      E     LCALL   ?C?ILDOPTR
0021 FB                MOV     R3,A
0022 D3                SETB    C
0023 9500        R     SUBB    A,max+01H
0025 E500        R     MOV     A,max
0027 120000      R     LCALL   L?0540
002A 4004              JC      ?C0199
                                           ; SOURCE LINE # 1994
002C 8A00        R     MOV     max,R2
002E 8B00        R     MOV     max+01H,R3
                                           ; SOURCE LINE # 1995
                                           ; SOURCE LINE # 1996
0030         ?C0199:
0030 0F                INC     R7
0031 80DD              SJMP    ?C0197
0033         ?C0198:
                                           ; SOURCE LINE # 1997
0033 AE00        R     MOV     R6,max
0035 AF00        R     MOV     R7,max+01H
                                           ; SOURCE LINE # 1998
0037         ?C0201:
0037 22                RET     
             ; FUNCTION _MAX (END)

C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 176 

             ; FUNCTION _MIN (BEGIN)
                                           ; SOURCE LINE # 1999
;---- Variable 'len' assigned to Register 'R5' ----
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 2002
0006 120000      E     LCALL   ?C?ILDPTR
0009 F500        R     MOV     min+01H,A
000B 85F000      R     MOV     min,B
                                           ; SOURCE LINE # 2003
;---- Variable 'i' assigned to Register 'R7' ----
000E E4                CLR     A
000F FF                MOV     R7,A
0010         ?C0202:
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9D                SUBB    A,R5
0013 501E              JNC     ?C0203
                                           ; SOURCE LINE # 2004
0015 AB00        R     MOV     R3,s
0017 AA00        R     MOV     R2,s+01H
0019 A900        R     MOV     R1,s+02H
001B 120000      R     LCALL   L?0490
001E 120000      E     LCALL   ?C?ILDOPTR
0021 FB                MOV     R3,A
0022 C3                CLR     C
0023 9500        R     SUBB    A,min+01H
0025 E500        R     MOV     A,min
0027 120000      R     LCALL   L?0540
002A 5004              JNC     ?C0204
                                           ; SOURCE LINE # 2005
002C 8A00        R     MOV     min,R2
002E 8B00        R     MOV     min+01H,R3
                                           ; SOURCE LINE # 2006
                                           ; SOURCE LINE # 2007
0030         ?C0204:
0030 0F                INC     R7
0031 80DD              SJMP    ?C0202
0033         ?C0203:
                                           ; SOURCE LINE # 2008
0033 AE00        R     MOV     R6,min
0035 AF00        R     MOV     R7,min+01H
                                           ; SOURCE LINE # 2009
0037         ?C0206:
0037 22                RET     
             ; FUNCTION _MIN (END)

             ; FUNCTION wdtInit (BEGIN)
                                           ; SOURCE LINE # 2011
                                           ; SOURCE LINE # 2013
0000 E4                CLR     A
0001 F5FF              MOV     WDTCN,A
                                           ; SOURCE LINE # 2015
0003 22                RET     
             ; FUNCTION wdtInit (END)

             ; FUNCTION wdtEnable (BEGIN)
                                           ; SOURCE LINE # 2016
                                           ; SOURCE LINE # 2018
0000 75FFA5            MOV     WDTCN,#0A5H
                                           ; SOURCE LINE # 2020
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 177 

0003 22                RET     
             ; FUNCTION wdtEnable (END)

             ; FUNCTION wdtDisable (BEGIN)
                                           ; SOURCE LINE # 2021
                                           ; SOURCE LINE # 2023
0000 A2AF              MOV     C,EA
0002 E4                CLR     A
0003 33                RLC     A
;---- Variable 'flagEA' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2024
0004 C2AF              CLR     EA
                                           ; SOURCE LINE # 2026
0006 75FFDE            MOV     WDTCN,#0DEH
                                           ; SOURCE LINE # 2027
0009 75FFAD            MOV     WDTCN,#0ADH
                                           ; SOURCE LINE # 2031
000C 24FF              ADD     A,#0FFH
000E 92AF              MOV     EA,C
                                           ; SOURCE LINE # 2032
0010 22                RET     
             ; FUNCTION wdtDisable (END)

             ; FUNCTION wdtFeed (BEGIN)
                                           ; SOURCE LINE # 2033
                                           ; SOURCE LINE # 2035
0000 75FFA5            MOV     WDTCN,#0A5H
                                           ; SOURCE LINE # 2037
0003 22                RET     
             ; FUNCTION wdtFeed (END)

             ; FUNCTION pcaInit (BEGIN)
                                           ; SOURCE LINE # 2039
                                           ; SOURCE LINE # 2040
0000 22                RET     
             ; FUNCTION pcaInit (END)

             ; FUNCTION timer0Init (BEGIN)
                                           ; SOURCE LINE # 2041
                                           ; SOURCE LINE # 2043
0000 E4                CLR     A
0001 F500        R     MOV     TimerCounter_1mS,A
                                           ; SOURCE LINE # 2044
0003 F500        R     MOV     TimerCounter_10mS,A
                                           ; SOURCE LINE # 2046
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2047
0005 74CD              MOV     A,#0CDH
0007 F500        R     MOV     Timer0_L,A
                                           ; SOURCE LINE # 2048
0009 74F8              MOV     A,#0F8H
000B F500        R     MOV     Timer0_H,A
                                           ; SOURCE LINE # 2049
000D 85008C      R     MOV     TH0,Timer0_H
                                           ; SOURCE LINE # 2050
0010 85008A      R     MOV     TL0,Timer0_L
                                           ; SOURCE LINE # 2051
0013 538EF7            ANL     CKCON,#0F7H
                                           ; SOURCE LINE # 2052
0016 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 2053
0019 438901            ORL     TMOD,#01H
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 178 

                                           ; SOURCE LINE # 2054
001C D2A9              SETB    ET0
                                           ; SOURCE LINE # 2055
001E D28C              SETB    TR0
                                           ; SOURCE LINE # 2057
0020 22                RET     
             ; FUNCTION timer0Init (END)

             ; FUNCTION timer0Isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 2058
                                           ; SOURCE LINE # 2060
001D C28D              CLR     TF0
                                           ; SOURCE LINE # 2061
001F C28C              CLR     TR0
                                           ; SOURCE LINE # 2062
0021 85008C      R     MOV     TH0,Timer0_H
                                           ; SOURCE LINE # 2063
0024 85008A      R     MOV     TL0,Timer0_L
                                           ; SOURCE LINE # 2064
0027 D28C              SETB    TR0
                                           ; SOURCE LINE # 2065
0029 900000      R     MOV     DPTR,#NVRAM0+0194H
002C E0                MOVX    A,@DPTR
002D A2E7              MOV     C,ACC.7
002F 13                RRC     A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 13                RRC     A
0033 30E006            JNB     ACC.0,?C0213
                                           ; SOURCE LINE # 2066
0036 E0                MOVX    A,@DPTR
0037 54FD              ANL     A,#0FDH
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2067
003A 8007              SJMP    ?C0214
003C         ?C0213:
                                           ; SOURCE LINE # 2068
                                           ; SOURCE LINE # 2069
003C 900000      R     MOV     DPTR,#NVRAM0+0195H
003F E0                MOVX    A,@DPTR
0040 4402              ORL     A,#02H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2070
0043         ?C0214:
                                           ; SOURCE LINE # 2072
;---- Variable 'i' assigned to Register 'R4/R5' ----
0043 7D93              MOV     R5,#093H
0045 7C00              MOV     R4,#00H
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 179 

0047         ?C0215:
                                           ; SOURCE LINE # 2073
0047 ED                MOV     A,R5
0048 25E0              ADD     A,ACC
004A FF                MOV     R7,A
004B EC                MOV     A,R4
004C 120000      R     LCALL   L?0454
004F 120000      R     LCALL   L?0501
0052 5006              JNC     ?C0217
                                           ; SOURCE LINE # 2074
0054 120000      R     LCALL   L?0455
0057 120000      R     LCALL   L?0536
                                           ; SOURCE LINE # 2075
                                           ; SOURCE LINE # 2076
005A         ?C0217:
005A 0D                INC     R5
005B BD0001            CJNE    R5,#00H,?C0350
005E 0C                INC     R4
005F         ?C0350:
005F ED                MOV     A,R5
0060 64A3              XRL     A,#0A3H
0062 4C                ORL     A,R4
0063 70E2              JNZ     ?C0215
0065         ?C0216:
                                           ; SOURCE LINE # 2077
0065 E500        R     MOV     A,TimerCounter_1mS
0067 C3                CLR     C
0068 940A              SUBB    A,#0AH
006A 4045              JC      ?C0219
                                           ; SOURCE LINE # 2078
006C 900000      R     MOV     DPTR,#NVRAM0+0194H
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 7802              MOV     R0,#02H
0075         ?C0351:
0075 120000      R     LCALL   L?0500
0078 D8FB              DJNZ    R0,?C0351
007A 900000      R     MOV     DPTR,#NVRAM0+0195H
007D 30E006            JNB     ACC.0,?C0220
                                           ; SOURCE LINE # 2079
0080 E0                MOVX    A,@DPTR
0081 54FB              ANL     A,#0FBH
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2080
0084 8004              SJMP    ?C0221
0086         ?C0220:
                                           ; SOURCE LINE # 2081
                                           ; SOURCE LINE # 2082
0086 E0                MOVX    A,@DPTR
0087 4404              ORL     A,#04H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2083
008A         ?C0221:
                                           ; SOURCE LINE # 2084
008A 7C00              MOV     R4,#00H
008C 7DA3              MOV     R5,#0A3H
008E         ?C0222:
                                           ; SOURCE LINE # 2085
008E ED                MOV     A,R5
008F 25E0              ADD     A,ACC
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 180 

0091 FF                MOV     R7,A
0092 EC                MOV     A,R4
0093 120000      R     LCALL   L?0454
0096 120000      R     LCALL   L?0501
0099 5006              JNC     ?C0224
                                           ; SOURCE LINE # 2086
009B 120000      R     LCALL   L?0455
009E 120000      R     LCALL   L?0536
                                           ; SOURCE LINE # 2087
                                           ; SOURCE LINE # 2088
00A1         ?C0224:
00A1 0D                INC     R5
00A2 BD0001            CJNE    R5,#00H,?C0352
00A5 0C                INC     R4
00A6         ?C0352:
00A6 ED                MOV     A,R5
00A7 64B3              XRL     A,#0B3H
00A9 4C                ORL     A,R4
00AA 70E2              JNZ     ?C0222
00AC         ?C0223:
                                           ; SOURCE LINE # 2089
00AC 0500        R     INC     TimerCounter_10mS
                                           ; SOURCE LINE # 2090
00AE 750000      R     MOV     TimerCounter_1mS,#00H
                                           ; SOURCE LINE # 2091
00B1         ?C0219:
                                           ; SOURCE LINE # 2092
00B1 E500        R     MOV     A,TimerCounter_10mS
00B3 C3                CLR     C
00B4 940A              SUBB    A,#0AH
00B6 4052              JC      ?C0226
                                           ; SOURCE LINE # 2093
00B8 900000      R     MOV     DPTR,#NVRAM0+0194H
00BB E0                MOVX    A,@DPTR
00BC FE                MOV     R6,A
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF 7803              MOV     R0,#03H
00C1         ?C0353:
00C1 120000      R     LCALL   L?0500
00C4 D8FB              DJNZ    R0,?C0353
00C6 900000      R     MOV     DPTR,#NVRAM0+0195H
00C9 30E006            JNB     ACC.0,?C0227
                                           ; SOURCE LINE # 2094
00CC E0                MOVX    A,@DPTR
00CD 54F7              ANL     A,#0F7H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2095
00D0 8004              SJMP    ?C0228
00D2         ?C0227:
                                           ; SOURCE LINE # 2096
                                           ; SOURCE LINE # 2097
00D2 E0                MOVX    A,@DPTR
00D3 4408              ORL     A,#08H
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2098
00D6         ?C0228:
                                           ; SOURCE LINE # 2099
00D6 7C00              MOV     R4,#00H
00D8 7DB3              MOV     R5,#0B3H
00DA         ?C0229:
                                           ; SOURCE LINE # 2100
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 181 

00DA ED                MOV     A,R5
00DB 25E0              ADD     A,ACC
00DD FF                MOV     R7,A
00DE EC                MOV     A,R4
00DF 120000      R     LCALL   L?0454
00E2 120000      R     LCALL   L?0502
00E5 5006              JNC     ?C0231
                                           ; SOURCE LINE # 2101
00E7 120000      R     LCALL   L?0455
00EA 120000      R     LCALL   L?0537
                                           ; SOURCE LINE # 2102
                                           ; SOURCE LINE # 2103
00ED         ?C0231:
00ED 0D                INC     R5
00EE BD0001            CJNE    R5,#00H,?C0354
00F1 0C                INC     R4
00F2         ?C0354:
00F2 ED                MOV     A,R5
00F3 64C2              XRL     A,#0C2H
00F5 4C                ORL     A,R4
00F6 70E2              JNZ     ?C0229
00F8         ?C0230:
                                           ; SOURCE LINE # 2104
00F8 750000      R     MOV     TimerCounter_10mS,#00H
                                           ; SOURCE LINE # 2105
00FB 120000      R     LCALL   _?getLedRun
00FE EF                MOV     A,R7
00FF 6004              JZ      ?C0233
                                           ; SOURCE LINE # 2106
0101 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2107
0103 8002              SJMP    ?C0439
0105         ?C0233:
                                           ; SOURCE LINE # 2108
                                           ; SOURCE LINE # 2109
0105 7F01              MOV     R7,#01H
0107         ?C0439:
0107 120000      R     LCALL   _?setLedRun
                                           ; SOURCE LINE # 2110
                                           ; SOURCE LINE # 2111
010A         ?C0226:
                                           ; SOURCE LINE # 2113
010A 120000      R     LCALL   adcProcess
                                           ; SOURCE LINE # 2115
010D 0500        R     INC     TimerCounter_1mS
                                           ; SOURCE LINE # 2116
010F D007              POP     AR7
0111 D006              POP     AR6
0113 D005              POP     AR5
0115 D004              POP     AR4
0117 D003              POP     AR3
0119 D002              POP     AR2
011B D001              POP     AR1
011D D000              POP     AR0
011F D0D0              POP     PSW
0121 D082              POP     DPL
0123 D083              POP     DPH
0125 D0F0              POP     B
0127 D0E0              POP     ACC
0129 32                RETI    
             ; FUNCTION timer0Isr (END)

C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 182 

             ; FUNCTION inputInit (BEGIN)
                                           ; SOURCE LINE # 2118
                                           ; SOURCE LINE # 2119
0000 7E00              MOV     R6,#00H
0002 7F10              MOV     R7,#010H
0004 7D00              MOV     R5,#00H
0006 7BFE              MOV     R3,#0FEH
0008 7A00        R     MOV     R2,#HIGH inputFilter
000A 7900        R     MOV     R1,#LOW inputFilter
000C 020000      E     LJMP    ?C?MEMSET
             ; FUNCTION inputInit (END)

             ; FUNCTION outputInit (BEGIN)
                                           ; SOURCE LINE # 2121
                                           ; SOURCE LINE # 2125
0000 22                RET     
             ; FUNCTION outputInit (END)

             ; FUNCTION inputRefresh (BEGIN)
                                           ; SOURCE LINE # 2126
                                           ; SOURCE LINE # 2128
0000 E586              MOV     A,P6
0002 C4                SWAP    A
0003 13                RRC     A
0004 13                RRC     A
0005 13                RRC     A
0006 5401              ANL     A,#01H
;---- Variable 'ctemp0' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2129
0008 6018              JZ      ?C0238
                                           ; SOURCE LINE # 2130
000A 7800        R     MOV     R0,#LOW inputFilter
000C E2                MOVX    A,@R0
000D C3                CLR     C
000E 6480              XRL     A,#080H
0010 9483              SUBB    A,#083H
0012 5005              JNC     ?C0239
                                           ; SOURCE LINE # 2131
0014 E2                MOVX    A,@R0
0015 04                INC     A
0016 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2132
0017 801F              SJMP    ?C0241
0019         ?C0239:
                                           ; SOURCE LINE # 2133
                                           ; SOURCE LINE # 2134
0019 900000      R     MOV     DPTR,#NVRAM0+0189H
001C E0                MOVX    A,@DPTR
001D 4401              ORL     A,#01H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2135
                                           ; SOURCE LINE # 2136
0020 8016              SJMP    ?C0241
0022         ?C0238:
                                           ; SOURCE LINE # 2137
                                           ; SOURCE LINE # 2138
0022 7800        R     MOV     R0,#LOW inputFilter
0024 E2                MOVX    A,@R0
0025 D3                SETB    C
0026 6480              XRL     A,#080H
0028 947D              SUBB    A,#07DH
002A 4005              JC      ?C0242
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 183 

                                           ; SOURCE LINE # 2139
002C E2                MOVX    A,@R0
002D 14                DEC     A
002E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2140
002F 8007              SJMP    ?C0241
0031         ?C0242:
                                           ; SOURCE LINE # 2141
                                           ; SOURCE LINE # 2142
0031 900000      R     MOV     DPTR,#NVRAM0+0189H
0034 E0                MOVX    A,@DPTR
0035 54FE              ANL     A,#0FEH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2143
                                           ; SOURCE LINE # 2144
0038         ?C0241:
                                           ; SOURCE LINE # 2145
0038 E586              MOV     A,P6
003A C4                SWAP    A
003B 13                RRC     A
003C 13                RRC     A
003D 5401              ANL     A,#01H
                                           ; SOURCE LINE # 2146
003F 6016              JZ      ?C0244
                                           ; SOURCE LINE # 2147
0041 7800        R     MOV     R0,#LOW inputFilter+01H
0043 E2                MOVX    A,@R0
0044 C3                CLR     C
0045 6480              XRL     A,#080H
0047 9483              SUBB    A,#083H
0049 5004              JNC     ?C0245
                                           ; SOURCE LINE # 2148
004B E2                MOVX    A,@R0
004C 04                INC     A
004D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2149
004E 22                RET     
004F         ?C0245:
                                           ; SOURCE LINE # 2150
                                           ; SOURCE LINE # 2151
004F 900000      R     MOV     DPTR,#NVRAM0+0189H
0052 E0                MOVX    A,@DPTR
0053 4402              ORL     A,#02H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2152
                                           ; SOURCE LINE # 2153
0056 22                RET     
0057         ?C0244:
                                           ; SOURCE LINE # 2154
                                           ; SOURCE LINE # 2155
0057 7800        R     MOV     R0,#LOW inputFilter+01H
0059 E2                MOVX    A,@R0
005A D3                SETB    C
005B 6480              XRL     A,#080H
005D 947D              SUBB    A,#07DH
005F 4004              JC      ?C0248
                                           ; SOURCE LINE # 2156
0061 E2                MOVX    A,@R0
0062 14                DEC     A
0063 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2157
0064 22                RET     
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 184 

0065         ?C0248:
                                           ; SOURCE LINE # 2158
                                           ; SOURCE LINE # 2159
0065 900000      R     MOV     DPTR,#NVRAM0+0189H
0068 E0                MOVX    A,@DPTR
0069 54FD              ANL     A,#0FDH
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2160
                                           ; SOURCE LINE # 2161
                                           ; SOURCE LINE # 2162
006C         ?C0250:
006C 22                RET     
             ; FUNCTION inputRefresh (END)

             ; FUNCTION outputRefresh (BEGIN)
                                           ; SOURCE LINE # 2163
                                           ; SOURCE LINE # 2164
0000 900000      R     MOV     DPTR,#NVRAM0+018AH
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 30E005            JNB     ACC.0,?C0251
                                           ; SOURCE LINE # 2165
000B 438620            ORL     P6,#020H
                                           ; SOURCE LINE # 2166
000E 8003              SJMP    ?C0252
0010         ?C0251:
                                           ; SOURCE LINE # 2167
                                           ; SOURCE LINE # 2168
0010 5386DF            ANL     P6,#0DFH
                                           ; SOURCE LINE # 2169
0013         ?C0252:
                                           ; SOURCE LINE # 2170
0013 EE                MOV     A,R6
0014 A2E7              MOV     C,ACC.7
0016 13                RRC     A
0017 EF                MOV     A,R7
0018 13                RRC     A
0019 30E004            JNB     ACC.0,?C0253
                                           ; SOURCE LINE # 2171
001C 438610            ORL     P6,#010H
                                           ; SOURCE LINE # 2172
001F 22                RET     
0020         ?C0253:
                                           ; SOURCE LINE # 2173
                                           ; SOURCE LINE # 2174
0020 5386EF            ANL     P6,#0EFH
                                           ; SOURCE LINE # 2175
                                           ; SOURCE LINE # 2176
0023         ?C0255:
0023 22                RET     
             ; FUNCTION outputRefresh (END)

             ; FUNCTION chipAdcInit (BEGIN)
                                           ; SOURCE LINE # 2177
                                           ; SOURCE LINE # 2180
                                           ; SOURCE LINE # 2181
                                           ; SOURCE LINE # 2183
                                           ; SOURCE LINE # 2184
                                           ; SOURCE LINE # 2186
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 185 

                                           ; SOURCE LINE # 2187
                                           ; SOURCE LINE # 2189
                                           ; SOURCE LINE # 2190
                                           ; SOURCE LINE # 2192
                                           ; SOURCE LINE # 2193
0000 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 2195
                                           ; SOURCE LINE # 2196
                                           ; SOURCE LINE # 2198
0003 120000      R     LCALL   L?0506
                                           ; SOURCE LINE # 2199
0006 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 2201
0008 E4                CLR     A
0009 F5E8              MOV     ADC0CN,A
                                           ; SOURCE LINE # 2202
000B 43E840            ORL     ADC0CN,#040H
                                           ; SOURCE LINE # 2203
000E 43E880            ORL     ADC0CN,#080H
                                           ; SOURCE LINE # 2204
0011 F5BC              MOV     ADC0CF,A
                                           ; SOURCE LINE # 2205
0013 43BC58            ORL     ADC0CF,#058H
                                           ; SOURCE LINE # 2206
0016 F5BA              MOV     AMX0CF,A
                                           ; SOURCE LINE # 2207
0018 F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 2208
001A C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 2209
001C D2EC              SETB    AD0BUSY
                                           ; SOURCE LINE # 2211
001E F500        R     MOV     adcSelect,A
                                           ; SOURCE LINE # 2212
0020 F500        R     MOV     i,A
0022         ?C0256:
                                           ; SOURCE LINE # 2213
0022 E500        R     MOV     A,i
0024 120000      R     LCALL   L?0521
0027 120000      R     LCALL   _initAdcData
                                           ; SOURCE LINE # 2214
002A 0500        R     INC     i
002C E500        R     MOV     A,i
002E D3                SETB    C
002F 9440              SUBB    A,#040H
0031 40EF              JC      ?C0256
                                           ; SOURCE LINE # 2215
0033         ?C0259:
0033 22                RET     
             ; FUNCTION chipAdcInit (END)

             ; FUNCTION refreshDac (BEGIN)
                                           ; SOURCE LINE # 2216
                                           ; SOURCE LINE # 2218
0000 900000      R     MOV     DPTR,#NVRAM1+0A0H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#NVRAM0+0A0H
000B E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 186 

000C 6E                XRL     A,R6
000D 7003              JNZ     ?C0355
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 6F                XRL     A,R7
0012         ?C0355:
0012 6010              JZ      ?C0260
                                           ; SOURCE LINE # 2219
0014 7F01              MOV     R7,#01H
0016 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2220
0019 900000      R     MOV     DPTR,#NVRAM0+0A0H
001C 120000      R     LCALL   L?0460
001F 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2221
0021 120000      R     LCALL   L?0483
                                           ; SOURCE LINE # 2222
0024         ?C0260:
                                           ; SOURCE LINE # 2223
0024 900000      R     MOV     DPTR,#NVRAM1+0A2H
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#NVRAM0+0A2H
002F E0                MOVX    A,@DPTR
0030 6E                XRL     A,R6
0031 7003              JNZ     ?C0356
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 6F                XRL     A,R7
0036         ?C0356:
0036 6010              JZ      ?C0261
                                           ; SOURCE LINE # 2224
0038 7F01              MOV     R7,#01H
003A 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2225
003D 900000      R     MOV     DPTR,#NVRAM0+0A2H
0040 120000      R     LCALL   L?0460
0043 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2226
0045 120000      R     LCALL   L?0483
                                           ; SOURCE LINE # 2227
0048         ?C0261:
                                           ; SOURCE LINE # 2228
0048 900000      R     MOV     DPTR,#NVRAM1+0A4H
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 900000      R     MOV     DPTR,#NVRAM0+0A4H
0053 E0                MOVX    A,@DPTR
0054 6E                XRL     A,R6
0055 7003              JNZ     ?C0357
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 6F                XRL     A,R7
005A         ?C0357:
005A 6010              JZ      ?C0262
                                           ; SOURCE LINE # 2229
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 187 

005C 7F01              MOV     R7,#01H
005E 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2230
0061 900000      R     MOV     DPTR,#NVRAM0+0A4H
0064 120000      R     LCALL   L?0460
0067 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2231
0069 120000      R     LCALL   L?0507
                                           ; SOURCE LINE # 2232
006C         ?C0262:
                                           ; SOURCE LINE # 2233
006C 900000      R     MOV     DPTR,#NVRAM1+0A6H
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 900000      R     MOV     DPTR,#NVRAM0+0A6H
0077 E0                MOVX    A,@DPTR
0078 6E                XRL     A,R6
0079 7003              JNZ     ?C0358
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D 6F                XRL     A,R7
007E         ?C0358:
007E 6010              JZ      ?C0263
                                           ; SOURCE LINE # 2234
0080 7F01              MOV     R7,#01H
0082 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2235
0085 900000      R     MOV     DPTR,#NVRAM0+0A6H
0088 120000      R     LCALL   L?0460
008B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2236
008D 120000      R     LCALL   L?0507
                                           ; SOURCE LINE # 2237
0090         ?C0263:
                                           ; SOURCE LINE # 2238
0090 900000      R     MOV     DPTR,#NVRAM1+0A8H
0093 E0                MOVX    A,@DPTR
0094 FE                MOV     R6,A
0095 A3                INC     DPTR
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 900000      R     MOV     DPTR,#NVRAM0+0A8H
009B E0                MOVX    A,@DPTR
009C 6E                XRL     A,R6
009D 7003              JNZ     ?C0359
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 6F                XRL     A,R7
00A2         ?C0359:
00A2 6015              JZ      ?C0264
                                           ; SOURCE LINE # 2239
00A4 7F01              MOV     R7,#01H
00A6 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2240
00A9 900000      R     MOV     DPTR,#NVRAM0+0A8H
00AC 120000      R     LCALL   L?0460
00AF 7F06              MOV     R7,#06H
00B1 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2241
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 188 

00B4 7F00              MOV     R7,#00H
00B6 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2242
00B9         ?C0264:
                                           ; SOURCE LINE # 2243
00B9 900000      R     MOV     DPTR,#NVRAM1+0AAH
00BC E0                MOVX    A,@DPTR
00BD FE                MOV     R6,A
00BE A3                INC     DPTR
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
00C1 900000      R     MOV     DPTR,#NVRAM0+0AAH
00C4 E0                MOVX    A,@DPTR
00C5 6E                XRL     A,R6
00C6 7003              JNZ     ?C0360
00C8 A3                INC     DPTR
00C9 E0                MOVX    A,@DPTR
00CA 6F                XRL     A,R7
00CB         ?C0360:
00CB 600E              JZ      ?C0265
                                           ; SOURCE LINE # 2244
00CD 7F01              MOV     R7,#01H
00CF 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2245
00D2 900000      R     MOV     DPTR,#NVRAM0+0AAH
00D5 120000      R     LCALL   L?0460
                                           ; SOURCE LINE # 2246
00D8 120000      R     LCALL   L?0477
                                           ; SOURCE LINE # 2247
00DB         ?C0265:
                                           ; SOURCE LINE # 2248
00DB 900000      R     MOV     DPTR,#NVRAM1+0ACH
00DE E0                MOVX    A,@DPTR
00DF FE                MOV     R6,A
00E0 A3                INC     DPTR
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 900000      R     MOV     DPTR,#NVRAM0+0ACH
00E6 E0                MOVX    A,@DPTR
00E7 6E                XRL     A,R6
00E8 7003              JNZ     ?C0361
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC 6F                XRL     A,R7
00ED         ?C0361:
00ED 600E              JZ      ?C0266
                                           ; SOURCE LINE # 2249
00EF 7F01              MOV     R7,#01H
00F1 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2250
00F4 900000      R     MOV     DPTR,#NVRAM0+0ACH
00F7 120000      R     LCALL   L?0460
                                           ; SOURCE LINE # 2251
00FA 120000      R     LCALL   L?0477
                                           ; SOURCE LINE # 2252
00FD         ?C0266:
                                           ; SOURCE LINE # 2253
00FD 900000      R     MOV     DPTR,#NVRAM1+0AEH
0100 E0                MOVX    A,@DPTR
0101 FE                MOV     R6,A
0102 A3                INC     DPTR
0103 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 189 

0104 FF                MOV     R7,A
0105 900000      R     MOV     DPTR,#NVRAM0+0AEH
0108 E0                MOVX    A,@DPTR
0109 6E                XRL     A,R6
010A 7003              JNZ     ?C0362
010C A3                INC     DPTR
010D E0                MOVX    A,@DPTR
010E 6F                XRL     A,R7
010F         ?C0362:
010F 6015              JZ      ?C0267
                                           ; SOURCE LINE # 2254
0111 7F01              MOV     R7,#01H
0113 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2255
0116 900000      R     MOV     DPTR,#NVRAM0+0AEH
0119 120000      R     LCALL   L?0460
011C E4                CLR     A
011D FF                MOV     R7,A
011E 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2256
0121 7F00              MOV     R7,#00H
0123 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2257
0126         ?C0267:
                                           ; SOURCE LINE # 2259
0126 900000      R     MOV     DPTR,#NVRAM1+0B0H
0129 E0                MOVX    A,@DPTR
012A FE                MOV     R6,A
012B A3                INC     DPTR
012C E0                MOVX    A,@DPTR
012D FF                MOV     R7,A
012E 900000      R     MOV     DPTR,#NVRAM0+0B0H
0131 E0                MOVX    A,@DPTR
0132 6E                XRL     A,R6
0133 7003              JNZ     ?C0363
0135 A3                INC     DPTR
0136 E0                MOVX    A,@DPTR
0137 6F                XRL     A,R7
0138         ?C0363:
0138 6010              JZ      ?C0268
                                           ; SOURCE LINE # 2260
013A 7F01              MOV     R7,#01H
013C 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2261
013F 900000      R     MOV     DPTR,#NVRAM0+0B0H
0142 120000      R     LCALL   L?0460
0145 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2262
0147 120000      R     LCALL   L?0478
                                           ; SOURCE LINE # 2263
014A         ?C0268:
                                           ; SOURCE LINE # 2264
014A 900000      R     MOV     DPTR,#NVRAM1+0B2H
014D E0                MOVX    A,@DPTR
014E FE                MOV     R6,A
014F A3                INC     DPTR
0150 E0                MOVX    A,@DPTR
0151 FF                MOV     R7,A
0152 900000      R     MOV     DPTR,#NVRAM0+0B2H
0155 E0                MOVX    A,@DPTR
0156 6E                XRL     A,R6
0157 7003              JNZ     ?C0364
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 190 

0159 A3                INC     DPTR
015A E0                MOVX    A,@DPTR
015B 6F                XRL     A,R7
015C         ?C0364:
015C 6010              JZ      ?C0269
                                           ; SOURCE LINE # 2265
015E 7F01              MOV     R7,#01H
0160 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2266
0163 900000      R     MOV     DPTR,#NVRAM0+0B2H
0166 120000      R     LCALL   L?0460
0169 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2267
016B 120000      R     LCALL   L?0478
                                           ; SOURCE LINE # 2268
016E         ?C0269:
                                           ; SOURCE LINE # 2269
016E 900000      R     MOV     DPTR,#NVRAM1+0B4H
0171 E0                MOVX    A,@DPTR
0172 FE                MOV     R6,A
0173 A3                INC     DPTR
0174 E0                MOVX    A,@DPTR
0175 FF                MOV     R7,A
0176 900000      R     MOV     DPTR,#NVRAM0+0B4H
0179 E0                MOVX    A,@DPTR
017A 6E                XRL     A,R6
017B 7003              JNZ     ?C0365
017D A3                INC     DPTR
017E E0                MOVX    A,@DPTR
017F 6F                XRL     A,R7
0180         ?C0365:
0180 6010              JZ      ?C0270
                                           ; SOURCE LINE # 2270
0182 7F01              MOV     R7,#01H
0184 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2271
0187 900000      R     MOV     DPTR,#NVRAM0+0B4H
018A 120000      R     LCALL   L?0460
018D 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2272
018F 120000      R     LCALL   L?0484
                                           ; SOURCE LINE # 2273
0192         ?C0270:
                                           ; SOURCE LINE # 2274
0192 900000      R     MOV     DPTR,#NVRAM1+0B6H
0195 E0                MOVX    A,@DPTR
0196 FE                MOV     R6,A
0197 A3                INC     DPTR
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A 900000      R     MOV     DPTR,#NVRAM0+0B6H
019D E0                MOVX    A,@DPTR
019E 6E                XRL     A,R6
019F 7003              JNZ     ?C0366
01A1 A3                INC     DPTR
01A2 E0                MOVX    A,@DPTR
01A3 6F                XRL     A,R7
01A4         ?C0366:
01A4 6010              JZ      ?C0271
                                           ; SOURCE LINE # 2275
01A6 7F01              MOV     R7,#01H
01A8 120000      R     LCALL   _?setLedDac
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 191 

                                           ; SOURCE LINE # 2276
01AB 900000      R     MOV     DPTR,#NVRAM0+0B6H
01AE 120000      R     LCALL   L?0460
01B1 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2277
01B3 120000      R     LCALL   L?0484
                                           ; SOURCE LINE # 2278
01B6         ?C0271:
                                           ; SOURCE LINE # 2279
01B6 900000      R     MOV     DPTR,#NVRAM1+0B8H
01B9 E0                MOVX    A,@DPTR
01BA FE                MOV     R6,A
01BB A3                INC     DPTR
01BC E0                MOVX    A,@DPTR
01BD FF                MOV     R7,A
01BE 900000      R     MOV     DPTR,#NVRAM0+0B8H
01C1 E0                MOVX    A,@DPTR
01C2 6E                XRL     A,R6
01C3 7003              JNZ     ?C0367
01C5 A3                INC     DPTR
01C6 E0                MOVX    A,@DPTR
01C7 6F                XRL     A,R7
01C8         ?C0367:
01C8 6010              JZ      ?C0272
                                           ; SOURCE LINE # 2280
01CA 7F01              MOV     R7,#01H
01CC 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2281
01CF 900000      R     MOV     DPTR,#NVRAM0+0B8H
01D2 120000      R     LCALL   L?0460
01D5 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2282
01D7 120000      R     LCALL   L?0508
                                           ; SOURCE LINE # 2283
01DA         ?C0272:
                                           ; SOURCE LINE # 2284
01DA 900000      R     MOV     DPTR,#NVRAM1+0BAH
01DD E0                MOVX    A,@DPTR
01DE FE                MOV     R6,A
01DF A3                INC     DPTR
01E0 E0                MOVX    A,@DPTR
01E1 FF                MOV     R7,A
01E2 900000      R     MOV     DPTR,#NVRAM0+0BAH
01E5 E0                MOVX    A,@DPTR
01E6 6E                XRL     A,R6
01E7 7003              JNZ     ?C0368
01E9 A3                INC     DPTR
01EA E0                MOVX    A,@DPTR
01EB 6F                XRL     A,R7
01EC         ?C0368:
01EC 6010              JZ      ?C0273
                                           ; SOURCE LINE # 2285
01EE 7F01              MOV     R7,#01H
01F0 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2286
01F3 900000      R     MOV     DPTR,#NVRAM0+0BAH
01F6 120000      R     LCALL   L?0460
01F9 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 2287
01FB 120000      R     LCALL   L?0508
                                           ; SOURCE LINE # 2288
01FE         ?C0273:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 192 

                                           ; SOURCE LINE # 2289
01FE 900000      R     MOV     DPTR,#NVRAM1+0BCH
0201 E0                MOVX    A,@DPTR
0202 FE                MOV     R6,A
0203 A3                INC     DPTR
0204 E0                MOVX    A,@DPTR
0205 FF                MOV     R7,A
0206 900000      R     MOV     DPTR,#NVRAM0+0BCH
0209 E0                MOVX    A,@DPTR
020A 6E                XRL     A,R6
020B 7003              JNZ     ?C0369
020D A3                INC     DPTR
020E E0                MOVX    A,@DPTR
020F 6F                XRL     A,R7
0210         ?C0369:
0210 6015              JZ      ?C0274
                                           ; SOURCE LINE # 2290
0212 7F01              MOV     R7,#01H
0214 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2291
0217 900000      R     MOV     DPTR,#NVRAM0+0BCH
021A 120000      R     LCALL   L?0460
021D 7F02              MOV     R7,#02H
021F 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2292
0222 7F00              MOV     R7,#00H
0224 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2293
0227         ?C0274:
                                           ; SOURCE LINE # 2294
0227 900000      R     MOV     DPTR,#NVRAM1+0BEH
022A E0                MOVX    A,@DPTR
022B FE                MOV     R6,A
022C A3                INC     DPTR
022D E0                MOVX    A,@DPTR
022E FF                MOV     R7,A
022F 900000      R     MOV     DPTR,#NVRAM0+0BEH
0232 E0                MOVX    A,@DPTR
0233 6E                XRL     A,R6
0234 7003              JNZ     ?C0370
0236 A3                INC     DPTR
0237 E0                MOVX    A,@DPTR
0238 6F                XRL     A,R7
0239         ?C0370:
0239 6015              JZ      ?C0275
                                           ; SOURCE LINE # 2295
023B 7F01              MOV     R7,#01H
023D 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2296
0240 900000      R     MOV     DPTR,#NVRAM0+0BEH
0243 120000      R     LCALL   L?0460
0246 E4                CLR     A
0247 FF                MOV     R7,A
0248 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2297
024B 7F00              MOV     R7,#00H
024D 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2298
0250         ?C0275:
                                           ; SOURCE LINE # 2300
0250 900000      R     MOV     DPTR,#NVRAM1+0C0H
0253 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 193 

0254 FE                MOV     R6,A
0255 A3                INC     DPTR
0256 E0                MOVX    A,@DPTR
0257 FF                MOV     R7,A
0258 900000      R     MOV     DPTR,#NVRAM0+0C0H
025B E0                MOVX    A,@DPTR
025C 6E                XRL     A,R6
025D 7003              JNZ     ?C0371
025F A3                INC     DPTR
0260 E0                MOVX    A,@DPTR
0261 6F                XRL     A,R7
0262         ?C0371:
0262 6010              JZ      ?C0276
                                           ; SOURCE LINE # 2301
0264 7F01              MOV     R7,#01H
0266 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2302
0269 900000      R     MOV     DPTR,#NVRAM0+0C0H
026C 120000      R     LCALL   L?0460
026F 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2303
0271 120000      R     LCALL   L?0479
                                           ; SOURCE LINE # 2304
0274         ?C0276:
                                           ; SOURCE LINE # 2305
0274 900000      R     MOV     DPTR,#NVRAM1+0C2H
0277 E0                MOVX    A,@DPTR
0278 FE                MOV     R6,A
0279 A3                INC     DPTR
027A E0                MOVX    A,@DPTR
027B FF                MOV     R7,A
027C 900000      R     MOV     DPTR,#NVRAM0+0C2H
027F E0                MOVX    A,@DPTR
0280 6E                XRL     A,R6
0281 7003              JNZ     ?C0372
0283 A3                INC     DPTR
0284 E0                MOVX    A,@DPTR
0285 6F                XRL     A,R7
0286         ?C0372:
0286 6010              JZ      ?C0277
                                           ; SOURCE LINE # 2306
0288 7F01              MOV     R7,#01H
028A 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2307
028D 900000      R     MOV     DPTR,#NVRAM0+0C2H
0290 120000      R     LCALL   L?0460
0293 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2308
0295 120000      R     LCALL   L?0479
                                           ; SOURCE LINE # 2309
0298         ?C0277:
                                           ; SOURCE LINE # 2310
0298 900000      R     MOV     DPTR,#NVRAM1+0C4H
029B E0                MOVX    A,@DPTR
029C FE                MOV     R6,A
029D A3                INC     DPTR
029E E0                MOVX    A,@DPTR
029F FF                MOV     R7,A
02A0 900000      R     MOV     DPTR,#NVRAM0+0C4H
02A3 E0                MOVX    A,@DPTR
02A4 6E                XRL     A,R6
02A5 7003              JNZ     ?C0373
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 194 

02A7 A3                INC     DPTR
02A8 E0                MOVX    A,@DPTR
02A9 6F                XRL     A,R7
02AA         ?C0373:
02AA 6010              JZ      ?C0278
                                           ; SOURCE LINE # 2311
02AC 7F01              MOV     R7,#01H
02AE 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2312
02B1 900000      R     MOV     DPTR,#NVRAM0+0C4H
02B4 120000      R     LCALL   L?0460
02B7 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2313
02B9 120000      R     LCALL   L?0485
                                           ; SOURCE LINE # 2314
02BC         ?C0278:
                                           ; SOURCE LINE # 2315
02BC 900000      R     MOV     DPTR,#NVRAM1+0C6H
02BF E0                MOVX    A,@DPTR
02C0 FE                MOV     R6,A
02C1 A3                INC     DPTR
02C2 E0                MOVX    A,@DPTR
02C3 FF                MOV     R7,A
02C4 900000      R     MOV     DPTR,#NVRAM0+0C6H
02C7 E0                MOVX    A,@DPTR
02C8 6E                XRL     A,R6
02C9 7003              JNZ     ?C0374
02CB A3                INC     DPTR
02CC E0                MOVX    A,@DPTR
02CD 6F                XRL     A,R7
02CE         ?C0374:
02CE 6010              JZ      ?C0279
                                           ; SOURCE LINE # 2316
02D0 7F01              MOV     R7,#01H
02D2 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2317
02D5 900000      R     MOV     DPTR,#NVRAM0+0C6H
02D8 120000      R     LCALL   L?0460
02DB 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2318
02DD 120000      R     LCALL   L?0485
                                           ; SOURCE LINE # 2319
02E0         ?C0279:
                                           ; SOURCE LINE # 2320
02E0 900000      R     MOV     DPTR,#NVRAM1+0C8H
02E3 E0                MOVX    A,@DPTR
02E4 FE                MOV     R6,A
02E5 A3                INC     DPTR
02E6 E0                MOVX    A,@DPTR
02E7 FF                MOV     R7,A
02E8 900000      R     MOV     DPTR,#NVRAM0+0C8H
02EB E0                MOVX    A,@DPTR
02EC 6E                XRL     A,R6
02ED 7003              JNZ     ?C0375
02EF A3                INC     DPTR
02F0 E0                MOVX    A,@DPTR
02F1 6F                XRL     A,R7
02F2         ?C0375:
02F2 6010              JZ      ?C0280
                                           ; SOURCE LINE # 2321
02F4 7F01              MOV     R7,#01H
02F6 120000      R     LCALL   _?setLedDac
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 195 

                                           ; SOURCE LINE # 2322
02F9 900000      R     MOV     DPTR,#NVRAM0+0C8H
02FC 120000      R     LCALL   L?0460
02FF 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2323
0301 120000      R     LCALL   L?0509
                                           ; SOURCE LINE # 2324
0304         ?C0280:
                                           ; SOURCE LINE # 2325
0304 900000      R     MOV     DPTR,#NVRAM1+0CAH
0307 E0                MOVX    A,@DPTR
0308 FE                MOV     R6,A
0309 A3                INC     DPTR
030A E0                MOVX    A,@DPTR
030B FF                MOV     R7,A
030C 900000      R     MOV     DPTR,#NVRAM0+0CAH
030F E0                MOVX    A,@DPTR
0310 6E                XRL     A,R6
0311 7003              JNZ     ?C0376
0313 A3                INC     DPTR
0314 E0                MOVX    A,@DPTR
0315 6F                XRL     A,R7
0316         ?C0376:
0316 6010              JZ      ?C0281
                                           ; SOURCE LINE # 2326
0318 7F01              MOV     R7,#01H
031A 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2327
031D 900000      R     MOV     DPTR,#NVRAM0+0CAH
0320 120000      R     LCALL   L?0460
0323 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 2328
0325 120000      R     LCALL   L?0509
                                           ; SOURCE LINE # 2329
0328         ?C0281:
                                           ; SOURCE LINE # 2330
0328 900000      R     MOV     DPTR,#NVRAM1+0CCH
032B E0                MOVX    A,@DPTR
032C FE                MOV     R6,A
032D A3                INC     DPTR
032E E0                MOVX    A,@DPTR
032F FF                MOV     R7,A
0330 900000      R     MOV     DPTR,#NVRAM0+0CCH
0333 E0                MOVX    A,@DPTR
0334 6E                XRL     A,R6
0335 7003              JNZ     ?C0377
0337 A3                INC     DPTR
0338 E0                MOVX    A,@DPTR
0339 6F                XRL     A,R7
033A         ?C0377:
033A 6015              JZ      ?C0282
                                           ; SOURCE LINE # 2331
033C 7F01              MOV     R7,#01H
033E 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2332
0341 900000      R     MOV     DPTR,#NVRAM0+0CCH
0344 120000      R     LCALL   L?0460
0347 7F02              MOV     R7,#02H
0349 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2333
034C 7F00              MOV     R7,#00H
034E 120000      R     LCALL   _?setLedDac
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 196 

                                           ; SOURCE LINE # 2334
0351         ?C0282:
                                           ; SOURCE LINE # 2335
0351 900000      R     MOV     DPTR,#NVRAM1+0CEH
0354 E0                MOVX    A,@DPTR
0355 FE                MOV     R6,A
0356 A3                INC     DPTR
0357 E0                MOVX    A,@DPTR
0358 FF                MOV     R7,A
0359 900000      R     MOV     DPTR,#NVRAM0+0CEH
035C E0                MOVX    A,@DPTR
035D 6E                XRL     A,R6
035E 7003              JNZ     ?C0378
0360 A3                INC     DPTR
0361 E0                MOVX    A,@DPTR
0362 6F                XRL     A,R7
0363         ?C0378:
0363 6015              JZ      ?C0283
                                           ; SOURCE LINE # 2336
0365 7F01              MOV     R7,#01H
0367 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2337
036A 900000      R     MOV     DPTR,#NVRAM0+0CEH
036D 120000      R     LCALL   L?0460
0370 E4                CLR     A
0371 FF                MOV     R7,A
0372 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2338
0375 7F00              MOV     R7,#00H
0377 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2339
037A         ?C0283:
                                           ; SOURCE LINE # 2341
037A 900000      R     MOV     DPTR,#NVRAM1+0D0H
037D E0                MOVX    A,@DPTR
037E FE                MOV     R6,A
037F A3                INC     DPTR
0380 E0                MOVX    A,@DPTR
0381 FF                MOV     R7,A
0382 900000      R     MOV     DPTR,#NVRAM0+0D0H
0385 E0                MOVX    A,@DPTR
0386 6E                XRL     A,R6
0387 7003              JNZ     ?C0379
0389 A3                INC     DPTR
038A E0                MOVX    A,@DPTR
038B 6F                XRL     A,R7
038C         ?C0379:
038C 6010              JZ      ?C0284
                                           ; SOURCE LINE # 2342
038E 7F01              MOV     R7,#01H
0390 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2343
0393 900000      R     MOV     DPTR,#NVRAM0+0D0H
0396 120000      R     LCALL   L?0460
0399 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2344
039B 120000      R     LCALL   L?0480
                                           ; SOURCE LINE # 2345
039E         ?C0284:
                                           ; SOURCE LINE # 2346
039E 900000      R     MOV     DPTR,#NVRAM1+0D2H
03A1 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 197 

03A2 FE                MOV     R6,A
03A3 A3                INC     DPTR
03A4 E0                MOVX    A,@DPTR
03A5 FF                MOV     R7,A
03A6 900000      R     MOV     DPTR,#NVRAM0+0D2H
03A9 E0                MOVX    A,@DPTR
03AA 6E                XRL     A,R6
03AB 7003              JNZ     ?C0380
03AD A3                INC     DPTR
03AE E0                MOVX    A,@DPTR
03AF 6F                XRL     A,R7
03B0         ?C0380:
03B0 6008              JZ      ?C0285
                                           ; SOURCE LINE # 2347
                                           ; SOURCE LINE # 2348
03B2 120000      R     LCALL   L?0459
03B5 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2349
03B7 120000      R     LCALL   L?0480
                                           ; SOURCE LINE # 2350
03BA         ?C0285:
                                           ; SOURCE LINE # 2351
03BA 900000      R     MOV     DPTR,#NVRAM1+0D4H
03BD E0                MOVX    A,@DPTR
03BE FE                MOV     R6,A
03BF A3                INC     DPTR
03C0 E0                MOVX    A,@DPTR
03C1 FF                MOV     R7,A
03C2 900000      R     MOV     DPTR,#NVRAM0+0D4H
03C5 E0                MOVX    A,@DPTR
03C6 6E                XRL     A,R6
03C7 7003              JNZ     ?C0381
03C9 A3                INC     DPTR
03CA E0                MOVX    A,@DPTR
03CB 6F                XRL     A,R7
03CC         ?C0381:
03CC 6008              JZ      ?C0286
                                           ; SOURCE LINE # 2352
                                           ; SOURCE LINE # 2353
03CE 120000      R     LCALL   L?0459
03D1 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2354
03D3 120000      R     LCALL   L?0486
                                           ; SOURCE LINE # 2355
03D6         ?C0286:
                                           ; SOURCE LINE # 2356
03D6 900000      R     MOV     DPTR,#NVRAM1+0D6H
03D9 E0                MOVX    A,@DPTR
03DA FE                MOV     R6,A
03DB A3                INC     DPTR
03DC E0                MOVX    A,@DPTR
03DD FF                MOV     R7,A
03DE 900000      R     MOV     DPTR,#NVRAM0+0D6H
03E1 E0                MOVX    A,@DPTR
03E2 6E                XRL     A,R6
03E3 7003              JNZ     ?C0382
03E5 A3                INC     DPTR
03E6 E0                MOVX    A,@DPTR
03E7 6F                XRL     A,R7
03E8         ?C0382:
03E8 6010              JZ      ?C0287
                                           ; SOURCE LINE # 2357
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 198 

03EA 7F01              MOV     R7,#01H
03EC 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2358
03EF 900000      R     MOV     DPTR,#NVRAM0+0D6H
03F2 120000      R     LCALL   L?0460
03F5 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2359
03F7 120000      R     LCALL   L?0486
                                           ; SOURCE LINE # 2360
03FA         ?C0287:
                                           ; SOURCE LINE # 2361
03FA 900000      R     MOV     DPTR,#NVRAM1+0D8H
03FD E0                MOVX    A,@DPTR
03FE FE                MOV     R6,A
03FF A3                INC     DPTR
0400 E0                MOVX    A,@DPTR
0401 FF                MOV     R7,A
0402 900000      R     MOV     DPTR,#NVRAM0+0D8H
0405 E0                MOVX    A,@DPTR
0406 6E                XRL     A,R6
0407 7003              JNZ     ?C0383
0409 A3                INC     DPTR
040A E0                MOVX    A,@DPTR
040B 6F                XRL     A,R7
040C         ?C0383:
040C 6010              JZ      ?C0288
                                           ; SOURCE LINE # 2362
040E 7F01              MOV     R7,#01H
0410 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2363
0413 900000      R     MOV     DPTR,#NVRAM0+0D8H
0416 120000      R     LCALL   L?0460
0419 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2364
041B 120000      R     LCALL   L?0510
                                           ; SOURCE LINE # 2365
041E         ?C0288:
                                           ; SOURCE LINE # 2366
041E 900000      R     MOV     DPTR,#NVRAM1+0DAH
0421 E0                MOVX    A,@DPTR
0422 FE                MOV     R6,A
0423 A3                INC     DPTR
0424 E0                MOVX    A,@DPTR
0425 FF                MOV     R7,A
0426 900000      R     MOV     DPTR,#NVRAM0+0DAH
0429 E0                MOVX    A,@DPTR
042A 6E                XRL     A,R6
042B 7003              JNZ     ?C0384
042D A3                INC     DPTR
042E E0                MOVX    A,@DPTR
042F 6F                XRL     A,R7
0430         ?C0384:
0430 6010              JZ      ?C0289
                                           ; SOURCE LINE # 2367
0432 7F01              MOV     R7,#01H
0434 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2368
0437 900000      R     MOV     DPTR,#NVRAM0+0DAH
043A 120000      R     LCALL   L?0460
043D 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 2369
043F 120000      R     LCALL   L?0510
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 199 

                                           ; SOURCE LINE # 2370
0442         ?C0289:
                                           ; SOURCE LINE # 2371
0442 900000      R     MOV     DPTR,#NVRAM1+0DCH
0445 E0                MOVX    A,@DPTR
0446 FE                MOV     R6,A
0447 A3                INC     DPTR
0448 E0                MOVX    A,@DPTR
0449 FF                MOV     R7,A
044A 900000      R     MOV     DPTR,#NVRAM0+0DCH
044D E0                MOVX    A,@DPTR
044E 6E                XRL     A,R6
044F 7003              JNZ     ?C0385
0451 A3                INC     DPTR
0452 E0                MOVX    A,@DPTR
0453 6F                XRL     A,R7
0454         ?C0385:
0454 6015              JZ      ?C0290
                                           ; SOURCE LINE # 2372
0456 7F01              MOV     R7,#01H
0458 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2373
045B 900000      R     MOV     DPTR,#NVRAM0+0DCH
045E 120000      R     LCALL   L?0460
0461 7F02              MOV     R7,#02H
0463 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2374
0466 7F00              MOV     R7,#00H
0468 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2375
046B         ?C0290:
                                           ; SOURCE LINE # 2376
046B 900000      R     MOV     DPTR,#NVRAM1+0DEH
046E E0                MOVX    A,@DPTR
046F FE                MOV     R6,A
0470 A3                INC     DPTR
0471 E0                MOVX    A,@DPTR
0472 FF                MOV     R7,A
0473 900000      R     MOV     DPTR,#NVRAM0+0DEH
0476 E0                MOVX    A,@DPTR
0477 6E                XRL     A,R6
0478 7003              JNZ     ?C0386
047A A3                INC     DPTR
047B E0                MOVX    A,@DPTR
047C 6F                XRL     A,R7
047D         ?C0386:
047D 6015              JZ      ?C0292
                                           ; SOURCE LINE # 2377
047F 7F01              MOV     R7,#01H
0481 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2378
0484 900000      R     MOV     DPTR,#NVRAM0+0DEH
0487 120000      R     LCALL   L?0460
048A E4                CLR     A
048B FF                MOV     R7,A
048C 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2379
048F 7F00              MOV     R7,#00H
0491 120000      R     LCALL   _?setLedDac
                                           ; SOURCE LINE # 2380
                                           ; SOURCE LINE # 2381
0494         ?C0292:
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 200 

0494 22                RET     
0495         L?0477:
0495 7F04              MOV     R7,#04H
0497 120000      E     LCALL   _dac8568_0_WriteDacRegister
049A 7F00              MOV     R7,#00H
049C 120000      R     LCALL   _?setLedDac
049F 22                RET     
04A0         L?0478:
04A0 120000      E     LCALL   _dac8568_1_WriteDacRegister
04A3 7F00              MOV     R7,#00H
04A5 120000      R     LCALL   _?setLedDac
04A8 22                RET     
04A9         L?0479:
04A9 120000      E     LCALL   _dac8568_2_WriteDacRegister
04AC 7F00              MOV     R7,#00H
04AE 120000      R     LCALL   _?setLedDac
04B1 22                RET     
04B2         L?0480:
04B2 120000      E     LCALL   _dac8568_3_WriteDacRegister
04B5 7F00              MOV     R7,#00H
04B7 120000      R     LCALL   _?setLedDac
04BA 22                RET     
04BB         L?0483:
04BB 120000      E     LCALL   _dac8568_0_WriteDacRegister
04BE 7F00              MOV     R7,#00H
04C0 120000      R     LCALL   _?setLedDac
04C3 22                RET     
04C4         L?0484:
04C4 120000      E     LCALL   _dac8568_1_WriteDacRegister
04C7 7F00              MOV     R7,#00H
04C9 120000      R     LCALL   _?setLedDac
04CC 22                RET     
04CD         L?0485:
04CD 120000      E     LCALL   _dac8568_2_WriteDacRegister
04D0 7F00              MOV     R7,#00H
04D2 120000      R     LCALL   _?setLedDac
04D5 22                RET     
04D6         L?0486:
04D6 120000      E     LCALL   _dac8568_3_WriteDacRegister
04D9 7F00              MOV     R7,#00H
04DB 120000      R     LCALL   _?setLedDac
04DE 22                RET     
04DF         L?0507:
04DF 120000      E     LCALL   _dac8568_0_WriteDacRegister
04E2 7F00              MOV     R7,#00H
04E4 120000      R     LCALL   _?setLedDac
04E7 22                RET     
04E8         L?0508:
04E8 120000      E     LCALL   _dac8568_1_WriteDacRegister
04EB 7F00              MOV     R7,#00H
04ED 120000      R     LCALL   _?setLedDac
04F0 22                RET     
04F1         L?0509:
04F1 120000      E     LCALL   _dac8568_2_WriteDacRegister
04F4 7F00              MOV     R7,#00H
04F6 120000      R     LCALL   _?setLedDac
04F9 22                RET     
04FA         L?0510:
04FA 120000      E     LCALL   _dac8568_3_WriteDacRegister
04FD 7F00              MOV     R7,#00H
04FF 120000      R     LCALL   _?setLedDac
0502 22                RET     
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 201 

             ; FUNCTION refreshDac (END)

             ; FUNCTION chipDacInit (BEGIN)
                                           ; SOURCE LINE # 2382
                                           ; SOURCE LINE # 2383
0000 120000      E     LCALL   dac8568_0_Init
                                           ; SOURCE LINE # 2384
0003 120000      E     LCALL   dac8568_1_Init
                                           ; SOURCE LINE # 2385
0006 120000      E     LCALL   dac8568_2_Init
                                           ; SOURCE LINE # 2386
0009 020000      E     LJMP    dac8568_3_Init
             ; FUNCTION chipDacInit (END)

             ; FUNCTION sPlcInit (BEGIN)
                                           ; SOURCE LINE # 2388
                                           ; SOURCE LINE # 2389
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _?setLedError
                                           ; SOURCE LINE # 2390
0005 1F                DEC     R7
0006 120000      R     LCALL   _?setLedRun
                                           ; SOURCE LINE # 2391
0009 120000      R     LCALL   wdtInit
                                           ; SOURCE LINE # 2392
000C 120000      R     LCALL   wdtDisable
                                           ; SOURCE LINE # 2394
000F 120000      R     LCALL   nvramLoad
                                           ; SOURCE LINE # 2398
0012 120000      R     LCALL   chipAdcInit
                                           ; SOURCE LINE # 2402
0015 120000      R     LCALL   chipDacInit
                                           ; SOURCE LINE # 2406
0018 E4                CLR     A
0019 F500        E     MOV     ?_initModbus?BYTE+04H,A
001B 7500E1      E     MOV     ?_initModbus?BYTE+03H,#0E1H
001E F500        E     MOV     ?_initModbus?BYTE+02H,A
0020 F500        E     MOV     ?_initModbus?BYTE+01H,A
0022 7F01              MOV     R7,#01H
0024 120000      E     LCALL   _initModbus
                                           ; SOURCE LINE # 2408
0027 120000      R     LCALL   timer0Init
                                           ; SOURCE LINE # 2409
002A 900000      R     MOV     DPTR,#NVRAM0+0195H
002D E0                MOVX    A,@DPTR
002E 4401              ORL     A,#01H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2410
0031 7F00              MOV     R7,#00H
0033 020000      R     LJMP    _?setLedError
             ; FUNCTION sPlcInit (END)

             ; FUNCTION sPlcProcessStart (BEGIN)
                                           ; SOURCE LINE # 2412
                                           ; SOURCE LINE # 2414
0000 120000      E     LCALL   modbusPorcess
                                           ; SOURCE LINE # 2417
0003 020000      R     LJMP    inputRefresh
             ; FUNCTION sPlcProcessStart (END)

             ; FUNCTION sPlcProcessEnd (BEGIN)
                                           ; SOURCE LINE # 2423
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 202 

                                           ; SOURCE LINE # 2428
0000 120000      R     LCALL   outputRefresh
                                           ; SOURCE LINE # 2431
0003 120000      R     LCALL   refreshDac
                                           ; SOURCE LINE # 2434
0006 020000      R     LJMP    nvramUpdata
             ; FUNCTION sPlcProcessEnd (END)

C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 203 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
fp32_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
fp64_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
bool . . . . . . . . . . . . . . . . .  TYPEDEF  -----  BIT      -----  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
U8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
U16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
U32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
S8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
S16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
S32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
UU16 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 204 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU16 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU32 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
UU32 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_GENERIC_PTR . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GENERIC_PTR . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P6 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
CKCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P7 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
AMX0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
AMX0SL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
ADC0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
ADC0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
ADC0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
ADC0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
WDTCN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
AD0INT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
AD0BUSY. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_log . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromWriteOneByte . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromRead . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 205 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_epromWrite. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_0_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_0_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_1_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_1_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_2_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_2_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_3_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_3_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
_initModbus. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
modbusPorcess. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
adcTempDat_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  31
  dat. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  28
  out. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001CH  2
  wIndex . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   001EH  1
NVRAM0 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  412
NVRAM1 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    019CH  412
wdtDisable . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  flagEA . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
sPlcInit . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcProcessStart . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcProcessEnd . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_assertCoilAddress . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  adr. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_assertRegisterAddress . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  adr. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
nvramUpdata. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  sp0. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  sp1. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0006H  2
clearDM. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearEM. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearR . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearT . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearTD. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearC . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
nvramLoad. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
nvramSave. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_SET . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
_RESET . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
_FLIP. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_LD. . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_LDP . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  temp0. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  temp1. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 206 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_LDN . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  temp0. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  temp1. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_T1MS. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_T10MS . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_T100MS. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
chipDacInit. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
chipAdcInit. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
refreshDac . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
ADCMUX_0_3_S0. . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
ADCMUX_0_3_S1. . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
ADCMUX_0_3_OE1 . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
ADCMUX_0_3_OE2 . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
ADCMUX_4_7_S0. . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
ADCMUX_4_7_S1. . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
ADCMUC_4_7_OE1 . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
ADCMUC_4_7_OE2 . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
ADCMUX_8_11_S0 . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
ADCMUX_8_11_S1 . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
ADCMUX_8_11_OE1. . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
ADCMUX_8_11_OE2. . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
ADCMUX_12_15_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
ADCMUX_12_15_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
ADCMUX_12_15_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
ADCMUX_12_15_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
ADCMUX_16_19_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
ADCMUX_16_19_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
ADCMUX_16_19_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
ADCMUX_16_19_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
ADCMUX_20_23_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
ADCMUX_20_23_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
ADCMUX_20_23_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
ADCMUX_20_23_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
ADCMUX_24_27_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
ADCMUX_24_27_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
ADCMUX_24_27_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
ADCMUX_24_27_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
TimerCounter_1mS . . . . . . . . . . .  STATIC   DATA   U_CHAR   0000H  1
TimerCounter_10mS. . . . . . . . . . .  STATIC   DATA   U_CHAR   0001H  1
Timer0_L . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0002H  1
Timer0_H . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0003H  1
inputFilter. . . . . . . . . . . . . .  STATIC   PDATA  ARRAY    0000H  16
adcTempDat . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    0338H  1984
adcSelect. . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0004H  1
_refreshAdcData. . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 207 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  sum. . . . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0004H  4
adcProcess . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  result . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_initAdcData . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_?setLedRun. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
_?getLedRun. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_?setLedEprom. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
_?getLedEprom. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_?setLedDac. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
_?getLedDac. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_?setLedError. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
_?getLedError. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
clearMR. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearX . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearY . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearSPREG . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearSPCOIL. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_TNTC. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0082H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  ftemp. . . . . . . . . . . . . . . .  AUTO     DATA   FLOAT    0000H  4
_TENV. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_MAX . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  max. . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0003H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_MIN . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  min. . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0003H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
wdtInit. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
wdtEnable. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
wdtFeed. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
pcaInit. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
timer0Init . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
timer0Isr. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
inputInit. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
C51 COMPILER V9.56.0.0   SPLC                                                              01/03/2019 15:11:31 PAGE 208 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


outputInit . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
inputRefresh . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  ctemp0 . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
outputRefresh. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5428    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   2808    ----
   PDATA SIZE       =     16    ----
   DATA SIZE        =      5      41
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
