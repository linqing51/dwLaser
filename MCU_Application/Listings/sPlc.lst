C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SPLC
OBJECT MODULE PLACED IN .\Objects\sPlc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MainApp\sPlc.c OPTIMIZE(8,SPEED) REGFILE(.\Objects\dwLaser_F020.ORC) BRO
                    -WSE ORDER INCDIR(.\Lib;.\Driver;.\MainApp;.\Modbus) DEFINE(C8051F020) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(
                    -.\Listings\sPlc.lst) OBJECT(.\Objects\sPlc.obj)

line level    source

   1          #include "sPlc.h"
   1      =1  #ifndef __SPLC_H__
   2      =1  #define __SPLC_H__
   3      =1  /*****************************************************************************/
   4      =1  #include "appConfig.h"
   1      =2  #ifndef __APPCONFIG_H__
   2      =2  #define __APPCONFIG_H__
   3      =2  /*****************************************************************************/
   4      =2  #define DEBUG_LED_ON                                            0
   5      =2  #define DEBUG_LED_OFF                                           1
   6      =2  #define CONFIG_SYSCLK                       (22118400L)
   7      =2  #ifdef C8051F020
   8      =2  #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
   9      =2  #endif
  10      =2  #define CONFIG_DEBUG                        0//调试功能
  11      =2  #define CONFIG_USING_WDT                                        0//使能看门狗
  12      =2  #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
  13      =2  #define CONFIG_VERSION                                          0x0001
  14      =2  #define CONFIG_CHECK_CODE                                       0x5AC1
  15      =2  #define CONFIG_USING_SIMULATION                         1
  16      =2  /*****************************************************************************/
  17      =2  #define CONFIG_UART0_BAUDRATE                           115200//串口波特率
  18      =2  #define CONFIG_UART0_PARITY                                     NONE
  19      =2  #define CONFIG_UART0_STOPBIT                            1
  20      =2  #define CONFIG_UART0_DATABIT                            8
  21      =2  
  22      =2  #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
  23      =2  #define CONFIG_UART1_PARITY                                     NONE
  24      =2  #define CONFIG_UART1_STOPBIT                            1
  25      =2  #define CONFIG_UART1_DATABIT                            8
  26      =2  /*****************************************************************************/
  27      =2  #define CONFIG_I2C0_FREQ                                        1               
  28      =2  /*****************************************************************************/
  29      =2  #define CONFIG_EPROM_DEBUG                                      0
  30      =2  #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
  31      =2  #define CONFIG_AT24C02_SIZE                             256
  32      =2  #define CONFIG_AT24C04_SIZE                             512
  33      =2  #define CONFIG_AT24C08_SIZE                             1024
  34      =2  #define CONFIG_AT24C16_SIZE                             2048
  35      =2  #define CONFIG_AT24C32_SIZE                             4096
  36      =2  #define CONFIG_AT24C64_SIZE                                     8192
  37      =2  #define CONFIG_AT24C128_SIZE                            16384
  38      =2  #define CONFIG_AT24C256_SIZE                            32768
  39      =2  #define CONFIG_EPROM_ADDRESS                            0x50
  40      =2  #define CONFIG_EPROM_FRAM                                       1//铁电存储体无写入等待
  41      =2  #define CONFIG_EPROM_PAGEWRITE                          0//页写入
  42      =2  /*****************************************************************************/
  43      =2  //SPLC设置
  44      =2  #define CONFIG_SPLC_ASSERT                                      0//检查地址范围
  45      =2  #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
  46      =2  #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
  47      =2  /*****************************************************************************/
  48      =2  #define CONFIG_SPLC_USING_WDT                           1//看门狗启用
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 2   

  49      =2  /*****************************************************************************/
  50      =2  #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
  51      =2  /*****************************************************************************/
  52      =2  #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
  53      =2  /*****************************************************************************/
  54      =2  #define CONFIG_SPLC_USING_EPROM                         1//EPROM掉电存储启用
  55      =2  /*****************************************************************************/
  56      =2  #define CONFIG_SPLC_USING_UART1                         1//UART1串口启用
  57      =2  #if CONFIG_SPLC_USING_UART1 == 1
  58      =2  #define SPLC_UART1                                                      1
  59      =2  #endif
  60      =2  /*****************************************************************************/
  61      =2  #define CONFIG_SPLC_USING_ADC                           1//使能ADC模块
  62      =2  #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
  63      =2  #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
  64      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
  65      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
  66      =2  #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
  67      =2  #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
  68      =2  /*****************************************************************************/
  69      =2  #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
  70      =2  /*****************************************************************************/
  71      =2  #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
  72      =2  #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
  73      =2  #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
  74      =2  #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
  75      =2  #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
  76      =2  #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
  77      =2  /*****************************************************************************/
  78      =2  /*****************************************************************************/
  79      =2  #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
  80      =2  #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
  81      =2  #define DISABLE_INTERRUPT                                       EA = 0;
  82      =2  #define ENABLE_INTERRUPT                                        EA = 1;
  83      =2  /*****************************************************************************/
  84      =2  //指示盒子
  85      =2  #define R_BOX_RED_SENDED                                        (R_START * 16 + 126)
  86      =2  #define R_BOX_GREEN_SENDED                                      (R_START * 16 + 127)
  87      =2  #define BOX_CMD_STX                                                     0x81
  88      =2  #define BOX_CMD_ETX                                                     0x84
  89      =2  #define BOX_SEND_BFADDR                                         (EM_START + 100)//发送缓冲区位置
  90      =2  #define BOX_SEND_LENGTH                                         29//发送数据量
  91      =2  /*****************************************************************************/
  92      =2  #include "stdint.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDINT_H
   8      =3  #define STDINT_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef unsigned char uint8_t;
  13      =3  typedef unsigned short uint16_t;
  14      =3  typedef unsigned long uint32_t;
  15      =3  typedef uint32_t uint64_t[2];
  16      =3  
  17      =3  typedef signed char int8_t;
  18      =3  typedef short int16_t;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 3   

  19      =3  typedef long int32_t;
  20      =3  typedef int32_t int64_t[2];
  21      =3  typedef float fp32_t;
  22      =3  typedef double fp64_t;
  23      =3  
  24      =3  #elif defined __ICC8051__
           =3 
           =3 /* Fixed size types. These are all optional. */
           =3 #ifdef __INT8_T_TYPE__
           =3   typedef __INT8_T_TYPE__   int8_t;
           =3   typedef __UINT8_T_TYPE__ uint8_t;
           =3 #endif /* __INT8_T_TYPE__ */
           =3 
           =3 #ifdef __INT16_T_TYPE__
           =3   typedef __INT16_T_TYPE__   int16_t;
           =3   typedef __UINT16_T_TYPE__ uint16_t;
           =3 #endif /* __INT16_T_TYPE__ */
           =3 
           =3 #ifdef __INT32_T_TYPE__
           =3   typedef __INT32_T_TYPE__   int32_t;
           =3   typedef __UINT32_T_TYPE__ uint32_t;
           =3 #endif /* __INT32_T_TYPE__ */
           =3 
           =3 #ifdef __INT64_T_TYPE__
           =3   #pragma language=save
           =3   #pragma language=extended
           =3   typedef __INT64_T_TYPE__   int64_t;
           =3   typedef __UINT64_T_TYPE__ uint64_t;
           =3   #pragma language=restore
           =3 #endif /* __INT64_T_TYPE__ */
           =3 
           =3 #endif
  51      =3  
  52      =3  #endif
  93      =2  #include "stdbool.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDBOOL_H
   8      =3  #define STDBOOL_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef bit bool;
  13      =3  enum{
  14      =3    false = 0,
  15      =3    true = 1,
  16      =3  };
  17      =3  
  18      =3  #elif defined __ICC8051__
           =3 
           =3 #ifndef _SYSTEM_BUILD
           =3   #pragma system_include
           =3 #endif
           =3 
           =3 #ifndef __cplusplus
           =3 
           =3 #define bool _Bool
           =3 #define true 1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 4   

           =3 #define false 0
           =3 
           =3 #define __bool_true_false_are_defined 1
           =3 
           =3 #endif /* !__cplusplus */
           =3 
           =3 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 
           =3 typedef bit bool;
           =3 enum{
           =3   false = 0,
           =3   true = 1,
           =3 };
           =3 
           =3 #endif
  43      =3  
  44      =3  #endif //STDBOOL_H
  45      =3  
  94      =2  #include "endian.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __ENDIAN_H__
   8      =3  #define __ENDIAN_H__
   9      =3  
  10      =3  #define bswapu16(x) (((x) >> 8) | ((x) << 8))
  11      =3  #define bswapu32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) \
  12      =3                    | (((x) & 0x0000FF00) << 8) | ((x) << 24))
  13      =3  
  14      =3  #define bswap16(x) bswapu16((uint16_t)(x))
  15      =3  #define bswap32(x) bswapu32((uint32_t)(x))
  16      =3  
  17      =3  // Big Endian Compilers
  18      =3  #if ((defined __C51__) || (defined __RC51__) || (defined _CC51))
  19      =3  
  20      =3  #define htobe16(x) (x)
  21      =3  #define htobe32(x) (x)
  22      =3  #define be16toh(x) (x)
  23      =3  #define be32toh(x) (x)
  24      =3  
  25      =3  #define htole16(x) bswap16(x)
  26      =3  #define htole32(x) bswap32(x)
  27      =3  #define le16toh(x) bswap16(x)
  28      =3  #define le32toh(x) bswap32(x)
  29      =3  
  30      =3  #elif ((defined SDCC) || (defined HI_TECH_C) || (defined __ICC8051__))
           =3 
           =3 #define htobe16(x) bswap16(x)
           =3 #define htobe32(x) bswap32(x)
           =3 #define be16toh(x) bswap16(x)
           =3 #define be32toh(x) bswap32(x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #else
           =3 
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 5   

           =3 #define htobe16(x) (x)
           =3 #define htobe32(x) (x)
           =3 #define be16toh(x) (x)
           =3 #define be32toh(x) (x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #endif  // Compiler Definitions
  55      =3  
  56      =3  #endif  // __ENDIAN_H__
  95      =2  #include "si_toolchain.h"
   1      =3  /******************************************************************************
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __SI_TOOLCHAIN_H__
   8      =3  #define __SI_TOOLCHAIN_H__
   9      =3  
  10      =3  #include <stdint.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 6   

           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
  11      =3  #include <stdbool.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
  12      =3  
  13      =3  /**************************************************************************//**
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 7   

  14      =3   *
  15      =3   * @addtogroup toolchain_group Toolchain Abstraction
  16      =3   *
  17      =3   * @brief Macros for toolchain abstraction.
  18      =3   *
  19      =3   * # Introduction #
  20      =3   *
  21      =3   * This header file contains macros that are used to provide an abstraction
  22      =3   * for toolchain use in source code.  The 8051 compiler requires C-language
  23      =3   * extensions in order to fully use features of the 8051 architecture.  All
  24      =3   * compilers for 8051 implement a set of extensions but use different names
  25      =3   * and ways of implementing those extensions.  This header file provides
  26      =3   * macros that are defined for each supported toolchain and can be used in
  27      =3   * the source code.  This allows the source code to use 8051 extensions and
  28      =3   * remain independent of which toolchain is used for compilation.
  29      =3   *
  30      =3   * ## Variable and Pointer Declarations ##
  31      =3   *
  32      =3   * It is often useful to specify the memory area (or segment) of a variable,
  33      =3   * pointer, or pointer target.  For example, you may wish to place all
  34      =3   * variables in XDATA by default, but for variables used in time-sensitive
  35      =3   * code you use DATA for efficient access.  In this case you declare the
  36      =3   * XDATA variable in the normal C way, but declare the variables to be located
  37      =3   * in the DATA segment using @ref SI_SEGMENT_VARIABLE.
  38      =3   *
  39      =3   * Pointers are more complicated because there are two memory spaces
  40      =3   * associated with a pointer, the pointer target, and the pointer variable
  41      =3   * itself.  When using default memory segment for the pointer location and
  42      =3   * target, then no special macro is needed.  But if you wish to specify the
  43      =3   * pointer variable location, or target memory segment, then you can use one
  44      =3   * of the following macros to do this in a toolchain-independent way.
  45      =3   *
  46      =3   * |Pointer segment|Target segment|Macro                                   |
  47      =3   * |---------------|--------------|----------------------------------------|
  48      =3   * |default        |generic       |None                                    |
  49      =3   * |default        |specific      |@ref SI_VARIABLE_SEGMENT_POINTER        |
  50      =3   * |specific       |generic       |@ref SI_SEGMENT_POINTER                 |
  51      =3   * |specific       |specific      |@ref SI_SEGMENT_VARIABLE_SEGMENT_POINTER|
  52      =3   *
  53      =3   * ## Prior Toolchain Abstraction Header File ##
  54      =3   *
  55      =3   * This file supercedes an earlier header file named `compiler_defs.h`.  We
  56      =3   * are deprecating the use of compiler_defs.h, however it will remain for
  57      =3   * backwards compatibility.  This file was created to normalize macro names,
  58      =3   * remove unused macros, and to provide documentation.
  59      =3   *
  60      =3   * ## Supported Toolchains ##
  61      =3   *
  62      =3   * - Keil/ARM C51
  63      =3   *
  64      =3   * @{
  65      =3   *
  66      =3   *****************************************************************************/
  67      =3  
  68      =3  // Make sure there is a NULL defined if the toolchain does not provide it.
  69      =3  #ifndef NULL
  70      =3  #define NULL ((void *)0)
  71      =3  #endif
  72      =3  
  73      =3  // -------------------------------
  74      =3  // Keil/ARM C51
  75      =3  //
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 8   

  76      =3  #if defined(__C51__)
  77      =3  
  78      =3  /// Used with pointers, declares a generic pointer.  Generic pointers
  79      =3  /// work with any memory space but are inefficient.
  80      =3  #define SI_SEG_GENERIC
  81      =3  
  82      =3  /// Declares a variable to be located in 8051 DATA space.
  83      =3  #define SI_SEG_DATA data
  84      =3  
  85      =3  /// Declares a variable to be located in 8051 IDATA space.
  86      =3  #define SI_SEG_IDATA idata
  87      =3  
  88      =3  /// Declares a variable to be located in 8051 XDATA space.
  89      =3  #define SI_SEG_XDATA xdata
  90      =3  
  91      =3  /// Declares a variable to be located in 8051 PDATA space.
  92      =3  #define SI_SEG_PDATA pdata
  93      =3  
  94      =3  /// Declares a variable to be located in 8051 BDATA (bit-addressable) space.
  95      =3  #define SI_SEG_BDATA bdata
  96      =3  
  97      =3  /// Declares a variable to be located in 8051 CODE space.
  98      =3  #define SI_SEG_CODE code
  99      =3  
 100      =3  /**************************************************************************//**
 101      =3   * Declares a bit variable in a bit-addressable memory space.
 102      =3   *
 103      =3   * @param name The name of the bit variable.
 104      =3   *****************************************************************************/
 105      =3  #define SI_BIT(name) bit name
 106      =3  
 107      =3  /**************************************************************************//**
 108      =3   * Declares a bit variable in a bit-addressable SFR or memory space.
 109      =3   *
 110      =3   * @param name The name of the bit variable.
 111      =3   * @param address The address of the byte containing the bit.
 112      =3   * @param bitnum The bit number (0-7) within the byte.
 113      =3   *
 114      =3   * This cannot be used to make any arbitrary SFR or variable into
 115      =3   * a bit variable.  The underlying memory must support bit-addressability.
 116      =3   *****************************************************************************/
 117      =3  #define SI_SBIT(name, address, bitnum) sbit name = address^bitnum
 118      =3  
 119      =3  /**************************************************************************//**
 120      =3   * Declares an 8-bit special function register (SFR) variable.
 121      =3   *
 122      =3   * @param name The name of the SFR variable.
 123      =3   * @param address The address of the SFR.
 124      =3   *
 125      =3   * This creates a C variable (8-bit) that maps to a physical special function
 126      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 127      =3   * location into an SFR.  The _address_ must map to a real SFR in the memory
 128      =3   * map.
 129      =3   *****************************************************************************/
 130      =3  #define SI_SFR(name, address) sfr name = address
 131      =3  
 132      =3  /**************************************************************************//**
 133      =3   * Declares a 16-bit special function register (SFR) variable.
 134      =3   *
 135      =3   * @param name The name of the SFR variable.
 136      =3   * @param address The address of the 16-bit SFR.
 137      =3   *
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 9   

 138      =3   * This creates a C variable (16-bit) that maps to a physical special function
 139      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 140      =3   * location into an SFR.  The _address_ must map to a real 16-bit SFR in the
 141      =3   * memory map.
 142      =3   *****************************************************************************/
 143      =3  #define SI_SFR16(name, address) sfr16 name = address
 144      =3  
 145      =3  #ifndef __SLS_IDE__
 146      =3  /**************************************************************************//**
 147      =3   * Define an interrupt handler function for an interrupt vector.
 148      =3   *
 149      =3   * @param name The name of the interrupt handler function.
 150      =3   * @param vector The interrupt vector number.
 151      =3   *
 152      =3   * This macro defines a function to be an interrupt handler.  The _vector_
 153      =3   * parameter is the 8051 interrupt vector number, not the address.  This
 154      =3   * will cause the compiler to treat the function as the interrupt handler
 155      =3   * and generate the appropriate prolog/epilog code.
 156      =3   *
 157      =3   * @note This macro is used to define the function implementation.  To declare
 158      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO.
 159      =3   *****************************************************************************/
 160      =3  #define SI_INTERRUPT(name, vector) void name (void) interrupt vector
 161      =3  
 162      =3  /**************************************************************************//**
 163      =3   * Define an interrupt handler function using a specific register bank.
 164      =3   *
 165      =3   * @param name The name of the interrupt handler function.
 166      =3   * @param vector The interrupt vector number.
 167      =3   * @param regnum The register bank number (0-3).
 168      =3   *
 169      =3   * This macro defines a function to be an interrupt handler, using a specific
 170      =3   * register bank for the interrupt code.  The _vector_ parameter is the 8051
 171      =3   * interrupt vector number, not the address.  The _regnum_ parameter is the
 172      =3   * register bank number (0-3) that will be used as general purpose registers
 173      =3   * for the instructions in the compiled code.  Using dedicated register banks
 174      =3   * for interrupt handlers allows the prolog code to just switch banks instead
 175      =3   * of saving and restoring all the general purpose registers.  This can make
 176      =3   * interrupt entry/exit faster but requires dedicating a register bank for
 177      =3   * the interrupt handler.
 178      =3   *
 179      =3   * @note This macro is used to define the function implementation.  To declare
 180      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO_USING.
 181      =3   *****************************************************************************/
 182      =3  #define SI_INTERRUPT_USING(name, vector, regnum)                             \
 183      =3               void name (void) interrupt vector using regnum
 184      =3  
 185      =3  /**************************************************************************//**
 186      =3   * Declare an interrupt handler prototype for an interrupt vector.
 187      =3   *
 188      =3   * @param name The name of the interrupt handler function.
 189      =3   * @param vector The interrupt vector number.
 190      =3   *
 191      =3   * This macro declares a function prototype for an interrupt handler.  The
 192      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 193      =3   * Declaring the function prototype this way will cause the compiler to
 194      =3   * recognize that the function is an interrupt handler and not a normal C
 195      =3   * function.
 196      =3   *
 197      =3   * @note This macro is used to declare a prototype for the interrupt function.
 198      =3   * To define the interrupt function implementation, use @ref SI_INTERRUPT.
 199      =3   *****************************************************************************/
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 10  

 200      =3  #define SI_INTERRUPT_PROTO(name, vector) void name (void)
 201      =3  
 202      =3  /**************************************************************************//**
 203      =3   * Declare an interrupt handler prototype using a specific register bank.
 204      =3   *
 205      =3   * @param name The name of the interrupt handler function.
 206      =3   * @param vector The interrupt vector number.
 207      =3   * @param regnum The register bank number (0-3).
 208      =3   *
 209      =3   * This macro declares a function prototype for an interrupt handler, for a
 210      =3   * function that uses a specific register bank for the interrupt code.  The
 211      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 212      =3   * The _regnum_ parameter is the register bank number (0-3) that will be used
 213      =3   * as general purpose registers in the function.  Declaring the function
 214      =3   * prototype this way will cause the compiler to recognize that the function
 215      =3   * is an interrupt handler and is not a normal C function.
 216      =3   *
 217      =3   * @note This macro is used to declare a prototype for the interrupt function.
 218      =3   * To define the interrupt function implementation,
 219      =3   * use @ref SI_INTERRUPT_USING.
 220      =3   *****************************************************************************/
 221      =3  #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 222      =3  
 223      =3  /**************************************************************************//**
 224      =3   * Define a function to be reentrant (store local variables on the stack).
 225      =3   *
 226      =3   * @param name The name of the function.
 227      =3   * @param return_type The data type of the function return value
 228      =3   * (void, int, etc).
 229      =3   * @param parameter One C function parameter (or "void") (type and name).
 230      =3   *
 231      =3   * This macro defines a function to be reentrant.
 232      =3   *
 233      =3   * You must specify the _return_type_ which is the type of the function.  It
 234      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 235      =3   * is the list of function parameters.  It can be `void` or else it must be
 236      =3   * a parameter data type and name.  It can also be multiple parameters but
 237      =3   * they must be enclosed in parentheses and separated by commas.
 238      =3   *
 239      =3   * __Example__
 240      =3   *
 241      =3   * ~~~~~~~~.c
 242      =3   * // The following is used to implement a function with the following
 243      =3   * // signature...
 244      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 245      =3   *
 246      =3   * SI_REENTRANT_FUNCTION(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2))
 247      =3   * {
 248      =3   *   // Function implementation body
 249      =3   * }
 250      =3   * ~~~~~~~~
 251      =3   *
 252      =3   * @note This macro is used to define the function implementation.  To declare
 253      =3   * the function prototype, use @ref SI_REENTRANT_FUNCTION_PROTO.
 254      =3   *****************************************************************************/
 255      =3  #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
 256      =3    return_type name parameter reentrant
 257      =3  
 258      =3  /**************************************************************************//**
 259      =3   * Declare a function to be reentrant (store local variables on the stack).
 260      =3   *
 261      =3   * @param name The name of the function.
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 11  

 262      =3   * @param return_type The data type of the function return value
 263      =3   * (void, int, etc).
 264      =3   * @param parameter One C function parameter (or "void") (type and name).
 265      =3   *
 266      =3   * This macro declares a function prototype for a C function that is reentrant.
 267      =3   * See the documentation for @ref SI_REENTRANT_FUNCTION for an explanation of
 268      =3   * the macro arguments.  This is an advanced feature.
 269      =3   *
 270      =3   * @note This macro is used to declare a prototype for the function.  To
 271      =3   * define the function implementation, use @ref SI_REENTRANT_FUNCTION.
 272      =3   *****************************************************************************/
 273      =3  #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
 274      =3    return_type name parameter reentrant
 275      =3                 
 276      =3  /**************************************************************************//**
 277      =3   * Define a function to use a specific register bank.
 278      =3   *
 279      =3   * @param name The name of the function.
 280      =3   * @param return_value The data type of the function return value
 281      =3   * (void, int, etc).
 282      =3   * @param parameter One C function parameter (or "void") (type and name).
 283      =3   * @param regnum The register bank number (0-3).
 284      =3   *
 285      =3   * This macro defines a function that uses a specific register bank.  The
 286      =3   * _regnum_ parameter is the register bank number (0-3) that will be used as
 287      =3   * general purpose registers for the instructions in the compiled function
 288      =3   * code.  Using dedicated register banks for a function can reduce the amount
 289      =3   * of registers saving and restoring needed on entry and exit to the
 290      =3   * function.  However, this is an advanced feature and you should not use it
 291      =3   * unless you fully understand how and when to use register banking.
 292      =3   *
 293      =3   * You must specify the _return_value_ which is the type of the function.  It
 294      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 295      =3   * is the list of function parameters.  It can be `void` or else it must be
 296      =3   * a parameter data type and name.  It can also be multiple parameters but
 297      =3   * they must be enclosed in parentheses and separated by commas.
 298      =3   *
 299      =3   * __Example__
 300      =3   *
 301      =3   * ~~~~~~~~.c
 302      =3   * // The following is used to implement a function with the following
 303      =3   * // signature, and that uses register bank 3 ...
 304      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 305      =3   *
 306      =3   * SI_FUNCTION_USING(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2), 3)
 307      =3   * {
 308      =3   *   // Function implementation body
 309      =3   * }
 310      =3   * ~~~~~~~~
 311      =3   *
 312      =3   * @note This macro is used to define the function implementation.  To declare
 313      =3   * the function prototype, use @ref SI_FUNCTION_PROTO_USING.
 314      =3   *****************************************************************************/
 315      =3  #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
 316      =3               return_value name parameter using regnum
 317      =3  
 318      =3  /**************************************************************************//**
 319      =3   * Declare a function that uses a specific register bank.
 320      =3   *
 321      =3   * @param name The name of the function.
 322      =3   * @param return_value The data type of the function return value
 323      =3   * (void, int, etc).
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 12  

 324      =3   * @param parameter One C function parameter (or "void") (type and name).
 325      =3   * @param regnum The register bank number (0-3).
 326      =3   *
 327      =3   * This macro declares a function prototype for a C function that uses a
 328      =3   * specific register its working registers.  See the documentation for
 329      =3   * @ref SI_FUNCTION_USING for an explanation of the macro arguments.  This is
 330      =3   * an advanced feature.
 331      =3   *
 332      =3   * @note This macro is used to declare a prototype for the function.  To
 333      =3   * define the function implementation, use @ref SI_FUNCTION_USING.
 334      =3   *****************************************************************************/
 335      =3  #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
 336      =3               return_value name parameter
 337      =3  
 338      =3  /**************************************************************************//**
 339      =3   * Declare a variable to be located in a specific memory segment.
 340      =3   *
 341      =3   * @param name The variable name.
 342      =3   * @param vartype The variable data type.* @param memseg The memory segment to use for the variable.
 343      =3   *
 344      =3   * This macro declares a variable to be located in a specific memory area
 345      =3   * (or segment) of the 8051 memory space.  It is only necessary to use this
 346      =3   * macro if you want to force the variable into a specific memory space instead
 347      =3   * of the default memory space used by the compiler.  The segment can be
 348      =3   * one of the following:
 349      =3   *
 350      =3   * - @ref SI_SEG_DATA
 351      =3   * - @ref SI_SEG_IDATA
 352      =3   * - @ref SI_SEG_BDATA
 353      =3   * - @ref SI_SEG_PDATA
 354      =3   * - @ref SI_SEG_XDATA
 355      =3   * - @ref SI_SEG_CODE
 356      =3   *
 357      =3   * __Example__
 358      =3   *
 359      =3   * ~~~~~~~~.c
 360      =3   * // The following macro can be used to create a variable located in
 361      =3   * // XDATA with the following signature:
 362      =3   * uint8_t myVar;
 363      =3   *
 364      =3   * SI_SEGMENT_VARIABLE(myVar, uint8_t, SEG_XDATA);
 365      =3   * ~~~~~~~~
 366      =3   *****************************************************************************/
 367      =3  #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype memseg name
 368      =3  
 369      =3  /**************************************************************************//**
 370      =3   * Declare a memory segment specific pointer variable.
 371      =3   *
 372      =3   * @param name The pointer variable name.
 373      =3   * @param vartype The pointer data type.
 374      =3   * @param targseg The target memory segment for the pointer.
 375      =3   *
 376      =3   * This macro declares a pointer that points at a specific memory area
 377      =3   * (or segment).  The memory segment of the pointer variable itself is not
 378      =3   * specified and the default is used.  The segment can be one of the following:
 379      =3   *
 380      =3   * - @ref SI_SEG_DATA
 381      =3   * - @ref SI_SEG_IDATA
 382      =3   * - @ref SI_SEG_BDATA
 383      =3   * - @ref SI_SEG_PDATA
 384      =3   * - @ref SI_SEG_XDATA
 385      =3   * - @ref SI_SEG_CODE
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 13  

 386      =3   *
 387      =3   * __Example__
 388      =3   *
 389      =3   * ~~~~~~~~.c
 390      =3   * // The following macro can be used to create a pointer that points to
 391      =3   * // a location in XDATA with the following signature:
 392      =3   * uint8_t *pVar; // where pVar is pointing at XDATA
 393      =3   *
 394      =3   * SI_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA);
 395      =3   * ~~~~~~~~
 396      =3   *****************************************************************************/
 397      =3  #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
 398      =3               vartype targseg * name
 399      =3  
 400      =3  /**************************************************************************//**
 401      =3   * Declare a memory segment specific pointer variable, in a specific segment.
 402      =3   *
 403      =3   * @param name The pointer variable name.
 404      =3   * @param vartype The pointer data type.
 405      =3   * @param targseg The target memory segment for the pointer.
 406      =3   * @param memseg The memory segment to use for the pointer variable.
 407      =3   *
 408      =3   * This macro declares a pointer that points at a specific memory area
 409      =3   * (or segment).  The pointer variable itself is also located in a specified
 410      =3   * memory segment by _memseg_.  The arguments _targseg_ and _memseg_ can be
 411      =3   * one of the following:
 412      =3   *
 413      =3   * - @ref SI_SEG_DATA
 414      =3   * - @ref SI_SEG_IDATA
 415      =3   * - @ref SI_SEG_BDATA
 416      =3   * - @ref SI_SEG_PDATA
 417      =3   * - @ref SI_SEG_XDATA
 418      =3   * - @ref SI_SEG_CODE
 419      =3   *
 420      =3   * __Example__
 421      =3   *
 422      =3   * ~~~~~~~~.c
 423      =3   * // The following macro can be used to create a pointer that points to
 424      =3   * // a location in XDATA while the pointer itself is located in DATA, with
 425      =3   * // the following signature:
 426      =3   * uint8_t *pVar; // where pVar is located in DATA and is pointing at XDATA
 427      =3   *
 428      =3   * SI_SEGMENT_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA, SEG_DATA);
 429      =3   * ~~~~~~~~
 430      =3   *****************************************************************************/
 431      =3  #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
 432      =3               vartype targseg * memseg name
 433      =3  
 434      =3  /**************************************************************************//**
 435      =3   * Declare a generic pointer variable that is located in a specific segment.
 436      =3   *
 437      =3   * @param name The pointer variable name.
 438      =3   * @param vartype The pointer data type.
 439      =3   * @param memseg The memory segment to use for the pointer variable.
 440      =3   *
 441      =3   * This macro declares a pointer that is a generic pointer.  This means it can
 442      =3   * point at any kind of memory location.  However the pointer variable itself
 443      =3   * is located in a specific memory segment by _memseg_, which can be one of
 444      =3   * the following:
 445      =3   *
 446      =3   * - @ref SI_SEG_DATA
 447      =3   * - @ref SI_SEG_IDATA
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 14  

 448      =3   * - @ref SI_SEG_BDATA
 449      =3   * - @ref SI_SEG_PDATA
 450      =3   * - @ref SI_SEG_XDATA
 451      =3   * - @ref SI_SEG_CODE
 452      =3   *
 453      =3   * __Example__
 454      =3   *
 455      =3   * ~~~~~~~~.c
 456      =3   * // The following macro can be used to create a generic pointer that
 457      =3   * // is located in DATA and points at any memory type, with the
 458      =3   * // following signature:
 459      =3   * uint8_t *pVar; // where pVar is located in DATA and is a generic pointer
 460      =3   *
 461      =3   * SI_SEGMENT_POINTER(pVar, uint8_t, SEG_DATA);
 462      =3   * ~~~~~~~~
 463      =3   *****************************************************************************/
 464      =3  #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * memseg name
 465      =3  
 466      =3  /**************************************************************************//**
 467      =3   * Declare an uninitialized variable that is located at a specific address.
 468      =3   *
 469      =3   * @param name The variable name.
 470      =3   * @param vartype The variable data type.
 471      =3   * @param memseg The memory segment to use for the variable.
 472      =3   * @param address The memory address of the variable.
 473      =3   *
 474      =3   * This macro allows declaring a variable that can be placed at a specific
 475      =3   * location in memory.  This can only be used for variables that do not need
 476      =3   * initializers.  The _address_ is the memory address within the specified
 477      =3   * segment.  The memory segment, _memseg_, can be one of the following:
 478      =3   *
 479      =3   * - @ref SI_SEG_DATA
 480      =3   * - @ref SI_SEG_IDATA
 481      =3   * - @ref SI_SEG_BDATA
 482      =3   * - @ref SI_SEG_PDATA
 483      =3   * - @ref SI_SEG_XDATA
 484      =3   * - @ref SI_SEG_CODE
 485      =3   *
 486      =3   * __Example__
 487      =3   *
 488      =3   * ~~~~~~~~.c
 489      =3   * // The following declares a variable located at 0x4000 in XDATA with
 490      =3   * // the following signature:
 491      =3   * uint8_t myMemVar;
 492      =3   *
 493      =3   * SI_LOCATED_VARIABLE_NO_INIT(myMemVar, uint8_t, SEG_DATA, 0x4000);
 494      =3   * ~~~~~~~~
 495      =3   *****************************************************************************/
 496      =3  #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
 497      =3               vartype memseg name _at_ address
 498      =3  
 499      =3  
 500      =3  #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 #define SI_REENTRANT_FUNCTION(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_value, parameter, regnum) return_value name (parameter)
           =3 
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 15  

           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 #endif // __SLS_IDE__
 519      =3  
 520      =3  // The following are used for byte ordering when referring to individual
 521      =3  // bytes within a SI_UU32_t.  B0 is the least significant byte.
 522      =3  #define B0 3 ///< Least significant byte of a 4 byte word
 523      =3  #define B1 2 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
 524      =3  #define B2 1 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
 525      =3  #define B3 0 ///< Most significant byte of a 4-byte word
 526      =3  
 527      =3  #define LSB 1 ///< Index to least significant bit of a 2 byte word
 528      =3  #define MSB 0 ///< Index to most significant bit of a 2 byte word
 529      =3  
 530      =3  /// A union type to make it easier to access individual bytes of a 16-bit
 531      =3  /// word, and to use as signed or unsigned type.
 532      =3  typedef union SI_UU16
 533      =3  {
 534      =3    uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
 535      =3    int16_t s16;    ///< The two byte value as a 16-bit signed integer.
 536      =3    uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
 537      =3    int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
 538      =3  } SI_UU16_t;
 539      =3  
 540      =3  /// A union type to make it easier to access individual bytes within a
 541      =3  /// 32-bit word, or to access it as variations of 16-bit words, or to
 542      =3  /// use as signed or unsigned type.
 543      =3  typedef union SI_UU32
 544      =3  {
 545      =3    uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
 546      =3    int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
 547      =3    SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
 548      =3    uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
 549      =3    int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
 550      =3    uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
 551      =3    int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
 552      =3  } SI_UU32_t;
 553      =3  
 554      =3  // Generic pointer memory segment constants.
 555      =3  #define SI_GPTR                   ///< Generic pointer indeterminate type.
 556      =3  #define SI_GPTR_MTYPE_DATA  0x00  ///< Generic pointer for DATA segment.
 557      =3  #define SI_GPTR_MTYPE_IDATA 0x00  ///< Generic pointer for IDATA segment.
 558      =3  #define SI_GPTR_MTYPE_BDATA 0x00  ///< Generic pointer for BDATA segment.
 559      =3  #define SI_GPTR_MTYPE_PDATA 0xFE  ///< Generic pointer for PDATA segment.
 560      =3  #define SI_GPTR_MTYPE_XDATA 0x01  ///< Generic pointer for XDATA segment.
 561      =3  #define SI_GPTR_MTYPE_CODE  0xFF  ///< Generic pointer for CODE segment.
 562      =3  
 563      =3  /// Generic pointer structure containing the type and address.
 564      =3  typedef struct
 565      =3  {
 566      =3    uint8_t memtype;    ///< The type of memory of the generic pointer.
 567      =3    SI_UU16_t address;  ///< The address of the generic pointer.
 568      =3  } GPTR_t;
 569      =3  
 570      =3  /// A union type to allow access to the fields of a generic pointer.
 571      =3  /// A generic pointer has a field indicating the type of memory and an
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 16  

 572      =3  /// address within the memory.
 573      =3  typedef union SI_GEN_PTR
 574      =3  {
 575      =3    uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
 576      =3    GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
 577      =3  } SI_GEN_PTR_t;
 578      =3  
 579      =3  // Declaration of Keil intrinisc
 580      =3  extern void _nop_(void);
 581      =3  /// Macro to insert a no-operation (NOP) instruction.
 582      =3  #define NOP() _nop_()
 583      =3  
 584      =3  // -------------------------------
 585      =3  // GCC for ARM Cortex-M
 586      =3  // Provides support for code that can be compiled for 8 or 32-bit
 587      =3  //
 588      =3  #elif defined (__GNUC__)
           =3 #if defined(__ARMEL__) && ((__ARMEL__ == 1) && ((__ARM_ARCH == 6) || (__ARM_ARCH == 7)))
           =3 
           =3 // these ignore any memory segment directives
           =3 #define SI_SEG_GENERIC
           =3 #define SI_SEG_DATA
           =3 #define SI_SEG_IDATA
           =3 #define SI_SEG_XDATA
           =3 #define SI_SEG_PDATA
           =3 #define SI_SEG_BDATA
           =3 #define SI_SEG_CODE
           =3 
           =3 // the following create a variable of the specified name but ignore the
           =3 // address and bit number.  If the using-code cares about the actual
           =3 // address or bit number, this probably will break it
           =3 #define SI_SBIT(name, address, bitnum) uint8_t name
           =3 #define SI_SFR(name, address) uint8_t name
           =3 #define SI_SFR16(name, address) uint16_t name
           =3 
           =3 // the following create function and variable names of the specified types
           =3 // but the 8051-specific aspects (like memory segment) are ignored
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name (parameter)
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =3              vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =3              vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =3              vartype name
           =3 
           =3 #define B0 0
           =3 #define B1 1
           =3 #define B2 2
           =3 #define B3 3
           =3 #define LSB 0
           =3 #define MSB 1
           =3 typedef union SI_UU16
           =3 {
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 17  

           =3   uint16_t u16;
           =3   int16_t s16;
           =3   uint8_t u8[2];
           =3   int8_t s8[2];
           =3 } SI_UU16_t;
           =3 
           =3 typedef union SI_UU32
           =3 {
           =3   uint32_t u32;
           =3   int32_t s32;
           =3   SI_UU16_t uu16[2];
           =3   uint16_t u16[2];
           =3   int16_t s16[2];
           =3   uint8_t u8[4];
           =3   int8_t s8[4];
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer stuff is left out because if you are accessing
           =3 // generic pointer fields then it will need to be rewritten for 32-bit
           =3 
           =3 // __NOP should be declared in cmsis header core_cmInstr.h
           =3 extern void __NOP(void);
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __NOP()
           =3 
           =3 #else // ARM_ARCH 6 | 7
           =3 #error unsupported ARM arch
           =3 #endif
           =3 
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <intrinsics.h>
           =3 
           =3 #define SI_BIT(name)              __no_init bool __bit name
           =3 #define SI_SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 #define SI_SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 #define SI_SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 
           =3 #define SI_SEG_GENERIC __generic
           =3 #define SI_SEG_FAR  __xdata
           =3 #define SI_SEG_DATA __data
           =3 #define SI_SEG_NEAR __data
           =3 #define SI_SEG_IDATA __idata
           =3 #define SI_SEG_XDATA __xdata
           =3 #define SI_SEG_PDATA __pdata
           =3 #define SI_SEG_CODE  __code
           =3 #define SI_SEG_BDATA __bdata
           =3 
           =3 #define _PPTOSTR_(x) #x
           =3 #define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 #define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 #define SI_INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __in
             -terrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 #if (__DATA_MODEL__ == 0) /* TINY */ || \
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 18  

           =3     (__DATA_MODEL__ == 1) /* SMALL */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #elif (__DATA_MODEL__ == 2) /* LARGE */ || \
           =3       (__DATA_MODEL__ == 3) /* GENERIC */ || \
           =3       (__DATA_MODEL__ == 4) /* FAR */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name (parameter)
           =3 #else
           =3 #error "Illegal memory model setting."
           =3 #endif
           =3 
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name parameter
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name parameter
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment)  vartype locsegment name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * 
             -locsegment name
           =3                
           =3 #define SI_SEGMENT_POINTER(name, vartype, ptrseg) vartype __generic * ptrseg name
           =3 
           =3 #define SI_LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ add
             -r
           =3 
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment __no_init vartype name @ a
             -ddr
           =3 
           =3 // The following are used for byte ordering when referring to individual
           =3 // bytes within a SI_UU32_t.  B0 is the least significant byte.
           =3 #define B0 0 ///< Least significant byte of a 4 byte word
           =3 #define B1 1 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
           =3 #define B2 2 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
           =3 #define B3 3 ///< Most significant byte of a 4-byte word
           =3 
           =3 #define LSB 0 ///< Index to least significant bit of a 2 byte word
           =3 #define MSB 1 ///< Index to most significant bit of a 2 byte word
           =3 
           =3 /// A union type to make it easier to access individual bytes of a 16-bit
           =3 /// word, and to use as signed or unsigned type.
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
           =3   int16_t s16;    ///< The two byte value as a 16-bit signed integer.
           =3   uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
           =3   int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
           =3 } SI_UU16_t;
           =3 
           =3 /// A union type to make it easier to access individual bytes within a
           =3 /// 32-bit word, or to access it as variations of 16-bit words, or to
           =3 /// use as signed or unsigned type.
           =3 typedef union SI_UU32
           =3 {
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 19  

           =3   uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
           =3   int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
           =3   SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
           =3   uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
           =3   int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
           =3   uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
           =3   int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer memory segment constants.
           =3 #define SI_GPTR                   ///< Generic pointer indeterminate type.
           =3 #define SI_GPTR_MTYPE_DATA  0x01  ///< Generic pointer for DATA segment.
           =3 #define SI_GPTR_MTYPE_IDATA 0x01  ///< Generic pointer for IDATA segment.
           =3 #define SI_GPTR_MTYPE_BDATA 0x01  ///< Generic pointer for BDATA segment.
           =3 #define SI_GPTR_MTYPE_PDATA 0x00  ///< Generic pointer for PDATA segment.
           =3 #define SI_GPTR_MTYPE_XDATA 0x00  ///< Generic pointer for XDATA segment.
           =3 #define SI_GPTR_MTYPE_CODE  0x80  ///< Generic pointer for CODE segment.
           =3 
           =3 /// Generic pointer structure containing the type and address.
           =3 typedef struct
           =3 {
           =3   SI_UU16_t address;  ///< The address of the generic pointer.
           =3   uint8_t memtype;    ///< The type of memory of the generic pointer.  
           =3 } GPTR_t;
           =3 
           =3 /// A union type to allow access to the fields of a generic pointer.
           =3 /// A generic pointer has a field indicating the type of memory and an
           =3 /// address within the memory.
           =3 typedef union SI_GEN_PTR
           =3 {
           =3   uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
           =3   GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
           =3 } SI_GEN_PTR_t;
           =3 
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __no_operation()
           =3 
           =3 #else // unknown toolchain
           =3 #error Unrecognized toolchain in si_toolchain.h
           =3 #endif
 794      =3  
 795      =3  /** @} */
 796      =3  
 797      =3  #endif
  96      =2  #include "compiler_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // compiler_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Portions of this file are copyright Maarten Brock
   5      =3  // http://sdcc.sourceforge.net
   6      =3  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
   7      =3  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =3  //
   9      =3  // GNU LGPL boilerplate:
  10      =3  /** This library is free software; you can redistribute it and/or
  11      =3    * modify it under the terms of the GNU Lesser General Public
  12      =3    * License as published by the Free Software Foundation; either
  13      =3    * version 2.1 of the License, or (at your option) any later version.
  14      =3    *
  15      =3    * This library is distributed in the hope that it will be useful,
  16      =3    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =3    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 20  

  18      =3    * Lesser General Public License for more details.
  19      =3    *
  20      =3    * You should have received a copy of the GNU Lesser General Public
  21      =3    * License along with this library; if not, write to the Free Software
  22      =3    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =3    *
  24      =3    * In other words, you are welcome to use, share and improve this program.
  25      =3    * You are forbidden to forbid anyone else to use, share and improve
  26      =3    * what you give them. Help stamp out software-hoarding!
  27      =3  **/
  28      =3  // Program Description:
  29      =3  //
  30      =3  // **Important Note**: This header file should be included before including
  31      =3  // a device-specific header file such as C8051F300_defs.h.
  32      =3  //
  33      =3  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =3  // special function registers and other 8051-specific features such as NOP
  35      =3  // generation, and locating variables in memory-specific segments.  The
  36      =3  // compilers are identified by their unique predefined macros. See also:
  37      =3  // http://predef.sourceforge.net/precomp.html
  38      =3  //
  39      =3  // SBIT and SFR define special bit and special function registers at the given
  40      =3  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =3  // little-endian format. SFR16E and SFR32E define sfr combinations without
  42      =3  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =3  // combinations will guarantee the order in which they are accessed when read
  44      =3  // or written.
  45      =3  //
  46      =3  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
  47      =3  // to avoid portability issues because of compiler endianness.
  48      =3  //
  49      =3  // Example:
  50      =3  // // my_mcu.c: main 'c' file for my mcu
  51      =3  // #include <compiler_defs.h>  // this file
  52      =3  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =3  //
  54      =3  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =3  // SFR   (P0, 0x80);           // Port 0
  56      =3  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
  57      =3  //                             // xdata memory at 0xE600
  58      =3  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =3  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =3  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =3  //                             // lsb at 0x93, msb at 0x96
  62      =3  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =3  //                             // lsb at 0xE2, msb at 0xE5
  64      =3  //
  65      =3  // Target:         C8051xxxx
  66      =3  // Tool chain:     Generic
  67      =3  // Command Line:   None
  68      =3  // 
  69      =3  // Release 2.7 - 25 JUN 2014 (JM)
  70      =3  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =3  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =3  //     pointed at by a generic poitner
  73      =3  // Release 2.6 - 14 DEC 2012 (GO)
  74      =3  //        -Added define for deprecated SDCC keyword 'at'
  75      =3  // Release 2.5 - 12 SEP 2012 (TP)
  76      =3  //    -Added defines for deprecated SDCC keywords bit and code
  77      =3  // Release 2.4 - 27 AUG 2012 (TP)
  78      =3  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =3  // Release 2.3 - 27 MAY 2010 (DM)
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 21  

  80      =3  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =3  // Release 2.2 - 06 APR 2010 (ES)
  82      =3  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =3  // Release 2.1 - 16 JUL 2009 (ES)
  84      =3  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =3  // Release 2.0 - 19 MAY 2009 (ES)
  87      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
  88      =3  // Release 1.9 - 23 OCT 2008 (ES)
  89      =3  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =3  //    -Added SFR16 macro defintion for Hi-Tech
  91      =3  // Release 1.8 - 31 JUL 2008 (ES)
  92      =3  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =3  //    -Added macro's for IAR
  94      =3  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =3  // Release 1.7 - 11 SEP 2007 (BW)
  96      =3  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =3  // Release 1.6 - 27 AUG 2007 (BW)
  98      =3  //    -Updated copyright notice per agreement with Maartin Brock
  99      =3  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =3  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =3  // Release 1.5 - 24 AUG 2007 (BW)
 102      =3  //    -Added support for NOP () macro
 103      =3  //    -Added support for Hi-Tech ver 9.01
 104      =3  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =3  //    -Removed FID and fixed formatting.
 106      =3  // Release 1.3 - 30 SEP 2007 (TP)
 107      =3  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =3  //     under SDCC.
 109      =3  // Release 1.2 - (BW)
 110      =3  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =3  // Release 1.1 - (BW)
 112      =3  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =3  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =3  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =3  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =3  //    -Initial revision
 117      =3  
 118      =3  //-----------------------------------------------------------------------------
 119      =3  // Header File Preprocessor Directive
 120      =3  //-----------------------------------------------------------------------------
 121      =3  
 122      =3  #ifndef COMPILER_DEFS_H
 123      =3  #define COMPILER_DEFS_H
 124      =3  
 125      =3  #include "stdbool.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 22  

           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
 126      =3  #include "stdint.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 23  

           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
 127      =3  
 128      =3  //-----------------------------------------------------------------------------
 129      =3  // Macro definitions
 130      =3  //-----------------------------------------------------------------------------
 131      =3  
 132      =3  //SDK Version
 133      =3  #define SDK_VERSION   2
 134      =3  
 135      =3  #ifndef NULL
           =3 #define NULL ((void*) 0)
           =3 #endif
 138      =3  
 139      =3  
 140      =3  // SDCC - Small Device C Compiler
 141      =3  // http://sdcc.sourceforge.net
 142      =3  
 143      =3  #if defined SDCC
           =3 
           =3 #if (SDCC >= 300)
           =3 
           =3 #define interrupt __interrupt
           =3 #define _asm __asm
           =3 #define _endasm __endasm
           =3 #define bit __bit
           =3 #define code __code
           =3 #define at __at
           =3 
           =3 #endif
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   __xdata
           =3 # define SEG_DATA  __data
           =3 # define SEG_NEAR  __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =3 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =3 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 24  

           =3 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =3 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
           =3 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =3 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
             -regnum)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 25  

           =3 // NOP () macro support
           =3 #define NOP() _asm NOP _endasm
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x40
           =3 #define SI_GPTR_MTYPE_IDATA      0x40
           =3 #define SI_GPTR_MTYPE_BDATA      0x40
           =3 #define SI_GPTR_MTYPE_PDATA      0x60
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Raisonance (must be placed before Keil C51)
           =3 // http://www.raisonance.com
           =3 
           =3 #elif defined __RC51__
           =3 
           =3 //#error Raisonance C51 detected.
           =3 
           =3 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =3 # define SEG_FAR   xdata
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  data
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =3 # define SFR(name, addr)        sfr at addr                name
           =3 # define SFR16(name, addr)      sfr16 at addr              name
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 26  

           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =3 
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support -- NOP is opcode 0x00
           =3 #define NOP() asm { 0x00 }
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x04
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x04
           =3 #define SI_GPTR_MTYPE_PDATA      0x03
           =3 #define SI_GPTR_MTYPE_XDATA      0x02
           =3 #define SI_GPTR_MTYPE_CODE       0x05
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         U8 MTYPE;
           =3         UU16 ADDR;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 27  

           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // Keil C51
           =3 // http://www.keil.com
           =3 
           =3 #elif defined __C51__
 360      =3  
 361      =3  //#error Keil C51 detected.
 362      =3  
 363      =3  # define SEG_GENERIC
 364      =3  # define SEG_FAR   xdata
 365      =3  # define SEG_DATA  data
 366      =3  # define SEG_NEAR  data
 367      =3  # define SEG_IDATA idata
 368      =3  # define SEG_XDATA xdata
 369      =3  # define SEG_PDATA pdata
 370      =3  # define SEG_CODE  code
 371      =3  # define SEG_BDATA bdata
 372      =3  
 373      =3  # define SBIT(name, addr, bit)  sbit  name = addr^bit
 374      =3  # define SFR(name, addr)        sfr   name = addr
 375      =3  # define SFR16(name, addr)      sfr16 name = addr
 376      =3  # define SFR16E(name, fulladdr) /* not supported */
 377      =3  # define SFR32(name, fulladdr)  /* not supported */
 378      =3  # define SFR32E(name, fulladdr) /* not supported */
 379      =3  
 380      =3  # ifndef __SLS_IDE__
 381      =3  
 382      =3  # define INTERRUPT(name, vector) void name (void) interrupt vector
 383      =3  # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
 384      =3  # define INTERRUPT_PROTO(name, vector) void name (void)
 385      =3  # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 386      =3  
 387      =3  # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
 388      =3  # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
 389      =3  // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
 390      =3  
 391      =3  # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
 392      =3  # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
 393      =3  # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
 394      =3  # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
 395      =3  # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
 396      =3  
 397      =3  # else  // __SLS_IDE__
           =3 
           =3 # define INTERRUPT(name, vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 28  

           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 
           =3 # endif // __SLS_IDE__
 415      =3  
 416      =3  // used with UU16
 417      =3  # define LSB 1
 418      =3  # define MSB 0
 419      =3  
 420      =3  // used with UU32 (b0 is least-significant byte)
 421      =3  # define b0 3
 422      =3  # define b1 2
 423      =3  # define b2 1
 424      =3  # define b3 0
 425      =3  
 426      =3  typedef unsigned char U8;
 427      =3  typedef unsigned int U16;
 428      =3  typedef unsigned long U32;
 429      =3  
 430      =3  typedef signed char S8;
 431      =3  typedef signed int S16;
 432      =3  typedef signed long S32;
 433      =3  
 434      =3  typedef union UU16
 435      =3  {
 436      =3     U16 U16;
 437      =3     S16 S16;
 438      =3     U8 U8[2];
 439      =3     S8 S8[2];
 440      =3  } UU16;
 441      =3  
 442      =3  typedef union UU32
 443      =3  {
 444      =3     U32 U32;
 445      =3     S32 S32;
 446      =3     UU16 UU16[2];
 447      =3     U16 U16[2];
 448      =3     S16 S16[2];
 449      =3     U8 U8[4];
 450      =3     S8 S8[4];
 451      =3  } UU32;
 452      =3  
 453      =3  // NOP () macro support
 454      =3  extern void _nop_ (void);
 455      =3  #define NOP() _nop_()
 456      =3  
 457      =3  // generic pointer memory type specifiers
 458      =3  #define SI_GPTR
 459      =3  #define SI_GPTR_MTYPE_DATA      0x00
 460      =3  #define SI_GPTR_MTYPE_IDATA     0x00
 461      =3  #define SI_GPTR_MTYPE_BDATA     0x00
 462      =3  #define SI_GPTR_MTYPE_PDATA     0xFE
 463      =3  #define SI_GPTR_MTYPE_XDATA     0x01
 464      =3  #define SI_GPTR_MTYPE_CODE      0xFF
 465      =3  
 466      =3  // generic pointer access struct
 467      =3  typedef union SI_GENERIC_PTR
 468      =3  {
 469      =3      U8 U8[3];
 470      =3      struct
 471      =3      {
 472      =3          U8 MTYPE;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 29  

 473      =3          UU16 ADDR;
 474      =3      } GPTR;
 475      =3  } SI_GENERIC_PTR;
 476      =3  
 477      =3  //-----------------------------------------------------------------------------
 478      =3  
 479      =3  // Hi-Tech 8051
 480      =3  // http://www.htsoft.com
 481      =3  
 482      =3  #elif defined HI_TECH_C
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   far
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  near
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 
           =3 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =3 # define SFR(name, addr)          static volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =3 # define INTERRUPT_PROTO(name, vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: Hi-Tech does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 30  

           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() asm(" nop ")
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Tasking / Altium
           =3 // http://www.altium.com/tasking
           =3 
           =3 
           =3 #elif defined _CC51
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   _xdat
           =3 # define SEG_DATA  _data
           =3 # define SEG_NEAR  _data
           =3 # define SEG_IDATA _idat
           =3 # define SEG_XDATA _xdat
           =3 # define SEG_PDATA _pdat
           =3 # define SEG_CODE  _rom
           =3 # define SEG_BDATA _bdat
           =3 
           =3 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =3 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =3 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =3 #if _CC51 > 71
           =3 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =3 #else
           =3 # define SFR16(name, addr)      /* not supported */
           =3 #endif
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 
           =3 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =3 // is also using the same register bank. If not, the compiler will generate an error.
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 31  

             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
             -ameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 extern void _nop (void);
           =3 #define NOP() _nop()
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <stdbool.h>
           =3 #include <intrinsics.h>
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 32  

           =3 
           =3 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr) /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define SEG_GENERIC __generic
           =3 # define SEG_FAR  __xdata
           =3 # define SEG_DATA __data
           =3 # define SEG_NEAR __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 #define bit bool
           =3 
           =3 # define _PPTOSTR_(x) #x
           =3 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 33  

           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 
           =3 #define NOP() __no_operation();
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x01
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x01
           =3 #define SI_GPTR_MTYPE_PDATA      0x00
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Crossware
           =3 // http://www.crossware.com
           =3 
           =3 #elif defined _XC51_VER
           =3 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =3 # define SFR(name, addr)        _sfr     name = addr
           =3 # define SFR16(name, addr)      _sfrword name = addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Wickenh盲user
           =3 // http://www.wickenhaeuser.de
           =3 
           =3 #elif defined __UC__
           =3 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =3 # define SFR(name, addr)        near unsigned char name @ addr
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 34  

           =3 # define SFR16(name, addr)      /* not supported */
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Default
           =3 // Unknown compiler
           =3 
           =3 #else
           =3 # warning unrecognized compiler
           =3 # define SBIT(name, addr, bit)  volatile bool           name
           =3 # define SFR(name, addr)        volatile unsigned char  name
           =3 # define SFRX(name, addr)       volatile unsigned char  name
           =3 # define SFR16(name, addr)      volatile unsigned short name
           =3 # define SFR16E(name, fulladdr) volatile unsigned short name
           =3 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =3 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =3 
           =3 #endif
 798      =3  
 799      =3  //-----------------------------------------------------------------------------
 800      =3  // Header File PreProcessor Directive
 801      =3  //-----------------------------------------------------------------------------
 802      =3  
 803      =3  #endif                                 // #define COMPILER_DEFS_H
 804      =3  
 805      =3  //-----------------------------------------------------------------------------
 806      =3  // End Of File
 807      =3  //-----------------------------------------------------------------------------
  97      =2  #include "C8051F020_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // C8051F020_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Copyright 2007, Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Register/bit definitions for the C8051F02x family.
  10      =3  // **Important Note**: The compiler_defs.h header file should be included
  11      =3  // before including this header file.
  12      =3  //
  13      =3  // Target:         C8051F020, 'F021, 'F022, 'F023
  14      =3  // Tool chain:     Generic
  15      =3  // Command Line:   None
  16      =3  //
  17      =3  // Release 1.4 - 20 AUG 2012 (TP)
  18      =3  //    -Added #define for _XPAGE to provide support for SDCC memory paging
  19      =3  //     (pdata)
  20      =3  // Release 1.3 - 07 AUG 2007 (PKC)
  21      =3  //    -Removed #include <compiler_defs.h>. The C source file should include it.
  22      =3  // Release 1.2 - 09 JUL 2007 (PKC)
  23      =3  //    -Reformatted header file to enable portable SFR definitions
  24      =3  
  25      =3  //-----------------------------------------------------------------------------
  26      =3  // Header File Preprocessor Directive
  27      =3  //-----------------------------------------------------------------------------
  28      =3  
  29      =3  #ifndef C8051F020_DEFS_H
  30      =3  #define C8051F020_DEFS_H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 35  

  31      =3  
  32      =3  //-----------------------------------------------------------------------------
  33      =3  // Byte Registers
  34      =3  //-----------------------------------------------------------------------------
  35      =3  
  36      =3  SFR (P0, 0x80);                        // Port 0 Latch
  37      =3  SFR (SP, 0x81);                        // Stack Pointer
  38      =3  SFR (DPL, 0x82);                       // Data Pointer Low
  39      =3  SFR (DPH, 0x83);                       // Data Pointer High
  40      =3  SFR (P4, 0x84);                        // Port 4 Latch
  41      =3  SFR (P5, 0x85);                        // Port 5 Latch
  42      =3  SFR (P6, 0x86);                        // Port 6 Latch
  43      =3  SFR (PCON, 0x87);                      // Power Control
  44      =3  SFR (TCON, 0x88);                      // Timer/Counter Control
  45      =3  SFR (TMOD, 0x89);                      // Timer/Counter Mode
  46      =3  SFR (TL0, 0x8A);                       // Timer/Counter 0 Low
  47      =3  SFR (TL1, 0x8B);                       // Timer/Counter 1 Low
  48      =3  SFR (TH0, 0x8C);                       // Timer/Counter 0 High
  49      =3  SFR (TH1, 0x8D);                       // Timer/Counter 1 High
  50      =3  SFR (CKCON, 0x8E);                     // Clock Control
  51      =3  SFR (PSCTL, 0x8F);                     // Program Store R/W Control
  52      =3  SFR (P1, 0x90);                        // Port 1 Latch
  53      =3  SFR (TMR3CN, 0x91);                    // Timer/Counter 3 Control
  54      =3  SFR (TMR3RLL, 0x92);                   // Timer/Counter 3 Reload Low
  55      =3  SFR (TMR3RLH, 0x93);                   // Timer/Counter 3 Reload High
  56      =3  SFR (TMR3L, 0x94);                     // Timer/Counter 3 Low
  57      =3  SFR (TMR3H, 0x95);                     // Timer/Counter 3 High
  58      =3  SFR (P7, 0x96);                        // Port 7 Latch
  59      =3  SFR (SCON0, 0x98);                     // Serial Port UART0 Control
  60      =3  SFR (SBUF0, 0x99);                     // Serial Port UART0 Data Buffer
  61      =3  SFR (SPI0CFG, 0x9A);                   // SPI0 Configuration
  62      =3  SFR (SPI0DAT, 0x9B);                   // SPI0 Data
  63      =3  SFR (ADC1, 0x9C);                      // ADC1 Data
  64      =3  SFR (SPI0CKR, 0x9D);                   // SPI0 Clock Rate Control
  65      =3  SFR (CPT0CN, 0x9E);                    // Comparator 0 Control
  66      =3  SFR (CPT1CN, 0x9F);                    // Comparator 1 Control
  67      =3  SFR (P2, 0xA0);                        // Port 2 Latch
  68      =3  SFR (EMI0TC, 0xA1);                    // EMIF Timing Control
  69      =3  SFR (EMI0CF, 0xA3);                    // EMIF Configuration
  70      =3  SFR (P0MDOUT, 0xA4);                   // Port 0 Output Mode Configuration
  71      =3  SFR (P1MDOUT, 0xA5);                   // Port 1 Output Mode Configuration
  72      =3  SFR (P2MDOUT, 0xA6);                   // Port 2 Output Mode Configuration
  73      =3  SFR (P3MDOUT, 0xA7);                   // Port 3 Output Mode Configuration
  74      =3  SFR (IE, 0xA8);                        // Interrupt Enable
  75      =3  SFR (SADDR0, 0xA9);                    // Serial Port UART0 Slave Address
  76      =3  SFR (ADC1CN, 0xAA);                    // ADC1 Control
  77      =3  SFR (ADC1CF, 0xAB);                    // ADC1 Analog Mux Configuration
  78      =3  SFR (AMX1SL, 0xAC);                    // ADC1 Analog Mux Channel Select
  79      =3  SFR (P3IF, 0xAD);                      // Port 3 External Interrupt Flags
  80      =3  SFR (SADEN1, 0xAE);                    // Serial Port UART1 Slave Address Mask
  81      =3  SFR (EMI0CN, 0xAF);                    // EMIF Control
  82      =3  SFR (P3, 0xB0);                        // Port 3 Latch
  83      =3  SFR (OSCXCN, 0xB1);                    // External Oscillator Control
  84      =3  SFR (OSCICN, 0xB2);                    // Internal Oscillator Control
  85      =3  SFR (P74OUT, 0xB5);                    // Ports 4 - 7 Output Mode
  86      =3  SFR (FLSCL, 0xB6);                     // Flash Memory Timing Prescaler
  87      =3  SFR (FLACL, 0xB7);                     // Flash Acess Limit
  88      =3  SFR (IP, 0xB8);                        // Interrupt Priority
  89      =3  SFR (SADEN0, 0xB9);                    // Serial Port UART0 Slave Address Mask
  90      =3  SFR (AMX0CF, 0xBA);                    // ADC0 Mux Configuration
  91      =3  SFR (AMX0SL, 0xBB);                    // ADC0 Mux Channel Selection
  92      =3  SFR (ADC0CF, 0xBC);                    // ADC0 Configuration
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 36  

  93      =3  SFR (P1MDIN, 0xBD);                    // Port 1 Input Mode
  94      =3  SFR (ADC0L, 0xBE);                     // ADC0 Data Low
  95      =3  SFR (ADC0H, 0xBF);                     // ADC0 Data High
  96      =3  SFR (SMB0CN, 0xC0);                    // SMBus0 Control
  97      =3  SFR (SMB0STA, 0xC1);                   // SMBus0 Status
  98      =3  SFR (SMB0DAT, 0xC2);                   // SMBus0 Data
  99      =3  SFR (SMB0ADR, 0xC3);                   // SMBus0 Slave Address
 100      =3  SFR (ADC0GTL, 0xC4);                   // ADC0 Greater-Than Register Low
 101      =3  SFR (ADC0GTH, 0xC5);                   // ADC0 Greater-Than Register High
 102      =3  SFR (ADC0LTL, 0xC6);                   // ADC0 Less-Than Register Low
 103      =3  SFR (ADC0LTH, 0xC7);                   // ADC0 Less-Than Register High
 104      =3  SFR (T2CON, 0xC8);                     // Timer/Counter 2 Control
 105      =3  SFR (T4CON, 0xC9);                     // Timer/Counter 4 Control
 106      =3  SFR (RCAP2L, 0xCA);                    // Timer/Counter 2 Capture Low
 107      =3  SFR (RCAP2H, 0xCB);                    // Timer/Counter 2 Capture High
 108      =3  SFR (TL2, 0xCC);                       // Timer/Counter 2 Low
 109      =3  SFR (TH2, 0xCD);                       // Timer/Counter 2 High
 110      =3  SFR (SMB0CR, 0xCF);                    // SMBus0 Clock Rate
 111      =3  SFR (PSW, 0xD0);                       // Program Status Word
 112      =3  SFR (REF0CN, 0xD1);                    // Voltage Reference 0 Control
 113      =3  SFR (DAC0L, 0xD2);                     // DAC0 Register Low
 114      =3  SFR (DAC0H, 0xD3);                     // DAC0 Register High
 115      =3  SFR (DAC0CN, 0xD4);                    // DAC0 Control
 116      =3  SFR (DAC1L, 0xD5);                     // DAC1 Register Low
 117      =3  SFR (DAC1H, 0xD6);                     // DAC1 Register High
 118      =3  SFR (DAC1CN, 0xD7);                    // DAC1 Control
 119      =3  SFR (PCA0CN, 0xD8);                    // PCA0 Control
 120      =3  SFR (PCA0MD, 0xD9);                    // PCA0 Mode
 121      =3  SFR (PCA0CPM0, 0xDA);                  // PCA0 Module 0 Mode Register
 122      =3  SFR (PCA0CPM1, 0xDB);                  // PCA0 Module 1 Mode Register
 123      =3  SFR (PCA0CPM2, 0xDC);                  // PCA0 Module 2 Mode Register
 124      =3  SFR (PCA0CPM3, 0xDD);                  // PCA0 Module 3 Mode Register
 125      =3  SFR (PCA0CPM4, 0xDE);                  // PCA0 Module 4 Mode Register
 126      =3  SFR (ACC, 0xE0);                       // Accumulator
 127      =3  SFR (XBR0, 0xE1);                      // Port I/O Crossbar Control 0
 128      =3  SFR (XBR1, 0xE2);                      // Port I/O Crossbar Control 1
 129      =3  SFR (XBR2, 0xE3);                      // Port I/O Crossbar Control 2
 130      =3  SFR (RCAP4L, 0xE4);                    // Timer 4 Capture Register Low
 131      =3  SFR (RCAP4H, 0xE5);                    // Timer 4 Capture Register High
 132      =3  SFR (EIE1, 0xE6);                      // External Interrupt Enable 1
 133      =3  SFR (EIE2, 0xE7);                      // External Interrupt Enable 2
 134      =3  SFR (ADC0CN, 0xE8);                    // ADC0 Control
 135      =3  SFR (PCA0L, 0xE9);                     // PCA0 Counter Low
 136      =3  SFR (PCA0CPL0, 0xEA);                  // PCA0 Capture 0 Low
 137      =3  SFR (PCA0CPL1, 0xEB);                  // PCA0 Capture 1 Low
 138      =3  SFR (PCA0CPL2, 0xEC);                  // PCA0 Capture 2 Low
 139      =3  SFR (PCA0CPL3, 0xED);                  // PCA0 Capture 3 Low
 140      =3  SFR (PCA0CPL4, 0xEE);                  // PCA0 Capture 4 Low
 141      =3  SFR (RSTSRC, 0xEF);                    // Reset Source Configuration/Status
 142      =3  SFR (B, 0xF0);                         // B Register
 143      =3  SFR (SCON1, 0xF1);                     // Serial Port UART1 Control
 144      =3  SFR (SBUF1, 0xF2);                     // Serail Port UART1 Data
 145      =3  SFR (SADDR1, 0xF3);                    // Serail Port UART1 Slave Address
 146      =3  SFR (TL4, 0xF4);                       // Timer/Counter 4 Low
 147      =3  SFR (TH4, 0xF5);                       // Timer/Counter 4 High
 148      =3  SFR (EIP1, 0xF6);                      // External Interrupt Priority 1
 149      =3  SFR (EIP2, 0xF7);                      // External Interrupt Priority 2
 150      =3  SFR (SPI0CN, 0xF8);                    // SPI0 Control
 151      =3  SFR (PCA0H, 0xF9);                     // PCA0 Counter High
 152      =3  SFR (PCA0CPH0, 0xFA);                  // PCA0 Capture 0 High
 153      =3  SFR (PCA0CPH1, 0xFB);                  // PCA0 Capture 1 High
 154      =3  SFR (PCA0CPH2, 0xFC);                  // PCA0 Capture 2 High
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 37  

 155      =3  SFR (PCA0CPH3, 0xFD);                  // PCA0 Capture 3 High
 156      =3  SFR (PCA0CPH4, 0xFE);                  // PCA0 Capture 4 High
 157      =3  SFR (WDTCN, 0xFF);                     // Watchdog Timer Control
 158      =3  
 159      =3  //-----------------------------------------------------------------------------
 160      =3  // 16-bit Register Definitions (might not be supported by all compilers)
 161      =3  //-----------------------------------------------------------------------------
 162      =3  
 163      =3  SFR16 (DP, 0x82);                      // Data Pointer
 164      =3  SFR16 (TMR3RL, 0x92);                  // Timer3 Reload Value
 165      =3  SFR16 (TMR3, 0x94);                    // Timer3 Counter
 166      =3  SFR16 (ADC0, 0xBE);                    // ADC0 Data
 167      =3  SFR16 (ADC0GT, 0xC4);                  // ADC0 Greater Than Window
 168      =3  SFR16 (ADC0LT, 0xC6);                  // ADC0 Less Than Window
 169      =3  SFR16 (RCAP2, 0xCA);                   // Timer2 Capture/Reload
 170      =3  SFR16 (T2, 0xCC);                      // Timer2 Counter
 171      =3  SFR16 (TMR2RL, 0xCA);                  // Timer2 Capture/Reload
 172      =3  SFR16 (TMR2, 0xCC);                    // Timer2 Counter
 173      =3  SFR16 (RCAP4, 0xE4);                   // Timer4 Capture/Reload
 174      =3  SFR16 (T4, 0xF4);                      // Timer4 Counter
 175      =3  SFR16 (TMR4RL, 0xE4);                  // Timer4 Capture/Reload
 176      =3  SFR16 (TMR4, 0xF4);                    // Timer4 Counter
 177      =3  SFR16 (DAC0, 0xD2);                    // DAC0 Data
 178      =3  SFR16 (DAC1, 0xD5);                    // DAC1 Data
 179      =3  
 180      =3  //-----------------------------------------------------------------------------
 181      =3  // Address Definitions for bit-addressable SFRs
 182      =3  //-----------------------------------------------------------------------------
 183      =3  
 184      =3  #define SFR_P0       0x80
 185      =3  #define SFR_TCON     0x88
 186      =3  #define SFR_P1       0x90
 187      =3  #define SFR_SCON0    0x98
 188      =3  #define SFR_P2       0xA0
 189      =3  #define SFR_IE       0xA8
 190      =3  #define SFR_P3       0xB0
 191      =3  #define SFR_IP       0xB8
 192      =3  #define SFR_SMB0CN   0xC0
 193      =3  #define SFR_T2CON    0xC8
 194      =3  #define SFR_PSW      0xD0
 195      =3  #define SFR_PCA0CN   0xD8
 196      =3  #define SFR_ACC      0xE0
 197      =3  #define SFR_ADC0CN   0xE8
 198      =3  #define SFR_B        0xF0
 199      =3  #define SFR_SPI0CN   0xF8
 200      =3  
 201      =3  //-----------------------------------------------------------------------------
 202      =3  // Bit Definitions
 203      =3  //-----------------------------------------------------------------------------
 204      =3  
 205      =3  // TCON 0x88
 206      =3  SBIT (TF1, SFR_TCON, 7);               // Timer 1 Overflow Flag
 207      =3  SBIT (TR1, SFR_TCON, 6);               // Timer 1 On/Off Control
 208      =3  SBIT (TF0, SFR_TCON, 5);               // Timer 0 Overflow Flag
 209      =3  SBIT (TR0, SFR_TCON, 4);               // Timer 0 On/Off Control
 210      =3  SBIT (IE1, SFR_TCON, 3);               // Ext. Interrupt 1 Edge Flag
 211      =3  SBIT (IT1, SFR_TCON, 2);               // Ext. Interrupt 1 Type
 212      =3  SBIT (IE0, SFR_TCON, 1);               // Ext. Interrupt 0 Edge Flag
 213      =3  SBIT (IT0, SFR_TCON, 0);               // Ext. Interrupt 0 Type
 214      =3  
 215      =3  // SCON0 0x98
 216      =3  SBIT (SM00, SFR_SCON0, 7);             // Serial Mode Control Bit 0
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 38  

 217      =3  SBIT (SM10, SFR_SCON0, 6);             // Serial Mode Control Bit 1
 218      =3  SBIT (SM20, SFR_SCON0, 5);             // Multiprocessor Communication Enable
 219      =3  SBIT (REN0, SFR_SCON0, 4);             // Receive Enable
 220      =3  SBIT (TB80, SFR_SCON0, 3);             // Transmit Bit 8
 221      =3  SBIT (RB80, SFR_SCON0, 2);             // Receive Bit 8
 222      =3  SBIT (TI0, SFR_SCON0, 1);              // Transmit Interrupt Flag
 223      =3  SBIT (RI0, SFR_SCON0, 0);              // Receive Interrupt Flag
 224      =3  
 225      =3  // IE 0xA8
 226      =3  SBIT (EA, SFR_IE, 7);                  // Global Interrupt Enable
 227      =3  SBIT (IEGF0, SFR_IE, 6);               // General Purpose Flag 0
 228      =3  SBIT (ET2, SFR_IE, 5);                 // Timer 2 Interrupt Enable
 229      =3  SBIT (ES0, SFR_IE, 4);                 // Uart0 Interrupt Enable
 230      =3  SBIT (ET1, SFR_IE, 3);                 // Timer 1 Interrupt Enable
 231      =3  SBIT (EX1, SFR_IE, 2);                 // External Interrupt 1 Enable
 232      =3  SBIT (ET0, SFR_IE, 1);                 // Timer 0 Interrupt Enable
 233      =3  SBIT (EX0, SFR_IE, 0);                 // External Interrupt 0 Enable
 234      =3  
 235      =3  // IP 0xB8
 236      =3                                         // Bit7 UNUSED
 237      =3                                         // Bit6 UNUSED
 238      =3  SBIT (PT2, SFR_IP, 5);                 // Timer 2 Priority
 239      =3  SBIT (PS, SFR_IP, 4);                  // Serial Port Priority
 240      =3  SBIT (PT1, SFR_IP, 3);                 // Timer 1 Priority
 241      =3  SBIT (PX1, SFR_IP, 2);                 // External Interrupt 1 Priority
 242      =3  SBIT (PT0, SFR_IP, 1);                 // Timer 0 Priority
 243      =3  SBIT (PX0, SFR_IP, 0);                 // External Interrupt 0 Priority
 244      =3  
 245      =3  // SMB0CN 0xC0
 246      =3  SBIT (BUSY, SFR_SMB0CN, 7);            // SMBus 0 Busy
 247      =3  SBIT (ENSMB, SFR_SMB0CN, 6);           // SMBus 0 Enable
 248      =3  SBIT (STA, SFR_SMB0CN, 5);             // SMBus 0 Start Flag
 249      =3  SBIT (STO, SFR_SMB0CN, 4);             // SMBus 0 Stop Flag
 250      =3  SBIT (SI, SFR_SMB0CN, 3);              // SMBus 0 Interrupt Pending Flag
 251      =3  SBIT (AA, SFR_SMB0CN, 2);              // SMBus 0 Assert/Acknowledge Flag
 252      =3  SBIT (SMBFTE, SFR_SMB0CN, 1);          // SMBus 0 Free Timer Enable
 253      =3  SBIT (SMBTOE, SFR_SMB0CN, 0);          // SMBus 0 Timeout Enable
 254      =3  
 255      =3  // T2CON 0xC8
 256      =3  SBIT (TF2, SFR_T2CON, 7);              // Timer 2 Overflow Flag
 257      =3  SBIT (EXF2, SFR_T2CON, 6);             // External Flag
 258      =3  SBIT (RCLK0, SFR_T2CON, 5);            // Uart0 Rx Clock Source
 259      =3  SBIT (TCLK0, SFR_T2CON, 4);            // Uart0 Tx Clock Source
 260      =3  SBIT (EXEN2, SFR_T2CON, 3);            // Timer 2 External Enable Flag
 261      =3  SBIT (TR2, SFR_T2CON, 2);              // Timer 2 On/Off Control
 262      =3  SBIT (CT2, SFR_T2CON, 1);              // Timer Or Counter Select
 263      =3  SBIT (CPRL2, SFR_T2CON, 0);            // Capture Or Reload Select
 264      =3  
 265      =3  //  PSW 0xD0
 266      =3  SBIT (CY, SFR_PSW, 7);                 // Carry Flag
 267      =3  SBIT (AC, SFR_PSW, 6);                 // Auxiliary Carry Flag
 268      =3  SBIT (F0, SFR_PSW, 5);                 // User Flag 0
 269      =3  SBIT (RS1, SFR_PSW, 4);                // Register Bank Select 1
 270      =3  SBIT (RS0, SFR_PSW, 3);                // Register Bank Select 0
 271      =3  SBIT (OV, SFR_PSW, 2);                 // Overflow Flag
 272      =3  SBIT (F1, SFR_PSW, 1);                 // User Flag 1
 273      =3  SBIT (P, SFR_PSW, 0);                  // Accumulator Parity Flag
 274      =3  
 275      =3  // PCA0CN 0xD8
 276      =3  SBIT (CF, SFR_PCA0CN, 7);              // PCA 0 Counter Overflow Flag
 277      =3  SBIT (CR, SFR_PCA0CN, 6);              // PCA 0 Counter Run Control Bit
 278      =3                                         // Bit5 UNUSED
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 39  

 279      =3  SBIT (CCF4, SFR_PCA0CN, 4);            // PCA 0 Module 4 Interrupt Flag
 280      =3  SBIT (CCF3, SFR_PCA0CN, 3);            // PCA 0 Module 3 Interrupt Flag
 281      =3  SBIT (CCF2, SFR_PCA0CN, 2);            // PCA 0 Module 2 Interrupt Flag
 282      =3  SBIT (CCF1, SFR_PCA0CN, 1);            // PCA 0 Module 1 Interrupt Flag
 283      =3  SBIT (CCF0, SFR_PCA0CN, 0);            // PCA 0 Module 0 Interrupt Flag
 284      =3  
 285      =3  // ADC0CN 0xE8
 286      =3  SBIT (AD0EN, SFR_ADC0CN, 7);           // ADC 0 Enable
 287      =3  SBIT (AD0TM, SFR_ADC0CN, 6);           // ADC 0 Track Mode
 288      =3  SBIT (AD0INT, SFR_ADC0CN, 5);          // ADC 0 Converision Complete Interrupt Flag
 289      =3  SBIT (AD0BUSY, SFR_ADC0CN, 4);         // ADC 0 Busy Flag
 290      =3  SBIT (AD0CM1, SFR_ADC0CN, 3);          // ADC 0 Start Of Conversion Mode Bit 1
 291      =3  SBIT (AD0CM0, SFR_ADC0CN, 2);          // ADC 0 Start Of Conversion Mode Bit 0
 292      =3  SBIT (AD0WINT, SFR_ADC0CN, 1);         // ADC 0 Window Compare Interrupt Flag
 293      =3  SBIT (AD0LJST, SFR_ADC0CN, 0);         // ADC 0 Right Justify Data Bit
 294      =3  
 295      =3  // SPI0CN 0xF8
 296      =3  SBIT (SPIF, SFR_SPI0CN, 7);            // SPI 0 Interrupt Flag
 297      =3  SBIT (WCOL, SFR_SPI0CN, 6);            // SPI 0 Write Collision Flag
 298      =3  SBIT (MODF, SFR_SPI0CN, 5);            // SPI 0 Mode Fault Flag
 299      =3  SBIT (RXOVRN, SFR_SPI0CN, 4);          // SPI 0 Rx Overrun Flag
 300      =3  SBIT (TXBSY, SFR_SPI0CN, 3);           // SPI 0 Tx Busy Flag
 301      =3  SBIT (SLVSEL, SFR_SPI0CN, 2);          // SPI 0 Slave Select
 302      =3  SBIT (MSTEN, SFR_SPI0CN, 1);           // SPI 0 Master Enable
 303      =3  SBIT (SPIEN, SFR_SPI0CN, 0);           // SPI 0 SPI Enable
 304      =3  
 305      =3  //-----------------------------------------------------------------------------
 306      =3  // Interrupt Priorities
 307      =3  //-----------------------------------------------------------------------------
 308      =3  
 309      =3  #define INTERRUPT_INT0           0     // External Interrupt 0
 310      =3  #define INTERRUPT_TIMER0         1     // Timer0 Overflow
 311      =3  #define INTERRUPT_INT1           2     // External Interrupt 1
 312      =3  #define INTERRUPT_TIMER1         3     // Timer1 Overflow
 313      =3  #define INTERRUPT_UART0          4     // Serial Port UART0
 314      =3  #define INTERRUPT_TIMER2         5     // Timer2 Overflow
 315      =3  #define INTERRUPT_SPI0           6     // SPI0 Interface
 316      =3  #define INTERRUPT_SMBUS0         7     // SMBus0 Interface
 317      =3  #define INTERRUPT_ADC0_WINDOW    8     // ADC0 Window Comparison
 318      =3  #define INTERRUPT_PCA0           9     // PCA0 Peripheral
 319      =3  #define INTERRUPT_COMPARATOR0F   10    // Comparator0 Falling Edge
 320      =3  #define INTERRUPT_COMPARATOR0R   11    // Comparator0 Rising Edge
 321      =3  #define INTERRUPT_COMPARATOR1F   12    // Comparator1 Falling Edge
 322      =3  #define INTERRUPT_COMPARATOR1R   13    // Comparator1 Rising Edge
 323      =3  #define INTERRUPT_TIMER3         14    // Timer3 Overflow
 324      =3  #define INTERRUPT_ADC0_EOC       15    // ADC0 End Of Conversion
 325      =3  #define INTERRUPT_TIMER4         16    // Timer4 Overflow
 326      =3  #define INTERRUPT_ADC1_EOC       17    // ADC1 End Of Conversion
 327      =3  #define INTERRUPT_INT6           18    // External Interrupt 6
 328      =3  #define INTERRUPT_INT7           19    // External Interrupt 7
 329      =3  #define INTERRUPT_UART1          20    // Serial Port UART1
 330      =3  #define INTERRUPT_XTAL_READY     21    // External Crystal Oscillator Ready
 331      =3  
 332      =3  //-----------------------------------------------------------------------------
 333      =3  // SDCC PDATA External Memory Paging Support
 334      =3  //-----------------------------------------------------------------------------
 335      =3  
 336      =3  #if defined SDCC
           =3 
           =3 SFR(_XPAGE, 0xAF); // Point to the EMI0CN register
           =3 
           =3 #endif
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 40  

 341      =3  
 342      =3  //-----------------------------------------------------------------------------
 343      =3  // Header File PreProcessor Directive
 344      =3  //-----------------------------------------------------------------------------
 345      =3  
 346      =3  #endif                                 // #define C8051F020_DEFS_H
 347      =3  
 348      =3  //-----------------------------------------------------------------------------
 349      =3  // End Of File
 350      =3  //-----------------------------------------------------------------------------
  98      =2  /*****************************************************************************/
  99      =2  #include <stdio.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDIO.H
   3      =3  
   4      =3  Prototypes for standard I/O functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __STDIO_H__
  10      =3  #define __STDIO_H__
  11      =3  
  12      =3  #ifndef EOF
  13      =3   #define EOF -1
  14      =3  #endif
  15      =3  
  16      =3  #ifndef NULL
           =3  #define NULL ((void *) 0)
           =3 #endif
  19      =3  
  20      =3  #ifndef _SIZE_T
  21      =3   #define _SIZE_T
  22      =3   typedef unsigned int size_t;
  23      =3  #endif
  24      =3  
  25      =3  #pragma SAVE
  26      =3  #pragma REGPARMS
  27      =3  extern char _getkey (void);
  28      =3  extern char getchar (void);
  29      =3  extern char ungetchar (char);
  30      =3  extern char putchar (char);
  31      =3  extern int printf   (const char *, ...);
  32      =3  extern int sprintf  (char *, const char *, ...);
  33      =3  extern int vprintf  (const char *, char *);
  34      =3  extern int vsprintf (char *, const char *, char *);
  35      =3  extern char *gets (char *, int n);
  36      =3  extern int scanf (const char *, ...);
  37      =3  extern int sscanf (char *, const char *, ...);
  38      =3  extern int puts (const char *);
  39      =3  
  40      =3  #pragma RESTORE
  41      =3  
  42      =3  #endif
  43      =3  
 100      =2  #include <stdlib.h> 
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDLIB.H
   3      =3  
   4      =3  Standard functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 41  

   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STDLIB_H__
  11      =3  #define __STDLIB_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #ifndef _WCHAR_T_DEFINED_
  23      =3  #define _WCHAR_T_DEFINED_
  24      =3  typedef char wchar_t;
  25      =3  #endif
  26      =3  
  27      =3  #if defined (__CX2__)
           =3 #ifndef _DIV_T_DEFINED
           =3 typedef struct _div_t {
           =3         int quot;
           =3         int rem;
           =3 } div_t;
           =3 typedef struct _ldiv_t {
           =3         long quot;
           =3         long rem;
           =3 } ldiv_t;
           =3 #define _DIV_T_DEFINED
           =3 #endif // _DIV_T_DEFINED
           =3 #endif // __CX2__
  40      =3  
  41      =3  #ifndef RAND_MAX
  42      =3   #define RAND_MAX  32767u
  43      =3  #endif
  44      =3  
  45      =3  #if defined (__CX2__)
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif // __CX2__
  52      =3  
  53      =3  #pragma SAVE
  54      =3  #pragma REGPARMS
  55      =3  
  56      =3  extern char   cabs (char  val);
  57      =3  #if !defined (__CX2__)
  58      =3  extern int    abs  (int   val);
  59      =3  #endif // __CX2__
  60      =3  extern long   labs (long  val);
  61      =3  
  62      =3  extern float  atof (const char *s1);
  63      =3  extern long   atol (const char *s1);
  64      =3  extern int    atoi (const char *s1);
  65      =3  extern int    rand (void);
  66      =3  extern void   srand (unsigned int seed);
  67      =3  
  68      =3  #ifdef _DIV_T_DEFINED
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 42  

           =3 extern div_t  __div (int numer, int denom);
           =3 #define div(numer,denom)  __div((numer),(denom));
           =3 extern ldiv_t ldiv (long numer, long denom);
           =3 #endif // _DIV_T_DEFINED
  73      =3  
  74      =3  extern float         strtod  (const char *nptr, char **endptr);
  75      =3  extern long          strtol  (const char *nptr, char **endptr, unsigned char base);
  76      =3  extern unsigned long strtoul (const char *nptr, char **endptr, unsigned char base);
  77      =3  
  78      =3  #define _MALLOC_MEM_    xdata
  79      =3  
  80      =3  extern void init_mempool          (void _MALLOC_MEM_ *p, size_t size);
  81      =3  extern void _MALLOC_MEM_ *malloc  (size_t size);
  82      =3  extern void free                  (void _MALLOC_MEM_ *p);
  83      =3  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, size_t size);
  84      =3  extern void _MALLOC_MEM_ *calloc  (size_t nmemb, size_t size);
  85      =3  
  86      =3  #if defined (__CX2__)
           =3 extern void abort(void);
           =3 #endif // __CX2__
  89      =3  
  90      =3  #pragma RESTORE
  91      =3  
  92      =3  #endif // __STDLIB_H__
 101      =2  #include <string.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STRING.H
   3      =3  
   4      =3  String functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STRING_H__
  11      =3  #define __STRING_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #pragma SAVE
  23      =3  #pragma REGPARMS
  24      =3  extern char  *strcat  (char *s1, const char *s2);
  25      =3  extern char  *strncat (char *s1, const char *s2, size_t n);
  26      =3  
  27      =3  extern char   strcmp  (const char *s1, const char *s2);
  28      =3  extern char   strncmp (const char *s1, const char *s2, size_t n);
  29      =3  
  30      =3  extern char  *strcpy  (char *s1, const char *s2);
  31      =3  extern char  *strncpy (char *s1, const char *s2, size_t n);
  32      =3  
  33      =3  extern size_t strlen  (const char *);
  34      =3  
  35      =3  extern char  *strchr  (const char *s, char c);
  36      =3  extern int    strpos  (const char *s, char c);
  37      =3  extern char  *strrchr (const char *s, char c);
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 43  

  38      =3  extern int    strrpos (const char *s, char c);
  39      =3  
  40      =3  extern size_t strspn  (const char *s, const char *set);
  41      =3  extern size_t strcspn (const char *s, const char *set);
  42      =3  extern char  *strpbrk (const char *s, const char *set);
  43      =3  extern char  *strrpbrk(const char *s, const char *set);
  44      =3  extern char  *strstr  (const char *s, const char *sub);
  45      =3  extern char  *strtok  (char *str, const char *set);
  46      =3  
  47      =3  extern char   memcmp  (const void *s1, const void *s2, size_t n);
  48      =3  extern void  *memcpy  (void *s1, const void *s2, size_t n);
  49      =3  extern void  *memchr  (const void *s, char val, size_t n);
  50      =3  extern void  *memccpy (void *s1, const void *s2, char val, size_t n);
  51      =3  extern void  *memmove (void *s1, const void *s2, size_t n);
  52      =3  extern void  *memset  (void *s, char val, size_t n);
  53      =3  #pragma RESTORE
  54      =3  
  55      =3  #endif
 102      =2  #include <INTRINS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  INTRINS.H
   3      =3  
   4      =3  Intrinsic functions for C51.
   5      =3  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __INTRINS_H__
  10      =3  #define __INTRINS_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  
  14      =3  #if defined (__CX2__)
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 #endif
  18      =3  
  19      =3  extern void          _nop_     (void);
  20      =3  extern bit           _testbit_ (bit);
  21      =3  extern unsigned char _cror_    (unsigned char, unsigned char);
  22      =3  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  23      =3  extern unsigned long _lror_    (unsigned long, unsigned char);
  24      =3  extern unsigned char _crol_    (unsigned char, unsigned char);
  25      =3  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  26      =3  extern unsigned long _lrol_    (unsigned long, unsigned char);
  27      =3  extern unsigned char _chkfloat_(float);
  28      =3  #if defined (__CX2__)
           =3 extern int           abs       (int);
           =3 extern void          _illop_   (void);
           =3 #endif
  32      =3  #if !defined (__CX2__)
  33      =3  extern void          _push_    (unsigned char _sfr);
  34      =3  extern void          _pop_     (unsigned char _sfr);
  35      =3  #endif
  36      =3  
  37      =3  #pragma RESTORE
  38      =3  
  39      =3  #endif
  40      =3  
 103      =2  #include <ctype.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  CTYPE.H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 44  

   3      =3  
   4      =3  Prototypes for character functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __CTYPE_H__
  10      =3  #define __CTYPE_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  #pragma REGPARMS
  14      =3  extern bit isalpha (unsigned char);
  15      =3  extern bit isalnum (unsigned char);
  16      =3  extern bit iscntrl (unsigned char);
  17      =3  extern bit isdigit (unsigned char);
  18      =3  extern bit isgraph (unsigned char);
  19      =3  extern bit isprint (unsigned char);
  20      =3  extern bit ispunct (unsigned char);
  21      =3  extern bit islower (unsigned char);
  22      =3  extern bit isupper (unsigned char);
  23      =3  extern bit isspace (unsigned char);
  24      =3  extern bit isxdigit (unsigned char);
  25      =3  extern unsigned char tolower (unsigned char);
  26      =3  extern unsigned char toupper (unsigned char);
  27      =3  extern unsigned char toint (unsigned char);
  28      =3  
  29      =3  #define _tolower(c) ( (c)-'A'+'a' )
  30      =3  #define _toupper(c) ( (c)-'a'+'A' )
  31      =3  #define toascii(c)  ( (c) & 0x7F )
  32      =3  #pragma RESTORE
  33      =3  
  34      =3  #endif
 104      =2  #include <LIMITS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  LIMITS.H
   3      =3  
   4      =3  ANSI standard include file.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2009 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __LIMITS_H__
  11      =3  #define __LIMITS_H__
  12      =3  
  13      =3  #define CHAR_BIT         8              /* Number of bits in any "char" */
  14      =3  #define CHAR_MAX         127            /* Max             "char" value */
  15      =3  #define CHAR_MIN       (-128)           /* Min             "char" value */
  16      =3  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  17      =3  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
  18      =3  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  19      =3  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  20      =3  #define SHRT_MIN       (-32767-1)       /* Min ("signed") "short" value */
  21      =3  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  22      =3  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  23      =3  #define INT_MIN        (-32767-1)       /* Min ("signed")   "int" value */
  24      =3  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  25      =3  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  26      =3  #define LONG_MIN   (-2147483647L-1L)    /* Min ("signed")  "long" value */
  27      =3  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
  28      =3  
  29      =3  #endif
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 45  

 105      =2  #include <math.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  MATH.H
   3      =3  
   4      =3  Prototypes for mathematic functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __MATH_H__
  11      =3  #define __MATH_H__
  12      =3  
  13      =3  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
           =3 #ifndef HUGE_VAL
           =3 #define HUGE_VAL __inf__
           =3 #endif // HUGE_VAL
           =3 
           =3 #ifndef NAN
           =3 #define NAN __nan__
           =3 #endif // NAN
           =3 
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif
  28      =3  
  29      =3  #pragma SAVE
  30      =3  #pragma REGPARMS
  31      =3  #if !defined (__CX2__)
  32      =3  extern char  cabs  (char  val);
  33      =3  extern int    abs  (int   val);
  34      =3  extern long  labs  (long  val);
  35      =3  #endif
  36      =3  
  37      =3  extern float fabs  (float val);
  38      =3  extern float sqrt  (float val);
  39      =3  extern float exp   (float val);
  40      =3  extern float log   (float val);
  41      =3  extern float log10 (float val);
  42      =3  extern float sin   (float val);
  43      =3  extern float cos   (float val);
  44      =3  extern float tan   (float val);
  45      =3  extern float asin  (float val);
  46      =3  extern float acos  (float val);
  47      =3  extern float atan  (float val);
  48      =3  extern float sinh  (float val);
  49      =3  extern float cosh  (float val);
  50      =3  extern float tanh  (float val);
  51      =3  extern float atan2 (float y, float x);
  52      =3  
  53      =3  extern float ceil  (float val);
  54      =3  extern float floor (float val);
  55      =3  extern float modf  (float val, float *n);
  56      =3  extern float fmod  (float x, float y);
  57      =3  extern float pow   (float x, float y);
  58      =3  
  59      =3  #if defined (__CX2__)
           =3 extern float frexp (float val, int *exp);
           =3 extern float ldexp (float val, int exp);
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 46  

           =3 #endif
  63      =3  
  64      =3  #pragma RESTORE
  65      =3  
  66      =3  #endif
 106      =2  #include "crc32.h"
   1      =3  #ifndef __CRC32_H__
   2      =3  #define __CRC32_H__
   3      =3  
   4      =3  //#ifdef __cplusplus
   5      =3  //extern "C" {
   6      =3  //#endif
   7      =3  /*****************************************************************************/
   8      =3  #include "AppConfig.h"
   1      =4  #ifndef __APPCONFIG_H__
           =4 #define __APPCONFIG_H__
           =4 /*****************************************************************************/
           =4 #define DEBUG_LED_ON                                            0
           =4 #define DEBUG_LED_OFF                                           1
           =4 #define CONFIG_SYSCLK                       (22118400L)
           =4 #ifdef C8051F020
           =4 #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
           =4 #endif
           =4 #define CONFIG_DEBUG                        0//调试功能
           =4 #define CONFIG_USING_WDT                                        0//使能看门狗
           =4 #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
           =4 #define CONFIG_VERSION                                          0x0001
           =4 #define CONFIG_CHECK_CODE                                       0x5AC1
           =4 #define CONFIG_USING_SIMULATION                         1
           =4 /*****************************************************************************/
           =4 #define CONFIG_UART0_BAUDRATE                           115200//串口波特率
           =4 #define CONFIG_UART0_PARITY                                     NONE
           =4 #define CONFIG_UART0_STOPBIT                            1
           =4 #define CONFIG_UART0_DATABIT                            8
           =4 
           =4 #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
           =4 #define CONFIG_UART1_PARITY                                     NONE
           =4 #define CONFIG_UART1_STOPBIT                            1
           =4 #define CONFIG_UART1_DATABIT                            8
           =4 /*****************************************************************************/
           =4 #define CONFIG_I2C0_FREQ                                        1               
           =4 /*****************************************************************************/
           =4 #define CONFIG_EPROM_DEBUG                                      0
           =4 #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
           =4 #define CONFIG_AT24C02_SIZE                             256
           =4 #define CONFIG_AT24C04_SIZE                             512
           =4 #define CONFIG_AT24C08_SIZE                             1024
           =4 #define CONFIG_AT24C16_SIZE                             2048
           =4 #define CONFIG_AT24C32_SIZE                             4096
           =4 #define CONFIG_AT24C64_SIZE                                     8192
           =4 #define CONFIG_AT24C128_SIZE                            16384
           =4 #define CONFIG_AT24C256_SIZE                            32768
           =4 #define CONFIG_EPROM_ADDRESS                            0x50
           =4 #define CONFIG_EPROM_FRAM                                       1//铁电存储体无写入等待
           =4 #define CONFIG_EPROM_PAGEWRITE                          0//页写入
           =4 /*****************************************************************************/
           =4 //SPLC设置
           =4 #define CONFIG_SPLC_ASSERT                                      0//检查地址范围
           =4 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =4 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_WDT                           1//看门狗启用
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 47  

           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_EPROM                         1//EPROM掉电存储启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_UART1                         1//UART1串口启用
           =4 #if CONFIG_SPLC_USING_UART1 == 1
           =4 #define SPLC_UART1                                                      1
           =4 #endif
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_ADC                           1//使能ADC模块
           =4 #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
           =4 #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =4 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
           =4 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
           =4 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =4 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =4 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =4 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =4 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =4 /*****************************************************************************/
           =4 /*****************************************************************************/
           =4 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =4 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =4 #define DISABLE_INTERRUPT                                       EA = 0;
           =4 #define ENABLE_INTERRUPT                                        EA = 1;
           =4 /*****************************************************************************/
           =4 //指示盒子
           =4 #define R_BOX_RED_SENDED                                        (R_START * 16 + 126)
           =4 #define R_BOX_GREEN_SENDED                                      (R_START * 16 + 127)
           =4 #define BOX_CMD_STX                                                     0x81
           =4 #define BOX_CMD_ETX                                                     0x84
           =4 #define BOX_SEND_BFADDR                                         (EM_START + 100)//发送缓冲区位置
           =4 #define BOX_SEND_LENGTH                                         29//发送数据量
           =4 /*****************************************************************************/
           =4 #include "stdint.h"
           =4 #include "stdbool.h"
           =4 #include "endian.h"
           =4 #include "si_toolchain.h"
           =4 #include "compiler_defs.h"
           =4 #include "C8051F020_defs.h"
           =4 /*****************************************************************************/
           =4 #include <stdio.h>
           =4 #include <stdlib.h> 
           =4 #include <string.h>
           =4 #include <INTRINS.H>
           =4 #include <ctype.h>
           =4 #include <LIMITS.H>
           =4 #include <math.h>
           =4 #include "crc32.h"
           =4 /*****************************************************************************/
           =4 #include "InitDeviceF020.h"
           =4 #include "delay.h"
           =4 #include "i2c0.h"
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 48  

           =4 #include "eprom.h"
           =4 #include "dac8568_0.h"
           =4 #include "dac8568_1.h"
           =4 #include "dac8568_2.h"
           =4 #include "dac8568_3.h"
           =4 #if CONFIG_SPLC_USING_UART1 == 1
           =4 #include "sPlcUart.h"
           =4 #endif
           =4 /*****************************************************************************/
           =4 #include "Modbus.h"
           =4 #include "ModbusPort.h"
           =4 /*****************************************************************************/
           =4 #include "sPLC.h"
           =4 /*****************************************************************************/
           =4 #endif
   9      =3  /*****************************************************************************/
  10      =3  uint32_t crc32Calculate(uint8_t *buf, uint32_t len);//CRC32 计算数组
  11      =3  uint32_t crc32CalculateAdd(uint8_t dat);//CRC32 计算连续字节
  12      =3  void crc32Clear(void);//清空旧CRC32结果
  13      =3  void crc32SetCrcOld(uint32_t old);
  14      =3  /*****************************************************************************/
  15      =3  //#ifdef __cplusplus
  16      =3  //}
  17      =3  //#endif
  18      =3  #endif
  19      =3  
  20      =3  
  21      =3  
 107      =2  /*****************************************************************************/
 108      =2  #include "InitDeviceF020.h"
   1      =3  #ifndef __INITDEVICEF020_H__
   2      =3  #define __INITDEVICEF020_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
           =2 #include "delay.h"
           =2 #include "i2c0.h"
           =2 #include "eprom.h"
           =2 #include "dac8568_0.h"
           =2 #include "dac8568_1.h"
           =2 #include "dac8568_2.h"
           =2 #include "dac8568_3.h"
           =2 #if CONFIG_SPLC_USING_UART1 == 1
           =2 #include "sPlcUart.h"
           =2 #endif
           =2 /*****************************************************************************/
           =2 #include "Modbus.h"
           =2 #include "ModbusPort.h"
           =2 /*****************************************************************************/
           =2 #include "sPLC.h"
           =2 /*****************************************************************************/
           =2 #endif
   4      =3  #ifndef __INITDEVICEF020_H__
   4      =3  #define __INITDEVICEF020_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void initDeviceF020(void);
   7      =3  #endif
   1      =3  #ifndef __DELAY_H__
   2      =3  #define __DELAY_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 49  

   4      =3  #ifndef __DELAY_H__
   4      =3  #define __DELAY_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void delayMs(uint8_t ms) reentrant;
   7      =3  void delayUs(uint8_t us) reentrant;
   8      =3  void hwDelayInit(uint8_t reload_h, uint8_t reload_l);
   9      =3  void hwDelay(uint8_t control, uint8_t reload_h, uint8_t reload_l);
  10      =3  /*****************************************************************************/
  11      =3  #endif
  12      =3  
   1      =3  #ifndef __I2C0_H__
   2      =3  #define __I2C0_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C0_H__
   4      =3  #define __I2C0_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic0Init(void);
   9      =3  void iic0Start(void);
  10      =3  void iic0Stop(void);
  11      =3  uint8_t iic0WaitAck(void);
  12      =3  void iic0Ack(void);
  13      =3  void iic0NAck(void);
  14      =3  void iic0SendByte(uint8_t txd);
  15      =3  uint8_t iic0ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __EPROM_H__
   2      =3  #define __EPROM_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __EPROM_H__
   4      =3  #define __EPROM_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  /*****************************************************************************/
   7      =3  void epromInit(void);
   8      =3  uint8_t epromReadOneByte(uint16_t ReadAddr);
   9      =3  void epromWriteOneByte(uint16_t WriteAddr, uint8_t DataToWrite);
  10      =3  void epromWriteLenByte(uint16_t WriteAddr, uint32_t DataToWrite, uint8_t Len);
  11      =3  uint32_t epromReadLenByte(uint16_t ReadAddr, uint8_t Len);
  12      =3  void epromRead(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead);
  13      =3  void epromWrite(uint16_t WriteAddr, uint8_t *pBuffer, uint16_t NumToWrite);
  14      =3  void epromTest(void);
  15      =3  #endif
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_0_Init(void);
   4      =3  void dac8568_0_Update(uint8_t ch);
   5      =3  void dac8568_0_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_0_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_0_Clear(void);
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 50  

   8      =3  void dac8568_0_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_1_Init(void);
   4      =3  void dac8568_1_Update(uint8_t ch);
   5      =3  void dac8568_1_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_1_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_1_Clear(void);
   8      =3  void dac8568_1_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_2_Init(void);
   4      =3  void dac8568_2_Update(uint8_t ch);
   5      =3  void dac8568_2_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_2_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_2_Clear(void);
   8      =3  void dac8568_2_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_3_Init(void);
   4      =3  void dac8568_3_Update(uint8_t ch);
   5      =3  void dac8568_3_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_3_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_3_Clear(void);
   8      =3  void dac8568_3_Reset(void);
   1      =3  #ifndef __SPLCUART_H__
   2      =3  #define __SPLCUART_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __SPLCUART_H__
   4      =3  #define __SPLCUART_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void initUart1(uint32_t baudrate);
   7      =3  void USEND(uint16_t port, uint16_t sendBufAdr, uint16_t length);//串口发送
   8      =3  void URECV(uint16_t port, uint16_t recvBufAdr, uint16_t length);//串口接收
   9      =3  #endif
   1      =3  #ifndef __MODBUS__H__
   2      =3  #define __MODBUS__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUS__H__
   4      =3  #define __MODBUS__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern volatile uint16_t modbusTimerValue;
   7      =3  extern volatile uint8_t modbusReceiveCounter;// Collected data number
   8      =3  extern xdata volatile uint8_t modbusReceiveBuffer[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];
   9      =3  /*****************************************************************************/
  10      =3  extern void initModbus(uint8_t modbusSlaveAddress, uint32_t bd);
  11      =3  extern void modbusPorcess(void);
  12      =3  #endif
   1      =3  #ifndef __MODBUSPORT__H__
   2      =3  #define __MODBUSPORT__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUSPORT__H__
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 51  

   4      =3  #define __MODBUSPORT__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern void modBusUartInitialise(uint32_t baudrate);
   7      =3  extern void modBusTimerInitialise(void);
   8      =3  extern void modBusUartPutch(uint8_t c);
   9      =3  extern uint8_t modBusUartString(uint8_t *s, uint16_t Length);
  10      =3  extern void receiveInterrupt(uint8_t Data);
  11      =3  /*****************************************************************************/
  12      =3  #endif
   1      =3  #ifndef __SPLC_H__
           =3 #define __SPLC_H__
           =3 /*****************************************************************************/
           =3 #include "appConfig.h"
           =3 /*****************************************************************************/
           =3 //线圈 保持 8 * 16 = 128BIT
           =3 #define MR_START                                                0
           =3 #define MR_END                                                  3
           =3 //线圈寄存器 非保持 8 * 16 = 128BIT
           =3 #define R_START                                                 4
           =3 #define R_END                                                   11
           =3 //数据寄存器 保持 8
           =3 #define DM_START                                                12
           =3 #define DM_END                                                  19
           =3 //数据寄存器 非保持 140个字
           =3 #define EM_START                                                20
           =3 #define EM_END                                                  159
           =3 //延时线圈
           =3 //1MS 1 * 16 = 16BIT
           =3 #define T_1MS_START                                             160
           =3 #define T_1MS_END                                               160
           =3 //10MS 1 * 16 = 16BIT
           =3 #define T_10MS_START                                    161
           =3 #define T_10MS_END                                              161
           =3 //100MS 1 * 16 = 16BIT
           =3 #define T_100MS_START                                   162
           =3 #define T_100MS_END                                             162
           =3 //延时计时器 
           =3 //1MS 16
           =3 #define TD_1MS_START                                    163
           =3 #define TD_1MS_END                                              178
           =3 //10MS 16
           =3 #define TD_10MS_START                                   179
           =3 #define TD_10MS_END                                             194
           =3 //100MS 16
           =3 #define TD_100MS_START                                  195
           =3 #define TD_100MS_END                                    210
           =3 //计数器 1
           =3 #define C_START                                                 211
           =3 #define C_END                                                   211
           =3 //输入位寄存器 1 * 16 = 16个
           =3 #define X_START                                                 212
           =3 #define X_END                                                   212             
           =3 //输出位寄存器 1 * 16 = 16个
           =3 #define Y_START                                                 213
           =3 #define Y_END                                                   213
           =3 //特殊寄存器 24个字
           =3 #define SPREG_START                                             214
           =3 #define SPREG_END                                               237
           =3 //特殊线圈      4 * 16 = 64个
           =3 #define SPCOIL_START                                    238
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 52  

           =3 #define SPCOIL_END                                              241
           =3 /*****************************************************************************/
           =3 #define EM_ADC_0                                                (EM_START + 0)//ADC0->MLD0
           =3 #define EM_ADC_1                                                (EM_START + 1)//ADC1->MLD1
           =3 #define EM_ADC_2                                                (EM_START + 2)//ADC2->MLD2
           =3 #define EM_ADC_3                                                (EM_START + 3)//ADC3->MLD3
           =3 #define EM_ADC_4                                                (EM_START + 4)//ADC4->MLD4
           =3 #define EM_ADC_5                                                (EM_START + 5)//ADC5->MLD5
           =3 #define EM_ADC_6                                                (EM_START + 6)//ADC6->MLD6
           =3 #define EM_ADC_7                                                (EM_START + 7)//ADC7->MLD7
           =3 #define EM_ADC_8                                                (EM_START + 8)//ADC8->MLD8
           =3 #define EM_ADC_9                                                (EM_START + 9)//ADC9->MLD9
           =3 #define EM_ADC_10                                               (EM_START + 10)//ADC10->MLD10
           =3 #define EM_ADC_11                                               (EM_START + 11)//ADC11->MLD11
           =3 #define EM_ADC_12                                               (EM_START + 12)//ADC12->MLD12
           =3 #define EM_ADC_13                                               (EM_START + 13)//ADC13->MLD13
           =3 #define EM_ADC_14                                               (EM_START + 14)//ADC14->MLD14
           =3 #define EM_ADC_15                                               (EM_START + 15)//ADC15->MLD15
           =3 #define EM_ADC_16                                               (EM_START + 16)//ADC16->MLD16
           =3 #define EM_ADC_17                                               (EM_START + 17)//ADC17->MLD17
           =3 #define EM_ADC_18                                               (EM_START + 18)//ADC18->MLD18
           =3 #define EM_ADC_19                                               (EM_START + 19)//ADC19->MLD19
           =3 #define EM_ADC_20                                               (EM_START + 20)//ADC20->MLD20
           =3 #define EM_ADC_21                                               (EM_START + 21)//ADC21->MLD21
           =3 #define EM_ADC_22                                               (EM_START + 22)//ADC22->MLD22
           =3 #define EM_ADC_23                                               (EM_START + 23)//ADC23->MLD23
           =3 #define EM_ADC_24                                               (EM_START + 24)//ADC24->MLD24
           =3 #define EM_ADC_25                                               (EM_START + 25)//ADC25->MLD25
           =3 #define EM_ADC_26                                               (EM_START + 26)//ADC26->MLD26
           =3 #define EM_ADC_27                                               (EM_START + 27)//ADC27->MLD27
           =3 #define EM_ADC_28                                               (EM_START + 28)//ADC28->MLD28
           =3 #define EM_ADC_29                                               (EM_START + 29)//ADC29->MLD29
           =3 #define EM_ADC_30                                               (EM_START + 30)//ADC30->MLD30
           =3 #define EM_ADC_31                                               (EM_START + 31)//ADC31->MLD31
           =3 #define EM_ADC_32                                               (EM_START + 32)//ADC32->MPD0
           =3 #define EM_ADC_33                                               (EM_START + 33)//ADC33->MPD1
           =3 #define EM_ADC_34                                               (EM_START + 34)//ADC34->MPD2
           =3 #define EM_ADC_35                                               (EM_START + 35)//ADC35->MPD3
           =3 #define EM_ADC_36                                               (EM_START + 36)//ADC36->MPD4
           =3 #define EM_ADC_37                                               (EM_START + 37)//ADC37->MPD5
           =3 #define EM_ADC_38                                               (EM_START + 38)//ADC38->MPD6
           =3 #define EM_ADC_39                                               (EM_START + 39)//ADC39->MPD7
           =3 #define EM_ADC_40                                               (EM_START + 40)//ADC40->MPD8
           =3 #define EM_ADC_41                                               (EM_START + 41)//ADC41->MPD9
           =3 #define EM_ADC_42                                               (EM_START + 42)//ADC42->MPD10
           =3 #define EM_ADC_43                                               (EM_START + 43)//ADC42->MPD11
           =3 #define EM_ADC_44                                               (EM_START + 44)//ADC42->MPD12
           =3 #define EM_ADC_45                                               (EM_START + 45)//ADC42->MPD13
           =3 #define EM_ADC_46                                               (EM_START + 46)//ADC42->MPD14
           =3 #define EM_ADC_47                                               (EM_START + 47)//ADC42->MPD15
           =3 #define EM_ADC_48                                               (EM_START + 48)//ADC42->MPD16
           =3 #define EM_ADC_49                                               (EM_START + 49)//ADC42->MPD17
           =3 #define EM_ADC_50                                               (EM_START + 50)//ADC42->MPD18
           =3 #define EM_ADC_51                                               (EM_START + 51)//ADC42->MPD19
           =3 #define EM_ADC_52                                               (EM_START + 52)//ADC42->MPD20
           =3 #define EM_ADC_53                                               (EM_START + 53)//ADC43->MPD21
           =3 #define EM_ADC_54                                               (EM_START + 54)//ADC44->MPD22
           =3 #define EM_ADC_55                                               (EM_START + 55)//ADC45->MPD23
           =3 #define EM_ADC_56                                               (EM_START + 56)//ADC46->MPD24
           =3 #define EM_ADC_57                                               (EM_START + 57)//ADC47->MPD25
           =3 #define EM_ADC_58                                               (EM_START + 58)//ADC48->MPD26
           =3 #define EM_ADC_59                                               (EM_START + 59)//ADC49->MPD27
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 53  

           =3 #define EM_ADC_60                                               (EM_START + 60)//ADC50->MPD28
           =3 #define EM_ADC_61                                               (EM_START + 61)//ADC50->MPD29
           =3 #define EM_ADC_62                                               (EM_START + 62)//ADC50->MPD30
           =3 #define EM_ADC_63                                               (EM_START + 63)//ADC50->MPD31
           =3 #define EM_DAC_0                                                (EM_START + 64)//DAC0
           =3 #define EM_DAC_1                                                (EM_START + 65)//DAC1
           =3 #define EM_DAC_2                                                (EM_START + 66)//DAC2
           =3 #define EM_DAC_3                                                (EM_START + 67)//DAC3
           =3 #define EM_DAC_4                                                (EM_START + 68)//DAC4
           =3 #define EM_DAC_5                                                (EM_START + 69)//DAC5
           =3 #define EM_DAC_6                                                (EM_START + 70)//DAC6
           =3 #define EM_DAC_7                                                (EM_START + 71)//DAC7
           =3 #define EM_DAC_8                                                (EM_START + 72)//DAC8
           =3 #define EM_DAC_9                                                (EM_START + 73)//DAC9
           =3 #define EM_DAC_10                                               (EM_START + 74)//DAC10
           =3 #define EM_DAC_11                                               (EM_START + 75)//DAC11
           =3 #define EM_DAC_12                                               (EM_START + 76)//DAC12
           =3 #define EM_DAC_13                                               (EM_START + 77)//DAC13
           =3 #define EM_DAC_14                                               (EM_START + 78)//DAC14
           =3 #define EM_DAC_15                                               (EM_START + 79)//DAC15
           =3 #define EM_DAC_16                                               (EM_START + 80)//DAC16
           =3 #define EM_DAC_17                                               (EM_START + 81)//DAC17
           =3 #define EM_DAC_18                                               (EM_START + 82)//DAC18
           =3 #define EM_DAC_19                                               (EM_START + 83)//DAC19
           =3 #define EM_DAC_20                                               (EM_START + 84)//DAC20
           =3 #define EM_DAC_21                                               (EM_START + 85)//DAC21
           =3 #define EM_DAC_22                                               (EM_START + 86)//DAC22
           =3 #define EM_DAC_23                                               (EM_START + 87)//DAC23
           =3 #define EM_DAC_24                                               (EM_START + 88)//DAC24
           =3 #define EM_DAC_25                                               (EM_START + 89)//DAC25
           =3 #define EM_DAC_26                                               (EM_START + 90)//DAC26
           =3 #define EM_DAC_27                                               (EM_START + 91)//DAC27
           =3 #define EM_DAC_28                                               (EM_START + 92)//DAC28
           =3 #define EM_DAC_29                                               (EM_START + 93)//DAC29
           =3 #define EM_DAC_30                                               (EM_START + 94)//DAC30
           =3 #define EM_DAC_31                                               (EM_START + 95)//DAC31
           =3 /*****************************************************************************/
           =3 #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
           =3 /*****************************************************************************/
           =3 #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
           =3 #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 1)//1mS间隔 50%占空比脉冲
           =3 #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 2)//10mS
           =3 #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 3)//100mS
           =3 #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 10)//UART1发送忙
           =3 #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 11)//UART1接收忙
           =3 #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 12)//发送完成
           =3 #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 13)//接收完成
           =3 #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 14)//UART1发送忙
           =3 #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 15)//UART1接收忙
           =3 #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 16)//发送完成
           =3 #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 17)//接收完成
           =3 /*****************************************************************************/
           =3 #define SPREG_MODBUS_SLAVE_ERR                  (SPREG_START + 0)//MODBUS SLAVE 错误码
           =3 #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
           =3 #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
           =3 #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
           =3 #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
           =3 #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
           =3 #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
           =3 /*****************************************************************************/
           =3 #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
           =3 #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 54  

           =3 #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
           =3 #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
           =3 #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
           =3 #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
           =3 /*****************************************************************************/
           =3 typedef struct{//ADC滤波器
           =3         uint16_t dat[CONFIG_SPLC_ADC_FILTER_TAP];
           =3         uint16_t out;
           =3         uint8_t wIndex;//写入指针
           =3 }adcTempDat_t;
           =3 /*****************************************************************************/
           =3 extern uint16_t ModbusSlaveAsciiOverTimeCounter;//Modbus Slave通信超时计时器
           =3 extern xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
           =3 extern xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
           =3 /*****************************************************************************/
           =3 void wdtDisable(void);//看门狗屏蔽
           =3 void sPlcInit(void);//软逻辑初始化
           =3 void sPlcProcessStart(void);//sPLC轮询起始
           =3 void sPlcProcessEnd(void);//sPLC轮询结束
           =3 /*****************************************************************************/
           =3 void assertCoilAddress(uint16_t adr) reentrant;
           =3 void assertRegisterAddress(uint16_t adr) reentrant;
           =3 /*****************************************************************************/
           =3 void nvramUpdata(void);
           =3 void clearDM(void);
           =3 void clearEM(void);
           =3 void clearR(void);
           =3 void clearT(void);
           =3 void clearTD(void);
           =3 void clearC(void);
           =3 void nvramLoad(void);
           =3 void nvramSave(void);
           =3 void nvramUpdata(void);
           =3 /*****************************************************************************/
           =3 void SET(uint16_t A) reentrant;//线圈置位
           =3 void RES(uint16_t A) reentrant;//线圈复位
           =3 void FLIP(uint16_t A) reentrant;//翻转
           =3 uint8_t LD(uint16_t A) reentrant;//载入
           =3 uint8_t LDB(uint16_t A) reentrant;//方向载入
           =3 uint8_t LDP(uint16_t A) reentrant;//脉冲上升沿
           =3 uint8_t LDN(uint16_t A) reentrant;//脉冲下降沿
           =3 void T100US(uint8_t A, uint8_t start, uint16_t value);
           =3 void T1MS(uint8_t A, uint8_t start, uint16_t value);
           =3 void T10MS(uint8_t A, uint8_t start, uint16_t value);
           =3 void T100MS(uint8_t A, uint8_t start, uint16_t value);
           =3 /*****************************************************************************/
           =3 void chipDacInit(void);
           =3 void chipAdcInit(void);
           =3 void sPlcInit(void);
           =3 void refreshInput(void);
           =3 void refreshOutput(void);
           =3 void refreshDac(void);
           =3 /*****************************************************************************/
           =3 #endif
   5      =1  /*****************************************************************************/
   6      =1  //线圈 保持 8 * 16 = 128BIT
   7      =1  #define MR_START                                                0
   8      =1  #define MR_END                                                  3
   9      =1  //线圈寄存器 非保持 8 * 16 = 128BIT
  10      =1  #define R_START                                                 4
  11      =1  #define R_END                                                   11
  12      =1  //数据寄存器 保持 8
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 55  

  13      =1  #define DM_START                                                12
  14      =1  #define DM_END                                                  19
  15      =1  //数据寄存器 非保持 140个字
  16      =1  #define EM_START                                                20
  17      =1  #define EM_END                                                  159
  18      =1  //延时线圈
  19      =1  //1MS 1 * 16 = 16BIT
  20      =1  #define T_1MS_START                                             160
  21      =1  #define T_1MS_END                                               160
  22      =1  //10MS 1 * 16 = 16BIT
  23      =1  #define T_10MS_START                                    161
  24      =1  #define T_10MS_END                                              161
  25      =1  //100MS 1 * 16 = 16BIT
  26      =1  #define T_100MS_START                                   162
  27      =1  #define T_100MS_END                                             162
  28      =1  //延时计时器 
  29      =1  //1MS 16
  30      =1  #define TD_1MS_START                                    163
  31      =1  #define TD_1MS_END                                              178
  32      =1  //10MS 16
  33      =1  #define TD_10MS_START                                   179
  34      =1  #define TD_10MS_END                                             194
  35      =1  //100MS 16
  36      =1  #define TD_100MS_START                                  195
  37      =1  #define TD_100MS_END                                    210
  38      =1  //计数器 1
  39      =1  #define C_START                                                 211
  40      =1  #define C_END                                                   211
  41      =1  //输入位寄存器 1 * 16 = 16个
  42      =1  #define X_START                                                 212
  43      =1  #define X_END                                                   212             
  44      =1  //输出位寄存器 1 * 16 = 16个
  45      =1  #define Y_START                                                 213
  46      =1  #define Y_END                                                   213
  47      =1  //特殊寄存器 24个字
  48      =1  #define SPREG_START                                             214
  49      =1  #define SPREG_END                                               237
  50      =1  //特殊线圈      4 * 16 = 64个
  51      =1  #define SPCOIL_START                                    238
  52      =1  #define SPCOIL_END                                              241
  53      =1  /*****************************************************************************/
  54      =1  #define EM_ADC_0                                                (EM_START + 0)//ADC0->MLD0
  55      =1  #define EM_ADC_1                                                (EM_START + 1)//ADC1->MLD1
  56      =1  #define EM_ADC_2                                                (EM_START + 2)//ADC2->MLD2
  57      =1  #define EM_ADC_3                                                (EM_START + 3)//ADC3->MLD3
  58      =1  #define EM_ADC_4                                                (EM_START + 4)//ADC4->MLD4
  59      =1  #define EM_ADC_5                                                (EM_START + 5)//ADC5->MLD5
  60      =1  #define EM_ADC_6                                                (EM_START + 6)//ADC6->MLD6
  61      =1  #define EM_ADC_7                                                (EM_START + 7)//ADC7->MLD7
  62      =1  #define EM_ADC_8                                                (EM_START + 8)//ADC8->MLD8
  63      =1  #define EM_ADC_9                                                (EM_START + 9)//ADC9->MLD9
  64      =1  #define EM_ADC_10                                               (EM_START + 10)//ADC10->MLD10
  65      =1  #define EM_ADC_11                                               (EM_START + 11)//ADC11->MLD11
  66      =1  #define EM_ADC_12                                               (EM_START + 12)//ADC12->MLD12
  67      =1  #define EM_ADC_13                                               (EM_START + 13)//ADC13->MLD13
  68      =1  #define EM_ADC_14                                               (EM_START + 14)//ADC14->MLD14
  69      =1  #define EM_ADC_15                                               (EM_START + 15)//ADC15->MLD15
  70      =1  #define EM_ADC_16                                               (EM_START + 16)//ADC16->MLD16
  71      =1  #define EM_ADC_17                                               (EM_START + 17)//ADC17->MLD17
  72      =1  #define EM_ADC_18                                               (EM_START + 18)//ADC18->MLD18
  73      =1  #define EM_ADC_19                                               (EM_START + 19)//ADC19->MLD19
  74      =1  #define EM_ADC_20                                               (EM_START + 20)//ADC20->MLD20
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 56  

  75      =1  #define EM_ADC_21                                               (EM_START + 21)//ADC21->MLD21
  76      =1  #define EM_ADC_22                                               (EM_START + 22)//ADC22->MLD22
  77      =1  #define EM_ADC_23                                               (EM_START + 23)//ADC23->MLD23
  78      =1  #define EM_ADC_24                                               (EM_START + 24)//ADC24->MLD24
  79      =1  #define EM_ADC_25                                               (EM_START + 25)//ADC25->MLD25
  80      =1  #define EM_ADC_26                                               (EM_START + 26)//ADC26->MLD26
  81      =1  #define EM_ADC_27                                               (EM_START + 27)//ADC27->MLD27
  82      =1  #define EM_ADC_28                                               (EM_START + 28)//ADC28->MLD28
  83      =1  #define EM_ADC_29                                               (EM_START + 29)//ADC29->MLD29
  84      =1  #define EM_ADC_30                                               (EM_START + 30)//ADC30->MLD30
  85      =1  #define EM_ADC_31                                               (EM_START + 31)//ADC31->MLD31
  86      =1  #define EM_ADC_32                                               (EM_START + 32)//ADC32->MPD0
  87      =1  #define EM_ADC_33                                               (EM_START + 33)//ADC33->MPD1
  88      =1  #define EM_ADC_34                                               (EM_START + 34)//ADC34->MPD2
  89      =1  #define EM_ADC_35                                               (EM_START + 35)//ADC35->MPD3
  90      =1  #define EM_ADC_36                                               (EM_START + 36)//ADC36->MPD4
  91      =1  #define EM_ADC_37                                               (EM_START + 37)//ADC37->MPD5
  92      =1  #define EM_ADC_38                                               (EM_START + 38)//ADC38->MPD6
  93      =1  #define EM_ADC_39                                               (EM_START + 39)//ADC39->MPD7
  94      =1  #define EM_ADC_40                                               (EM_START + 40)//ADC40->MPD8
  95      =1  #define EM_ADC_41                                               (EM_START + 41)//ADC41->MPD9
  96      =1  #define EM_ADC_42                                               (EM_START + 42)//ADC42->MPD10
  97      =1  #define EM_ADC_43                                               (EM_START + 43)//ADC42->MPD11
  98      =1  #define EM_ADC_44                                               (EM_START + 44)//ADC42->MPD12
  99      =1  #define EM_ADC_45                                               (EM_START + 45)//ADC42->MPD13
 100      =1  #define EM_ADC_46                                               (EM_START + 46)//ADC42->MPD14
 101      =1  #define EM_ADC_47                                               (EM_START + 47)//ADC42->MPD15
 102      =1  #define EM_ADC_48                                               (EM_START + 48)//ADC42->MPD16
 103      =1  #define EM_ADC_49                                               (EM_START + 49)//ADC42->MPD17
 104      =1  #define EM_ADC_50                                               (EM_START + 50)//ADC42->MPD18
 105      =1  #define EM_ADC_51                                               (EM_START + 51)//ADC42->MPD19
 106      =1  #define EM_ADC_52                                               (EM_START + 52)//ADC42->MPD20
 107      =1  #define EM_ADC_53                                               (EM_START + 53)//ADC43->MPD21
 108      =1  #define EM_ADC_54                                               (EM_START + 54)//ADC44->MPD22
 109      =1  #define EM_ADC_55                                               (EM_START + 55)//ADC45->MPD23
 110      =1  #define EM_ADC_56                                               (EM_START + 56)//ADC46->MPD24
 111      =1  #define EM_ADC_57                                               (EM_START + 57)//ADC47->MPD25
 112      =1  #define EM_ADC_58                                               (EM_START + 58)//ADC48->MPD26
 113      =1  #define EM_ADC_59                                               (EM_START + 59)//ADC49->MPD27
 114      =1  #define EM_ADC_60                                               (EM_START + 60)//ADC50->MPD28
 115      =1  #define EM_ADC_61                                               (EM_START + 61)//ADC50->MPD29
 116      =1  #define EM_ADC_62                                               (EM_START + 62)//ADC50->MPD30
 117      =1  #define EM_ADC_63                                               (EM_START + 63)//ADC50->MPD31
 118      =1  #define EM_DAC_0                                                (EM_START + 64)//DAC0
 119      =1  #define EM_DAC_1                                                (EM_START + 65)//DAC1
 120      =1  #define EM_DAC_2                                                (EM_START + 66)//DAC2
 121      =1  #define EM_DAC_3                                                (EM_START + 67)//DAC3
 122      =1  #define EM_DAC_4                                                (EM_START + 68)//DAC4
 123      =1  #define EM_DAC_5                                                (EM_START + 69)//DAC5
 124      =1  #define EM_DAC_6                                                (EM_START + 70)//DAC6
 125      =1  #define EM_DAC_7                                                (EM_START + 71)//DAC7
 126      =1  #define EM_DAC_8                                                (EM_START + 72)//DAC8
 127      =1  #define EM_DAC_9                                                (EM_START + 73)//DAC9
 128      =1  #define EM_DAC_10                                               (EM_START + 74)//DAC10
 129      =1  #define EM_DAC_11                                               (EM_START + 75)//DAC11
 130      =1  #define EM_DAC_12                                               (EM_START + 76)//DAC12
 131      =1  #define EM_DAC_13                                               (EM_START + 77)//DAC13
 132      =1  #define EM_DAC_14                                               (EM_START + 78)//DAC14
 133      =1  #define EM_DAC_15                                               (EM_START + 79)//DAC15
 134      =1  #define EM_DAC_16                                               (EM_START + 80)//DAC16
 135      =1  #define EM_DAC_17                                               (EM_START + 81)//DAC17
 136      =1  #define EM_DAC_18                                               (EM_START + 82)//DAC18
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 57  

 137      =1  #define EM_DAC_19                                               (EM_START + 83)//DAC19
 138      =1  #define EM_DAC_20                                               (EM_START + 84)//DAC20
 139      =1  #define EM_DAC_21                                               (EM_START + 85)//DAC21
 140      =1  #define EM_DAC_22                                               (EM_START + 86)//DAC22
 141      =1  #define EM_DAC_23                                               (EM_START + 87)//DAC23
 142      =1  #define EM_DAC_24                                               (EM_START + 88)//DAC24
 143      =1  #define EM_DAC_25                                               (EM_START + 89)//DAC25
 144      =1  #define EM_DAC_26                                               (EM_START + 90)//DAC26
 145      =1  #define EM_DAC_27                                               (EM_START + 91)//DAC27
 146      =1  #define EM_DAC_28                                               (EM_START + 92)//DAC28
 147      =1  #define EM_DAC_29                                               (EM_START + 93)//DAC29
 148      =1  #define EM_DAC_30                                               (EM_START + 94)//DAC30
 149      =1  #define EM_DAC_31                                               (EM_START + 95)//DAC31
 150      =1  /*****************************************************************************/
 151      =1  #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
 152      =1  /*****************************************************************************/
 153      =1  #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
 154      =1  #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 1)//1mS间隔 50%占空比脉冲
 155      =1  #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 2)//10mS
 156      =1  #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 3)//100mS
 157      =1  #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 10)//UART1发送忙
 158      =1  #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 11)//UART1接收忙
 159      =1  #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 12)//发送完成
 160      =1  #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 13)//接收完成
 161      =1  #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 14)//UART1发送忙
 162      =1  #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 15)//UART1接收忙
 163      =1  #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 16)//发送完成
 164      =1  #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 17)//接收完成
 165      =1  /*****************************************************************************/
 166      =1  #define SPREG_MODBUS_SLAVE_ERR                  (SPREG_START + 0)//MODBUS SLAVE 错误码
 167      =1  #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
 168      =1  #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
 169      =1  #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
 170      =1  #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
 171      =1  #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
 172      =1  #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
 173      =1  /*****************************************************************************/
 174      =1  #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
 175      =1  #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
 176      =1  #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
 177      =1  #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
 178      =1  #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
 179      =1  #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
 180      =1  /*****************************************************************************/
 181      =1  typedef struct{//ADC滤波器
 182      =1          uint16_t dat[CONFIG_SPLC_ADC_FILTER_TAP];
 183      =1          uint16_t out;
 184      =1          uint8_t wIndex;//写入指针
 185      =1  }adcTempDat_t;
 186      =1  /*****************************************************************************/
 187      =1  extern uint16_t ModbusSlaveAsciiOverTimeCounter;//Modbus Slave通信超时计时器
 188      =1  extern xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
 189      =1  extern xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
 190      =1  /*****************************************************************************/
 191      =1  void wdtDisable(void);//看门狗屏蔽
 192      =1  void sPlcInit(void);//软逻辑初始化
 193      =1  void sPlcProcessStart(void);//sPLC轮询起始
 194      =1  void sPlcProcessEnd(void);//sPLC轮询结束
 195      =1  /*****************************************************************************/
 196      =1  void assertCoilAddress(uint16_t adr) reentrant;
 197      =1  void assertRegisterAddress(uint16_t adr) reentrant;
 198      =1  /*****************************************************************************/
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 58  

 199      =1  void nvramUpdata(void);
 200      =1  void clearDM(void);
 201      =1  void clearEM(void);
 202      =1  void clearR(void);
 203      =1  void clearT(void);
 204      =1  void clearTD(void);
 205      =1  void clearC(void);
 206      =1  void nvramLoad(void);
 207      =1  void nvramSave(void);
 208      =1  void nvramUpdata(void);
 209      =1  /*****************************************************************************/
 210      =1  void SET(uint16_t A) reentrant;//线圈置位
 211      =1  void RES(uint16_t A) reentrant;//线圈复位
 212      =1  void FLIP(uint16_t A) reentrant;//翻转
 213      =1  uint8_t LD(uint16_t A) reentrant;//载入
 214      =1  uint8_t LDB(uint16_t A) reentrant;//方向载入
 215      =1  uint8_t LDP(uint16_t A) reentrant;//脉冲上升沿
 216      =1  uint8_t LDN(uint16_t A) reentrant;//脉冲下降沿
 217      =1  void T100US(uint8_t A, uint8_t start, uint16_t value);
 218      =1  void T1MS(uint8_t A, uint8_t start, uint16_t value);
 219      =1  void T10MS(uint8_t A, uint8_t start, uint16_t value);
 220      =1  void T100MS(uint8_t A, uint8_t start, uint16_t value);
 221      =1  /*****************************************************************************/
 222      =1  void chipDacInit(void);
 223      =1  void chipAdcInit(void);
 224      =1  void sPlcInit(void);
 225      =1  void refreshInput(void);
 226      =1  void refreshOutput(void);
 227      =1  void refreshDac(void);
 228      =1  /*****************************************************************************/
 229      =1  #endif
   2          /*****************************************************************************/
   3          
   4          //ADC MUX3253 CH0-CH3
   5          sbit ADCMUX_0_3_S0 = P1^4;
   6          sbit ADCMUX_0_3_S1 = P1^7;
   7          sbit ADCMUX_0_3_OE1 = P1^6;
   8          sbit ADCMUX_0_3_OE2 = P1^5;
   9          //ADC MUX3253 CH4-CH7
  10          sbit ADCMUX_4_7_S0 = P1^2;
  11          sbit ADCMUX_4_7_S1 = P1^1;
  12          sbit ADCMUC_4_7_OE1 = P1^0;
  13          sbit ADCMUC_4_7_OE2 = P1^3;
  14          //ADC MUX3253 CH8-CH11
  15          sbit ADCMUX_8_11_S0 = P2^4;
  16          sbit ADCMUX_8_11_S1 = P2^6;
  17          sbit ADCMUX_8_11_OE1 = P2^7;
  18          sbit ADCMUX_8_11_OE2 = P2^5;
  19          //ADC MUX3253 CH12-CH15
  20          sbit ADCMUX_12_15_S0 = P2^0;
  21          sbit ADCMUX_12_15_S1 = P2^2;
  22          sbit ADCMUX_12_15_OE1 = P2^3;
  23          sbit ADCMUX_12_15_OE2 = P2^1;
  24          //ADC MUX3253 CH16-CH19
  25          sbit ADCMUX_16_19_S0 = P3^5;
  26          sbit ADCMUX_16_19_S1 = P3^7;
  27          sbit ADCMUX_16_19_OE1 = P3^6;
  28          sbit ADCMUX_16_19_OE2 = P3^4;
  29          //ADC MUX3253 CH20-CH23
  30          sbit ADCMUX_20_23_S0 = P3^1;
  31          sbit ADCMUX_20_23_S1 = P3^3;
  32          sbit ADCMUX_20_23_OE1 = P3^2;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 59  

  33          sbit ADCMUX_20_23_OE2 = P3^0;
  34          //ADC MUX3253 CH24-CH27
  35          sbit ADCMUX_24_27_S0 = P0^5;
  36          sbit ADCMUX_24_27_S1 = P0^7;
  37          sbit ADCMUX_24_27_OE1 = P0^6;
  38          sbit ADCMUX_24_27_OE2 = P0^4;
  39          /*****************************************************************************/
  40          xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
  41          xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
  42          static idata uint8_t TimerCounter_1mS = 0;
  43          static idata uint8_t TimerCounter_10mS = 0;
  44          static idata uint8_t Timer0_L, Timer0_H;
  45          /*****************************************************************************/
  46          static idata int8_t inputFilter[(X_END - X_START + 1) * 16];//IO输入滤波器缓冲区
  47          static xdata adcTempDat_t adcTempDat[CONFIG_SPLC_ADC_CHANNLE];
  48          static idata uint8_t adcSelect;//ADC通道选择
  49          static void refreshAdcData(adcTempDat_t *s , uint16_t dat);
  50          static void adcProcess(void);
  51          static void initAdcData(adcTempDat_t *s);
  52          static void chipDacInit(void);
  53          static void chipAdcInit(void);
  54          /******************************************************************************/
  55          static uint8_t getGlobalInterrupt(void){
  56   1              return EA;
  57   1      }
  58          static void setLedRun(uint8_t st){//LED RUN P7_0
  59   1              if(st){
  60   2                      P7 |= (uint8_t)(1 << 0);
  61   2              }
  62   1              else{
  63   2                      P7 &= ~(uint8_t)(1 << 0);
  64   2              }
  65   1      }
  66          static uint8_t getLedRun(void){//LED RUN P7_0
  67   1              return (uint8_t)((P7 >> 0) & 0x01);
  68   1      }
  69          static void setLedEprom(uint8_t st){//LED EPROM P7_1
  70   1              if(st){
  71   2                      P7 |= (uint8_t)(1 << 1);
  72   2              }
  73   1              else{
  74   2                      P7 &= ~(uint8_t)(1 << 1);
  75   2              }
  76   1      }
  77          static uint8_t getLedEprom(void){//LED EPROM P7_1
  78   1              return (uint8_t)((P7 >> 1) & 0x01);
  79   1      }
  80          static void setLedDac(uint8_t st){//LED DAC P7_2
  81   1              if(st){
  82   2                      P7 |= (uint8_t)(1 << 2);
  83   2              }
  84   1              else{
  85   2                      P7 &= ~(uint8_t)(1 << 2);
  86   2              }
  87   1      }
  88          static uint8_t getLedDac(void){//LED DAC P7_2
  89   1              return (uint8_t)((P7 >> 2) & 0x01);
  90   1      }
  91          static void setLedError(uint8_t st){//LED ERROR P7_3
  92   1              if(st){
  93   2                      P7 |= (uint8_t)(1 << 3);
  94   2              }
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 60  

  95   1              else{
  96   2                      P7 &= ~(uint8_t)(1 << 3);
  97   2              }
  98   1      }
  99          static uint8_t getLedError(void) reentrant{
 100   1              return (uint8_t)((P7 >> 3) & 0x01);
 101   1      }
 102          static void adcProcess(void){//循环采集ADC
 103   1              uint16_t result = 0;
 104   1      #ifdef C8051F020
 105   1              while(!AD0INT);
 106   1      #endif
 107   1              result = (ADC0 & 0xFFF);
 108   1              refreshAdcData(&adcTempDat[adcSelect], result);
 109   1              NVRAM0[EM_ADC_0 + adcSelect] = adcTempDat[adcSelect].out;
 110   1              if(adcSelect < (CONFIG_SPLC_ADC_CHANNLE - 1)){
 111   2                      adcSelect ++;
 112   2              }
 113   1              else{
 114   2                      adcSelect = 0;
 115   2              }
 116   1              switch(adcSelect){
 117   2                      case 0:{//MLD0
 118   3                              //ADC MUX
 119   3                              AMX0SL = 0x00;
 120   3                              //CHIP0
 121   3                              ADCMUX_0_3_OE1 = true;
 122   3                              ADCMUX_0_3_OE2 = true;
 123   3                              ADCMUX_0_3_S1 = false;
 124   3                              ADCMUX_0_3_S0 = true;
 125   3                              //CHIP1
 126   3                              ADCMUC_4_7_OE1 = true;
 127   3                              ADCMUC_4_7_OE2 = true;
 128   3                              //CHIP2
 129   3                              ADCMUX_8_11_OE1 = true;
 130   3                              ADCMUX_8_11_OE2 = true;
 131   3                              //CHIP3
 132   3                              ADCMUX_12_15_OE1 = true;
 133   3                              ADCMUX_12_15_OE2 = true;
 134   3                              //CHIP4
 135   3                              ADCMUX_16_19_OE1 = true;
 136   3                              ADCMUX_16_19_OE2 = true;
 137   3                              //CHIP5
 138   3                              ADCMUX_20_23_OE1 = true;
 139   3                              ADCMUX_20_23_OE2 = true;
 140   3                              //CHIP6
 141   3                              ADCMUX_24_27_OE1 = true;
 142   3                              ADCMUX_24_27_OE2 = true;
 143   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 144   3                              ADCMUX_0_3_OE1 = false;
 145   3                              ADCMUX_0_3_OE2 = true;
 146   3                              break;
 147   3                      }
 148   2                      case 1:{//MLD1
 149   3                              //ADC MUX
 150   3                              AMX0SL = 0x00;
 151   3                              //CHIP0
 152   3                              ADCMUX_0_3_OE1 = true;
 153   3                              ADCMUX_0_3_OE2 = true;
 154   3                              ADCMUX_0_3_S1 = true;
 155   3                              ADCMUX_0_3_S0 = true;
 156   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 61  

 157   3                              ADCMUC_4_7_OE1 = true;
 158   3                              ADCMUC_4_7_OE2 = true;
 159   3                              //CHIP2
 160   3                              ADCMUX_8_11_OE1 = true;
 161   3                              ADCMUX_8_11_OE2 = true;
 162   3                              //CHIP3
 163   3                              ADCMUX_12_15_OE1 = true;
 164   3                              ADCMUX_12_15_OE2 = true;
 165   3                              //CHIP4
 166   3                              ADCMUX_16_19_OE1 = true;
 167   3                              ADCMUX_16_19_OE2 = true;
 168   3                              //CHIP5
 169   3                              ADCMUX_20_23_OE1 = true;
 170   3                              ADCMUX_20_23_OE2 = true;
 171   3                              //CHIP6
 172   3                              ADCMUX_24_27_OE1 = true;
 173   3                              ADCMUX_24_27_OE2 = true;
 174   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 175   3                              ADCMUX_0_3_OE1 = false;
 176   3                              ADCMUX_0_3_OE2 = true;
 177   3                              break;
 178   3                      }
 179   2                      case 2:{//MLD2
 180   3                              //ADC MUX
 181   3                              AMX0SL = 0x00;
 182   3                              //CHIP0
 183   3                              ADCMUX_0_3_OE1 = true;
 184   3                              ADCMUX_0_3_OE2 = true;
 185   3                              ADCMUX_0_3_S1 = false;
 186   3                              ADCMUX_0_3_S0 = true;
 187   3                              //CHIP1
 188   3                              ADCMUC_4_7_OE1 = true;
 189   3                              ADCMUC_4_7_OE2 = true;
 190   3                              //CHIP2
 191   3                              ADCMUX_8_11_OE1 = true;
 192   3                              ADCMUX_8_11_OE2 = true;
 193   3                              //CHIP3
 194   3                              ADCMUX_12_15_OE1 = true;
 195   3                              ADCMUX_12_15_OE2 = true;
 196   3                              //CHIP4
 197   3                              ADCMUX_16_19_OE1 = true;
 198   3                              ADCMUX_16_19_OE2 = true;
 199   3                              //CHIP5
 200   3                              ADCMUX_20_23_OE1 = true;
 201   3                              ADCMUX_20_23_OE2 = true;
 202   3                              //CHIP6
 203   3                              ADCMUX_24_27_OE1 = true;
 204   3                              ADCMUX_24_27_OE2 = true;
 205   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 206   3                              ADCMUX_0_3_OE1 = true;
 207   3                              ADCMUX_0_3_OE2 = false;
 208   3                              break;
 209   3                      }
 210   2                      case 3:{//MLD3
 211   3                              //ADC MUX
 212   3                              AMX0SL = 0x00;
 213   3                              //CHIP0
 214   3                              ADCMUX_0_3_OE1 = true;
 215   3                              ADCMUX_0_3_OE2 = true;
 216   3                              ADCMUX_0_3_S1 = true;
 217   3                              ADCMUX_0_3_S0 = true;
 218   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 62  

 219   3                              ADCMUC_4_7_OE1 = true;
 220   3                              ADCMUC_4_7_OE2 = true;
 221   3                              //CHIP2
 222   3                              ADCMUX_8_11_OE1 = true;
 223   3                              ADCMUX_8_11_OE2 = true;
 224   3                              //CHIP3
 225   3                              ADCMUX_12_15_OE1 = true;
 226   3                              ADCMUX_12_15_OE2 = true;
 227   3                              //CHIP4
 228   3                              ADCMUX_16_19_OE1 = true;
 229   3                              ADCMUX_16_19_OE2 = true;
 230   3                              //CHIP5
 231   3                              ADCMUX_20_23_OE1 = true;
 232   3                              ADCMUX_20_23_OE2 = true;
 233   3                              //CHIP6
 234   3                              ADCMUX_24_27_OE1 = true;
 235   3                              ADCMUX_24_27_OE2 = true;
 236   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 237   3                              ADCMUX_0_3_OE1 = true;
 238   3                              ADCMUX_0_3_OE2 = false;
 239   3                              break;
 240   3                      }
 241   2                      case 4:{//MLD4
 242   3                              //ADC MUX
 243   3                              AMX0SL = 0x01;
 244   3                              //CHIP0
 245   3                              ADCMUX_0_3_OE1 = true;
 246   3                              ADCMUX_0_3_OE2 = true;
 247   3                              //CHIP1
 248   3                              ADCMUC_4_7_OE1 = true;
 249   3                              ADCMUC_4_7_OE2 = true;
 250   3                              ADCMUX_4_7_S1 = false;
 251   3                              ADCMUX_4_7_S0 = true;
 252   3                              //CHIP2
 253   3                              ADCMUX_8_11_OE1 = true;
 254   3                              ADCMUX_8_11_OE2 = true;
 255   3                              //CHIP3
 256   3                              ADCMUX_12_15_OE1 = true;
 257   3                              ADCMUX_12_15_OE2 = true;
 258   3                              //CHIP4
 259   3                              ADCMUX_16_19_OE1 = true;
 260   3                              ADCMUX_16_19_OE2 = true;
 261   3                              //CHIP5
 262   3                              ADCMUX_20_23_OE1 = true;
 263   3                              ADCMUX_20_23_OE2 = true;
 264   3                              //CHIP6
 265   3                              ADCMUX_24_27_OE1 = true;
 266   3                              ADCMUX_24_27_OE2 = true;
 267   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 268   3                              ADCMUC_4_7_OE1 = false;
 269   3                              ADCMUC_4_7_OE2 = true;
 270   3                              break;
 271   3                      }
 272   2                      case 5:{//MLD5
 273   3                              //ADC MUX
 274   3                              AMX0SL = 0x01;
 275   3                              //CHIP0
 276   3                              ADCMUX_0_3_OE1 = true;
 277   3                              ADCMUX_0_3_OE2 = true;
 278   3                              //CHIP1
 279   3                              ADCMUC_4_7_OE1 = true;
 280   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 63  

 281   3                              ADCMUX_0_3_S1 = true;
 282   3                              ADCMUX_0_3_S0 = true;
 283   3                              //CHIP2
 284   3                              ADCMUX_8_11_OE1 = true;
 285   3                              ADCMUX_8_11_OE2 = true;
 286   3                              //CHIP3
 287   3                              ADCMUX_12_15_OE1 = true;
 288   3                              ADCMUX_12_15_OE2 = true;
 289   3                              //CHIP4
 290   3                              ADCMUX_16_19_OE1 = true;
 291   3                              ADCMUX_16_19_OE2 = true;
 292   3                              //CHIP5
 293   3                              ADCMUX_20_23_OE1 = true;
 294   3                              ADCMUX_20_23_OE2 = true;
 295   3                              //CHIP6
 296   3                              ADCMUX_24_27_OE1 = true;
 297   3                              ADCMUX_24_27_OE2 = true;
 298   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 299   3                              ADCMUC_4_7_OE1 = false;
 300   3                              ADCMUC_4_7_OE2 = true;
 301   3                              break;
 302   3                      }
 303   2                      case 6:{//MLD6
 304   3                              //ADC MUX
 305   3                              AMX0SL = 0x01;
 306   3                              //CHIP0
 307   3                              ADCMUX_0_3_OE1 = true;
 308   3                              ADCMUX_0_3_OE2 = true;
 309   3                              //CHIP1
 310   3                              ADCMUC_4_7_OE1 = true;
 311   3                              ADCMUC_4_7_OE2 = true;
 312   3                              ADCMUX_4_7_S1 = true;
 313   3                              ADCMUX_4_7_S0 = true;
 314   3                              //CHIP2
 315   3                              ADCMUX_8_11_OE1 = true;
 316   3                              ADCMUX_8_11_OE2 = true;
 317   3                              //CHIP3
 318   3                              ADCMUX_12_15_OE1 = true;
 319   3                              ADCMUX_12_15_OE2 = true;
 320   3                              //CHIP4
 321   3                              ADCMUX_16_19_OE1 = true;
 322   3                              ADCMUX_16_19_OE2 = true;
 323   3                              //CHIP5
 324   3                              ADCMUX_20_23_OE1 = true;
 325   3                              ADCMUX_20_23_OE2 = true;
 326   3                              //CHIP6
 327   3                              ADCMUX_24_27_OE1 = true;
 328   3                              ADCMUX_24_27_OE2 = true;
 329   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 330   3                              ADCMUC_4_7_OE1 = true;
 331   3                              ADCMUC_4_7_OE2 = false;
 332   3                              break;
 333   3                      }
 334   2                      case 7:{//MLD7
 335   3                              //ADC MUX
 336   3                              AMX0SL = 0x01;
 337   3                              //CHIP0
 338   3                              ADCMUX_0_3_OE1 = true;
 339   3                              ADCMUX_0_3_OE2 = true;
 340   3                              //CHIP1
 341   3                              ADCMUC_4_7_OE1 = true;
 342   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 64  

 343   3                              ADCMUX_4_7_S1 = true;
 344   3                              ADCMUX_4_7_S0 = true;
 345   3                              //CHIP2
 346   3                              ADCMUX_8_11_OE1 = true;
 347   3                              ADCMUX_8_11_OE2 = true;
 348   3                              //CHIP3
 349   3                              ADCMUX_12_15_OE1 = true;
 350   3                              ADCMUX_12_15_OE2 = true;
 351   3                              //CHIP4
 352   3                              ADCMUX_16_19_OE1 = true;
 353   3                              ADCMUX_16_19_OE2 = true;
 354   3                              //CHIP5
 355   3                              ADCMUX_20_23_OE1 = true;
 356   3                              ADCMUX_20_23_OE2 = true;
 357   3                              //CHIP6
 358   3                              ADCMUX_24_27_OE1 = true;
 359   3                              ADCMUX_24_27_OE2 = true;
 360   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 361   3                              ADCMUC_4_7_OE1 = true;
 362   3                              ADCMUC_4_7_OE2 = false;
 363   3                              break;
 364   3                      }
 365   2                      case 8:{//MLD8
 366   3                              //ADC MUX
 367   3                              AMX0SL = 0x02;
 368   3                              //CHIP0
 369   3                              ADCMUX_0_3_OE1 = true;
 370   3                              ADCMUX_0_3_OE2 = true;
 371   3                              //CHIP1
 372   3                              ADCMUC_4_7_OE1 = true;
 373   3                              ADCMUC_4_7_OE2 = true;
 374   3                              //CHIP2
 375   3                              ADCMUX_8_11_OE1 = true;
 376   3                              ADCMUX_8_11_OE2 = true;
 377   3                              ADCMUX_8_11_S1 = false;
 378   3                              ADCMUX_8_11_S0 = true;
 379   3                              //CHIP3
 380   3                              ADCMUX_12_15_OE1 = true;
 381   3                              ADCMUX_12_15_OE2 = true;
 382   3                              //CHIP4
 383   3                              ADCMUX_16_19_OE1 = true;
 384   3                              ADCMUX_16_19_OE2 = true;
 385   3                              //CHIP5
 386   3                              ADCMUX_20_23_OE1 = true;
 387   3                              ADCMUX_20_23_OE2 = true;
 388   3                              //CHIP6
 389   3                              ADCMUX_24_27_OE1 = true;
 390   3                              ADCMUX_24_27_OE2 = true;
 391   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 392   3                              ADCMUX_8_11_OE1 = false;
 393   3                              ADCMUX_8_11_OE2 = true;
 394   3                              break;
 395   3                      }
 396   2                      case 9:{//MLD9
 397   3                              //ADC MUX
 398   3                              AMX0SL = 0x02;
 399   3                              //CHIP0
 400   3                              ADCMUX_0_3_OE1 = true;
 401   3                              ADCMUX_0_3_OE2 = true;
 402   3                              //CHIP1
 403   3                              ADCMUC_4_7_OE1 = true;
 404   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 65  

 405   3                              //CHIP2
 406   3                              ADCMUX_8_11_OE1 = true;
 407   3                              ADCMUX_8_11_OE2 = true;
 408   3                              ADCMUX_8_11_S1 = true;
 409   3                              ADCMUX_8_11_S0 = true;
 410   3                              //CHIP3
 411   3                              ADCMUX_12_15_OE1 = true;
 412   3                              ADCMUX_12_15_OE2 = true;
 413   3                              //CHIP4
 414   3                              ADCMUX_16_19_OE1 = true;
 415   3                              ADCMUX_16_19_OE2 = true;
 416   3                              //CHIP5
 417   3                              ADCMUX_20_23_OE1 = true;
 418   3                              ADCMUX_20_23_OE2 = true;
 419   3                              //CHIP6
 420   3                              ADCMUX_24_27_OE1 = true;
 421   3                              ADCMUX_24_27_OE2 = true;
 422   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 423   3                              ADCMUX_8_11_OE1 = false;
 424   3                              ADCMUX_8_11_OE2 = true;
 425   3                              break;
 426   3                      }
 427   2                      case 10:{//MLD10
 428   3                              //ADC MUX
 429   3                              AMX0SL = 0x02;
 430   3                              //CHIP0
 431   3                              ADCMUX_0_3_OE1 = true;
 432   3                              ADCMUX_0_3_OE2 = true;
 433   3                              //CHIP1
 434   3                              ADCMUC_4_7_OE1 = true;
 435   3                              ADCMUC_4_7_OE2 = true;
 436   3                              //CHIP2
 437   3                              ADCMUX_8_11_OE1 = true;
 438   3                              ADCMUX_8_11_OE2 = true;
 439   3                              ADCMUX_8_11_S1 = false;
 440   3                              ADCMUX_8_11_S0 = true;
 441   3                              //CHIP3
 442   3                              ADCMUX_12_15_OE1 = true;
 443   3                              ADCMUX_12_15_OE2 = true;
 444   3                              //CHIP4
 445   3                              ADCMUX_16_19_OE1 = true;
 446   3                              ADCMUX_16_19_OE2 = true;
 447   3                              //CHIP5
 448   3                              ADCMUX_20_23_OE1 = true;
 449   3                              ADCMUX_20_23_OE2 = true;
 450   3                              //CHIP6
 451   3                              ADCMUX_24_27_OE1 = true;
 452   3                              ADCMUX_24_27_OE2 = true;
 453   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 454   3                              ADCMUX_8_11_OE1 = true;
 455   3                              ADCMUX_8_11_OE2 = false;
 456   3                              break;
 457   3                      }
 458   2                      case 11:{//MLD11
 459   3                              //ADC MUX
 460   3                              AMX0SL = 0x02;
 461   3                              //CHIP0
 462   3                              ADCMUX_0_3_OE1 = true;
 463   3                              ADCMUX_0_3_OE2 = true;
 464   3                              //CHIP1
 465   3                              ADCMUC_4_7_OE1 = true;
 466   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 66  

 467   3                              //CHIP2
 468   3                              ADCMUX_8_11_OE1 = true;
 469   3                              ADCMUX_8_11_OE2 = true;
 470   3                              ADCMUX_8_11_S1 = true;
 471   3                              ADCMUX_8_11_S0 = true;
 472   3                              //CHIP3
 473   3                              ADCMUX_12_15_OE1 = true;
 474   3                              ADCMUX_12_15_OE2 = true;
 475   3                              //CHIP4
 476   3                              ADCMUX_16_19_OE1 = true;
 477   3                              ADCMUX_16_19_OE2 = true;
 478   3                              //CHIP5
 479   3                              ADCMUX_20_23_OE1 = true;
 480   3                              ADCMUX_20_23_OE2 = true;
 481   3                              //CHIP6
 482   3                              ADCMUX_24_27_OE1 = true;
 483   3                              ADCMUX_24_27_OE2 = true;
 484   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 485   3                              ADCMUX_8_11_OE1 = true;
 486   3                              ADCMUX_8_11_OE2 = false;
 487   3                              break;
 488   3                      }
 489   2                      case 12:{//MLD12
 490   3                              //ADC MUX
 491   3                              AMX0SL = 0x03;
 492   3                              //CHIP0
 493   3                              ADCMUX_0_3_OE1 = true;
 494   3                              ADCMUX_0_3_OE2 = true;
 495   3                              //CHIP1
 496   3                              ADCMUC_4_7_OE1 = true;
 497   3                              ADCMUC_4_7_OE2 = true;
 498   3                              //CHIP2
 499   3                              ADCMUX_8_11_OE1 = true;
 500   3                              ADCMUX_8_11_OE2 = true;
 501   3                              //CHIP3
 502   3                              ADCMUX_12_15_OE1 = true;
 503   3                              ADCMUX_12_15_OE2 = true;
 504   3                              ADCMUX_12_15_S1 = false;
 505   3                              ADCMUX_12_15_S0 = true;
 506   3                              //CHIP4
 507   3                              ADCMUX_16_19_OE1 = true;
 508   3                              ADCMUX_16_19_OE2 = true;
 509   3                              //CHIP5
 510   3                              ADCMUX_20_23_OE1 = true;
 511   3                              ADCMUX_20_23_OE2 = true;
 512   3                              //CHIP6
 513   3                              ADCMUX_24_27_OE1 = true;
 514   3                              ADCMUX_24_27_OE2 = true;
 515   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 516   3                              ADCMUX_12_15_OE1 = false;
 517   3                              ADCMUX_12_15_OE2 = true;
 518   3                              break;
 519   3                      }
 520   2                      case 13:{//MLD13
 521   3                              //ADC MUX
 522   3                              AMX0SL = 0x03;
 523   3                              //CHIP0
 524   3                              ADCMUX_0_3_OE1 = true;
 525   3                              ADCMUX_0_3_OE2 = true;
 526   3                              //CHIP1
 527   3                              ADCMUC_4_7_OE1 = true;
 528   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 67  

 529   3                              //CHIP2
 530   3                              ADCMUX_8_11_OE1 = true;
 531   3                              ADCMUX_8_11_OE2 = true;
 532   3                              //CHIP3
 533   3                              ADCMUX_12_15_OE1 = true;
 534   3                              ADCMUX_12_15_OE2 = true;
 535   3                              ADCMUX_12_15_S1 = true;
 536   3                              ADCMUX_12_15_S0 = true;
 537   3                              //CHIP4
 538   3                              ADCMUX_16_19_OE1 = true;
 539   3                              ADCMUX_16_19_OE2 = true;
 540   3                              //CHIP5
 541   3                              ADCMUX_20_23_OE1 = true;
 542   3                              ADCMUX_20_23_OE2 = true;
 543   3                              //CHIP6
 544   3                              ADCMUX_24_27_OE1 = true;
 545   3                              ADCMUX_24_27_OE2 = true;
 546   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 547   3                              ADCMUX_12_15_OE1 = false;
 548   3                              ADCMUX_12_15_OE2 = true;
 549   3                              break;
 550   3                      }
 551   2                      case 14:{//MLD14
 552   3                              //ADC MUX
 553   3                              AMX0SL = 0x03;
 554   3                              //CHIP0
 555   3                              ADCMUX_0_3_OE1 = true;
 556   3                              ADCMUX_0_3_OE2 = true;
 557   3                              //CHIP1
 558   3                              ADCMUC_4_7_OE1 = true;
 559   3                              ADCMUC_4_7_OE2 = true;
 560   3                              //CHIP2
 561   3                              ADCMUX_8_11_OE1 = true;
 562   3                              ADCMUX_8_11_OE2 = true;
 563   3                              //CHIP3
 564   3                              ADCMUX_12_15_OE1 = true;
 565   3                              ADCMUX_12_15_OE2 = true;
 566   3                              ADCMUX_12_15_S1 = false;
 567   3                              ADCMUX_12_15_S0 = true;
 568   3                              //CHIP4
 569   3                              ADCMUX_16_19_OE1 = true;
 570   3                              ADCMUX_16_19_OE2 = true;
 571   3                              //CHIP5
 572   3                              ADCMUX_20_23_OE1 = true;
 573   3                              ADCMUX_20_23_OE2 = true;
 574   3                              //CHIP6
 575   3                              ADCMUX_24_27_OE1 = true;
 576   3                              ADCMUX_24_27_OE2 = true;
 577   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 578   3                              ADCMUX_12_15_OE1 = true;
 579   3                              ADCMUX_12_15_OE2 = false;
 580   3                              break;
 581   3                      }
 582   2                      case 15:{//MLD15
 583   3                              //ADC MUX
 584   3                              AMX0SL = 0x03;
 585   3                              //CHIP0
 586   3                              ADCMUX_0_3_OE1 = true;
 587   3                              ADCMUX_0_3_OE2 = true;
 588   3                              //CHIP1
 589   3                              ADCMUC_4_7_OE1 = true;
 590   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 68  

 591   3                              //CHIP2
 592   3                              ADCMUX_8_11_OE1 = true;
 593   3                              ADCMUX_8_11_OE2 = true;
 594   3                              //CHIP3
 595   3                              ADCMUX_12_15_OE1 = true;
 596   3                              ADCMUX_12_15_OE2 = true;
 597   3                              ADCMUX_12_15_S1 = true;
 598   3                              ADCMUX_12_15_S0 = true;
 599   3                              //CHIP4
 600   3                              ADCMUX_16_19_OE1 = true;
 601   3                              ADCMUX_16_19_OE2 = true;
 602   3                              //CHIP5
 603   3                              ADCMUX_20_23_OE1 = true;
 604   3                              ADCMUX_20_23_OE2 = true;
 605   3                              //CHIP6
 606   3                              ADCMUX_24_27_OE1 = true;
 607   3                              ADCMUX_24_27_OE2 = true;
 608   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 609   3                              ADCMUX_12_15_OE1 = true;
 610   3                              ADCMUX_12_15_OE2 = false;
 611   3                              break;
 612   3                      }
 613   2                      case 16:{//MLD16
 614   3                              //ADC MUX
 615   3                              AMX0SL = 0x04;
 616   3                              //CHIP0
 617   3                              ADCMUX_0_3_OE1 = true;
 618   3                              ADCMUX_0_3_OE2 = true;
 619   3                              //CHIP1
 620   3                              ADCMUC_4_7_OE1 = true;
 621   3                              ADCMUC_4_7_OE2 = true;
 622   3                              //CHIP2
 623   3                              ADCMUX_8_11_OE1 = true;
 624   3                              ADCMUX_8_11_OE2 = true;
 625   3                              //CHIP3
 626   3                              ADCMUX_12_15_OE1 = true;
 627   3                              ADCMUX_12_15_OE2 = true;
 628   3                              //CHIP4
 629   3                              ADCMUX_16_19_OE1 = true;
 630   3                              ADCMUX_16_19_OE2 = true;
 631   3                              ADCMUX_16_19_S1 = false;
 632   3                              ADCMUX_16_19_S0 = true;
 633   3                              //CHIP5
 634   3                              ADCMUX_20_23_OE1 = true;
 635   3                              ADCMUX_20_23_OE2 = true;
 636   3                              //CHIP6
 637   3                              ADCMUX_24_27_OE1 = true;
 638   3                              ADCMUX_24_27_OE2 = true;
 639   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 640   3                              ADCMUX_16_19_OE1 = false;
 641   3                              ADCMUX_16_19_OE2 = true;
 642   3                              break;
 643   3                      }
 644   2                      case 17:{//MLD17
 645   3                              //ADC MUX
 646   3                              AMX0SL = 0x04;
 647   3                              //CHIP0
 648   3                              ADCMUX_0_3_OE1 = true;
 649   3                              ADCMUX_0_3_OE2 = true;
 650   3                              //CHIP1
 651   3                              ADCMUC_4_7_OE1 = true;
 652   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 69  

 653   3                              //CHIP2
 654   3                              ADCMUX_8_11_OE1 = true;
 655   3                              ADCMUX_8_11_OE2 = true;
 656   3                              //CHIP3
 657   3                              ADCMUX_12_15_OE1 = true;
 658   3                              ADCMUX_12_15_OE2 = true;
 659   3                              //CHIP4
 660   3                              ADCMUX_16_19_OE1 = true;
 661   3                              ADCMUX_16_19_OE2 = true;
 662   3                              ADCMUX_16_19_S1 = true;
 663   3                              ADCMUX_16_19_S0 = true;
 664   3                              //CHIP5
 665   3                              ADCMUX_20_23_OE1 = true;
 666   3                              ADCMUX_20_23_OE2 = true;
 667   3                              //CHIP6
 668   3                              ADCMUX_24_27_OE1 = true;
 669   3                              ADCMUX_24_27_OE2 = true;
 670   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 671   3                              ADCMUX_16_19_OE1 = false;
 672   3                              ADCMUX_16_19_OE2 = true;
 673   3                              break;
 674   3                      }
 675   2                      case 18:{//MLD18
 676   3                              //ADC MUX
 677   3                              AMX0SL = 0x04;
 678   3                              //CHIP0
 679   3                              ADCMUX_0_3_OE1 = true;
 680   3                              ADCMUX_0_3_OE2 = true;
 681   3                              //CHIP1
 682   3                              ADCMUC_4_7_OE1 = true;
 683   3                              ADCMUC_4_7_OE2 = true;
 684   3                              //CHIP2
 685   3                              ADCMUX_8_11_OE1 = true;
 686   3                              ADCMUX_8_11_OE2 = true;
 687   3                              //CHIP3
 688   3                              ADCMUX_12_15_OE1 = true;
 689   3                              ADCMUX_12_15_OE2 = true;
 690   3                              //CHIP4
 691   3                              ADCMUX_16_19_OE1 = true;
 692   3                              ADCMUX_16_19_OE2 = true;
 693   3                              ADCMUX_16_19_S1 = false;
 694   3                              ADCMUX_16_19_S0 = true;
 695   3                              //CHIP5
 696   3                              ADCMUX_20_23_OE1 = true;
 697   3                              ADCMUX_20_23_OE2 = true;
 698   3                              //CHIP6
 699   3                              ADCMUX_24_27_OE1 = true;
 700   3                              ADCMUX_24_27_OE2 = true;
 701   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 702   3                              ADCMUX_16_19_OE1 = true;
 703   3                              ADCMUX_16_19_OE2 = false;
 704   3                              break;
 705   3                      }
 706   2                      case 19:{//MLD19
 707   3                              //ADC MUX
 708   3                              AMX0SL = 0x04;
 709   3                              //CHIP0
 710   3                              ADCMUX_0_3_OE1 = true;
 711   3                              ADCMUX_0_3_OE2 = true;
 712   3                              //CHIP1
 713   3                              ADCMUC_4_7_OE1 = true;
 714   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 70  

 715   3                              //CHIP2
 716   3                              ADCMUX_8_11_OE1 = true;
 717   3                              ADCMUX_8_11_OE2 = true;
 718   3                              //CHIP3
 719   3                              ADCMUX_12_15_OE1 = true;
 720   3                              ADCMUX_12_15_OE2 = true;
 721   3                              //CHIP4
 722   3                              ADCMUX_16_19_OE1 = true;
 723   3                              ADCMUX_16_19_OE2 = true;
 724   3                              ADCMUX_16_19_S1 = true;
 725   3                              ADCMUX_16_19_S0 = true;
 726   3                              //CHIP5
 727   3                              ADCMUX_20_23_OE1 = true;
 728   3                              ADCMUX_20_23_OE2 = true;
 729   3                              //CHIP6
 730   3                              ADCMUX_24_27_OE1 = true;
 731   3                              ADCMUX_24_27_OE2 = true;
 732   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 733   3                              ADCMUX_16_19_OE1 = true;
 734   3                              ADCMUX_16_19_OE2 = false;
 735   3                              break;
 736   3                      }
 737   2                      case 20:{//MLD20
 738   3                              //ADC MUX
 739   3                              AMX0SL = 0x05;
 740   3                              //CHIP0
 741   3                              ADCMUX_0_3_OE1 = true;
 742   3                              ADCMUX_0_3_OE2 = true;
 743   3                              //CHIP1
 744   3                              ADCMUC_4_7_OE1 = true;
 745   3                              ADCMUC_4_7_OE2 = true;
 746   3                              //CHIP2
 747   3                              ADCMUX_8_11_OE1 = true;
 748   3                              ADCMUX_8_11_OE2 = true;
 749   3                              //CHIP3
 750   3                              ADCMUX_12_15_OE1 = true;
 751   3                              ADCMUX_12_15_OE2 = true;
 752   3                              //CHIP4
 753   3                              ADCMUX_16_19_OE1 = true;
 754   3                              ADCMUX_16_19_OE2 = true;
 755   3                              //CHIP5
 756   3                              ADCMUX_20_23_OE1 = true;
 757   3                              ADCMUX_20_23_OE2 = true;
 758   3                              ADCMUX_20_23_S1 = false;
 759   3                              ADCMUX_20_23_S0 = true;
 760   3                              //CHIP6
 761   3                              ADCMUX_24_27_OE1 = true;
 762   3                              ADCMUX_24_27_OE2 = true;
 763   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 764   3                              ADCMUX_20_23_OE1 = false;
 765   3                              ADCMUX_20_23_OE2 = true;
 766   3                              break;
 767   3                      }
 768   2                      case 21:{//MLD21
 769   3                              //ADC MUX
 770   3                              AMX0SL = 0x05;
 771   3                              //CHIP0
 772   3                              ADCMUX_0_3_OE1 = true;
 773   3                              ADCMUX_0_3_OE2 = true;
 774   3                              //CHIP1
 775   3                              ADCMUC_4_7_OE1 = true;
 776   3                              ADCMUC_4_7_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 71  

 777   3                              //CHIP2
 778   3                              ADCMUX_8_11_OE1 = true;
 779   3                              ADCMUX_8_11_OE2 = true;
 780   3                              //CHIP3
 781   3                              ADCMUX_12_15_OE1 = true;
 782   3                              ADCMUX_12_15_OE2 = true;
 783   3                              //CHIP4
 784   3                              ADCMUX_16_19_OE1 = true;
 785   3                              ADCMUX_16_19_OE2 = true;
 786   3                              //CHIP5
 787   3                              ADCMUX_20_23_OE1 = false;
 788   3                              ADCMUX_20_23_OE2 = true;
 789   3                              ADCMUX_20_23_S1 = true;
 790   3                              ADCMUX_20_23_S0 = true;
 791   3                              //CHIP6
 792   3                              ADCMUX_24_27_OE1 = true;
 793   3                              ADCMUX_24_27_OE2 = true;
 794   3                              ADCMUX_24_27_S1 = false;
 795   3                              ADCMUX_24_27_S0 = true;
 796   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 797   3                              ADCMUX_24_27_OE1 = false;
 798   3                              ADCMUX_24_27_OE2 = true;
 799   3                              break;
 800   3                      }
 801   2                      case 22:{//MLD22
 802   3                              //ADC MUX
 803   3                              AMX0SL = 0x05;
 804   3                              //CHIP0
 805   3                              ADCMUX_0_3_OE1 = true;
 806   3                              ADCMUX_0_3_OE2 = true;
 807   3                              //CHIP1
 808   3                              ADCMUC_4_7_OE1 = true;
 809   3                              ADCMUC_4_7_OE2 = true;
 810   3                              //CHIP2
 811   3                              ADCMUX_8_11_OE1 = true;
 812   3                              ADCMUX_8_11_OE2 = true;
 813   3                              //CHIP3
 814   3                              ADCMUX_12_15_OE1 = true;
 815   3                              ADCMUX_12_15_OE2 = true;
 816   3                              //CHIP4
 817   3                              ADCMUX_16_19_OE1 = true;
 818   3                              ADCMUX_16_19_OE2 = true;
 819   3                              //CHIP5
 820   3                              ADCMUX_20_23_OE1 = true;
 821   3                              ADCMUX_20_23_OE2 = true;
 822   3                              ADCMUX_20_23_S1 = false;
 823   3                              ADCMUX_20_23_S0 = true;
 824   3                              //CHIP6
 825   3                              ADCMUX_24_27_OE1 = true;
 826   3                              ADCMUX_24_27_OE2 = true;        
 827   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 828   3                              ADCMUX_20_23_OE1 = true;
 829   3                              ADCMUX_20_23_OE2 = false;
 830   3                              break;
 831   3                      }
 832   2                      case 23:{//MLD23
 833   3                              //ADC MUX
 834   3                              AMX0SL = 0x05;
 835   3                              //CHIP0
 836   3                              ADCMUX_0_3_OE1 = true;
 837   3                              ADCMUX_0_3_OE2 = true;
 838   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 72  

 839   3                              ADCMUC_4_7_OE1 = true;
 840   3                              ADCMUC_4_7_OE2 = true;
 841   3                              //CHIP2
 842   3                              ADCMUX_8_11_OE1 = true;
 843   3                              ADCMUX_8_11_OE2 = true;
 844   3                              //CHIP3
 845   3                              ADCMUX_12_15_OE1 = true;
 846   3                              ADCMUX_12_15_OE2 = true;
 847   3                              //CHIP4
 848   3                              ADCMUX_16_19_OE1 = true;
 849   3                              ADCMUX_16_19_OE2 = true;
 850   3                              //CHIP5
 851   3                              ADCMUX_20_23_OE1 = true;
 852   3                              ADCMUX_20_23_OE2 = true;
 853   3                              ADCMUX_20_23_S1 = true;
 854   3                              ADCMUX_20_23_S0 = true;
 855   3                              //CHIP6
 856   3                              ADCMUX_24_27_OE1 = true;
 857   3                              ADCMUX_24_27_OE2 = true;
 858   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 859   3                              ADCMUX_20_23_OE1 = 1;
 860   3                              ADCMUX_20_23_OE2 = 0;
 861   3                              break;
 862   3                      }
 863   2                      case 24:{//MLD24
 864   3                              //ADC MUX
 865   3                              AMX0SL = 0x06;
 866   3                              //CHIP0
 867   3                              ADCMUX_0_3_OE1 = true;
 868   3                              ADCMUX_0_3_OE2 = true;
 869   3                              //CHIP1
 870   3                              ADCMUC_4_7_OE1 = true;
 871   3                              ADCMUC_4_7_OE2 = true;
 872   3                              //CHIP2
 873   3                              ADCMUX_8_11_OE1 = true;
 874   3                              ADCMUX_8_11_OE2 = true;
 875   3                              //CHIP3
 876   3                              ADCMUX_12_15_OE1 = true;
 877   3                              ADCMUX_12_15_OE2 = true;
 878   3                              //CHIP4
 879   3                              ADCMUX_16_19_OE1 = true;
 880   3                              ADCMUX_16_19_OE2 = true;
 881   3                              //CHIP5
 882   3                              ADCMUX_20_23_OE1 = true;
 883   3                              ADCMUX_20_23_OE2 = true;
 884   3                              //CHIP6
 885   3                              ADCMUX_24_27_OE1 = true;
 886   3                              ADCMUX_24_27_OE2 = true;
 887   3                              ADCMUX_24_27_S1 = false;
 888   3                              ADCMUX_24_27_S0 = true;
 889   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 890   3                              ADCMUX_24_27_OE1 = false;
 891   3                              ADCMUX_24_27_OE2 = true;
 892   3                              break;
 893   3                      }
 894   2                      case 25:{//MLD25
 895   3                              //ADC MUX
 896   3                              AMX0SL = 0x06;
 897   3                              //CHIP0
 898   3                              ADCMUX_0_3_OE1 = true;
 899   3                              ADCMUX_0_3_OE2 = true;
 900   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 73  

 901   3                              ADCMUC_4_7_OE1 = true;
 902   3                              ADCMUC_4_7_OE2 = true;
 903   3                              //CHIP2
 904   3                              ADCMUX_8_11_OE1 = true;
 905   3                              ADCMUX_8_11_OE2 = true;
 906   3                              //CHIP3
 907   3                              ADCMUX_12_15_OE1 = true;
 908   3                              ADCMUX_12_15_OE2 = true;
 909   3                              //CHIP4
 910   3                              ADCMUX_16_19_OE1 = true;
 911   3                              ADCMUX_16_19_OE2 = true;
 912   3                              //CHIP5
 913   3                              ADCMUX_20_23_OE1 = true;
 914   3                              ADCMUX_20_23_OE2 = true;
 915   3                              //CHIP6
 916   3                              ADCMUX_24_27_OE1 = true;
 917   3                              ADCMUX_24_27_OE2 = true;
 918   3                              ADCMUX_24_27_S1 = true;
 919   3                              ADCMUX_24_27_S0 = true;
 920   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 921   3                              ADCMUX_24_27_OE1 = false;
 922   3                              ADCMUX_24_27_OE2 = true;
 923   3                              break;
 924   3                      }
 925   2                      case 26:{//MLD26
 926   3                              //ADC MUX
 927   3                              AMX0SL = 0x06;
 928   3                              //CHIP0
 929   3                              ADCMUX_0_3_OE1 = true;
 930   3                              ADCMUX_0_3_OE2 = true;
 931   3                              //CHIP1
 932   3                              ADCMUC_4_7_OE1 = true;
 933   3                              ADCMUC_4_7_OE2 = true;
 934   3                              //CHIP2
 935   3                              ADCMUX_8_11_OE1 = true;
 936   3                              ADCMUX_8_11_OE2 = true;
 937   3                              //CHIP3
 938   3                              ADCMUX_12_15_OE1 = true;
 939   3                              ADCMUX_12_15_OE2 = true;
 940   3                              //CHIP4
 941   3                              ADCMUX_16_19_OE1 = true;
 942   3                              ADCMUX_16_19_OE2 = true;
 943   3                              //CHIP5
 944   3                              ADCMUX_20_23_OE1 = true;
 945   3                              ADCMUX_20_23_OE2 = true;
 946   3                              //CHIP6
 947   3                              ADCMUX_24_27_OE1 = true;
 948   3                              ADCMUX_24_27_OE2 = true;
 949   3                              ADCMUX_24_27_S1 = false;
 950   3                              ADCMUX_24_27_S0 = true;
 951   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 952   3                              ADCMUX_24_27_OE1 = true;
 953   3                              ADCMUX_24_27_OE2 = false;
 954   3                              break;
 955   3                      }
 956   2                      case 27:{//MLD27
 957   3                              //ADC MUX
 958   3                              AMX0SL = 0x06;
 959   3                              //CHIP0
 960   3                              ADCMUX_0_3_OE1 = true;
 961   3                              ADCMUX_0_3_OE2 = true;
 962   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 74  

 963   3                              ADCMUC_4_7_OE1 = true;
 964   3                              ADCMUC_4_7_OE2 = true;
 965   3                              //CHIP2
 966   3                              ADCMUX_8_11_OE1 = true;
 967   3                              ADCMUX_8_11_OE2 = true;
 968   3                              //CHIP3
 969   3                              ADCMUX_12_15_OE1 = true;
 970   3                              ADCMUX_12_15_OE2 = true;
 971   3                              //CHIP4
 972   3                              ADCMUX_16_19_OE1 = true;
 973   3                              ADCMUX_16_19_OE2 = true;
 974   3                              //CHIP5
 975   3                              ADCMUX_20_23_OE1 = true;
 976   3                              ADCMUX_20_23_OE2 = true;
 977   3                              //CHIP6
 978   3                              ADCMUX_24_27_OE1 = true;
 979   3                              ADCMUX_24_27_OE2 = true;
 980   3                              ADCMUX_24_27_S1 = true;
 981   3                              ADCMUX_24_27_S0 = true;
 982   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 983   3                              ADCMUX_24_27_OE1 = true;
 984   3                              ADCMUX_24_27_OE2 = false;
 985   3                              break;
 986   3                      }
 987   2                      case 32:{//MPD0
 988   3                              //ADC MUX
 989   3                              AMX0SL = 0x00;
 990   3                              //CHIP0
 991   3                              ADCMUX_0_3_OE1 = true;
 992   3                              ADCMUX_0_3_OE2 = true;
 993   3                              ADCMUX_0_3_S1 = false;
 994   3                              ADCMUX_0_3_S0 = false;
 995   3                              //CHIP1
 996   3                              ADCMUC_4_7_OE1 = true;
 997   3                              ADCMUC_4_7_OE2 = true;
 998   3                              //CHIP2
 999   3                              ADCMUX_8_11_OE1 = true;
1000   3                              ADCMUX_8_11_OE2 = true;
1001   3                              //CHIP3
1002   3                              ADCMUX_12_15_OE1 = true;
1003   3                              ADCMUX_12_15_OE2 = true;
1004   3                              //CHIP4
1005   3                              ADCMUX_16_19_OE1 = true;
1006   3                              ADCMUX_16_19_OE2 = true;
1007   3                              //CHIP5
1008   3                              ADCMUX_20_23_OE1 = true;
1009   3                              ADCMUX_20_23_OE2 = true;
1010   3                              //CHIP6
1011   3                              ADCMUX_24_27_OE1 = true;
1012   3                              ADCMUX_24_27_OE2 = true;
1013   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1014   3                              ADCMUX_0_3_OE1 = false;
1015   3                              ADCMUX_0_3_OE2 = true;
1016   3                              break;
1017   3                      }
1018   2                      case 33:{//MPD1
1019   3                              //ADC MUX
1020   3                              AMX0SL = 0x00;
1021   3                              //CHIP0
1022   3                              ADCMUX_0_3_OE1 = true;
1023   3                              ADCMUX_0_3_OE2 = true;
1024   3                              ADCMUX_0_3_S1 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 75  

1025   3                              ADCMUX_0_3_S0 = false;
1026   3                              //CHIP1
1027   3                              ADCMUC_4_7_OE1 = true;
1028   3                              ADCMUC_4_7_OE2 = true;
1029   3                              //CHIP2
1030   3                              ADCMUX_8_11_OE1 = true;
1031   3                              ADCMUX_8_11_OE2 = true;
1032   3                              //CHIP3
1033   3                              ADCMUX_12_15_OE1 = true;
1034   3                              ADCMUX_12_15_OE2 = true;
1035   3                              //CHIP4
1036   3                              ADCMUX_16_19_OE1 = true;
1037   3                              ADCMUX_16_19_OE2 = true;
1038   3                              //CHIP5
1039   3                              ADCMUX_20_23_OE1 = true;
1040   3                              ADCMUX_20_23_OE2 = true;
1041   3                              //CHIP6
1042   3                              ADCMUX_24_27_OE1 = true;
1043   3                              ADCMUX_24_27_OE2 = true;
1044   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1045   3                              ADCMUX_0_3_OE1 = false;
1046   3                              ADCMUX_0_3_OE2 = true;
1047   3                              break;
1048   3                      }
1049   2                      case 34:{//MPD2
1050   3                              //ADC MUX
1051   3                              AMX0SL = 0x00;
1052   3                              //CHIP0
1053   3                              ADCMUX_0_3_OE1 = true;
1054   3                              ADCMUX_0_3_OE2 = true;
1055   3                              ADCMUX_0_3_S1 = false;
1056   3                              ADCMUX_0_3_S0 = false;
1057   3                              //CHIP1
1058   3                              ADCMUC_4_7_OE1 = true;
1059   3                              ADCMUC_4_7_OE2 = true;
1060   3                              //CHIP2
1061   3                              ADCMUX_8_11_OE1 = true;
1062   3                              ADCMUX_8_11_OE2 = true;
1063   3                              //CHIP3
1064   3                              ADCMUX_12_15_OE1 = true;
1065   3                              ADCMUX_12_15_OE2 = true;
1066   3                              //CHIP4
1067   3                              ADCMUX_16_19_OE1 = true;
1068   3                              ADCMUX_16_19_OE2 = true;
1069   3                              //CHIP5
1070   3                              ADCMUX_20_23_OE1 = true;
1071   3                              ADCMUX_20_23_OE2 = true;
1072   3                              //CHIP6
1073   3                              ADCMUX_24_27_OE1 = true;
1074   3                              ADCMUX_24_27_OE2 = true;
1075   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1076   3                              ADCMUX_0_3_OE1 = true;
1077   3                              ADCMUX_0_3_OE2 = false;
1078   3                              break;
1079   3                      }
1080   2                      case 35:{//MPD3
1081   3                              //ADC MUX
1082   3                              AMX0SL = 0x00;
1083   3                              //CHIP0
1084   3                              ADCMUX_0_3_OE1 = true;
1085   3                              ADCMUX_0_3_OE2 = true;
1086   3                              ADCMUX_0_3_S1 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 76  

1087   3                              ADCMUX_0_3_S0 = false;
1088   3                              //CHIP1
1089   3                              ADCMUC_4_7_OE1 = true;
1090   3                              ADCMUC_4_7_OE2 = true;
1091   3                              //CHIP2
1092   3                              ADCMUX_8_11_OE1 = true;
1093   3                              ADCMUX_8_11_OE2 = true;
1094   3                              //CHIP3
1095   3                              ADCMUX_12_15_OE1 = true;
1096   3                              ADCMUX_12_15_OE2 = true;
1097   3                              //CHIP4
1098   3                              ADCMUX_16_19_OE1 = true;
1099   3                              ADCMUX_16_19_OE2 = true;
1100   3                              //CHIP5
1101   3                              ADCMUX_20_23_OE1 = true;
1102   3                              ADCMUX_20_23_OE2 = true;
1103   3                              //CHIP6
1104   3                              ADCMUX_24_27_OE1 = true;
1105   3                              ADCMUX_24_27_OE2 = true;
1106   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1107   3                              ADCMUX_0_3_OE1 = true;
1108   3                              ADCMUX_0_3_OE2 = false;
1109   3                              break;
1110   3                      }
1111   2                      case 36:{//MPD4
1112   3                              //ADC MUX
1113   3                              AMX0SL = 0x01;
1114   3                              //CHIP0
1115   3                              ADCMUX_0_3_OE1 = true;
1116   3                              ADCMUX_0_3_OE2 = true;
1117   3                              //CHIP1
1118   3                              ADCMUC_4_7_OE1 = true;
1119   3                              ADCMUC_4_7_OE2 = true;
1120   3                              ADCMUX_4_7_S1 = false;
1121   3                              ADCMUX_4_7_S0 = false;
1122   3                              //CHIP2
1123   3                              ADCMUX_8_11_OE1 = true;
1124   3                              ADCMUX_8_11_OE2 = true;
1125   3                              //CHIP3
1126   3                              ADCMUX_12_15_OE1 = true;
1127   3                              ADCMUX_12_15_OE2 = true;
1128   3                              //CHIP4
1129   3                              ADCMUX_16_19_OE1 = true;
1130   3                              ADCMUX_16_19_OE2 = true;
1131   3                              //CHIP5
1132   3                              ADCMUX_20_23_OE1 = true;
1133   3                              ADCMUX_20_23_OE2 = true;
1134   3                              //CHIP6
1135   3                              ADCMUX_24_27_OE1 = true;
1136   3                              ADCMUX_24_27_OE2 = true;
1137   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1138   3                              ADCMUC_4_7_OE1 = false;
1139   3                              ADCMUC_4_7_OE2 = true;
1140   3                              break;
1141   3                      }
1142   2                      case 37:{//MPD5
1143   3                              //ADC MUX
1144   3                              AMX0SL = 0x01;
1145   3                              //CHIP0
1146   3                              ADCMUX_0_3_OE1 = true;
1147   3                              ADCMUX_0_3_OE2 = true;
1148   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 77  

1149   3                              ADCMUC_4_7_OE1 = true;
1150   3                              ADCMUC_4_7_OE2 = true;
1151   3                              ADCMUX_4_7_S1 = true;
1152   3                              ADCMUX_4_7_S0 = false;
1153   3                              //CHIP2
1154   3                              ADCMUX_8_11_OE1 = true;
1155   3                              ADCMUX_8_11_OE2 = true;
1156   3                              //CHIP3
1157   3                              ADCMUX_12_15_OE1 = true;
1158   3                              ADCMUX_12_15_OE2 = true;
1159   3                              //CHIP4
1160   3                              ADCMUX_16_19_OE1 = true;
1161   3                              ADCMUX_16_19_OE2 = true;
1162   3                              //CHIP5
1163   3                              ADCMUX_20_23_OE1 = true;
1164   3                              ADCMUX_20_23_OE2 = true;
1165   3                              //CHIP6
1166   3                              ADCMUX_24_27_OE1 = true;
1167   3                              ADCMUX_24_27_OE2 = true;
1168   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1169   3                              ADCMUC_4_7_OE1 = false;
1170   3                              ADCMUC_4_7_OE2 = true;
1171   3                              break;
1172   3                      }
1173   2                      case 38:{//MPD6
1174   3                              //ADC MUX
1175   3                              AMX0SL = 0x01;
1176   3                              //CHIP0
1177   3                              ADCMUX_0_3_OE1 = true;
1178   3                              ADCMUX_0_3_OE2 = true;
1179   3                              //CHIP1
1180   3                              ADCMUC_4_7_OE1 = true;
1181   3                              ADCMUC_4_7_OE2 = true;
1182   3                              ADCMUX_4_7_S1 = false;
1183   3                              ADCMUX_4_7_S0 = false;
1184   3                              //CHIP2
1185   3                              ADCMUX_8_11_OE1 = true;
1186   3                              ADCMUX_8_11_OE2 = true;
1187   3                              //CHIP3
1188   3                              ADCMUX_12_15_OE1 = true;
1189   3                              ADCMUX_12_15_OE2 = true;
1190   3                              //CHIP4
1191   3                              ADCMUX_16_19_OE1 = true;
1192   3                              ADCMUX_16_19_OE2 = true;
1193   3                              //CHIP5
1194   3                              ADCMUX_20_23_OE1 = true;
1195   3                              ADCMUX_20_23_OE2 = true;
1196   3                              //CHIP6
1197   3                              ADCMUX_24_27_OE1 = true;
1198   3                              ADCMUX_24_27_OE2 = true;
1199   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1200   3                              ADCMUC_4_7_OE1 = true;
1201   3                              ADCMUC_4_7_OE2 = false;
1202   3                              break;
1203   3                      }
1204   2                      case 39:{//MPD7
1205   3                              //ADC MUX
1206   3                              AMX0SL = 0x01;
1207   3                              //CHIP0
1208   3                              ADCMUX_0_3_OE1 = true;
1209   3                              ADCMUX_0_3_OE2 = true;
1210   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 78  

1211   3                              ADCMUC_4_7_OE1 = true;
1212   3                              ADCMUC_4_7_OE2 = true;
1213   3                              ADCMUX_4_7_S1 = true;
1214   3                              ADCMUX_4_7_S0 = false;
1215   3                              //CHIP2
1216   3                              ADCMUX_8_11_OE1 = true;
1217   3                              ADCMUX_8_11_OE2 = true;
1218   3                              //CHIP3
1219   3                              ADCMUX_12_15_OE1 = true;
1220   3                              ADCMUX_12_15_OE2 = true;
1221   3                              //CHIP4
1222   3                              ADCMUX_16_19_OE1 = true;
1223   3                              ADCMUX_16_19_OE2 = true;
1224   3                              //CHIP5
1225   3                              ADCMUX_20_23_OE1 = true;
1226   3                              ADCMUX_20_23_OE2 = true;
1227   3                              //CHIP6
1228   3                              ADCMUX_24_27_OE1 = true;
1229   3                              ADCMUX_24_27_OE2 = true;
1230   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1231   3                              ADCMUC_4_7_OE1 = true;
1232   3                              ADCMUC_4_7_OE2 = false;
1233   3                              break;
1234   3                      }
1235   2                      case 40:{//MPD8
1236   3                              //ADC MUX
1237   3                              AMX0SL = 0x02;
1238   3                              //CHIP0
1239   3                              ADCMUX_0_3_OE1 = true;
1240   3                              ADCMUX_0_3_OE2 = true;
1241   3                              //CHIP1
1242   3                              ADCMUC_4_7_OE1 = true;
1243   3                              ADCMUC_4_7_OE2 = true;
1244   3                              //CHIP2
1245   3                              ADCMUX_8_11_OE1 = true;
1246   3                              ADCMUX_8_11_OE2 = true;
1247   3                              ADCMUX_8_11_S1 = false;
1248   3                              ADCMUX_8_11_S0 = false;
1249   3                              //CHIP3
1250   3                              ADCMUX_12_15_OE1 = true;
1251   3                              ADCMUX_12_15_OE2 = true;
1252   3                              //CHIP4
1253   3                              ADCMUX_16_19_OE1 = true;
1254   3                              ADCMUX_16_19_OE2 = true;
1255   3                              //CHIP5
1256   3                              ADCMUX_20_23_OE1 = true;
1257   3                              ADCMUX_20_23_OE2 = true;
1258   3                              //CHIP6
1259   3                              ADCMUX_24_27_OE1 = true;
1260   3                              ADCMUX_24_27_OE2 = true;
1261   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1262   3                              ADCMUX_8_11_OE1 = false;
1263   3                              ADCMUX_8_11_OE2 = true;
1264   3                              break;
1265   3                      }
1266   2                      case 41:{//MPD9
1267   3                              //ADC MUX
1268   3                              AMX0SL = 0x02;
1269   3                              //CHIP0
1270   3                              ADCMUX_0_3_OE1 = true;
1271   3                              ADCMUX_0_3_OE2 = true;
1272   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 79  

1273   3                              ADCMUC_4_7_OE1 = true;
1274   3                              ADCMUC_4_7_OE2 = true;
1275   3                              //CHIP2
1276   3                              ADCMUX_8_11_OE1 = true;
1277   3                              ADCMUX_8_11_OE2 = true;
1278   3                              ADCMUX_8_11_S1 = true;
1279   3                              ADCMUX_8_11_S0 = false;
1280   3                              //CHIP3
1281   3                              ADCMUX_12_15_OE1 = true;
1282   3                              ADCMUX_12_15_OE2 = true;
1283   3                              //CHIP4
1284   3                              ADCMUX_16_19_OE1 = true;
1285   3                              ADCMUX_16_19_OE2 = true;
1286   3                              //CHIP5
1287   3                              ADCMUX_20_23_OE1 = true;
1288   3                              ADCMUX_20_23_OE2 = true;
1289   3                              //CHIP6
1290   3                              ADCMUX_24_27_OE1 = true;
1291   3                              ADCMUX_24_27_OE2 = true;
1292   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1293   3                              ADCMUX_8_11_OE1 = false;
1294   3                              ADCMUX_8_11_OE2 = true;
1295   3                              break;
1296   3                      }
1297   2                      case 42:{//MPD10
1298   3                              //ADC MUX
1299   3                              AMX0SL = 0x02;
1300   3                              //CHIP0
1301   3                              ADCMUX_0_3_OE1 = true;
1302   3                              ADCMUX_0_3_OE2 = true;
1303   3                              //CHIP1
1304   3                              ADCMUC_4_7_OE1 = true;
1305   3                              ADCMUC_4_7_OE2 = true;
1306   3                              //CHIP2
1307   3                              ADCMUX_8_11_OE1 = true;
1308   3                              ADCMUX_8_11_OE2 = true;
1309   3                              ADCMUX_8_11_S1 = false;
1310   3                              ADCMUX_8_11_S0 = false;
1311   3                              //CHIP3
1312   3                              ADCMUX_12_15_OE1 = true;
1313   3                              ADCMUX_12_15_OE2 = true;
1314   3                              //CHIP4
1315   3                              ADCMUX_16_19_OE1 = true;
1316   3                              ADCMUX_16_19_OE2 = true;
1317   3                              //CHIP5
1318   3                              ADCMUX_20_23_OE1 = true;
1319   3                              ADCMUX_20_23_OE2 = true;
1320   3                              //CHIP6
1321   3                              ADCMUX_24_27_OE1 = true;
1322   3                              ADCMUX_24_27_OE2 = true;
1323   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1324   3                              ADCMUX_8_11_OE1 = false;
1325   3                              ADCMUX_8_11_OE2 = true;
1326   3                              break;
1327   3                      }
1328   2                      case 43:{//MPD11
1329   3                              //ADC MUX
1330   3                              AMX0SL = 0x02;
1331   3                              //CHIP0
1332   3                              ADCMUX_0_3_OE1 = true;
1333   3                              ADCMUX_0_3_OE2 = true;
1334   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 80  

1335   3                              ADCMUC_4_7_OE1 = true;
1336   3                              ADCMUC_4_7_OE2 = true;
1337   3                              //CHIP2
1338   3                              ADCMUX_8_11_OE1 = true;
1339   3                              ADCMUX_8_11_OE2 = true;
1340   3                              ADCMUX_8_11_S1 = true;
1341   3                              ADCMUX_8_11_S0 = false;
1342   3                              //CHIP3
1343   3                              ADCMUX_12_15_OE1 = true;
1344   3                              ADCMUX_12_15_OE2 = true;
1345   3                              //CHIP4
1346   3                              ADCMUX_16_19_OE1 = true;
1347   3                              ADCMUX_16_19_OE2 = true;
1348   3                              //CHIP5
1349   3                              ADCMUX_20_23_OE1 = true;
1350   3                              ADCMUX_20_23_OE2 = true;
1351   3                              //CHIP6
1352   3                              ADCMUX_24_27_OE1 = true;
1353   3                              ADCMUX_24_27_OE2 = true;
1354   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1355   3                              ADCMUX_8_11_OE1 = true;
1356   3                              ADCMUX_8_11_OE2 = false;
1357   3                              break;
1358   3                      }
1359   2                      case 44:{//MPD12
1360   3                              //ADC MUX
1361   3                              AMX0SL = 0x03;
1362   3                              //CHIP0
1363   3                              ADCMUX_0_3_OE1 = true;
1364   3                              ADCMUX_0_3_OE2 = true;
1365   3                              //CHIP1
1366   3                              ADCMUC_4_7_OE1 = true;
1367   3                              ADCMUC_4_7_OE2 = true;
1368   3                              //CHIP2
1369   3                              ADCMUX_8_11_OE1 = true;
1370   3                              ADCMUX_8_11_OE2 = true;
1371   3                              //CHIP3
1372   3                              ADCMUX_12_15_OE1 = true;
1373   3                              ADCMUX_12_15_OE2 = true;
1374   3                              ADCMUX_12_15_S1 = false;
1375   3                              ADCMUX_12_15_S0 = false;
1376   3                              //CHIP4
1377   3                              ADCMUX_16_19_OE1 = true;
1378   3                              ADCMUX_16_19_OE2 = true;
1379   3                              //CHIP5
1380   3                              ADCMUX_20_23_OE1 = true;
1381   3                              ADCMUX_20_23_OE2 = true;
1382   3                              //CHIP6
1383   3                              ADCMUX_24_27_OE1 = true;
1384   3                              ADCMUX_24_27_OE2 = true;
1385   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1386   3                              ADCMUX_12_15_OE1 = false;
1387   3                              ADCMUX_12_15_OE2 = true;
1388   3                              break;
1389   3                      }
1390   2                      case 45:{//MPD13
1391   3                              //ADC MUX
1392   3                              AMX0SL = 0x03;
1393   3                              //CHIP0
1394   3                              ADCMUX_0_3_OE1 = true;
1395   3                              ADCMUX_0_3_OE2 = true;
1396   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 81  

1397   3                              ADCMUC_4_7_OE1 = true;
1398   3                              ADCMUC_4_7_OE2 = true;
1399   3                              //CHIP2
1400   3                              ADCMUX_8_11_OE1 = true;
1401   3                              ADCMUX_8_11_OE2 = true;
1402   3                              //CHIP3
1403   3                              ADCMUX_12_15_OE1 = true;
1404   3                              ADCMUX_12_15_OE2 = true;
1405   3                              ADCMUX_12_15_S1 = true;
1406   3                              ADCMUX_12_15_S0 = false;
1407   3                              //CHIP4
1408   3                              ADCMUX_16_19_OE1 = true;
1409   3                              ADCMUX_16_19_OE2 = true;
1410   3                              //CHIP5
1411   3                              ADCMUX_20_23_OE1 = true;
1412   3                              ADCMUX_20_23_OE2 = true;
1413   3                              //CHIP6
1414   3                              ADCMUX_24_27_OE1 = true;
1415   3                              ADCMUX_24_27_OE2 = true;
1416   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1417   3                              ADCMUX_12_15_OE1 = false;
1418   3                              ADCMUX_12_15_OE2 = true;
1419   3                              break;
1420   3                      }
1421   2                      case 46:{//MPD14
1422   3                              //ADC MUX
1423   3                              AMX0SL = 0x03;
1424   3                              //CHIP0
1425   3                              ADCMUX_0_3_OE1 = true;
1426   3                              ADCMUX_0_3_OE2 = true;
1427   3                              //CHIP1
1428   3                              ADCMUC_4_7_OE1 = true;
1429   3                              ADCMUC_4_7_OE2 = true;
1430   3                              //CHIP2
1431   3                              ADCMUX_8_11_OE1 = true;
1432   3                              ADCMUX_8_11_OE2 = true;
1433   3                              //CHIP3
1434   3                              ADCMUX_12_15_OE1 = true;
1435   3                              ADCMUX_12_15_OE2 = true;
1436   3                              ADCMUX_12_15_S1 = false;
1437   3                              ADCMUX_12_15_S0 = false;
1438   3                              //CHIP4
1439   3                              ADCMUX_16_19_OE1 = true;
1440   3                              ADCMUX_16_19_OE2 = true;
1441   3                              //CHIP5
1442   3                              ADCMUX_20_23_OE1 = true;
1443   3                              ADCMUX_20_23_OE2 = true;
1444   3                              //CHIP6
1445   3                              ADCMUX_24_27_OE1 = true;
1446   3                              ADCMUX_24_27_OE2 = true;
1447   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1448   3                              ADCMUX_12_15_OE1 = true;
1449   3                              ADCMUX_12_15_OE2 = false;
1450   3                              break;
1451   3                      }
1452   2                      case 47:{//MPD15
1453   3                              //ADC MUX
1454   3                              AMX0SL = 0x03;
1455   3                              //CHIP0
1456   3                              ADCMUX_0_3_OE1 = true;
1457   3                              ADCMUX_0_3_OE2 = true;
1458   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 82  

1459   3                              ADCMUC_4_7_OE1 = true;
1460   3                              ADCMUC_4_7_OE2 = true;
1461   3                              //CHIP2
1462   3                              ADCMUX_8_11_OE1 = true;
1463   3                              ADCMUX_8_11_OE2 = true;
1464   3                              //CHIP3
1465   3                              ADCMUX_12_15_OE1 = true;
1466   3                              ADCMUX_12_15_OE2 = true;
1467   3                              ADCMUX_12_15_S1 = true;
1468   3                              ADCMUX_12_15_S0 = false;
1469   3                              //CHIP4
1470   3                              ADCMUX_16_19_OE1 = true;
1471   3                              ADCMUX_16_19_OE2 = true;
1472   3                              //CHIP5
1473   3                              ADCMUX_20_23_OE1 = true;
1474   3                              ADCMUX_20_23_OE2 = true;
1475   3                              //CHIP6
1476   3                              ADCMUX_24_27_OE1 = true;
1477   3                              ADCMUX_24_27_OE2 = true;
1478   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1479   3                              ADCMUX_12_15_OE1 = true;
1480   3                              ADCMUX_12_15_OE2 = false;
1481   3                              break;
1482   3                      }
1483   2                      case 48:{//MPD16
1484   3                              //ADC MUX
1485   3                              AMX0SL = 0x04;
1486   3                              //CHIP0
1487   3                              ADCMUX_0_3_OE1 = true;
1488   3                              ADCMUX_0_3_OE2 = true;
1489   3                              //CHIP1
1490   3                              ADCMUC_4_7_OE1 = true;
1491   3                              ADCMUC_4_7_OE2 = true;
1492   3                              //CHIP2
1493   3                              ADCMUX_8_11_OE1 = true;
1494   3                              ADCMUX_8_11_OE2 = true;
1495   3                              //CHIP3
1496   3                              ADCMUX_12_15_OE1 = true;
1497   3                              ADCMUX_12_15_OE2 = true;
1498   3                              //CHIP4
1499   3                              ADCMUX_16_19_OE1 = true;
1500   3                              ADCMUX_16_19_OE2 = true;
1501   3                              ADCMUX_16_19_S1 = false;
1502   3                              ADCMUX_16_19_S0 = false;
1503   3                              //CHIP5
1504   3                              ADCMUX_20_23_OE1 = true;
1505   3                              ADCMUX_20_23_OE2 = true;
1506   3                              //CHIP6
1507   3                              ADCMUX_24_27_OE1 = true;
1508   3                              ADCMUX_24_27_OE2 = true;
1509   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1510   3                              ADCMUX_16_19_OE1 = false;
1511   3                              ADCMUX_16_19_OE2 = true;
1512   3                              break;
1513   3                      }
1514   2                      case 49:{//MPD17
1515   3                              //ADC MUX
1516   3                              AMX0SL = 0x04;
1517   3                              //CHIP0
1518   3                              ADCMUX_0_3_OE1 = true;
1519   3                              ADCMUX_0_3_OE2 = true;
1520   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 83  

1521   3                              ADCMUC_4_7_OE1 = true;
1522   3                              ADCMUC_4_7_OE2 = true;
1523   3                              //CHIP2
1524   3                              ADCMUX_8_11_OE1 = true;
1525   3                              ADCMUX_8_11_OE2 = true;
1526   3                              //CHIP3
1527   3                              ADCMUX_12_15_OE1 = true;
1528   3                              ADCMUX_12_15_OE2 = true;
1529   3                              //CHIP4
1530   3                              ADCMUX_16_19_OE1 = true;
1531   3                              ADCMUX_16_19_OE2 = true;
1532   3                              ADCMUX_16_19_S1 = true;
1533   3                              ADCMUX_16_19_S0 = false;
1534   3                              //CHIP5
1535   3                              ADCMUX_20_23_OE1 = true;
1536   3                              ADCMUX_20_23_OE2 = true;
1537   3                              //CHIP6
1538   3                              ADCMUX_24_27_OE1 = true;
1539   3                              ADCMUX_24_27_OE2 = true;
1540   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1541   3                              ADCMUX_16_19_OE1 = false;
1542   3                              ADCMUX_16_19_OE2 = true;
1543   3                              break;
1544   3                      }
1545   2                      case 50:{//MPD18
1546   3                              //ADC MUX
1547   3                              AMX0SL = 0x04;
1548   3                              //CHIP0
1549   3                              ADCMUX_0_3_OE1 = true;
1550   3                              ADCMUX_0_3_OE2 = true;
1551   3                              //CHIP1
1552   3                              ADCMUC_4_7_OE1 = true;
1553   3                              ADCMUC_4_7_OE2 = true;
1554   3                              //CHIP2
1555   3                              ADCMUX_8_11_OE1 = true;
1556   3                              ADCMUX_8_11_OE2 = true;
1557   3                              //CHIP3
1558   3                              ADCMUX_12_15_OE1 = true;
1559   3                              ADCMUX_12_15_OE2 = true;
1560   3                              //CHIP4
1561   3                              ADCMUX_16_19_OE1 = true;
1562   3                              ADCMUX_16_19_OE2 = true;
1563   3                              ADCMUX_16_19_S1 = true;
1564   3                              ADCMUX_16_19_S0 = false;
1565   3                              //CHIP5
1566   3                              ADCMUX_20_23_OE1 = true;
1567   3                              ADCMUX_20_23_OE2 = true;
1568   3                              //CHIP6
1569   3                              ADCMUX_24_27_OE1 = true;
1570   3                              ADCMUX_24_27_OE2 = true;
1571   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1572   3                              ADCMUX_16_19_OE1 = true;
1573   3                              ADCMUX_16_19_OE2 = false;
1574   3                              break;
1575   3                      }
1576   2                      case 51:{//MPD19
1577   3                              //ADC MUX
1578   3                              AMX0SL = 0x04;
1579   3                              //CHIP0
1580   3                              ADCMUX_0_3_OE1 = true;
1581   3                              ADCMUX_0_3_OE2 = true;
1582   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 84  

1583   3                              ADCMUC_4_7_OE1 = true;
1584   3                              ADCMUC_4_7_OE2 = true;
1585   3                              //CHIP2
1586   3                              ADCMUX_8_11_OE1 = true;
1587   3                              ADCMUX_8_11_OE2 = true;
1588   3                              //CHIP3
1589   3                              ADCMUX_12_15_OE1 = true;
1590   3                              ADCMUX_12_15_OE2 = true;
1591   3                              //CHIP4
1592   3                              ADCMUX_16_19_OE1 = true;
1593   3                              ADCMUX_16_19_OE2 = true;
1594   3                              ADCMUX_16_19_S1 = true;
1595   3                              ADCMUX_16_19_S0 = false;
1596   3                              //CHIP5
1597   3                              ADCMUX_20_23_OE1 = true;
1598   3                              ADCMUX_20_23_OE2 = true;
1599   3                              //CHIP6
1600   3                              ADCMUX_24_27_OE1 = true;
1601   3                              ADCMUX_24_27_OE2 = true;
1602   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1603   3                              ADCMUX_16_19_OE1 = true;
1604   3                              ADCMUX_16_19_OE2 = false;
1605   3                              break;
1606   3                      }
1607   2                      case 52:{//MPD20
1608   3                              //ADC MUX
1609   3                              AMX0SL = 0x05;
1610   3                              //CHIP0
1611   3                              ADCMUX_0_3_OE1 = true;
1612   3                              ADCMUX_0_3_OE2 = true;
1613   3                              //CHIP1
1614   3                              ADCMUC_4_7_OE1 = true;
1615   3                              ADCMUC_4_7_OE2 = true;
1616   3                              //CHIP2
1617   3                              ADCMUX_8_11_OE1 = true;
1618   3                              ADCMUX_8_11_OE2 = true;
1619   3                              //CHIP3
1620   3                              ADCMUX_12_15_OE1 = true;
1621   3                              ADCMUX_12_15_OE2 = true;
1622   3                              //CHIP4
1623   3                              ADCMUX_16_19_OE1 = true;
1624   3                              ADCMUX_16_19_OE2 = true;
1625   3                              //CHIP5
1626   3                              ADCMUX_20_23_OE1 = true;
1627   3                              ADCMUX_20_23_OE2 = true;
1628   3                              ADCMUX_20_23_S1 = false;
1629   3                              ADCMUX_20_23_S0 = false;
1630   3                              //CHIP6
1631   3                              ADCMUX_24_27_OE1 = true;
1632   3                              ADCMUX_24_27_OE2 = true;
1633   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1634   3                              ADCMUX_20_23_OE1 = false;
1635   3                              ADCMUX_20_23_OE2 = true;
1636   3                              break;
1637   3                      }
1638   2                      case 53:{//MPD21
1639   3                              //ADC MUX
1640   3                              AMX0SL = 0x05;
1641   3                              //CHIP0
1642   3                              ADCMUX_0_3_OE1 = true;
1643   3                              ADCMUX_0_3_OE2 = true;
1644   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 85  

1645   3                              ADCMUC_4_7_OE1 = true;
1646   3                              ADCMUC_4_7_OE2 = true;
1647   3                              //CHIP2
1648   3                              ADCMUX_8_11_OE1 = true;
1649   3                              ADCMUX_8_11_OE2 = true;
1650   3                              //CHIP3
1651   3                              ADCMUX_12_15_OE1 = true;
1652   3                              ADCMUX_12_15_OE2 = true;
1653   3                              //CHIP4
1654   3                              ADCMUX_16_19_OE1 = true;
1655   3                              ADCMUX_16_19_OE2 = true;
1656   3                              //CHIP5
1657   3                              ADCMUX_20_23_OE1 = true;
1658   3                              ADCMUX_20_23_OE2 = true;
1659   3                              ADCMUX_20_23_S1 = true;
1660   3                              ADCMUX_20_23_S0 = false;
1661   3                              //CHIP6
1662   3                              ADCMUX_24_27_OE1 = true;
1663   3                              ADCMUX_24_27_OE2 = true;
1664   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1665   3                              ADCMUX_20_23_OE1 = false;
1666   3                              ADCMUX_20_23_OE2 = true;
1667   3                              break;
1668   3                      }
1669   2                      case 54:{//MPD22
1670   3                              //ADC MUX
1671   3                              AMX0SL = 0x05;
1672   3                              //CHIP0
1673   3                              ADCMUX_0_3_OE1 = true;
1674   3                              ADCMUX_0_3_OE2 = true;
1675   3                              //CHIP1
1676   3                              ADCMUC_4_7_OE1 = true;
1677   3                              ADCMUC_4_7_OE2 = true;
1678   3                              //CHIP2
1679   3                              ADCMUX_8_11_OE1 = true;
1680   3                              ADCMUX_8_11_OE2 = true;
1681   3                              //CHIP3
1682   3                              ADCMUX_12_15_OE1 = true;
1683   3                              ADCMUX_12_15_OE2 = true;
1684   3                              //CHIP4
1685   3                              ADCMUX_16_19_OE1 = true;
1686   3                              ADCMUX_16_19_OE2 = true;
1687   3                              //CHIP5
1688   3                              ADCMUX_20_23_OE1 = true;
1689   3                              ADCMUX_20_23_OE2 = true;
1690   3                              ADCMUX_20_23_S1 = false;
1691   3                              ADCMUX_20_23_S0 = false;
1692   3                              //CHIP6
1693   3                              ADCMUX_24_27_OE1 = true;
1694   3                              ADCMUX_24_27_OE2 = true;
1695   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1696   3                              ADCMUX_20_23_OE1 = true;
1697   3                              ADCMUX_20_23_OE2 = false;
1698   3                              break;
1699   3                      }
1700   2                      case 55:{//MPD23
1701   3                              //ADC MUX
1702   3                              AMX0SL = 0x05;
1703   3                              //CHIP0
1704   3                              ADCMUX_0_3_OE1 = true;
1705   3                              ADCMUX_0_3_OE2 = true;
1706   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 86  

1707   3                              ADCMUC_4_7_OE1 = true;
1708   3                              ADCMUC_4_7_OE2 = true;
1709   3                              //CHIP2
1710   3                              ADCMUX_8_11_OE1 = true;
1711   3                              ADCMUX_8_11_OE2 = true;
1712   3                              //CHIP3
1713   3                              ADCMUX_12_15_OE1 = true;
1714   3                              ADCMUX_12_15_OE2 = true;
1715   3                              //CHIP4
1716   3                              ADCMUX_16_19_OE1 = true;
1717   3                              ADCMUX_16_19_OE2 = true;
1718   3                              //CHIP5
1719   3                              ADCMUX_20_23_OE1 = true;
1720   3                              ADCMUX_20_23_OE2 = true;
1721   3                              ADCMUX_20_23_S1 = true;
1722   3                              ADCMUX_20_23_S0 = false;
1723   3                              //CHIP6
1724   3                              ADCMUX_24_27_OE1 = true;
1725   3                              ADCMUX_24_27_OE2 = true;
1726   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1727   3                              ADCMUX_20_23_OE1 = true;
1728   3                              ADCMUX_20_23_OE2 = false;
1729   3                              break;
1730   3                      }
1731   2                      case 56:{//MPD24
1732   3                              //ADC MUX
1733   3                              AMX0SL = 0x06;
1734   3                              //CHIP0
1735   3                              ADCMUX_0_3_OE1 = true;
1736   3                              ADCMUX_0_3_OE2 = true;
1737   3                              //CHIP1
1738   3                              ADCMUC_4_7_OE1 = true;
1739   3                              ADCMUC_4_7_OE2 = true;
1740   3                              //CHIP2
1741   3                              ADCMUX_8_11_OE1 = true;
1742   3                              ADCMUX_8_11_OE2 = true;
1743   3                              //CHIP3
1744   3                              ADCMUX_12_15_OE1 = true;
1745   3                              ADCMUX_12_15_OE2 = true;
1746   3                              //CHIP4
1747   3                              ADCMUX_16_19_OE1 = true;
1748   3                              ADCMUX_16_19_OE2 = true;
1749   3                              //CHIP5
1750   3                              ADCMUX_20_23_OE1 = true;
1751   3                              ADCMUX_20_23_OE2 = true;
1752   3                              //CHIP6
1753   3                              ADCMUX_24_27_OE1 = true;
1754   3                              ADCMUX_24_27_OE2 = true;
1755   3                              ADCMUX_24_27_S1 = false;
1756   3                              ADCMUX_24_27_S0 = false;
1757   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1758   3                              ADCMUX_24_27_OE1 = false;
1759   3                              ADCMUX_24_27_OE2 = true;        
1760   3                              break;
1761   3                      }
1762   2                      case 57:{//MPD25
1763   3                              //ADC MUX
1764   3                              AMX0SL = 0x06;
1765   3                              //CHIP0
1766   3                              ADCMUX_0_3_OE1 = true;
1767   3                              ADCMUX_0_3_OE2 = true;
1768   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 87  

1769   3                              ADCMUC_4_7_OE1 = true;
1770   3                              ADCMUC_4_7_OE2 = true;
1771   3                              //CHIP2
1772   3                              ADCMUX_8_11_OE1 = true;
1773   3                              ADCMUX_8_11_OE2 = true;
1774   3                              //CHIP3
1775   3                              ADCMUX_12_15_OE1 = true;
1776   3                              ADCMUX_12_15_OE2 = true;
1777   3                              //CHIP4
1778   3                              ADCMUX_16_19_OE1 = true;
1779   3                              ADCMUX_16_19_OE2 = true;
1780   3                              //CHIP5
1781   3                              ADCMUX_20_23_OE1 = true;
1782   3                              ADCMUX_20_23_OE2 = true;
1783   3                              //CHIP6
1784   3                              ADCMUX_24_27_OE1 = true;
1785   3                              ADCMUX_24_27_OE2 = true;
1786   3                              ADCMUX_20_23_S1 = true;
1787   3                              ADCMUX_20_23_S0 = false;
1788   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1789   3                              ADCMUX_24_27_OE1 = false;
1790   3                              ADCMUX_24_27_OE2 = true;        
1791   3                              break;
1792   3                      }
1793   2                      case 58:{//MPD26
1794   3                              //ADC MUX
1795   3                              AMX0SL = 0x06;
1796   3                              //CHIP0
1797   3                              ADCMUX_0_3_OE1 = true;
1798   3                              ADCMUX_0_3_OE2 = true;
1799   3                              //CHIP1
1800   3                              ADCMUC_4_7_OE1 = true;
1801   3                              ADCMUC_4_7_OE2 = true;
1802   3                              //CHIP2
1803   3                              ADCMUX_8_11_OE1 = true;
1804   3                              ADCMUX_8_11_OE2 = true;
1805   3                              //CHIP3
1806   3                              ADCMUX_12_15_OE1 = true;
1807   3                              ADCMUX_12_15_OE2 = true;
1808   3                              //CHIP4
1809   3                              ADCMUX_16_19_OE1 = true;
1810   3                              ADCMUX_16_19_OE2 = true;
1811   3                              //CHIP5
1812   3                              ADCMUX_20_23_OE1 = true;
1813   3                              ADCMUX_20_23_OE2 = true;
1814   3                              //CHIP6
1815   3                              ADCMUX_24_27_OE1 = true;
1816   3                              ADCMUX_24_27_OE2 = true;
1817   3                              ADCMUX_24_27_S1 = false;
1818   3                              ADCMUX_24_27_S0 = false;
1819   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1820   3                              ADCMUX_24_27_OE1 = true;
1821   3                              ADCMUX_24_27_OE2 = false;
1822   3                              break;
1823   3                      }
1824   2                      case 59:{//MPD27
1825   3                              //ADC MUX
1826   3                              AMX0SL = 0x06;
1827   3                              //CHIP0
1828   3                              ADCMUX_0_3_OE1 = true;
1829   3                              ADCMUX_0_3_OE2 = true;
1830   3                              //CHIP1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 88  

1831   3                              ADCMUC_4_7_OE1 = true;
1832   3                              ADCMUC_4_7_OE2 = true;
1833   3                              //CHIP2
1834   3                              ADCMUX_8_11_OE1 = true;
1835   3                              ADCMUX_8_11_OE2 = true;
1836   3                              //CHIP3
1837   3                              ADCMUX_12_15_OE1 = true;
1838   3                              ADCMUX_12_15_OE2 = true;
1839   3                              //CHIP4
1840   3                              ADCMUX_16_19_OE1 = true;
1841   3                              ADCMUX_16_19_OE2 = true;
1842   3                              //CHIP5
1843   3                              ADCMUX_20_23_OE1 = true;
1844   3                              ADCMUX_20_23_OE2 = true;
1845   3                              //CHIP6
1846   3                              ADCMUX_24_27_OE1 = true;
1847   3                              ADCMUX_24_27_OE2 = true;
1848   3                              ADCMUX_24_27_S1 = true;
1849   3                              ADCMUX_24_27_S0 = false;
1850   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1851   3                              ADCMUX_24_27_OE1 = true;
1852   3                              ADCMUX_24_27_OE2 = false;
1853   3                              break;
1854   3                      }
1855   2                      default:{
1856   3                              break;
1857   3                      }
1858   2              }
1859   1              AD0INT = 0;
1860   1              AD0BUSY = 1;//AD0BUSY写入1
1861   1      }
1862          static void initAdcData(adcTempDat_t *s){//初始化ADC滤波器
1863   1              uint8_t i;
1864   1              for(i = 0;i < CONFIG_SPLC_ADC_FILTER_TAP; i++){
1865   2                      s->dat[i] = 0x0;
1866   2              }
1867   1              s->out = 0;
1868   1              s->wIndex = 0;
1869   1      }
1870          static void refreshAdcData(adcTempDat_t *s , uint16_t dat){//更新ADC采集值 
1871   1              uint8_t i;
1872   1              uint16_t temp;
1873   1              uint32_t sum;
1874   1              s->dat[s->wIndex] = dat;
1875   1              s->wIndex ++;
1876   1              if(s->wIndex >= CONFIG_SPLC_ADC_FILTER_TAP){
1877   2                      s->wIndex = 0;
1878   2              }
1879   1              //计算总和
1880   1              sum = 0;
1881   1              for(i = 0;i < CONFIG_SPLC_ADC_FILTER_TAP;i ++){
1882   2                      sum += s->dat[i];
1883   2              }
1884   1              //去掉一个最大值和一个最小值
1885   1              
1886   1              temp = (uint16_t)(sum / (uint32_t)CONFIG_SPLC_ADC_FILTER_TAP);
1887   1              s->out = temp;
1888   1      }
1889          static void assertCoilAddress(uint16_t adr) reentrant{//检查线圈地址
1890   1      #if CONFIG_SPLC_ASSERT == 1
                      if(adr > (SPREG_END * 16))
                              while(1);
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 89  

              #endif
1894   1      }
*** WARNING C280 IN LINE 1889 OF MainApp\sPlc.c: 'adr': unreferenced local variable
1895          static void assertRegisterAddress(uint16_t adr) reentrant{//检查寄存器地址
1896   1      #if CONFIG_SPLC_ASSERT == 1
                      if(adr >= SPREG_END)
                              while(1);
              #endif
1900   1      }
*** WARNING C280 IN LINE 1895 OF MainApp\sPlc.c: 'adr': unreferenced local variable
1901          static void clearDM(void){//清除DM寄存器
1902   1              uint16_t i;
1903   1              for(i = 0;i <= DM_END;i ++){
1904   2                      NVRAM0[i] = 0x0;
1905   2                      NVRAM1[i] = 0x0;
1906   2              }
1907   1      }
1908          static void clearMR(void){//清除MR寄存器
1909   1              uint16_t i;
1910   1              for(i = MR_START;i <= MR_END;i ++){
1911   2                      NVRAM0[i] = 0x0;
1912   2                      NVRAM1[i] = 0x0;
1913   2              }
1914   1      }
1915          static void clearEM(void){//清除EM寄存器
1916   1              uint16_t i;
1917   1              for(i = EM_START;i <= EM_END;i ++){
1918   2                      NVRAM0[i] = 0x0;
1919   2                      NVRAM1[i] = 0x0;
1920   2              }
1921   1      }
1922          static void clearR(void){//清除R寄存器
1923   1              uint16_t i;
1924   1              for(i = R_START;i <= R_END;i ++){
1925   2                      NVRAM0[i] = 0x0;
1926   2                      NVRAM1[i] = 0x0;
1927   2              }
1928   1      }
1929          static void clearT(void){//清除T寄存器
1930   1              uint16_t i;
1931   1              for(i = T_1MS_START;i <= T_1MS_END;i ++){
1932   2                      NVRAM0[i] = 0x0;
1933   2                      NVRAM1[i] = 0x0;
1934   2              }
1935   1              for(i = T_10MS_START;i <= T_10MS_END;i ++){
1936   2                      NVRAM0[i] = 0x0;
1937   2                      NVRAM1[i] = 0x0;
1938   2              }
1939   1              for(i = T_100MS_START;i <= T_100MS_END;i ++){
1940   2                      NVRAM0[i] = 0x0;
1941   2                      NVRAM1[i] = 0x0;
1942   2              }
1943   1      }
1944          static void clearTD(void){//清除TD寄存器
1945   1              uint16_t i;
1946   1              for(i = TD_1MS_START;i <= TD_1MS_END;i ++){
1947   2                      NVRAM0[i] = 0x0;
1948   2                      NVRAM1[i] = 0x0;
1949   2              }
1950   1              for(i = TD_10MS_START;i <= TD_10MS_END;i ++){
1951   2                      NVRAM0[i] = 0x0;
1952   2                      NVRAM1[i] = 0x0;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 90  

1953   2              }
1954   1              for(i = TD_100MS_START;i <= TD_100MS_END;i ++){
1955   2                      NVRAM0[i] = 0x0;
1956   2                      NVRAM1[i] = 0x0;
1957   2              }
1958   1      }
1959          static void clearC(void){//清除C寄存器
1960   1              uint16_t i;
1961   1              for(i = C_START;i <= C_END;i ++){
1962   2                      NVRAM0[i] = 0x0;
1963   2                      NVRAM1[i] = 0x0;
1964   2              }
1965   1      }
1966          static void clearX(void){//清除X寄存器
1967   1              uint16_t i;
1968   1              for(i = X_START;i <= X_END;i ++){
1969   2                      NVRAM0[i] = 0x0;
1970   2                      NVRAM1[i] = 0x0;
1971   2              }
1972   1      }
1973          static void clearY(void){//清除Y寄存器
1974   1              uint16_t i;
1975   1              for(i = Y_START;i <= Y_END;i ++){
1976   2                      NVRAM0[i] = 0x0;
1977   2                      NVRAM1[i] = 0x0;
1978   2              }
1979   1      }
1980          static void clearSPREG(void){
1981   1              uint16_t i;
1982   1              for(i = SPREG_START;i <= SPREG_END;i ++){
1983   2                      NVRAM0[i] = 0x0;
1984   2                      NVRAM1[i] = 0x0;
1985   2              }
1986   1      }
1987          static void clearSPCOIL(){
1988   1              uint16_t i;
1989   1              for(i = SPCOIL_START;i <= SPCOIL_END;i ++){
1990   2                      NVRAM0[i] = 0x0;
1991   2                      NVRAM1[i] = 0x0;
1992   2              }
1993   1      }
1994          static void nvramLoad(void){//从EPROM中载入NVRAM
1995   1              memset(NVRAM0, 0x0, (CONFIG_NVRAM_SIZE * 2));//初始化NVRAM
1996   1              setLedEprom(DEBUG_LED_ON);
1997   1              epromRead(0, (uint8_t*)NVRAM0, (CONFIG_NVRAM_SIZE * 2));//从EPROM中恢复MR
1998   1              setLedEprom(DEBUG_LED_OFF);
1999   1              clearEM();
2000   1              clearR();
2001   1              clearT();
2002   1              clearTD();
2003   1              clearC();
2004   1              clearX();
2005   1              clearY();
2006   1              clearSPREG();
2007   1              clearSPCOIL();
2008   1              memcpy(NVRAM1, NVRAM0, (CONFIG_NVRAM_SIZE * 2));
2009   1      }
2010          static void nvramSave(void){//强制将NVRAM存入EPROM
2011   1              DISABLE_INTERRUPT;
2012   1              setLedEprom(DEBUG_LED_ON);
2013   1              epromWrite(0x0, (uint8_t*)NVRAM0, ((MR_END + 1) * 2));
2014   1              setLedEprom(DEBUG_LED_OFF);
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 91  

2015   1              ENABLE_INTERRUPT;
2016   1      }
2017          static void nvramUpdata(void){//更新NVRAM->EPROM
2018   1              data uint8_t *sp0, *sp1;
2019   1              data uint16_t i;
2020   1              sp0 = (uint8_t*)NVRAM0;
2021   1              sp1 = (uint8_t*)NVRAM1;
2022   1              for(i = (MR_START * 2);i < ((MR_END + 1) * 2);i ++){//储存MR
2023   2                      if(*(sp0 + i) != *(sp1 + i)){
2024   3                              setLedEprom(DEBUG_LED_ON);
2025   3                              epromWriteOneByte(i, *(sp0 + i));
2026   3                              setLedEprom(DEBUG_LED_OFF);
2027   3                      }       
2028   2              }
2029   1              sp0 = (uint8_t*)NVRAM0;
2030   1              sp1 = (uint8_t*)NVRAM1;
2031   1              for(i = (DM_START * 2);i < ((DM_END + 1) * 2);i ++){//储存DM
2032   2                      if(*(sp0 + i) != *(sp1 + i)){
2033   3                              setLedEprom(DEBUG_LED_ON);
2034   3                              epromWriteOneByte(i, *(sp0 + i));
2035   3                              setLedEprom(DEBUG_LED_OFF);
2036   3                      }
2037   2              }
2038   1              memcpy((uint8_t*)NVRAM1, (uint8_t*)NVRAM0, (CONFIG_NVRAM_SIZE * 2));
2039   1      }
2040          /*****************************************************************************/
2041          //软逻辑指令
2042          void SET(uint16_t A) reentrant{//线圈置位
2043   1              assertCoilAddress(A);//检查地址范围
2044   1              NVRAM0[(A / 16)] |= 1 << (A % 16);
2045   1      }
2046          void RES(uint16_t A) reentrant{//线圈置零
2047   1              assertCoilAddress(A);//检查地址范围
2048   1              NVRAM0[(A / 16)] &= ~(1 << (A % 16));
2049   1      }
2050          void FLIP(uint16_t A) reentrant{//翻转
2051   1              uint16_t temp;
2052   1              assertCoilAddress(A);//检查地址范围
2053   1              temp= NVRAM0[(A / 16)] & (1 << (A % 16));
2054   1              if(temp)
2055   1                      RES(A);
2056   1              else
2057   1                      SET(A);
2058   1      }
2059          uint8_t LD(uint16_t A) reentrant{//载入
2060   1              assertCoilAddress(A);//检查地址范围
2061   1              return (uint8_t)(NVRAM0[(A / 16)] >> (A % 16)) & 0x01;
2062   1      }
2063          uint8_t LDB(uint16_t A) reentrant{//方向载入
2064   1              assertCoilAddress(A);//检查地址范围
2065   1              return !((uint8_t)(NVRAM0[(A / 16)] >> (A % 16)) & 0x01);
2066   1      }
2067          uint8_t LDP(uint16_t A) reentrant{//脉冲上升沿
2068   1              uint8_t temp0, temp1;
2069   1              assertCoilAddress(A);//检查地址范围
2070   1              temp0 = (uint8_t)(NVRAM0[(A / 16)] >> (A % 16)) & 0x01;
2071   1              temp1 = (uint8_t)(NVRAM1[(A / 16)] >> (A % 16)) & 0x01;
2072   1              if(temp0 == 1 && temp1 != 1)
2073   1                      return true;
2074   1              else
2075   1                      return false;
2076   1      }
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 92  

2077          uint8_t LDN(uint16_t A) reentrant{//脉冲下降沿
2078   1              uint8_t temp0, temp1;
2079   1              assertCoilAddress(A);
2080   1              temp0 = (uint8_t)(NVRAM0[(A / 16)] >> NVRAM0[(A % 16)]);
2081   1              temp1 = (uint8_t)(NVRAM1[(A / 16)] >> NVRAM1[(A % 16)]);
2082   1              if(!temp0 && temp1)
2083   1                      return 1;
2084   1              else
2085   1                      return 0;
2086   1      }
2087          void T1MS(uint8_t A, uint8_t start, uint16_t value){//1MS延时器
2088   1      #if CONFIG_DEBUG
                      if(A > (TD_1MS_END - TD_1MS_START + 1))
                              printf("T1MS:%d Over Num\n", A);
              #endif
2092   1              if(start){
2093   2                      if(NVRAM0[(TD_1MS_START + A)] >= value){
2094   3                              NVRAM0[(T_1MS_START + (A / 16))] |= 1 << (A % 16);
2095   3                      }
2096   2                      else{
2097   3                              NVRAM0[(T_1MS_START + (A / 16))] &= ~(1 << (A % 16));
2098   3                      }
2099   2                              
2100   2              }
2101   1              else{
2102   2                      NVRAM0[(T_1MS_START + (A / 16))] &= ~(1 << (A % 16));
2103   2                      NVRAM0[(TD_1MS_START + A)] = 0x0;
2104   2              }       
2105   1      }
2106          void T10MS(uint8_t A, uint8_t start, uint16_t value){//10MS延时器
2107   1      #if CONFIG_DEBUG
                      if(A > (TD_10MS_END - TD_10MS_START + 1))
                              printf("T10MS:%d Over Num\n", A);
              #endif
2111   1              if(start){
2112   2                      if(NVRAM0[(TD_10MS_START + A)] >= value){
2113   3                              NVRAM0[(T_10MS_START + (A / 16))] |= 1 << (A % 16);
2114   3                      }
2115   2                      else{
2116   3                              NVRAM0[(T_10MS_START + (A / 16))] &= ~(1 << (A % 16));
2117   3                      }
2118   2              }
2119   1              else{
2120   2                      NVRAM0[(T_10MS_START + (A / 16))] &= ~(1 << (A % 16));
2121   2                      NVRAM0[(TD_10MS_START + A)] = 0x0;
2122   2              }       
2123   1      }
2124          void T100MS(uint8_t A, uint8_t start, uint16_t value){//100MS延时器
2125   1      #if CONFIG_DEBUG
                      if(A > (TD_100MS_END - TD_100MS_START + 1))
                              printf("T100MS:%d Over Num\n", A);
              #endif
2129   1              if(start){
2130   2                      if(NVRAM0[(TD_100MS_START + A)] >= value){
2131   3                              NVRAM0[(T_100MS_START + (A / 16))] |= 1 << (A % 16);
2132   3                      }
2133   2                      else{
2134   3                              NVRAM0[(T_100MS_START + (A / 16))] &= ~(1 << (A % 16));
2135   3                      }       
2136   2              }
2137   1              else{
2138   2                      NVRAM0[(T_100MS_START + (A / 16))] &= ~(1 << (A % 16));
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 93  

2139   2                      NVRAM0[(TD_100MS_START + A)] = 0x0;
2140   2              }
2141   1      }
2142          int16_t TNTC(int16_t dat){//CODE转换为NTC测量温度温度
2143   1              uint16_t temp;
2144   1              fp32_t ftemp;
2145   1              if(dat >= CONFIG_SPLC_ADC_INTERNAL_VREF) dat = CONFIG_SPLC_ADC_INTERNAL_VREF;//限制输入最大值
2146   1              if(dat < 0) dat = 0;
2147   1              
2148   1              temp = (int16_t)(CONFIG_SPLC_ADC_INTERNAL_VREF * dat / 4096);//单位mV
2149   1              temp = 10000 * 5000 / (5000 - temp);//电源5V 分压电阻10K
2150   1              
2151   1              ftemp = ((1.0 / 3477)*log((fp32_t)(temp) / 10000)) + (1 / (25+273.0));//limo R25=10740,B=3450    uniquemode
             - 3988
2152   1              ftemp = ( 1.0 / ftemp ) - 273.0;
2153   1              if(ftemp >= 100) ftemp = 100;
2154   1              if(ftemp <= -100) ftemp = -100;
2155   1              return (int16_t)(ftemp * 10);
2156   1      }
2157          int16_t TENV(int16_t dat){//CODE转换为环境温度
2158   1              uint16_t temp;
2159   1              temp = (int16_t)(CONFIG_SPLC_ADC_INTERNAL_VREF * dat / 4096);//单位mV
2160   1              temp = (int16_t)((temp - CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET) * 1000 / CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN);
2161   1              return temp;
2162   1      }
2163          int16_t MAX(int16_t *s, uint8_t len){//找出长度为len的数据s中的最大值
2164   1              int16_t max;
2165   1              uint8_t i;
2166   1              max = *s;
2167   1              for(i = 0;i < len;i ++){
2168   2                      if(*(s +i) > max){
2169   3                              max = *(s + i);
2170   3                      }
2171   2              }
2172   1              return max;
2173   1      }
2174          int16_t MIN(int16_t *s, uint8_t len){//找出长度为len的数据s中的最小值
2175   1              int16_t min;
2176   1              uint8_t i;
2177   1              min = *s;
2178   1              for(i = 0;i < len;i ++){
2179   2                      if(*(s +i) < min){
2180   3                              min = *(s + i);
2181   3                      }
2182   2              }
2183   1              return min;
2184   1      }
2185          /*****************************************************************************/
2186          static void wdtInit(void){//看门狗初始化
2187   1      #ifdef C8051F020
2188   1              WDTCN = 0x07;//47mS
2189   1      #endif
2190   1      }
2191          static void wdtEnable(void){//使能看门狗
2192   1      #ifdef C8051F020
2193   1              WDTCN = 0xA5;
2194   1      #endif
2195   1      }
2196          static void wdtDisable(void){//关闭看门狗(未锁定)
2197   1              uint8_t flagEA;
2198   1              flagEA = EA;
2199   1              EA = 0;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 94  

2200   1      #ifdef C8051F020
2201   1              WDTCN = 0xDE;
2202   1          WDTCN = 0xAD;
2203   1      #endif
2204   1      #ifdef C8051F020
2205   1      #endif
2206   1              EA = flagEA;
2207   1      }
2208          static void wdtFeed(void) reentrant{//喂狗
2209   1      #ifdef C8051F020
2210   1              WDTCN = 0xA5;
2211   1      #endif
2212   1      }
2213          
2214          static void pcaInit(void){//硬件PCA初始化
2215   1      }
2216          static void timer0Init(void){//硬件sTimer计时器初始化
2217   1              data uint16_t temp;
2218   1              TimerCounter_1mS = 0;
2219   1              TimerCounter_10mS = 0;
2220   1      #ifdef C8051F020
2221   1              temp = (uint16_t)(65536 - (CONFIG_SYSCLK / 12 /CONFIG_SOFTPLC_HWTIME));
2222   1              Timer0_L = temp & 0xFF;
2223   1              Timer0_H = (temp >> 8) & 0xFF;
2224   1              TH0 = Timer0_H;// Init T0 High register
2225   1              TL0 = Timer0_L;// Init T0 Low register
2226   1              CKCON &= ~(1 << 3);//SYSCLK / 12        
2227   1              TMOD &= 0xF0;
2228   1              TMOD |= (1 << 0);// T0 in 16-bit mode
2229   1              ET0 = 1;// T0 interrupt enabled
2230   1              TR0 = 1;// T0 ON
2231   1      #endif
2232   1      }
2233          static void timer0Isr(void) interrupt INTERRUPT_TIMER0{//硬件sTimer计时器中断 1mS
2234   1              uint16_t i;
2235   1              TF0 = 0;
2236   1              TR0 = 0;
2237   1              TH0 = Timer0_H;
2238   1              TL0 = Timer0_L;
2239   1              TR0 = 1;
2240   1              if((NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] >> (SPCOIL_PS1MS % 16)) & 0x01){//ON
2241   2                      NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS1MS % 16));
2242   2              }
2243   1              else{//OFF
2244   2                      NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS1MS % 16));
2245   2              }
2246   1              for(i = TD_1MS_START;i <= TD_1MS_END;i ++){//1mS计时
2247   2                      if(NVRAM0[i] < SHRT_MAX){
2248   3                              NVRAM0[i] ++;
2249   3                      }
2250   2              }
2251   1              if(TimerCounter_1mS >= 10){//10mS计算
2252   2                      if((NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] >> (SPCOIL_PS10MS % 16)) & 0x01){//ON
2253   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS10MS % 16));
2254   3                      }
2255   2                      else{//OFF
2256   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS10MS % 16));
2257   3                      }
2258   2                      for(i = TD_10MS_START;i <= TD_10MS_END;i ++){
2259   3                              if(NVRAM0[i] < SHRT_MAX){
2260   4                                      NVRAM0[i] ++;
2261   4                              }
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 95  

2262   3                      }
2263   2                      TimerCounter_10mS ++;
2264   2                      TimerCounter_1mS = 0;
2265   2              }
2266   1              if(TimerCounter_10mS >= 10){//100ms计算
2267   2                      if((NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] >> (SPCOIL_PS100MS % 16)) & 0x01){//ON
2268   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS100MS % 16));
2269   3                      }
2270   2                      else{//OFF
2271   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS100MS % 16));
2272   3                      }
2273   2                      for(i = TD_100MS_START;i < TD_100MS_END;i ++){
2274   3                              if(NVRAM0[i] < SHRT_MAX){
2275   4                                      NVRAM0[i] ++;
2276   4                              }
2277   3                      }
2278   2                      TimerCounter_10mS = 0;
2279   2                      if(getLedRun()){
2280   3                              setLedRun(false);
2281   3                      }
2282   2                      else{
2283   3                              setLedRun(true);
2284   3                      }
2285   2              }
2286   1      #if CONFIG_SPLC_USING_ADC == 1
2287   1              adcProcess();//ADC扫描
2288   1      #endif
2289   1              TimerCounter_1mS ++;
2290   1      }
2291          
2292          static void inputInit(void){//IO输入滤波器初始化
2293   1              memset(inputFilter, 0x0, (X_END - X_START + 1) * 16);
2294   1      }
2295          static void outputInit(void){
2296   1      #ifdef C8051F020
2297   1              
2298   1      #endif
2299   1      }
2300          static void inputRefresh(void){//获取输入IO
2301   1              uint8_t ctemp0;
2302   1              ctemp0 = ((P6 >> 7) & 0x01);
2303   1              if(ctemp0){
2304   2                      if(inputFilter[0] < CONFIG_INPUT_FILTER_TIME){
2305   3                              inputFilter[0] ++;
2306   3                      }
2307   2                      else{
2308   3                              NVRAM0[X_START] |= (int16_t)(1 << 0);
2309   3                      }
2310   2              }
2311   1              else{
2312   2                      if(inputFilter[0] > (CONFIG_INPUT_FILTER_TIME * -1)){
2313   3                              inputFilter[0] --;
2314   3                      }
2315   2                      else{
2316   3                              NVRAM0[X_START] &= ~(uint16_t)(1 << 0);
2317   3                      }
2318   2              }
2319   1              ctemp0 = ((P6 >> 6) & 0x01);
2320   1              if(ctemp0){
2321   2                      if(inputFilter[1] < CONFIG_INPUT_FILTER_TIME){
2322   3                              inputFilter[1] ++;
2323   3                      }
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 96  

2324   2                      else{
2325   3                              NVRAM0[X_START] |= (int16_t)(1 << 1);
2326   3                      }
2327   2              }
2328   1              else{
2329   2                      if(inputFilter[1] > (CONFIG_INPUT_FILTER_TIME * -1)){
2330   3                              inputFilter[1] --;
2331   3                      }
2332   2                      else{
2333   3                              NVRAM0[X_START] &= ~(uint16_t)(1 << 1);
2334   3                      }
2335   2              }
2336   1      }
2337          static void outputRefresh(void){//设置输出IO
2338   1              if((NVRAM0[Y_START] >> 0) & 0x01){//P6_5
2339   2                      P6 |= (uint8_t)(1 << 5);
2340   2              }
2341   1              else{
2342   2                      P6 &= ~(uint8_t)(1 << 5);
2343   2              }
2344   1              if((NVRAM0[Y_START] >> 1) & 0x01){//P6_4
2345   2                      P6 |= (uint8_t)(1 << 4);
2346   2              }
2347   1              else{
2348   2                      P6 &= ~(uint8_t)(1 << 4);
2349   2              }
2350   1      }
2351          static void chipAdcInit(void){//ADC模块初始化
2352   1              uint8_t i;
2353   1              //CHIP0
2354   1              ADCMUX_0_3_OE1 = true;
2355   1              ADCMUX_0_3_OE2 = true;
2356   1              //CHIP1
2357   1              ADCMUC_4_7_OE1 = true;
2358   1              ADCMUC_4_7_OE2 = true;
2359   1              //CHIP2
2360   1              ADCMUX_8_11_OE1 = true;
2361   1              ADCMUX_8_11_OE2 = true;
2362   1              //CHIP3
2363   1              ADCMUX_12_15_OE1 = true;
2364   1              ADCMUX_12_15_OE2 = true;
2365   1              //CHIP4
2366   1              ADCMUX_16_19_OE1 = true;
2367   1              ADCMUX_16_19_OE2 = true;
2368   1              //CHIP5
2369   1              ADCMUX_20_23_OE1 = true;
2370   1              ADCMUX_20_23_OE2 = true;
2371   1              //CHIP6
2372   1              ADCMUX_24_27_OE1 = true;
2373   1              ADCMUX_24_27_OE2 = true;
2374   1      #ifdef C8051F020
2375   1              ADC0CN = 0x0;//软件触发
2376   1              ADC0CN |= (1 << 6);//AD0TM = 1 启用跟踪
2377   1              ADC0CN |= (1 << 7);//AD0EN = 1 
2378   1              ADC0CF = 0x0;
2379   1              ADC0CF |= (CONFIG_SYSCLK / SAR_CLK) << 3;     // ADC conversion clock = 2.5MHz
2380   1              AMX0CF = 0x00;                      // AIN inputs are single-ended (default)
2381   1              AMX0SL = 0x00;                      // Select AIN0.1 pin as ADC mux input
2382   1              AD0INT = 1;
2383   1              AD0BUSY = 1;//AD0BUSY写入1
2384   1      #endif
2385   1              adcSelect = 0;
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 97  

2386   1              for(i = 0;i <= CONFIG_SPLC_ADC_CHANNLE;i ++){
2387   2                      initAdcData(&adcTempDat[i]);
2388   2              }
2389   1      }
2390          static void refreshDac(void){//刷新DAC
2391   1              //LD板0
2392   1              if(NVRAM0[EM_DAC_0] != NVRAM1[EM_DAC_0]){//CH0
2393   2                      setLedDac(DEBUG_LED_ON);
2394   2                      dac8568_0_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_0]);
2395   2                      setLedDac(DEBUG_LED_OFF);
2396   2              }
2397   1              if(NVRAM0[EM_DAC_1] != NVRAM1[EM_DAC_1]){//CH1
2398   2                      setLedDac(DEBUG_LED_ON);
2399   2                      dac8568_0_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_1]);
2400   2                      setLedDac(DEBUG_LED_OFF);
2401   2              }
2402   1              if(NVRAM0[EM_DAC_2] != NVRAM1[EM_DAC_2]){//CH2
2403   2                      setLedDac(DEBUG_LED_ON);
2404   2                      dac8568_0_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_2]);
2405   2                      setLedDac(DEBUG_LED_OFF);
2406   2              }
2407   1              if(NVRAM0[EM_DAC_3] != NVRAM1[EM_DAC_3]){//CH3
2408   2                      setLedDac(DEBUG_LED_ON);
2409   2                      dac8568_0_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_3]);
2410   2                      setLedDac(DEBUG_LED_OFF);
2411   2              }
2412   1              if(NVRAM0[EM_DAC_4] != NVRAM1[EM_DAC_4]){//CH4
2413   2                      setLedDac(DEBUG_LED_ON);
2414   2                      dac8568_0_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_4]);
2415   2                      setLedDac(DEBUG_LED_OFF);
2416   2              }
2417   1              if(NVRAM0[EM_DAC_5] != NVRAM1[EM_DAC_5]){//CH5
2418   2                      setLedDac(DEBUG_LED_ON);
2419   2                      dac8568_0_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_5]);
2420   2                      setLedDac(DEBUG_LED_OFF);
2421   2              }
2422   1              if(NVRAM0[EM_DAC_6] != NVRAM1[EM_DAC_6]){//CH6
2423   2                      setLedDac(DEBUG_LED_ON);
2424   2                      dac8568_0_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_6]);
2425   2                      setLedDac(DEBUG_LED_OFF);
2426   2              }
2427   1              if(NVRAM0[EM_DAC_7] != NVRAM1[EM_DAC_7]){//CH7
2428   2                      setLedDac(DEBUG_LED_ON);
2429   2                      dac8568_0_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_7]);
2430   2                      setLedDac(DEBUG_LED_OFF);
2431   2              }
2432   1              //LD板1
2433   1              if(NVRAM0[EM_DAC_8] != NVRAM1[EM_DAC_8]){//CH8
2434   2                      setLedDac(DEBUG_LED_ON);
2435   2                      dac8568_1_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_8]);
2436   2                      setLedDac(DEBUG_LED_OFF);
2437   2              }
2438   1              if(NVRAM0[EM_DAC_9] != NVRAM1[EM_DAC_9]){//CH9
2439   2                      setLedDac(DEBUG_LED_ON);
2440   2                      dac8568_1_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_9]);
2441   2                      setLedDac(DEBUG_LED_OFF);
2442   2              }
2443   1              if(NVRAM0[EM_DAC_10] != NVRAM1[EM_DAC_10]){//CH10
2444   2                      setLedDac(DEBUG_LED_ON);
2445   2                      dac8568_1_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_10]);
2446   2                      setLedDac(DEBUG_LED_OFF);
2447   2              }
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 98  

2448   1              if(NVRAM0[EM_DAC_11] != NVRAM1[EM_DAC_11]){//CH11
2449   2                      setLedDac(DEBUG_LED_ON);
2450   2                      dac8568_1_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_11]);
2451   2                      setLedDac(DEBUG_LED_OFF);
2452   2              }
2453   1              if(NVRAM0[EM_DAC_12] != NVRAM1[EM_DAC_12]){//CH12
2454   2                      setLedDac(DEBUG_LED_ON);
2455   2                      dac8568_1_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_12]);
2456   2                      setLedDac(DEBUG_LED_OFF);
2457   2              }
2458   1              if(NVRAM0[EM_DAC_13] != NVRAM1[EM_DAC_13]){//CH13
2459   2                      setLedDac(DEBUG_LED_ON);
2460   2                      dac8568_1_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_13]);
2461   2                      setLedDac(DEBUG_LED_OFF);
2462   2              }
2463   1              if(NVRAM0[EM_DAC_14] != NVRAM1[EM_DAC_14]){//CH14
2464   2                      setLedDac(DEBUG_LED_ON);
2465   2                      dac8568_1_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_14]);
2466   2                      setLedDac(DEBUG_LED_OFF);
2467   2              }
2468   1              if(NVRAM0[EM_DAC_15] != NVRAM1[EM_DAC_15]){//CH15
2469   2                      setLedDac(DEBUG_LED_ON);
2470   2                      dac8568_1_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_15]);
2471   2                      setLedDac(DEBUG_LED_OFF);
2472   2              }
2473   1              //LD板2
2474   1              if(NVRAM0[EM_DAC_16] != NVRAM1[EM_DAC_16]){//CH16
2475   2                      setLedDac(DEBUG_LED_ON);
2476   2                      dac8568_2_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_16]);
2477   2                      setLedDac(DEBUG_LED_OFF);
2478   2              }
2479   1              if(NVRAM0[EM_DAC_17] != NVRAM1[EM_DAC_17]){//CH17
2480   2                      setLedDac(DEBUG_LED_ON);
2481   2                      dac8568_2_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_17]);
2482   2                      setLedDac(DEBUG_LED_OFF);
2483   2              }
2484   1              if(NVRAM0[EM_DAC_18] != NVRAM1[EM_DAC_18]){//CH18
2485   2                      setLedDac(DEBUG_LED_ON);
2486   2                      dac8568_2_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_18]);
2487   2                      setLedDac(DEBUG_LED_OFF);
2488   2              }
2489   1              if(NVRAM0[EM_DAC_19] != NVRAM1[EM_DAC_19]){//CH19
2490   2                      setLedDac(DEBUG_LED_ON);
2491   2                      dac8568_2_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_19]);
2492   2                      setLedDac(DEBUG_LED_OFF);
2493   2              }
2494   1              if(NVRAM0[EM_DAC_20] != NVRAM1[EM_DAC_20]){//CH20
2495   2                      setLedDac(DEBUG_LED_ON);
2496   2                      dac8568_2_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_20]);
2497   2                      setLedDac(DEBUG_LED_OFF);
2498   2              }
2499   1              if(NVRAM0[EM_DAC_21] != NVRAM1[EM_DAC_21]){//CH21
2500   2                      setLedDac(DEBUG_LED_ON);
2501   2                      dac8568_2_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_21]);
2502   2                      setLedDac(DEBUG_LED_OFF);
2503   2              }
2504   1              if(NVRAM0[EM_DAC_22] != NVRAM1[EM_DAC_22]){//CH22
2505   2                      setLedDac(DEBUG_LED_ON);
2506   2                      dac8568_2_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_22]);
2507   2                      setLedDac(DEBUG_LED_OFF);
2508   2              }
2509   1              if(NVRAM0[EM_DAC_23] != NVRAM1[EM_DAC_23]){//CH23
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 99  

2510   2                      setLedDac(DEBUG_LED_ON);
2511   2                      dac8568_2_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_23]);
2512   2                      setLedDac(DEBUG_LED_OFF);
2513   2              }
2514   1              //板4
2515   1              if(NVRAM0[EM_DAC_24] != NVRAM1[EM_DAC_24]){//CH24
2516   2                      setLedDac(DEBUG_LED_ON);
2517   2                      dac8568_3_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_24]);
2518   2                      setLedDac(DEBUG_LED_OFF);
2519   2              }
2520   1              if(NVRAM0[EM_DAC_25] != NVRAM1[EM_DAC_25]){//CH25
2521   2                      setLedDac(DEBUG_LED_ON);
2522   2                      dac8568_3_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_26]);
2523   2                      setLedDac(DEBUG_LED_OFF);
2524   2              }
2525   1              if(NVRAM0[EM_DAC_26] != NVRAM1[EM_DAC_26]){//CH26
2526   2                      setLedDac(DEBUG_LED_ON);
2527   2                      dac8568_3_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_26]);
2528   2                      setLedDac(DEBUG_LED_OFF);
2529   2              }
2530   1              if(NVRAM0[EM_DAC_27] != NVRAM1[EM_DAC_27]){//CH27
2531   2                      setLedDac(DEBUG_LED_ON);
2532   2                      dac8568_3_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_27]);
2533   2                      setLedDac(DEBUG_LED_OFF);
2534   2              }
2535   1              if(NVRAM0[EM_DAC_28] != NVRAM1[EM_DAC_28]){//CH28
2536   2                      setLedDac(DEBUG_LED_ON);
2537   2                      dac8568_3_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_28]);
2538   2                      setLedDac(DEBUG_LED_OFF);
2539   2              }
2540   1              if(NVRAM0[EM_DAC_29] != NVRAM1[EM_DAC_29]){//CH29
2541   2                      setLedDac(DEBUG_LED_ON);
2542   2                      dac8568_3_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_29]);
2543   2                      setLedDac(DEBUG_LED_OFF);
2544   2              }
2545   1              if(NVRAM0[EM_DAC_30] != NVRAM1[EM_DAC_30]){//CH30
2546   2                      setLedDac(DEBUG_LED_ON);
2547   2                      dac8568_3_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_30]);
2548   2                      setLedDac(DEBUG_LED_OFF);
2549   2              }
2550   1              if(NVRAM0[EM_DAC_31] != NVRAM1[EM_DAC_31]){//CH31
2551   2                      setLedDac(DEBUG_LED_ON);
2552   2                      dac8568_3_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_31]);
2553   2                      setLedDac(DEBUG_LED_OFF);
2554   2              }
2555   1      }
2556          static void chipDacInit(void){//初始化DAC
2557   1              dac8568_0_Init();
2558   1              dac8568_1_Init();
2559   1              dac8568_2_Init();
2560   1              dac8568_3_Init();
2561   1      }
2562          void sPlcInit(void){//软逻辑初始化
2563   1              setLedError(DEBUG_LED_OFF);
2564   1              setLedRun(DEBUG_LED_OFF);
2565   1              setLedDac(DEBUG_LED_OFF);
2566   1              setLedEprom(DEBUG_LED_OFF);
2567   1              wdtInit();//看门狗使能
2568   1              wdtDisable();//屏蔽看门狗
2569   1      #if CONFIG_SPLC_USING_UART1 == 1
2570   1              initUart1(CONFIG_UART1_BAUDRATE);//UART1初始化
2571   1      #endif  
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 100 

2572   1      #if CONFIG_SPLC_USING_EPROM == 1
2573   1              nvramLoad();//上电恢复NVRAM
2574   1      #endif
2575   1      #if CONFIG_SPLC_USING_ADC == 1
2576   1              chipAdcInit();//初始化ADC模块
2577   1      #endif
2578   1      #if CONFIG_SPLC_USING_DAC == 1
2579   1              chipDacInit();//初始化DAC模块
2580   1      #endif
2581   1      #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
2582   1              initModbus(CONFIG_MB_RTU_SLAVE_ADDRESS, CONFIG_UART0_BAUDRATE);
2583   1      #endif
2584   1              timer0Init();//初始化硬件计时器模块
2585   1              NVRAM0[(SPCOIL_START + (SPCOIL_ON / 16))] |= (uint16_t)(1 << (SPCOIL_ON % 16));
2586   1              setLedError(DEBUG_LED_OFF);
2587   1      }
2588          void sPlcProcessStart(void){//sPLC轮询起始
2589   1      #if CONFIG_SPLC_USING_WDT == 1
2590   1              wdtFeed();//喂狗
2591   1      #endif
2592   1      #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
2593   1              modbusPorcess();//处理MODBUS
2594   1      #endif
2595   1      #if CONFIG_SPLC_USING_IO_INPUT == 1
2596   1              inputRefresh();//读取X口输入
2597   1      #endif
2598   1      #if CONFIG_SPLC_USING_WDT == 1
2599   1              wdtFeed();
2600   1      #endif
2601   1      }
2602          void sPlcProcessEnd(void){//sPLC轮询结束
2603   1      #if CONFIG_SPLC_USING_WDT == 1
2604   1              wdtFeed();//喂狗
2605   1      #endif
2606   1      #if CONFIG_SPLC_USING_IO_OUTPUT == 1
2607   1              outputRefresh();//更新Y口输出
2608   1      #endif
2609   1      #if CONFIG_SPLC_USING_DAC
2610   1              refreshDac();//更新DAC输出
2611   1      #endif
2612   1      #if CONFIG_SPLC_USING_EPROM == 1
2613   1              nvramUpdata();//更新NVRAM
2614   1      #endif
2615   1      #if CONFIG_SPLC_USING_WDT == 1
2616   1              wdtFeed();//喂狗
2617   1      #endif
2618   1      }
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 101 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION getGlobalInterrupt (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 A2AF              MOV     C,EA
0002 E4                CLR     A
0003 33                RLC     A
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 57
0005 22                RET     
             ; FUNCTION getGlobalInterrupt (END)

             ; FUNCTION _setLedRun (BEGIN)
                                           ; SOURCE LINE # 58
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 59
0000 EF                MOV     A,R7
0001 6004              JZ      ?C0002
                                           ; SOURCE LINE # 60
0003 439601            ORL     P7,#01H
                                           ; SOURCE LINE # 61
0006 22                RET     
0007         ?C0002:
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
0007 5396FE            ANL     P7,#0FEH
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
000A         ?C0004:
000A 22                RET     
             ; FUNCTION _setLedRun (END)

             ; FUNCTION getLedRun (BEGIN)
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0000 E596              MOV     A,P7
0002 5401              ANL     A,#01H
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 68
0005 22                RET     
             ; FUNCTION getLedRun (END)

             ; FUNCTION _setLedEprom (BEGIN)
                                           ; SOURCE LINE # 69
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 70
0000 EF                MOV     A,R7
0001 6004              JZ      ?C0006
                                           ; SOURCE LINE # 71
0003 439602            ORL     P7,#02H
                                           ; SOURCE LINE # 72
0006 22                RET     
0007         ?C0006:
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
0007 5396FD            ANL     P7,#0FDH
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
000A         ?C0008:
000A 22                RET     
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 102 

             ; FUNCTION _setLedEprom (END)

             ; FUNCTION getLedEprom (BEGIN)
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
0000 E596              MOV     A,P7
0002 C3                CLR     C
0003 13                RRC     A
0004 5401              ANL     A,#01H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 79
0007 22                RET     
             ; FUNCTION getLedEprom (END)

             ; FUNCTION _setLedDac (BEGIN)
                                           ; SOURCE LINE # 80
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 81
0000 EF                MOV     A,R7
0001 6004              JZ      ?C0010
                                           ; SOURCE LINE # 82
0003 439604            ORL     P7,#04H
                                           ; SOURCE LINE # 83
0006 22                RET     
0007         ?C0010:
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
0007 5396FB            ANL     P7,#0FBH
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
000A         ?C0012:
000A 22                RET     
             ; FUNCTION _setLedDac (END)

             ; FUNCTION getLedDac (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
0000 E596              MOV     A,P7
0002 13                RRC     A
0003 13                RRC     A
0004 5401              ANL     A,#01H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 90
0007 22                RET     
             ; FUNCTION getLedDac (END)

             ; FUNCTION _setLedError (BEGIN)
                                           ; SOURCE LINE # 91
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 92
0000 EF                MOV     A,R7
0001 6004              JZ      ?C0014
                                           ; SOURCE LINE # 93
0003 439608            ORL     P7,#08H
                                           ; SOURCE LINE # 94
0006 22                RET     
0007         ?C0014:
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0007 5396F7            ANL     P7,#0F7H
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 103 

000A         ?C0016:
000A 22                RET     
             ; FUNCTION _setLedError (END)

             ; FUNCTION _?getLedError (BEGIN)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
0000 E596              MOV     A,P7
0002 13                RRC     A
0003 13                RRC     A
0004 13                RRC     A
0005 5401              ANL     A,#01H
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 101
0008 22                RET     
             ; FUNCTION _?getLedError (END)

             ; FUNCTION adcProcess (BEGIN)
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
;---- Variable 'result' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0018:
                                           ; SOURCE LINE # 105
0003 30EDFD            JNB     AD0INT,?C0018
                                           ; SOURCE LINE # 107
0006 E5BF              MOV     A,ADC0+01H
0008 540F              ANL     A,#0FH
000A FC                MOV     R4,A
000B ADBE              MOV     R5,ADC0
                                           ; SOURCE LINE # 108
000D 7800        R     MOV     R0,#LOW adcSelect
000F E6                MOV     A,@R0
0010 75F01F            MOV     B,#01FH
0013 A4                MUL     AB
0014 2400        R     ADD     A,#LOW adcTempDat
0016 F9                MOV     R1,A
0017 7400        R     MOV     A,#HIGH adcTempDat
0019 35F0              ADDC    A,B
001B FA                MOV     R2,A
001C 7B01              MOV     R3,#01H
001E 120000      R     LCALL   _refreshAdcData
                                           ; SOURCE LINE # 109
0021 7800        R     MOV     R0,#LOW adcSelect
0023 E6                MOV     A,@R0
0024 FF                MOV     R7,A
0025 75F01F            MOV     B,#01FH
0028 A4                MUL     AB
0029 2400        R     ADD     A,#LOW adcTempDat+01CH
002B F582              MOV     DPL,A
002D E5F0              MOV     A,B
002F 3400        R     ADDC    A,#HIGH adcTempDat+01CH
0031 F583              MOV     DPH,A
0033 E0                MOVX    A,@DPTR
0034 FC                MOV     R4,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FD                MOV     R5,A
0038 EF                MOV     A,R7
0039 FB                MOV     R3,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 104 

003A 7A00              MOV     R2,#00H
003C 25E0              ADD     A,ACC
003E FF                MOV     R7,A
003F EA                MOV     A,R2
0040 33                RLC     A
0041 FE                MOV     R6,A
0042 7400        R     MOV     A,#LOW NVRAM0+028H
0044 2F                ADD     A,R7
0045 F582              MOV     DPL,A
0047 7400        R     MOV     A,#HIGH NVRAM0+028H
0049 3E                ADDC    A,R6
004A F583              MOV     DPH,A
004C EC                MOV     A,R4
004D F0                MOVX    @DPTR,A
004E A3                INC     DPTR
004F ED                MOV     A,R5
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0051 C3                CLR     C
0052 EB                MOV     A,R3
0053 943F              SUBB    A,#03FH
0055 7480              MOV     A,#080H
0057 9480              SUBB    A,#080H
0059 5003              JNC     ?C0020
                                           ; SOURCE LINE # 111
005B 06                INC     @R0
                                           ; SOURCE LINE # 112
005C 8004              SJMP    ?C0021
005E         ?C0020:
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
005E E4                CLR     A
005F 7800        R     MOV     R0,#LOW adcSelect
0061 F6                MOV     @R0,A
                                           ; SOURCE LINE # 115
0062         ?C0021:
                                           ; SOURCE LINE # 116
0062 7800        R     MOV     R0,#LOW adcSelect
0064 E6                MOV     A,@R0
0065 B43C00            CJNE    A,#03CH,?C0295
0068         ?C0295:
0068 4003              JC      $ + 5H
006A 020000      R     LJMP    ?C0022
006D 900000      R     MOV     DPTR,#?C0296
0070 F8                MOV     R0,A
0071 28                ADD     A,R0
0072 28                ADD     A,R0
0073 73                JMP     @A+DPTR
0074         ?C0296:
0074 020000      R     LJMP    ?C0023
0077 020000      R     LJMP    ?C0024
007A 020000      R     LJMP    ?C0025
007D 020000      R     LJMP    ?C0026
0080 020000      R     LJMP    ?C0027
0083 020000      R     LJMP    ?C0028
0086 020000      R     LJMP    ?C0029
0089 020000      R     LJMP    ?C0030
008C 020000      R     LJMP    ?C0031
008F 020000      R     LJMP    ?C0032
0092 020000      R     LJMP    ?C0033
0095 020000      R     LJMP    ?C0034
0098 020000      R     LJMP    ?C0035
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 105 

009B 020000      R     LJMP    ?C0036
009E 020000      R     LJMP    ?C0037
00A1 020000      R     LJMP    ?C0038
00A4 020000      R     LJMP    ?C0039
00A7 020000      R     LJMP    ?C0040
00AA 020000      R     LJMP    ?C0041
00AD 020000      R     LJMP    ?C0042
00B0 020000      R     LJMP    ?C0043
00B3 020000      R     LJMP    ?C0044
00B6 020000      R     LJMP    ?C0045
00B9 020000      R     LJMP    ?C0046
00BC 020000      R     LJMP    ?C0047
00BF 020000      R     LJMP    ?C0048
00C2 020000      R     LJMP    ?C0049
00C5 020000      R     LJMP    ?C0050
00C8 020000      R     LJMP    ?C0022
00CB 020000      R     LJMP    ?C0022
00CE 020000      R     LJMP    ?C0022
00D1 020000      R     LJMP    ?C0022
00D4 020000      R     LJMP    ?C0051
00D7 020000      R     LJMP    ?C0052
00DA 020000      R     LJMP    ?C0053
00DD 020000      R     LJMP    ?C0054
00E0 020000      R     LJMP    ?C0055
00E3 020000      R     LJMP    ?C0056
00E6 020000      R     LJMP    ?C0057
00E9 020000      R     LJMP    ?C0058
00EC 020000      R     LJMP    ?C0059
00EF 020000      R     LJMP    ?C0060
00F2 020000      R     LJMP    ?C0061
00F5 020000      R     LJMP    ?C0062
00F8 020000      R     LJMP    ?C0063
00FB 020000      R     LJMP    ?C0064
00FE 020000      R     LJMP    ?C0065
0101 020000      R     LJMP    ?C0066
0104 020000      R     LJMP    ?C0067
0107 020000      R     LJMP    ?C0068
010A 020000      R     LJMP    ?C0069
010D 020000      R     LJMP    ?C0069
0110 020000      R     LJMP    ?C0071
0113 020000      R     LJMP    ?C0072
0116 020000      R     LJMP    ?C0073
0119 020000      R     LJMP    ?C0074
011C 020000      R     LJMP    ?C0075
011F 020000      R     LJMP    ?C0076
0122 020000      R     LJMP    ?C0077
0125 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 117
0128         ?C0023:
                                           ; SOURCE LINE # 119
0128 E4                CLR     A
0129 F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 121
012B D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 122
012D D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 123
012F C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 129
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 106 

                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0131 8009              SJMP    ?C0387
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0133         ?C0024:
                                           ; SOURCE LINE # 150
0133 E4                CLR     A
0134 F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 152
0136 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 153
0138 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 154
013A D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 155
013C         ?C0387:
013C D294              SETB    ADCMUX_0_3_S0
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
013E 020000      R     LJMP    ?C0415
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
0141         ?C0025:
                                           ; SOURCE LINE # 181
0141 E4                CLR     A
0142 F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 183
0144 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 184
0146 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 185
0148 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 191
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 107 

                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
014A 8009              SJMP    ?C0389
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
014C         ?C0026:
                                           ; SOURCE LINE # 212
014C E4                CLR     A
014D F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 214
014F D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 215
0151 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 216
0153 D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 217
0155         ?C0389:
0155 D294              SETB    ADCMUX_0_3_S0
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0157 020000      R     LJMP    ?C0416
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
015A         ?C0027:
                                           ; SOURCE LINE # 243
015A 75BB01            MOV     AMX0SL,#01H
                                           ; SOURCE LINE # 245
015D D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 246
015F D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 248
0161 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 249
0163 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 250
0165 C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 251
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 108 

0167 D292              SETB    ADCMUX_4_7_S0
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
0169 020000      R     LJMP    ?C0417
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
016C         ?C0028:
                                           ; SOURCE LINE # 274
016C 75BB01            MOV     AMX0SL,#01H
                                           ; SOURCE LINE # 276
016F D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 277
0171 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 279
0173 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 280
0175 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 281
0177 D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 282
0179 D294              SETB    ADCMUX_0_3_S0
                                           ; SOURCE LINE # 284
017B         ?C0391:
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
017B 020000      R     LJMP    ?C0417
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
017E         ?C0029:
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 318
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 109 

                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
017E 8000              SJMP    ?C0393
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
0180         ?C0030:
                                           ; SOURCE LINE # 336
0180         ?C0393:
0180 75BB01            MOV     AMX0SL,#01H
                                           ; SOURCE LINE # 338
0183 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 339
0185 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 341
0187 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 342
0189 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 343
018B D291              SETB    ADCMUX_4_7_S1
                                           ; SOURCE LINE # 344
018D D292              SETB    ADCMUX_4_7_S0
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
018F 020000      R     LJMP    ?C0418
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
0192         ?C0031:
                                           ; SOURCE LINE # 367
0192 75BB02            MOV     AMX0SL,#02H
                                           ; SOURCE LINE # 369
0195 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 370
0197 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 372
0199 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 373
019B D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 375
019D D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 376
019F D2A5              SETB    ADCMUX_8_11_OE2
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 110 

                                           ; SOURCE LINE # 377
01A1 C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
01A3 8011              SJMP    ?C0395
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
01A5         ?C0032:
                                           ; SOURCE LINE # 398
01A5 75BB02            MOV     AMX0SL,#02H
                                           ; SOURCE LINE # 400
01A8 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 401
01AA D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 403
01AC D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 404
01AE D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 406
01B0 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 407
01B2 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 408
01B4 D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 409
01B6         ?C0395:
01B6 D2A4              SETB    ADCMUX_8_11_S0
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
01B8 020000      R     LJMP    ?C0420
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
01BB         ?C0033:
                                           ; SOURCE LINE # 429
01BB 75BB02            MOV     AMX0SL,#02H
                                           ; SOURCE LINE # 431
01BE D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 432
01C0 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 434
01C2 D290              SETB    ADCMUC_4_7_OE1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 111 

                                           ; SOURCE LINE # 435
01C4 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 437
01C6 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 438
01C8 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 439
01CA C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
01CC 8011              SJMP    ?C0397
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
01CE         ?C0034:
                                           ; SOURCE LINE # 460
01CE 75BB02            MOV     AMX0SL,#02H
                                           ; SOURCE LINE # 462
01D1 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 463
01D3 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 465
01D5 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 466
01D7 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 468
01D9 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 469
01DB D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 470
01DD D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 471
01DF         ?C0397:
01DF D2A4              SETB    ADCMUX_8_11_S0
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
01E1 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
01E4         ?C0035:
                                           ; SOURCE LINE # 491
01E4 75BB03            MOV     AMX0SL,#03H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 112 

                                           ; SOURCE LINE # 493
01E7 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 494
01E9 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 496
01EB D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 497
01ED D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 499
01EF D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 500
01F1 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 502
01F3 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 503
01F5 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 504
01F7 C2A2              CLR     ADCMUX_12_15_S1
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
01F9 8015              SJMP    ?C0399
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
01FB         ?C0036:
                                           ; SOURCE LINE # 522
01FB 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 524
01FE D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 525
0200 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 527
0202 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 528
0204 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 530
0206 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 531
0208 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 533
020A D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 534
020C D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 535
020E D2A2              SETB    ADCMUX_12_15_S1
                                           ; SOURCE LINE # 536
0210         ?C0399:
0210 D2A0              SETB    ADCMUX_12_15_S0
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 113 

                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 549
0212 020000      R     LJMP    ?C0421
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
0215         ?C0037:
                                           ; SOURCE LINE # 553
0215 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 555
0218 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 556
021A D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 558
021C D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 559
021E D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 561
0220 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 562
0222 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 564
0224 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 565
0226 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 566
0228 C2A2              CLR     ADCMUX_12_15_S1
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
022A 8015              SJMP    ?C0401
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
022C         ?C0038:
                                           ; SOURCE LINE # 584
022C 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 586
022F D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 587
0231 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 589
0233 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 590
0235 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 592
0237 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 593
0239 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 595
023B D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 596
023D D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 597
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 114 

023F D2A2              SETB    ADCMUX_12_15_S1
                                           ; SOURCE LINE # 598
0241         ?C0401:
0241 D2A0              SETB    ADCMUX_12_15_S0
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 606
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
0243 020000      R     LJMP    ?C0422
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
0246         ?C0039:
                                           ; SOURCE LINE # 615
0246 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 617
0249 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 618
024B D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 620
024D D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 621
024F D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 623
0251 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 624
0253 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 626
0255 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 627
0257 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 629
0259 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 630
025B D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 631
025D C2B7              CLR     ADCMUX_16_19_S1
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 640
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
025F 8019              SJMP    ?C0403
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
0261         ?C0040:
                                           ; SOURCE LINE # 646
0261 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 648
0264 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 649
0266 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 651
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 115 

0268 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 652
026A D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 654
026C D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 655
026E D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 657
0270 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 658
0272 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 660
0274 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 661
0276 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 662
0278 D2B7              SETB    ADCMUX_16_19_S1
                                           ; SOURCE LINE # 663
027A         ?C0403:
027A D2B5              SETB    ADCMUX_16_19_S0
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 666
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
027C 020000      R     LJMP    ?C0423
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
027F         ?C0041:
                                           ; SOURCE LINE # 677
027F 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 679
0282 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 680
0284 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 682
0286 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 683
0288 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 685
028A D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 686
028C D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 688
028E D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 689
0290 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 691
0292 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 692
0294 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 693
0296 C2B7              CLR     ADCMUX_16_19_S1
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 116 

                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 704
0298 8019              SJMP    ?C0405
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
029A         ?C0042:
                                           ; SOURCE LINE # 708
029A 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 710
029D D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 711
029F D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 713
02A1 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 714
02A3 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 716
02A5 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 717
02A7 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 719
02A9 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 720
02AB D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 722
02AD D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 723
02AF D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 724
02B1 D2B7              SETB    ADCMUX_16_19_S1
                                           ; SOURCE LINE # 725
02B3         ?C0405:
02B3 D2B5              SETB    ADCMUX_16_19_S0
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
02B5 020000      R     LJMP    ?C0424
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
02B8         ?C0043:
                                           ; SOURCE LINE # 739
02B8 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 741
02BB D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 742
02BD D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 744
02BF D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 745
02C1 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 747
02C3 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 748
02C5 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 750
02C7 D2A3              SETB    ADCMUX_12_15_OE1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 117 

                                           ; SOURCE LINE # 751
02C9 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 753
02CB D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 754
02CD D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 756
02CF D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 757
02D1 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 758
02D3 C2B3              CLR     ADCMUX_20_23_S1
                                           ; SOURCE LINE # 759
02D5 D2B1              SETB    ADCMUX_20_23_S0
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
02D7 020000      R     LJMP    ?C0425
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 768
02DA         ?C0044:
                                           ; SOURCE LINE # 770
02DA 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 772
02DD D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 773
02DF D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 775
02E1 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 776
02E3 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 778
02E5 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 779
02E7 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 781
02E9 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 782
02EB D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 784
02ED D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 785
02EF D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 787
02F1 C2B2              CLR     ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 788
02F3 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 789
02F5 D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 790
02F7 D2B1              SETB    ADCMUX_20_23_S0
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 799
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 118 

02F9 805C              SJMP    ?C0408
                                           ; SOURCE LINE # 800
                                           ; SOURCE LINE # 801
02FB         ?C0045:
                                           ; SOURCE LINE # 803
02FB 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 805
02FE D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 806
0300 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 808
0302 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 809
0304 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 811
0306 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 812
0308 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 814
030A D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 815
030C D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 817
030E D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 818
0310 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 820
0312 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 821
0314 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 822
0316 C2B3              CLR     ADCMUX_20_23_S1
                                           ; SOURCE LINE # 823
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
                                           ; SOURCE LINE # 828
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
0318 801D              SJMP    ?C0409
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
031A         ?C0046:
                                           ; SOURCE LINE # 834
031A 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 836
031D D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 837
031F D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 839
0321 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 840
0323 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 842
0325 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 843
0327 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 845
0329 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 846
032B D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 848
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 119 

032D D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 849
032F D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 851
0331 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 852
0333 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 853
0335 D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 854
0337         ?C0409:
0337 D2B1              SETB    ADCMUX_20_23_S0
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 861
0339 020000      R     LJMP    ?C0426
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
033C         ?C0047:
                                           ; SOURCE LINE # 865
033C 75BB06            MOV     AMX0SL,#06H
                                           ; SOURCE LINE # 867
033F D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 868
0341 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 870
0343 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 871
0345 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 873
0347 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 874
0349 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 876
034B D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 877
034D D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 879
034F D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 880
0351 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 882
0353 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 883
0355 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 885
0357         ?C0408:
0357 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 886
0359 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 887
035B C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
035D 8021              SJMP    ?C0411
                                           ; SOURCE LINE # 893
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 120 

                                           ; SOURCE LINE # 894
035F         ?C0048:
                                           ; SOURCE LINE # 896
035F 75BB06            MOV     AMX0SL,#06H
                                           ; SOURCE LINE # 898
0362 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 899
0364 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 901
0366 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 902
0368 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 904
036A D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 905
036C D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 907
036E D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 908
0370 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 910
0372 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 911
0374 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 913
0376 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 914
0378 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 916
037A D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 917
037C D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 918
037E D287              SETB    ADCMUX_24_27_S1
                                           ; SOURCE LINE # 919
0380         ?C0411:
0380 D285              SETB    ADCMUX_24_27_S0
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
                                           ; SOURCE LINE # 922
                                           ; SOURCE LINE # 923
0382 020000      R     LJMP    ?C0427
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
0385         ?C0049:
                                           ; SOURCE LINE # 927
0385 75BB06            MOV     AMX0SL,#06H
                                           ; SOURCE LINE # 929
0388 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 930
038A D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 932
038C D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 933
038E D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 935
0390 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 936
0392 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 938
0394 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 939
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 121 

0396 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 941
0398 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 942
039A D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 944
039C D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 945
039E D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 947
03A0 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 948
03A2 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 949
03A4 C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 951
                                           ; SOURCE LINE # 952
                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 954
03A6 8021              SJMP    ?C0413
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 956
03A8         ?C0050:
                                           ; SOURCE LINE # 958
03A8 75BB06            MOV     AMX0SL,#06H
                                           ; SOURCE LINE # 960
03AB D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 961
03AD D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 963
03AF D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 964
03B1 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 966
03B3 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 967
03B5 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 969
03B7 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 970
03B9 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 972
03BB D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 973
03BD D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 975
03BF D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 976
03C1 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 978
03C3 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 979
03C5 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 980
03C7 D287              SETB    ADCMUX_24_27_S1
                                           ; SOURCE LINE # 981
03C9         ?C0413:
03C9 D285              SETB    ADCMUX_24_27_S0
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 983
                                           ; SOURCE LINE # 984
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 122 

                                           ; SOURCE LINE # 985
03CB 020000      R     LJMP    ?C0428
                                           ; SOURCE LINE # 986
                                           ; SOURCE LINE # 987
03CE         ?C0051:
                                           ; SOURCE LINE # 989
03CE E4                CLR     A
03CF F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 991
03D1 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 992
03D3 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 993
03D5 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 994
03D7 C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 996
03D9         ?C0388:
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1008
                                           ; SOURCE LINE # 1009
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
03D9 800B              SJMP    ?C0415
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1018
03DB         ?C0052:
                                           ; SOURCE LINE # 1020
03DB E4                CLR     A
03DC F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 1022
03DE D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1023
03E0 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1024
03E2 D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 1025
03E4 C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 1027
03E6         ?C0415:
03E6 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1028
03E8 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1030
03EA D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1031
03EC D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1033
03EE D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1034
03F0 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1036
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 123 

03F2 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1037
03F4 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1039
03F6 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1040
03F8 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1042
03FA D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1043
03FC D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1044
03FE 00                NOP     
03FF 00                NOP     
0400 00                NOP     
0401 00                NOP     
0402 00                NOP     
                                           ; SOURCE LINE # 1045
0403 C296              CLR     ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1046
0405 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1047
0407 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1049
040A         ?C0053:
                                           ; SOURCE LINE # 1051
040A E4                CLR     A
040B F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 1053
040D D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1054
040F D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1055
0411 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 1056
0413 C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 1058
0415         ?C0390:
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1061
                                           ; SOURCE LINE # 1062
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1075
                                           ; SOURCE LINE # 1076
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1078
0415 800B              SJMP    ?C0416
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1080
0417         ?C0054:
                                           ; SOURCE LINE # 1082
0417 E4                CLR     A
0418 F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 1084
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 124 

041A D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1085
041C D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1086
041E D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 1087
0420 C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 1089
0422         ?C0416:
0422 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1090
0424 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1092
0426 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1093
0428 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1095
042A D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1096
042C D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1098
042E D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1099
0430 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1101
0432 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1102
0434 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1104
0436 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1105
0438 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1106
043A 00                NOP     
043B 00                NOP     
043C 00                NOP     
043D 00                NOP     
043E 00                NOP     
                                           ; SOURCE LINE # 1107
043F D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1108
0441 C295              CLR     ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1109
0443 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
0446         ?C0055:
                                           ; SOURCE LINE # 1113
0446 75BB01            MOV     AMX0SL,#01H
                                           ; SOURCE LINE # 1115
0449 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1116
044B D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1118
044D D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1119
044F D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1120
0451 C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1121
0453 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1123
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 125 

0455         ?C0392:
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1127
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1133
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1136
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1139
                                           ; SOURCE LINE # 1140
0455 800F              SJMP    ?C0417
                                           ; SOURCE LINE # 1141
                                           ; SOURCE LINE # 1142
0457         ?C0056:
                                           ; SOURCE LINE # 1144
0457 75BB01            MOV     AMX0SL,#01H
                                           ; SOURCE LINE # 1146
045A D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1147
045C D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1149
045E D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1150
0460 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1151
0462 D291              SETB    ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1152
0464 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1154
0466         ?C0417:
0466 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1155
0468 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1157
046A D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1158
046C D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1160
046E D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1161
0470 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1163
0472 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1164
0474 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1166
0476 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1167
0478 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1168
047A 00                NOP     
047B 00                NOP     
047C 00                NOP     
047D 00                NOP     
047E 00                NOP     
                                           ; SOURCE LINE # 1169
047F C290              CLR     ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1170
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 126 

0481 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1171
0483 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1172
                                           ; SOURCE LINE # 1173
0486         ?C0057:
                                           ; SOURCE LINE # 1175
0486 75BB01            MOV     AMX0SL,#01H
                                           ; SOURCE LINE # 1177
0489 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1178
048B D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1180
048D D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1181
048F D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1182
0491 C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1183
0493 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1185
0495         ?C0394:
                                           ; SOURCE LINE # 1186
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1189
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1192
                                           ; SOURCE LINE # 1194
                                           ; SOURCE LINE # 1195
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1199
                                           ; SOURCE LINE # 1200
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1202
0495 800F              SJMP    ?C0418
                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1204
0497         ?C0058:
                                           ; SOURCE LINE # 1206
0497 75BB01            MOV     AMX0SL,#01H
                                           ; SOURCE LINE # 1208
049A D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1209
049C D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1211
049E D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1212
04A0 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1213
04A2 D291              SETB    ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1214
04A4 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1216
04A6         ?C0418:
04A6 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1217
04A8 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1219
04AA D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1220
04AC D2A1              SETB    ADCMUX_12_15_OE2
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 127 

                                           ; SOURCE LINE # 1222
04AE D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1223
04B0 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1225
04B2 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1226
04B4 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1228
04B6 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1229
04B8 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1230
04BA 00                NOP     
04BB 00                NOP     
04BC 00                NOP     
04BD 00                NOP     
04BE 00                NOP     
                                           ; SOURCE LINE # 1231
04BF D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1232
04C1 C293              CLR     ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1233
04C3 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1234
                                           ; SOURCE LINE # 1235
04C6         ?C0059:
                                           ; SOURCE LINE # 1237
04C6 75BB02            MOV     AMX0SL,#02H
                                           ; SOURCE LINE # 1239
04C9 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1240
04CB D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1242
04CD D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1243
04CF D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1245
04D1 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1246
04D3 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1247
04D5 C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1248
04D7 C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1250
04D9         ?C0396:
                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
                                           ; SOURCE LINE # 1256
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1259
                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1261
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1264
04D9 8028              SJMP    ?C0420
                                           ; SOURCE LINE # 1265
                                           ; SOURCE LINE # 1266
04DB         ?C0060:
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 128 

                                           ; SOURCE LINE # 1268
04DB 75BB02            MOV     AMX0SL,#02H
                                           ; SOURCE LINE # 1270
04DE D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1271
04E0 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1273
04E2 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1274
04E4 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1276
04E6 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1277
04E8 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1278
04EA D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1279
04EC C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1281
04EE         ?C0419:
                                           ; SOURCE LINE # 1282
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1290
                                           ; SOURCE LINE # 1291
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1294
                                           ; SOURCE LINE # 1295
04EE 8013              SJMP    ?C0420
                                           ; SOURCE LINE # 1296
                                           ; SOURCE LINE # 1297
04F0         ?C0061:
                                           ; SOURCE LINE # 1299
04F0 75BB02            MOV     AMX0SL,#02H
                                           ; SOURCE LINE # 1301
04F3 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1302
04F5 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1304
04F7 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1305
04F9 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1307
04FB D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1308
04FD D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1309
04FF C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1310
0501 C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1312
0503         ?C0420:
0503 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1313
0505 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1315
0507 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1316
0509 D2B4              SETB    ADCMUX_16_19_OE2
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 129 

                                           ; SOURCE LINE # 1318
050B D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1319
050D D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1321
050F D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1322
0511 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1323
0513 00                NOP     
0514 00                NOP     
0515 00                NOP     
0516 00                NOP     
0517 00                NOP     
                                           ; SOURCE LINE # 1324
0518 C2A7              CLR     ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1325
051A D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1326
051C 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1327
                                           ; SOURCE LINE # 1328
051F         ?C0062:
                                           ; SOURCE LINE # 1330
051F 75BB02            MOV     AMX0SL,#02H
                                           ; SOURCE LINE # 1332
0522 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1333
0524 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1335
0526 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1336
0528 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1338
052A D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1339
052C D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1340
052E D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1341
0530 C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1343
0532         ?C0398:
0532 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1344
0534 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1346
0536 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1347
0538 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1349
053A D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1350
053C D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1352
053E D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1353
0540 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1354
0542 00                NOP     
0543 00                NOP     
0544 00                NOP     
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 130 

0545 00                NOP     
0546 00                NOP     
                                           ; SOURCE LINE # 1355
0547 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1356
0549 C2A5              CLR     ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1357
054B 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1358
                                           ; SOURCE LINE # 1359
054E         ?C0063:
                                           ; SOURCE LINE # 1361
054E 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 1363
0551 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1364
0553 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1366
0555 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1367
0557 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1369
0559 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1370
055B D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1372
055D D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1373
055F D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1374
0561 C2A2              CLR     ADCMUX_12_15_S1
                                           ; SOURCE LINE # 1375
0563 C2A0              CLR     ADCMUX_12_15_S0
                                           ; SOURCE LINE # 1377
0565         ?C0400:
                                           ; SOURCE LINE # 1378
                                           ; SOURCE LINE # 1380
                                           ; SOURCE LINE # 1381
                                           ; SOURCE LINE # 1383
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1386
                                           ; SOURCE LINE # 1387
                                           ; SOURCE LINE # 1388
0565 8017              SJMP    ?C0421
                                           ; SOURCE LINE # 1389
                                           ; SOURCE LINE # 1390
0567         ?C0064:
                                           ; SOURCE LINE # 1392
0567 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 1394
056A D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1395
056C D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1397
056E D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1398
0570 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1400
0572 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1401
0574 D2A5              SETB    ADCMUX_8_11_OE2
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 131 

                                           ; SOURCE LINE # 1403
0576 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1404
0578 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1405
057A D2A2              SETB    ADCMUX_12_15_S1
                                           ; SOURCE LINE # 1406
057C C2A0              CLR     ADCMUX_12_15_S0
                                           ; SOURCE LINE # 1408
057E         ?C0421:
057E D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1409
0580 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1411
0582 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1412
0584 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1414
0586 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1415
0588 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1416
058A 00                NOP     
058B 00                NOP     
058C 00                NOP     
058D 00                NOP     
058E 00                NOP     
                                           ; SOURCE LINE # 1417
058F C2A3              CLR     ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1418
0591 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1419
0593 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1420
                                           ; SOURCE LINE # 1421
0596         ?C0065:
                                           ; SOURCE LINE # 1423
0596 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 1425
0599 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1426
059B D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1428
059D D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1429
059F D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1431
05A1 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1432
05A3 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1434
05A5 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1435
05A7 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1436
05A9 C2A2              CLR     ADCMUX_12_15_S1
                                           ; SOURCE LINE # 1437
05AB C2A0              CLR     ADCMUX_12_15_S0
                                           ; SOURCE LINE # 1439
05AD         ?C0402:
                                           ; SOURCE LINE # 1440
                                           ; SOURCE LINE # 1442
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 132 

                                           ; SOURCE LINE # 1443
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1446
                                           ; SOURCE LINE # 1447
                                           ; SOURCE LINE # 1448
                                           ; SOURCE LINE # 1449
                                           ; SOURCE LINE # 1450
05AD 8017              SJMP    ?C0422
                                           ; SOURCE LINE # 1451
                                           ; SOURCE LINE # 1452
05AF         ?C0066:
                                           ; SOURCE LINE # 1454
05AF 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 1456
05B2 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1457
05B4 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1459
05B6 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1460
05B8 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1462
05BA D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1463
05BC D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1465
05BE D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1466
05C0 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1467
05C2 D2A2              SETB    ADCMUX_12_15_S1
                                           ; SOURCE LINE # 1468
05C4 C2A0              CLR     ADCMUX_12_15_S0
                                           ; SOURCE LINE # 1470
05C6         ?C0422:
05C6 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1471
05C8 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1473
05CA D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1474
05CC D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1476
05CE D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1477
05D0 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1478
05D2 00                NOP     
05D3 00                NOP     
05D4 00                NOP     
05D5 00                NOP     
05D6 00                NOP     
                                           ; SOURCE LINE # 1479
05D7 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1480
05D9 C2A1              CLR     ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1481
05DB 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1482
                                           ; SOURCE LINE # 1483
05DE         ?C0067:
                                           ; SOURCE LINE # 1485
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 133 

05DE 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1487
05E1 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1488
05E3 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1490
05E5 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1491
05E7 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1493
05E9 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1494
05EB D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1496
05ED D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1497
05EF D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1499
05F1 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1500
05F3 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1501
05F5 C2B7              CLR     ADCMUX_16_19_S1
                                           ; SOURCE LINE # 1502
05F7 C2B5              CLR     ADCMUX_16_19_S0
                                           ; SOURCE LINE # 1504
05F9         ?C0404:
                                           ; SOURCE LINE # 1505
                                           ; SOURCE LINE # 1507
                                           ; SOURCE LINE # 1508
                                           ; SOURCE LINE # 1509
                                           ; SOURCE LINE # 1510
                                           ; SOURCE LINE # 1511
                                           ; SOURCE LINE # 1512
05F9 801B              SJMP    ?C0423
                                           ; SOURCE LINE # 1513
                                           ; SOURCE LINE # 1514
05FB         ?C0068:
                                           ; SOURCE LINE # 1516
05FB 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1518
05FE D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1519
0600 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1521
0602 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1522
0604 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1524
0606 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1525
0608 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1527
060A D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1528
060C D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1530
060E D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1531
0610 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1532
0612 D2B7              SETB    ADCMUX_16_19_S1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 134 

                                           ; SOURCE LINE # 1533
0614 C2B5              CLR     ADCMUX_16_19_S0
                                           ; SOURCE LINE # 1535
0616         ?C0423:
0616 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1536
0618 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1538
061A D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1539
061C D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1540
061E 00                NOP     
061F 00                NOP     
0620 00                NOP     
0621 00                NOP     
0622 00                NOP     
                                           ; SOURCE LINE # 1541
0623 C2B6              CLR     ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1542
0625 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1543
0627 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1544
                                           ; SOURCE LINE # 1545
062A         ?C0069:
                                           ; SOURCE LINE # 1547
062A 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1549
062D D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1550
062F D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1552
0631 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1553
0633 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1555
0635 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1556
0637 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1558
0639 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1559
063B D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1561
063D D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1562
063F D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1563
0641 D2B7              SETB    ADCMUX_16_19_S1
                                           ; SOURCE LINE # 1564
0643 C2B5              CLR     ADCMUX_16_19_S0
                                           ; SOURCE LINE # 1566
0645         ?C0406:
                                           ; SOURCE LINE # 1567
                                           ; SOURCE LINE # 1569
                                           ; SOURCE LINE # 1570
                                           ; SOURCE LINE # 1571
                                           ; SOURCE LINE # 1572
                                           ; SOURCE LINE # 1573
                                           ; SOURCE LINE # 1574
                                           ; SOURCE LINE # 1575
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 135 

                                           ; SOURCE LINE # 1576
0645         ?C0424:
0645 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1598
0647 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1600
0649 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1601
064B D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1602
064D 00                NOP     
064E 00                NOP     
064F 00                NOP     
0650 00                NOP     
0651 00                NOP     
                                           ; SOURCE LINE # 1603
0652 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1604
0654 C2B4              CLR     ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1605
0656 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1606
                                           ; SOURCE LINE # 1607
0659         ?C0071:
                                           ; SOURCE LINE # 1609
0659 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1611
065C D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1612
065E D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1614
0660 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1615
0662 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1617
0664 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1618
0666 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1620
0668 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1621
066A D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1623
066C D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1624
066E D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1626
0670 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1627
0672 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1628
0674 C2B3              CLR     ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1629
0676 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1631
0678         ?C0407:
                                           ; SOURCE LINE # 1632
                                           ; SOURCE LINE # 1633
                                           ; SOURCE LINE # 1634
                                           ; SOURCE LINE # 1635
                                           ; SOURCE LINE # 1636
0678 801F              SJMP    ?C0425
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 136 

                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1638
067A         ?C0072:
                                           ; SOURCE LINE # 1640
067A 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1642
067D D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1643
067F D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1645
0681 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1646
0683 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1648
0685 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1649
0687 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1651
0689 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1652
068B D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1654
068D D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1655
068F D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1657
0691 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1658
0693 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1659
0695 D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1660
0697 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1662
0699         ?C0425:
0699 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1663
069B D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1664
069D 00                NOP     
069E 00                NOP     
069F 00                NOP     
06A0 00                NOP     
06A1 00                NOP     
                                           ; SOURCE LINE # 1665
06A2 C2B2              CLR     ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1666
06A4 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1667
06A6 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1668
                                           ; SOURCE LINE # 1669
06A9         ?C0073:
                                           ; SOURCE LINE # 1671
06A9 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1673
06AC D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1674
06AE D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1676
06B0 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1677
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 137 

06B2 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1679
06B4 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1680
06B6 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1682
06B8 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1683
06BA D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1685
06BC D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1686
06BE D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1688
06C0 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1689
06C2 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1690
06C4 C2B3              CLR     ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1691
06C6 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1693
06C8         ?C0410:
                                           ; SOURCE LINE # 1694
                                           ; SOURCE LINE # 1695
                                           ; SOURCE LINE # 1696
                                           ; SOURCE LINE # 1697
                                           ; SOURCE LINE # 1698
06C8 801F              SJMP    ?C0426
                                           ; SOURCE LINE # 1699
                                           ; SOURCE LINE # 1700
06CA         ?C0074:
                                           ; SOURCE LINE # 1702
06CA 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1704
06CD D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1705
06CF D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1707
06D1 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1708
06D3 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1710
06D5 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1711
06D7 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1713
06D9 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1714
06DB D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1716
06DD D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1717
06DF D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1719
06E1 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1720
06E3 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1721
06E5 D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1722
06E7 C2B1              CLR     ADCMUX_20_23_S0
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 138 

                                           ; SOURCE LINE # 1724
06E9         ?C0426:
06E9 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1725
06EB D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1726
06ED 00                NOP     
06EE 00                NOP     
06EF 00                NOP     
06F0 00                NOP     
06F1 00                NOP     
                                           ; SOURCE LINE # 1727
06F2 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1728
06F4 C2B0              CLR     ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1729
06F6 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 1730
                                           ; SOURCE LINE # 1731
06F9         ?C0075:
                                           ; SOURCE LINE # 1733
06F9 75BB06            MOV     AMX0SL,#06H
                                           ; SOURCE LINE # 1735
06FC D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1736
06FE D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1738
0700 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1739
0702 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1741
0704 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1742
0706 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1744
0708 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1745
070A D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1747
070C D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1748
070E D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1750
0710 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1751
0712 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1753
0714 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1754
0716 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1755
0718 C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 1756
071A C285              CLR     ADCMUX_24_27_S0
                                           ; SOURCE LINE # 1757
071C         ?C0412:
                                           ; SOURCE LINE # 1758
                                           ; SOURCE LINE # 1759
                                           ; SOURCE LINE # 1760
071C 8023              SJMP    ?C0427
                                           ; SOURCE LINE # 1761
                                           ; SOURCE LINE # 1762
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 139 

071E         ?C0076:
                                           ; SOURCE LINE # 1764
071E 75BB06            MOV     AMX0SL,#06H
                                           ; SOURCE LINE # 1766
0721 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1767
0723 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1769
0725 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1770
0727 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1772
0729 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1773
072B D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1775
072D D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1776
072F D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1778
0731 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1779
0733 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1781
0735 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1782
0737 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1784
0739 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1785
073B D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1786
073D D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 1787
073F C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1788
0741         ?C0427:
0741 00                NOP     
0742 00                NOP     
0743 00                NOP     
0744 00                NOP     
0745 00                NOP     
                                           ; SOURCE LINE # 1789
0746 C286              CLR     ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1790
0748 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1791
074A 8051              SJMP    ?C0022
                                           ; SOURCE LINE # 1792
                                           ; SOURCE LINE # 1793
074C         ?C0077:
                                           ; SOURCE LINE # 1795
074C 75BB06            MOV     AMX0SL,#06H
                                           ; SOURCE LINE # 1797
074F D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1798
0751 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1800
0753 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1801
0755 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1803
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 140 

0757 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1804
0759 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1806
075B D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1807
075D D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1809
075F D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1810
0761 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1812
0763 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1813
0765 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1815
0767 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1816
0769 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1817
076B C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 1818
076D C285              CLR     ADCMUX_24_27_S0
                                           ; SOURCE LINE # 1819
076F         ?C0414:
                                           ; SOURCE LINE # 1820
                                           ; SOURCE LINE # 1821
                                           ; SOURCE LINE # 1822
076F 8023              SJMP    ?C0428
                                           ; SOURCE LINE # 1823
                                           ; SOURCE LINE # 1824
0771         ?C0078:
                                           ; SOURCE LINE # 1826
0771 75BB06            MOV     AMX0SL,#06H
                                           ; SOURCE LINE # 1828
0774 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1829
0776 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1831
0778 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1832
077A D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1834
077C D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1835
077E D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1837
0780 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1838
0782 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1840
0784 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1841
0786 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1843
0788 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1844
078A D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1846
078C D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1847
078E D284              SETB    ADCMUX_24_27_OE2
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 141 

                                           ; SOURCE LINE # 1848
0790 D287              SETB    ADCMUX_24_27_S1
                                           ; SOURCE LINE # 1849
0792 C285              CLR     ADCMUX_24_27_S0
                                           ; SOURCE LINE # 1850
0794         ?C0428:
0794 00                NOP     
0795 00                NOP     
0796 00                NOP     
0797 00                NOP     
0798 00                NOP     
                                           ; SOURCE LINE # 1851
0799 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1852
079B C284              CLR     ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1853
                                           ; SOURCE LINE # 1854
                                           ; SOURCE LINE # 1855
                                           ; SOURCE LINE # 1856
                                           ; SOURCE LINE # 1857
                                           ; SOURCE LINE # 1858
079D         ?C0022:
                                           ; SOURCE LINE # 1859
079D C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 1860
079F D2EC              SETB    AD0BUSY
                                           ; SOURCE LINE # 1861
07A1 22                RET     
             ; FUNCTION adcProcess (END)

             ; FUNCTION _initAdcData (BEGIN)
                                           ; SOURCE LINE # 1862
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 1864
;---- Variable 'i' assigned to Register 'R7' ----
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008         ?C0081:
0008 EF                MOV     A,R7
0009 C3                CLR     C
000A 940E              SUBB    A,#0EH
000C 7480              MOV     A,#080H
000E 9480              SUBB    A,#080H
0010 5019              JNC     ?C0082
                                           ; SOURCE LINE # 1865
0012 AB00        R     MOV     R3,s
0014 AA00        R     MOV     R2,s+01H
0016 A900        R     MOV     R1,s+02H
0018 75F002            MOV     B,#02H
001B EF                MOV     A,R7
001C A4                MUL     AB
001D F582              MOV     DPL,A
001F 85F083            MOV     DPH,B
0022 E4                CLR     A
0023 F5F0              MOV     B,A
0025 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1866
0028 0F                INC     R7
0029 80DD              SJMP    ?C0081
002B         ?C0082:
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 142 

                                           ; SOURCE LINE # 1867
002B AB00        R     MOV     R3,s
002D AA00        R     MOV     R2,s+01H
002F A900        R     MOV     R1,s+02H
0031 90001C            MOV     DPTR,#01CH
0034 E4                CLR     A
0035 F5F0              MOV     B,A
0037 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1868
003A 90001E            MOV     DPTR,#01EH
003D E4                CLR     A
003E 020000      E     LJMP    ?C?CSTOPTR
             ; FUNCTION _initAdcData (END)

             ; FUNCTION _refreshAdcData (BEGIN)
                                           ; SOURCE LINE # 1870
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
;---- Variable 'dat' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 1874
0006 90001E            MOV     DPTR,#01EH
0009 120000      E     LCALL   ?C?CLDOPTR
000C 75F002            MOV     B,#02H
000F A4                MUL     AB
0010 F582              MOV     DPL,A
0012 85F083            MOV     DPH,B
0015 EC                MOV     A,R4
0016 8DF0              MOV     B,R5
0018 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1875
001B AB00        R     MOV     R3,s
001D AA00        R     MOV     R2,s+01H
001F A900        R     MOV     R1,s+02H
0021 90001E            MOV     DPTR,#01EH
0024 7401              MOV     A,#01H
0026 120000      E     LCALL   ?C?CILDOPTR
                                           ; SOURCE LINE # 1876
0029 90001E            MOV     DPTR,#01EH
002C 120000      E     LCALL   ?C?CLDOPTR
002F C3                CLR     C
0030 940E              SUBB    A,#0EH
0032 7480              MOV     A,#080H
0034 9480              SUBB    A,#080H
0036 400D              JC      ?C0085
                                           ; SOURCE LINE # 1877
0038 AB00        R     MOV     R3,s
003A AA00        R     MOV     R2,s+01H
003C A900        R     MOV     R1,s+02H
003E 90001E            MOV     DPTR,#01EH
0041 E4                CLR     A
0042 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 1878
0045         ?C0085:
                                           ; SOURCE LINE # 1880
0045 E4                CLR     A
0046 F500        R     MOV     sum+03H,A
0048 F500        R     MOV     sum+02H,A
004A F500        R     MOV     sum+01H,A
004C F500        R     MOV     sum,A
                                           ; SOURCE LINE # 1881
004E F500        R     MOV     i,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 143 

0050         ?C0086:
0050 C3                CLR     C
0051 E500        R     MOV     A,i
0053 940E              SUBB    A,#0EH
0055 7480              MOV     A,#080H
0057 9480              SUBB    A,#080H
0059 5032              JNC     ?C0087
                                           ; SOURCE LINE # 1882
005B AB00        R     MOV     R3,s
005D AA00        R     MOV     R2,s+01H
005F A900        R     MOV     R1,s+02H
0061 75F002            MOV     B,#02H
0064 E500        R     MOV     A,i
0066 A4                MUL     AB
0067 F582              MOV     DPL,A
0069 85F083            MOV     DPH,B
006C 120000      E     LCALL   ?C?ILDOPTR
006F FF                MOV     R7,A
0070 AEF0              MOV     R6,B
0072 E4                CLR     A
0073 FC                MOV     R4,A
0074 FD                MOV     R5,A
0075 E500        R     MOV     A,sum+03H
0077 2F                ADD     A,R7
0078 F500        R     MOV     sum+03H,A
007A E500        R     MOV     A,sum+02H
007C 3E                ADDC    A,R6
007D F500        R     MOV     sum+02H,A
007F ED                MOV     A,R5
0080 3500        R     ADDC    A,sum+01H
0082 F500        R     MOV     sum+01H,A
0084 EC                MOV     A,R4
0085 3500        R     ADDC    A,sum
0087 F500        R     MOV     sum,A
                                           ; SOURCE LINE # 1883
0089 0500        R     INC     i
008B 80C3              SJMP    ?C0086
008D         ?C0087:
                                           ; SOURCE LINE # 1886
008D E4                CLR     A
008E 7B0E              MOV     R3,#0EH
0090 FA                MOV     R2,A
0091 F9                MOV     R1,A
0092 F8                MOV     R0,A
0093 AF00        R     MOV     R7,sum+03H
0095 AE00        R     MOV     R6,sum+02H
0097 AD00        R     MOV     R5,sum+01H
0099 AC00        R     MOV     R4,sum
009B 120000      E     LCALL   ?C?ULDIV
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1887
009E AB00        R     MOV     R3,s
00A0 AA00        R     MOV     R2,s+01H
00A2 A900        R     MOV     R1,s+02H
00A4 90001C            MOV     DPTR,#01CH
00A7 EE                MOV     A,R6
00A8 8FF0              MOV     B,R7
00AA 020000      E     LJMP    ?C?ISTOPTR
             ; FUNCTION _refreshAdcData (END)

             ; FUNCTION L?0433 (BEGIN)
0000         L?0434:
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 144 

0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 A800        E     MOV     R0,?C_IBP
0006 A606              MOV     @R0,AR6
0008 08                INC     R0
0009 A607              MOV     @R0,AR7
000B A800        E     MOV     R0,?C_IBP
000D         L?0435:
000D E6                MOV     A,@R0
000E FE                MOV     R6,A
000F 08                INC     R0
0010 E6                MOV     A,@R0
0011 FF                MOV     R7,A
             ; FUNCTION _?assertCoilAddress (BEGIN)
                                           ; SOURCE LINE # 1889
0012 1500        E     DEC     ?C_IBP
0014 1500        E     DEC     ?C_IBP
0016 A800        E     MOV     R0,?C_IBP
0018 A606              MOV     @R0,AR6
001A 08                INC     R0
001B A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1894
001D 0500        E     INC     ?C_IBP
001F 0500        E     INC     ?C_IBP
0021 22                RET     
             ; FUNCTION _?assertCoilAddress (END)

             ; FUNCTION _?assertRegisterAddress (BEGIN)
                                           ; SOURCE LINE # 1895
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 A800        E     MOV     R0,?C_IBP
0006 A606              MOV     @R0,AR6
0008 08                INC     R0
0009 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1900
000B 0500        E     INC     ?C_IBP
000D 0500        E     INC     ?C_IBP
000F 22                RET     
             ; FUNCTION _?assertRegisterAddress (END)

             ; FUNCTION clearDM (BEGIN)
                                           ; SOURCE LINE # 1901
                                           ; SOURCE LINE # 1903
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0092:
                                           ; SOURCE LINE # 1904
0003 ED                MOV     A,R5
0004 25E0              ADD     A,ACC
0006 FF                MOV     R7,A
0007 EC                MOV     A,R4
0008 33                RLC     A
0009 FE                MOV     R6,A
000A 7400        R     MOV     A,#LOW NVRAM0
000C 2F                ADD     A,R7
000D F582              MOV     DPL,A
000F 7400        R     MOV     A,#HIGH NVRAM0
0011 3E                ADDC    A,R6
0012 F583              MOV     DPH,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 145 

0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1905
0018 7400        R     MOV     A,#LOW NVRAM1
001A 2F                ADD     A,R7
001B F582              MOV     DPL,A
001D 7400        R     MOV     A,#HIGH NVRAM1
001F 3E                ADDC    A,R6
0020 F583              MOV     DPH,A
0022 E4                CLR     A
0023 F0                MOVX    @DPTR,A
0024 A3                INC     DPTR
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1906
0026 0D                INC     R5
0027 BD0001            CJNE    R5,#00H,?C0297
002A 0C                INC     R4
002B         ?C0297:
002B ED                MOV     A,R5
002C 6414              XRL     A,#014H
002E 4C                ORL     A,R4
002F 70D2              JNZ     ?C0092
                                           ; SOURCE LINE # 1907
0031         ?C0095:
0031 22                RET     
             ; FUNCTION clearDM (END)

             ; FUNCTION clearMR (BEGIN)
                                           ; SOURCE LINE # 1908
                                           ; SOURCE LINE # 1910
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0096:
                                           ; SOURCE LINE # 1911
0003 ED                MOV     A,R5
0004 25E0              ADD     A,ACC
0006 FF                MOV     R7,A
0007 EC                MOV     A,R4
0008 33                RLC     A
0009 FE                MOV     R6,A
000A 7400        R     MOV     A,#LOW NVRAM0
000C 2F                ADD     A,R7
000D F582              MOV     DPL,A
000F 7400        R     MOV     A,#HIGH NVRAM0
0011 3E                ADDC    A,R6
0012 F583              MOV     DPH,A
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1912
0018 7400        R     MOV     A,#LOW NVRAM1
001A 2F                ADD     A,R7
001B F582              MOV     DPL,A
001D 7400        R     MOV     A,#HIGH NVRAM1
001F 3E                ADDC    A,R6
0020 F583              MOV     DPH,A
0022 E4                CLR     A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 146 

0023 F0                MOVX    @DPTR,A
0024 A3                INC     DPTR
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1913
0026 0D                INC     R5
0027 BD0001            CJNE    R5,#00H,?C0298
002A 0C                INC     R4
002B         ?C0298:
002B ED                MOV     A,R5
002C 6404              XRL     A,#04H
002E 4C                ORL     A,R4
002F 70D2              JNZ     ?C0096
                                           ; SOURCE LINE # 1914
0031         ?C0099:
0031 22                RET     
             ; FUNCTION clearMR (END)

             ; FUNCTION clearEM (BEGIN)
                                           ; SOURCE LINE # 1915
                                           ; SOURCE LINE # 1917
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D14              MOV     R5,#014H
0002 7C00              MOV     R4,#00H
0004         ?C0100:
                                           ; SOURCE LINE # 1918
0004 ED                MOV     A,R5
0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1919
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1920
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0299
002B 0C                INC     R4
002C         ?C0299:
002C ED                MOV     A,R5
002D 64A0              XRL     A,#0A0H
002F 4C                ORL     A,R4
0030 70D2              JNZ     ?C0100
                                           ; SOURCE LINE # 1921
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 147 

0032         ?C0103:
0032 22                RET     
             ; FUNCTION clearEM (END)

             ; FUNCTION clearR (BEGIN)
                                           ; SOURCE LINE # 1922
                                           ; SOURCE LINE # 1924
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D04              MOV     R5,#04H
0002 7C00              MOV     R4,#00H
0004         ?C0104:
                                           ; SOURCE LINE # 1925
0004 ED                MOV     A,R5
0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1926
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1927
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0300
002B 0C                INC     R4
002C         ?C0300:
002C ED                MOV     A,R5
002D 640C              XRL     A,#0CH
002F 4C                ORL     A,R4
0030 70D2              JNZ     ?C0104
                                           ; SOURCE LINE # 1928
0032         ?C0107:
0032 22                RET     
             ; FUNCTION clearR (END)

             ; FUNCTION clearT (BEGIN)
                                           ; SOURCE LINE # 1929
                                           ; SOURCE LINE # 1931
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DA0              MOV     R5,#0A0H
0002 7C00              MOV     R4,#00H
0004         ?C0108:
                                           ; SOURCE LINE # 1932
0004 ED                MOV     A,R5
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 148 

0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1933
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1934
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0301
002B 0C                INC     R4
002C         ?C0301:
002C ED                MOV     A,R5
002D 64A1              XRL     A,#0A1H
002F 4C                ORL     A,R4
0030 70D2              JNZ     ?C0108
0032         ?C0109:
                                           ; SOURCE LINE # 1935
0032 7C00              MOV     R4,#00H
0034 7DA1              MOV     R5,#0A1H
0036         ?C0111:
                                           ; SOURCE LINE # 1936
0036 ED                MOV     A,R5
0037 25E0              ADD     A,ACC
0039 FF                MOV     R7,A
003A EC                MOV     A,R4
003B 33                RLC     A
003C FE                MOV     R6,A
003D 7400        R     MOV     A,#LOW NVRAM0
003F 2F                ADD     A,R7
0040 F582              MOV     DPL,A
0042 7400        R     MOV     A,#HIGH NVRAM0
0044 3E                ADDC    A,R6
0045 F583              MOV     DPH,A
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1937
004B 7400        R     MOV     A,#LOW NVRAM1
004D 2F                ADD     A,R7
004E F582              MOV     DPL,A
0050 7400        R     MOV     A,#HIGH NVRAM1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 149 

0052 3E                ADDC    A,R6
0053 F583              MOV     DPH,A
0055 E4                CLR     A
0056 F0                MOVX    @DPTR,A
0057 A3                INC     DPTR
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1938
0059 0D                INC     R5
005A BD0001            CJNE    R5,#00H,?C0302
005D 0C                INC     R4
005E         ?C0302:
005E ED                MOV     A,R5
005F 64A2              XRL     A,#0A2H
0061 4C                ORL     A,R4
0062 70D2              JNZ     ?C0111
0064         ?C0112:
                                           ; SOURCE LINE # 1939
0064 7C00              MOV     R4,#00H
0066 7DA2              MOV     R5,#0A2H
0068         ?C0114:
                                           ; SOURCE LINE # 1940
0068 ED                MOV     A,R5
0069 25E0              ADD     A,ACC
006B FF                MOV     R7,A
006C EC                MOV     A,R4
006D 33                RLC     A
006E FE                MOV     R6,A
006F 7400        R     MOV     A,#LOW NVRAM0
0071 2F                ADD     A,R7
0072 F582              MOV     DPL,A
0074 7400        R     MOV     A,#HIGH NVRAM0
0076 3E                ADDC    A,R6
0077 F583              MOV     DPH,A
0079 E4                CLR     A
007A F0                MOVX    @DPTR,A
007B A3                INC     DPTR
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1941
007D 7400        R     MOV     A,#LOW NVRAM1
007F 2F                ADD     A,R7
0080 F582              MOV     DPL,A
0082 7400        R     MOV     A,#HIGH NVRAM1
0084 3E                ADDC    A,R6
0085 F583              MOV     DPH,A
0087 E4                CLR     A
0088 F0                MOVX    @DPTR,A
0089 A3                INC     DPTR
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1942
008B 0D                INC     R5
008C BD0001            CJNE    R5,#00H,?C0303
008F 0C                INC     R4
0090         ?C0303:
0090 ED                MOV     A,R5
0091 64A3              XRL     A,#0A3H
0093 4C                ORL     A,R4
0094 70D2              JNZ     ?C0114
                                           ; SOURCE LINE # 1943
0096         ?C0117:
0096 22                RET     
             ; FUNCTION clearT (END)

C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 150 

             ; FUNCTION clearTD (BEGIN)
                                           ; SOURCE LINE # 1944
                                           ; SOURCE LINE # 1946
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DA3              MOV     R5,#0A3H
0002 7C00              MOV     R4,#00H
0004         ?C0118:
                                           ; SOURCE LINE # 1947
0004 ED                MOV     A,R5
0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1948
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1949
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0304
002B 0C                INC     R4
002C         ?C0304:
002C ED                MOV     A,R5
002D 64B3              XRL     A,#0B3H
002F 4C                ORL     A,R4
0030 70D2              JNZ     ?C0118
0032         ?C0119:
                                           ; SOURCE LINE # 1950
0032 7C00              MOV     R4,#00H
0034 7DB3              MOV     R5,#0B3H
0036         ?C0121:
                                           ; SOURCE LINE # 1951
0036 ED                MOV     A,R5
0037 25E0              ADD     A,ACC
0039 FF                MOV     R7,A
003A EC                MOV     A,R4
003B 33                RLC     A
003C FE                MOV     R6,A
003D 7400        R     MOV     A,#LOW NVRAM0
003F 2F                ADD     A,R7
0040 F582              MOV     DPL,A
0042 7400        R     MOV     A,#HIGH NVRAM0
0044 3E                ADDC    A,R6
0045 F583              MOV     DPH,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 151 

0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1952
004B 7400        R     MOV     A,#LOW NVRAM1
004D 2F                ADD     A,R7
004E F582              MOV     DPL,A
0050 7400        R     MOV     A,#HIGH NVRAM1
0052 3E                ADDC    A,R6
0053 F583              MOV     DPH,A
0055 E4                CLR     A
0056 F0                MOVX    @DPTR,A
0057 A3                INC     DPTR
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1953
0059 0D                INC     R5
005A BD0001            CJNE    R5,#00H,?C0305
005D 0C                INC     R4
005E         ?C0305:
005E ED                MOV     A,R5
005F 64C3              XRL     A,#0C3H
0061 4C                ORL     A,R4
0062 70D2              JNZ     ?C0121
0064         ?C0122:
                                           ; SOURCE LINE # 1954
0064 7C00              MOV     R4,#00H
0066 7DC3              MOV     R5,#0C3H
0068         ?C0124:
                                           ; SOURCE LINE # 1955
0068 ED                MOV     A,R5
0069 25E0              ADD     A,ACC
006B FF                MOV     R7,A
006C EC                MOV     A,R4
006D 33                RLC     A
006E FE                MOV     R6,A
006F 7400        R     MOV     A,#LOW NVRAM0
0071 2F                ADD     A,R7
0072 F582              MOV     DPL,A
0074 7400        R     MOV     A,#HIGH NVRAM0
0076 3E                ADDC    A,R6
0077 F583              MOV     DPH,A
0079 E4                CLR     A
007A F0                MOVX    @DPTR,A
007B A3                INC     DPTR
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1956
007D 7400        R     MOV     A,#LOW NVRAM1
007F 2F                ADD     A,R7
0080 F582              MOV     DPL,A
0082 7400        R     MOV     A,#HIGH NVRAM1
0084 3E                ADDC    A,R6
0085 F583              MOV     DPH,A
0087 E4                CLR     A
0088 F0                MOVX    @DPTR,A
0089 A3                INC     DPTR
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1957
008B 0D                INC     R5
008C BD0001            CJNE    R5,#00H,?C0306
008F 0C                INC     R4
0090         ?C0306:
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 152 

0090 ED                MOV     A,R5
0091 64D3              XRL     A,#0D3H
0093 4C                ORL     A,R4
0094 70D2              JNZ     ?C0124
                                           ; SOURCE LINE # 1958
0096         ?C0127:
0096 22                RET     
             ; FUNCTION clearTD (END)

             ; FUNCTION clearC (BEGIN)
                                           ; SOURCE LINE # 1959
                                           ; SOURCE LINE # 1961
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DD3              MOV     R5,#0D3H
0002 7C00              MOV     R4,#00H
0004         ?C0128:
                                           ; SOURCE LINE # 1962
0004 ED                MOV     A,R5
0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1963
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1964
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0307
002B 0C                INC     R4
002C         ?C0307:
002C ED                MOV     A,R5
002D 64D4              XRL     A,#0D4H
002F 4C                ORL     A,R4
0030 70D2              JNZ     ?C0128
                                           ; SOURCE LINE # 1965
0032         ?C0131:
0032 22                RET     
             ; FUNCTION clearC (END)

             ; FUNCTION clearX (BEGIN)
                                           ; SOURCE LINE # 1966
                                           ; SOURCE LINE # 1968
;---- Variable 'i' assigned to Register 'R4/R5' ----
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 153 

0000 7DD4              MOV     R5,#0D4H
0002 7C00              MOV     R4,#00H
0004         ?C0132:
                                           ; SOURCE LINE # 1969
0004 ED                MOV     A,R5
0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1970
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1971
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0308
002B 0C                INC     R4
002C         ?C0308:
002C ED                MOV     A,R5
002D 64D5              XRL     A,#0D5H
002F 4C                ORL     A,R4
0030 70D2              JNZ     ?C0132
                                           ; SOURCE LINE # 1972
0032         ?C0135:
0032 22                RET     
             ; FUNCTION clearX (END)

             ; FUNCTION clearY (BEGIN)
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1975
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DD5              MOV     R5,#0D5H
0002 7C00              MOV     R4,#00H
0004         ?C0136:
                                           ; SOURCE LINE # 1976
0004 ED                MOV     A,R5
0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 154 

0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1977
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1978
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0309
002B 0C                INC     R4
002C         ?C0309:
002C ED                MOV     A,R5
002D 64D6              XRL     A,#0D6H
002F 4C                ORL     A,R4
0030 70D2              JNZ     ?C0136
                                           ; SOURCE LINE # 1979
0032         ?C0139:
0032 22                RET     
             ; FUNCTION clearY (END)

             ; FUNCTION clearSPREG (BEGIN)
                                           ; SOURCE LINE # 1980
                                           ; SOURCE LINE # 1982
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DD6              MOV     R5,#0D6H
0002 7C00              MOV     R4,#00H
0004         ?C0140:
                                           ; SOURCE LINE # 1983
0004 ED                MOV     A,R5
0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1984
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 155 

0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1985
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0310
002B 0C                INC     R4
002C         ?C0310:
002C ED                MOV     A,R5
002D 64EE              XRL     A,#0EEH
002F 4C                ORL     A,R4
0030 70D2              JNZ     ?C0140
                                           ; SOURCE LINE # 1986
0032         ?C0143:
0032 22                RET     
             ; FUNCTION clearSPREG (END)

             ; FUNCTION clearSPCOIL (BEGIN)
                                           ; SOURCE LINE # 1987
                                           ; SOURCE LINE # 1989
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DEE              MOV     R5,#0EEH
0002 7C00              MOV     R4,#00H
0004         ?C0144:
                                           ; SOURCE LINE # 1990
0004 ED                MOV     A,R5
0005 25E0              ADD     A,ACC
0007 FF                MOV     R7,A
0008 EC                MOV     A,R4
0009 33                RLC     A
000A FE                MOV     R6,A
000B 7400        R     MOV     A,#LOW NVRAM0
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 7400        R     MOV     A,#HIGH NVRAM0
0012 3E                ADDC    A,R6
0013 F583              MOV     DPH,A
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1991
0019 7400        R     MOV     A,#LOW NVRAM1
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM1
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1992
0027 0D                INC     R5
0028 BD0001            CJNE    R5,#00H,?C0311
002B 0C                INC     R4
002C         ?C0311:
002C ED                MOV     A,R5
002D 64F2              XRL     A,#0F2H
002F 4C                ORL     A,R4
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 156 

0030 70D2              JNZ     ?C0144
                                           ; SOURCE LINE # 1993
0032         ?C0147:
0032 22                RET     
             ; FUNCTION clearSPCOIL (END)

             ; FUNCTION nvramLoad (BEGIN)
                                           ; SOURCE LINE # 1994
                                           ; SOURCE LINE # 1995
0000 7E01              MOV     R6,#01H
0002 7FE4              MOV     R7,#0E4H
0004 7D00              MOV     R5,#00H
0006 7B01              MOV     R3,#01H
0008 7A00        R     MOV     R2,#HIGH NVRAM0
000A 7900        R     MOV     R1,#LOW NVRAM0
000C 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 1996
000F E4                CLR     A
0010 FF                MOV     R7,A
0011 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 1997
0014 7B01              MOV     R3,#01H
0016 7A00        R     MOV     R2,#HIGH NVRAM0
0018 7900        R     MOV     R1,#LOW NVRAM0
001A 750001      E     MOV     ?_epromRead?BYTE+05H,#01H
001D 7500E4      E     MOV     ?_epromRead?BYTE+06H,#0E4H
0020 E4                CLR     A
0021 FE                MOV     R6,A
0022 120000      E     LCALL   _epromRead
                                           ; SOURCE LINE # 1998
0025 7F01              MOV     R7,#01H
0027 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 1999
002A 120000      R     LCALL   clearEM
                                           ; SOURCE LINE # 2000
002D 120000      R     LCALL   clearR
                                           ; SOURCE LINE # 2001
0030 120000      R     LCALL   clearT
                                           ; SOURCE LINE # 2002
0033 120000      R     LCALL   clearTD
                                           ; SOURCE LINE # 2003
0036 120000      R     LCALL   clearC
                                           ; SOURCE LINE # 2004
0039 120000      R     LCALL   clearX
                                           ; SOURCE LINE # 2005
003C 120000      R     LCALL   clearY
                                           ; SOURCE LINE # 2006
003F 120000      R     LCALL   clearSPREG
                                           ; SOURCE LINE # 2007
0042 120000      R     LCALL   clearSPCOIL
                                           ; SOURCE LINE # 2008
0045 7800        R     MOV     R0,#LOW NVRAM1
0047 7C00        R     MOV     R4,#HIGH NVRAM1
0049 7D01              MOV     R5,#01H
004B 7B01              MOV     R3,#01H
004D 7A00        R     MOV     R2,#HIGH NVRAM0
004F 7900        R     MOV     R1,#LOW NVRAM0
0051 7E01              MOV     R6,#01H
0053 7FE4              MOV     R7,#0E4H
0055 020000      E     LJMP    ?C?COPY
             ; FUNCTION nvramLoad (END)

C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 157 

             ; FUNCTION nvramSave (BEGIN)
                                           ; SOURCE LINE # 2010
                                           ; SOURCE LINE # 2011
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 2012
0002 E4                CLR     A
0003 FF                MOV     R7,A
0004 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 2013
0007 7B01              MOV     R3,#01H
0009 7A00        R     MOV     R2,#HIGH NVRAM0
000B 7900        R     MOV     R1,#LOW NVRAM0
000D 750000      E     MOV     ?_epromWrite?BYTE+05H,#00H
0010 750008      E     MOV     ?_epromWrite?BYTE+06H,#08H
0013 E4                CLR     A
0014 FE                MOV     R6,A
0015 120000      E     LCALL   _epromWrite
                                           ; SOURCE LINE # 2014
0018 7F01              MOV     R7,#01H
001A 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 2015
001D D2AF              SETB    EA
                                           ; SOURCE LINE # 2016
001F 22                RET     
             ; FUNCTION nvramSave (END)

             ; FUNCTION nvramUpdata (BEGIN)
                                           ; SOURCE LINE # 2017
                                           ; SOURCE LINE # 2020
0000 750001      R     MOV     sp0,#01H
0003 750000      R     MOV     sp0+01H,#HIGH NVRAM0
0006 750000      R     MOV     sp0+02H,#LOW NVRAM0
                                           ; SOURCE LINE # 2021
0009 750001      R     MOV     sp1,#01H
000C 750000      R     MOV     sp1+01H,#HIGH NVRAM1
000F 750000      R     MOV     sp1+02H,#LOW NVRAM1
                                           ; SOURCE LINE # 2022
0012 E4                CLR     A
0013 F500        R     MOV     i,A
0015 F500        R     MOV     i+01H,A
0017         ?C0150:
                                           ; SOURCE LINE # 2023
0017 AB00        R     MOV     R3,sp1
0019 AA00        R     MOV     R2,sp1+01H
001B A900        R     MOV     R1,sp1+02H
001D 850082      R     MOV     DPL,i+01H
0020 850083      R     MOV     DPH,i
0023 120000      E     LCALL   ?C?CLDOPTR
0026 FF                MOV     R7,A
0027 AB00        R     MOV     R3,sp0
0029 AA00        R     MOV     R2,sp0+01H
002B A900        R     MOV     R1,sp0+02H
002D 850082      R     MOV     DPL,i+01H
0030 850083      R     MOV     DPH,i
0033 120000      E     LCALL   ?C?CLDOPTR
0036 6F                XRL     A,R7
0037 6021              JZ      ?C0152
                                           ; SOURCE LINE # 2024
0039 E4                CLR     A
003A FF                MOV     R7,A
003B 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 2025
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 158 

003E AB00        R     MOV     R3,sp0
0040 AA00        R     MOV     R2,sp0+01H
0042 A900        R     MOV     R1,sp0+02H
0044 850082      R     MOV     DPL,i+01H
0047 850083      R     MOV     DPH,i
004A 120000      E     LCALL   ?C?CLDOPTR
004D FD                MOV     R5,A
004E AF00        R     MOV     R7,i+01H
0050 AE00        R     MOV     R6,i
0052 120000      E     LCALL   _epromWriteOneByte
                                           ; SOURCE LINE # 2026
0055 7F01              MOV     R7,#01H
0057 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 2027
                                           ; SOURCE LINE # 2028
005A         ?C0152:
005A 0500        R     INC     i+01H
005C E500        R     MOV     A,i+01H
005E 7002              JNZ     ?C0312
0060 0500        R     INC     i
0062         ?C0312:
0062 C3                CLR     C
0063 9408              SUBB    A,#08H
0065 E500        R     MOV     A,i
0067 9400              SUBB    A,#00H
0069 40AC              JC      ?C0150
006B         ?C0151:
                                           ; SOURCE LINE # 2029
006B 750001      R     MOV     sp0,#01H
006E 750000      R     MOV     sp0+01H,#HIGH NVRAM0
0071 750000      R     MOV     sp0+02H,#LOW NVRAM0
                                           ; SOURCE LINE # 2030
0074 750001      R     MOV     sp1,#01H
0077 750000      R     MOV     sp1+01H,#HIGH NVRAM1
007A 750000      R     MOV     sp1+02H,#LOW NVRAM1
                                           ; SOURCE LINE # 2031
007D 750000      R     MOV     i,#00H
0080 750018      R     MOV     i+01H,#018H
0083         ?C0154:
                                           ; SOURCE LINE # 2032
0083 AB00        R     MOV     R3,sp1
0085 AA00        R     MOV     R2,sp1+01H
0087 A900        R     MOV     R1,sp1+02H
0089 850082      R     MOV     DPL,i+01H
008C 850083      R     MOV     DPH,i
008F 120000      E     LCALL   ?C?CLDOPTR
0092 FF                MOV     R7,A
0093 AB00        R     MOV     R3,sp0
0095 AA00        R     MOV     R2,sp0+01H
0097 A900        R     MOV     R1,sp0+02H
0099 850082      R     MOV     DPL,i+01H
009C 850083      R     MOV     DPH,i
009F 120000      E     LCALL   ?C?CLDOPTR
00A2 6F                XRL     A,R7
00A3 6021              JZ      ?C0156
                                           ; SOURCE LINE # 2033
00A5 E4                CLR     A
00A6 FF                MOV     R7,A
00A7 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 2034
00AA AB00        R     MOV     R3,sp0
00AC AA00        R     MOV     R2,sp0+01H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 159 

00AE A900        R     MOV     R1,sp0+02H
00B0 850082      R     MOV     DPL,i+01H
00B3 850083      R     MOV     DPH,i
00B6 120000      E     LCALL   ?C?CLDOPTR
00B9 FD                MOV     R5,A
00BA AF00        R     MOV     R7,i+01H
00BC AE00        R     MOV     R6,i
00BE 120000      E     LCALL   _epromWriteOneByte
                                           ; SOURCE LINE # 2035
00C1 7F01              MOV     R7,#01H
00C3 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 2036
                                           ; SOURCE LINE # 2037
00C6         ?C0156:
00C6 0500        R     INC     i+01H
00C8 E500        R     MOV     A,i+01H
00CA 7002              JNZ     ?C0313
00CC 0500        R     INC     i
00CE         ?C0313:
00CE C3                CLR     C
00CF 9428              SUBB    A,#028H
00D1 E500        R     MOV     A,i
00D3 9400              SUBB    A,#00H
00D5 40AC              JC      ?C0154
00D7         ?C0155:
                                           ; SOURCE LINE # 2038
00D7 7800        R     MOV     R0,#LOW NVRAM1
00D9 7C00        R     MOV     R4,#HIGH NVRAM1
00DB 7D01              MOV     R5,#01H
00DD 7B01              MOV     R3,#01H
00DF 7A00        R     MOV     R2,#HIGH NVRAM0
00E1 7900        R     MOV     R1,#LOW NVRAM0
00E3 7E01              MOV     R6,#01H
00E5 7FE4              MOV     R7,#0E4H
00E7 020000      E     LJMP    ?C?COPY
             ; FUNCTION nvramUpdata (END)

             ; FUNCTION _?SET (BEGIN)
                                           ; SOURCE LINE # 2042
                                           ; SOURCE LINE # 2043
0000 120000      R     LCALL   L?0433
                                           ; SOURCE LINE # 2044
0003 A900        E     MOV     R1,?C_IBP
0005 E7                MOV     A,@R1
0006 C4                SWAP    A
0007 F8                MOV     R0,A
0008 54F0              ANL     A,#0F0H
000A C8                XCH     A,R0
000B 68                XRL     A,R0
000C FE                MOV     R6,A
000D 09                INC     R1
000E E7                MOV     A,@R1
000F C4                SWAP    A
0010 540F              ANL     A,#0FH
0012 48                ORL     A,R0
0013 25E0              ADD     A,ACC
0015 FF                MOV     R7,A
0016 EE                MOV     A,R6
0017 33                RLC     A
0018 FE                MOV     R6,A
0019 7400        R     MOV     A,#LOW NVRAM0
001B 2F                ADD     A,R7
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 160 

001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM0
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 C083              PUSH    DPH
0025 C082              PUSH    DPL
0027 E0                MOVX    A,@DPTR
0028 FC                MOV     R4,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C A800        E     MOV     R0,?C_IBP
002E 08                INC     R0
002F E6                MOV     A,@R0
0030 540F              ANL     A,#0FH
0032 FF                MOV     R7,A
0033 7E00              MOV     R6,#00H
0035 7401              MOV     A,#01H
0037 A807              MOV     R0,AR7
0039 08                INC     R0
003A 8005              SJMP    ?C0315
003C         ?C0314:
003C C3                CLR     C
003D 33                RLC     A
003E CE                XCH     A,R6
003F 33                RLC     A
0040 CE                XCH     A,R6
0041         ?C0315:
0041 D8F9              DJNZ    R0,?C0314
0043 FF                MOV     R7,A
0044 EC                MOV     A,R4
0045 4E                ORL     A,R6
0046 FE                MOV     R6,A
0047 ED                MOV     A,R5
0048 4F                ORL     A,R7
0049 FF                MOV     R7,A
004A D082              POP     DPL
004C D083              POP     DPH
004E EE                MOV     A,R6
004F F0                MOVX    @DPTR,A
0050 A3                INC     DPTR
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2045
0053 0500        E     INC     ?C_IBP
0055 0500        E     INC     ?C_IBP
0057 22                RET     
             ; FUNCTION _?SET (END)

             ; FUNCTION _?RES (BEGIN)
                                           ; SOURCE LINE # 2046
                                           ; SOURCE LINE # 2047
0000 120000      R     LCALL   L?0433
                                           ; SOURCE LINE # 2048
0003 A900        E     MOV     R1,?C_IBP
0005 E7                MOV     A,@R1
0006 C4                SWAP    A
0007 F8                MOV     R0,A
0008 54F0              ANL     A,#0F0H
000A C8                XCH     A,R0
000B 68                XRL     A,R0
000C FE                MOV     R6,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 161 

000D 09                INC     R1
000E E7                MOV     A,@R1
000F C4                SWAP    A
0010 540F              ANL     A,#0FH
0012 48                ORL     A,R0
0013 25E0              ADD     A,ACC
0015 FF                MOV     R7,A
0016 EE                MOV     A,R6
0017 33                RLC     A
0018 FE                MOV     R6,A
0019 7400        R     MOV     A,#LOW NVRAM0
001B 2F                ADD     A,R7
001C F582              MOV     DPL,A
001E 7400        R     MOV     A,#HIGH NVRAM0
0020 3E                ADDC    A,R6
0021 F583              MOV     DPH,A
0023 C083              PUSH    DPH
0025 C082              PUSH    DPL
0027 E0                MOVX    A,@DPTR
0028 FC                MOV     R4,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C A800        E     MOV     R0,?C_IBP
002E 08                INC     R0
002F E6                MOV     A,@R0
0030 540F              ANL     A,#0FH
0032 FF                MOV     R7,A
0033 7E00              MOV     R6,#00H
0035 7401              MOV     A,#01H
0037 A807              MOV     R0,AR7
0039 08                INC     R0
003A 8005              SJMP    ?C0317
003C         ?C0316:
003C C3                CLR     C
003D 33                RLC     A
003E CE                XCH     A,R6
003F 33                RLC     A
0040 CE                XCH     A,R6
0041         ?C0317:
0041 D8F9              DJNZ    R0,?C0316
0043 F4                CPL     A
0044 FF                MOV     R7,A
0045 EE                MOV     A,R6
0046 F4                CPL     A
0047 5C                ANL     A,R4
0048 FE                MOV     R6,A
0049 ED                MOV     A,R5
004A 5F                ANL     A,R7
004B FF                MOV     R7,A
004C D082              POP     DPL
004E D083              POP     DPH
0050 EE                MOV     A,R6
0051 F0                MOVX    @DPTR,A
0052 A3                INC     DPTR
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2049
0055 0500        E     INC     ?C_IBP
0057 0500        E     INC     ?C_IBP
0059 22                RET     
             ; FUNCTION _?RES (END)
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 162 


             ; FUNCTION _?FLIP (BEGIN)
                                           ; SOURCE LINE # 2050
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 A800        E     MOV     R0,?C_IBP
0006 A606              MOV     @R0,AR6
0008 08                INC     R0
0009 A607              MOV     @R0,AR7
000B 1500        E     DEC     ?C_IBP
000D 1500        E     DEC     ?C_IBP
                                           ; SOURCE LINE # 2052
000F A800        E     MOV     R0,?C_IBP
0011 08                INC     R0
0012 08                INC     R0
0013 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 2053
0016 A800        E     MOV     R0,?C_IBP
0018 08                INC     R0
0019 08                INC     R0
001A E6                MOV     A,@R0
001B FC                MOV     R4,A
001C 08                INC     R0
001D E6                MOV     A,@R0
001E FD                MOV     R5,A
001F EC                MOV     A,R4
0020 C4                SWAP    A
0021 F8                MOV     R0,A
0022 54F0              ANL     A,#0F0H
0024 C8                XCH     A,R0
0025 68                XRL     A,R0
0026 FE                MOV     R6,A
0027 ED                MOV     A,R5
0028 C4                SWAP    A
0029 540F              ANL     A,#0FH
002B 48                ORL     A,R0
002C 25E0              ADD     A,ACC
002E FF                MOV     R7,A
002F EE                MOV     A,R6
0030 33                RLC     A
0031 FE                MOV     R6,A
0032 7400        R     MOV     A,#LOW NVRAM0
0034 2F                ADD     A,R7
0035 F582              MOV     DPL,A
0037 7400        R     MOV     A,#HIGH NVRAM0
0039 3E                ADDC    A,R6
003A F583              MOV     DPH,A
003C E0                MOVX    A,@DPTR
003D FA                MOV     R2,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FB                MOV     R3,A
0041 ED                MOV     A,R5
0042 540F              ANL     A,#0FH
0044 FF                MOV     R7,A
0045 7E00              MOV     R6,#00H
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
004C 8005              SJMP    ?C0319
004E         ?C0318:
004E C3                CLR     C
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 163 

004F 33                RLC     A
0050 CE                XCH     A,R6
0051 33                RLC     A
0052 CE                XCH     A,R6
0053         ?C0319:
0053 D8F9              DJNZ    R0,?C0318
0055 FF                MOV     R7,A
0056 EA                MOV     A,R2
0057 5E                ANL     A,R6
0058 FE                MOV     R6,A
0059 EB                MOV     A,R3
005A 5F                ANL     A,R7
005B A800        E     MOV     R0,?C_IBP
005D A606              MOV     @R0,AR6
005F 08                INC     R0
0060 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2054
0061 A900        E     MOV     R1,?C_IBP
0063 09                INC     R1
0064 E7                MOV     A,@R1
0065 19                DEC     R1
0066 47                ORL     A,@R1
0067 A800        E     MOV     R0,?C_IBP
0069 08                INC     R0
006A 08                INC     R0
006B 600A              JZ      ?C0161
                                           ; SOURCE LINE # 2055
006D E6                MOV     A,@R0
006E FE                MOV     R6,A
006F 08                INC     R0
0070 E6                MOV     A,@R0
0071 FF                MOV     R7,A
0072 120000      R     LCALL   _?RES
0075 8008              SJMP    ?C0163
0077         ?C0161:
                                           ; SOURCE LINE # 2057
0077 E6                MOV     A,@R0
0078 FE                MOV     R6,A
0079 08                INC     R0
007A E6                MOV     A,@R0
007B FF                MOV     R7,A
007C 120000      R     LCALL   _?SET
                                           ; SOURCE LINE # 2058
007F         ?C0163:
007F E500        E     MOV     A,?C_IBP
0081 2404              ADD     A,#04H
0083 F500        E     MOV     ?C_IBP,A
0085 22                RET     
             ; FUNCTION _?FLIP (END)

             ; FUNCTION _?LD (BEGIN)
                                           ; SOURCE LINE # 2059
                                           ; SOURCE LINE # 2060
0000 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 2061
0003 A800        E     MOV     R0,?C_IBP
0005 E6                MOV     A,@R0
0006 FC                MOV     R4,A
0007 08                INC     R0
0008 E6                MOV     A,@R0
0009 FD                MOV     R5,A
000A EC                MOV     A,R4
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 164 

000B C4                SWAP    A
000C F8                MOV     R0,A
000D 54F0              ANL     A,#0F0H
000F C8                XCH     A,R0
0010 68                XRL     A,R0
0011 FE                MOV     R6,A
0012 ED                MOV     A,R5
0013 C4                SWAP    A
0014 540F              ANL     A,#0FH
0016 48                ORL     A,R0
0017 25E0              ADD     A,ACC
0019 FF                MOV     R7,A
001A EE                MOV     A,R6
001B 33                RLC     A
001C FE                MOV     R6,A
001D 7400        R     MOV     A,#LOW NVRAM0
001F 2F                ADD     A,R7
0020 F582              MOV     DPL,A
0022 7400        R     MOV     A,#HIGH NVRAM0
0024 3E                ADDC    A,R6
0025 F583              MOV     DPH,A
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C ED                MOV     A,R5
002D 540F              ANL     A,#0FH
002F FD                MOV     R5,A
0030 EF                MOV     A,R7
0031 A805              MOV     R0,AR5
0033 08                INC     R0
0034 8006              SJMP    ?C0321
0036         ?C0320:
0036 CE                XCH     A,R6
0037 A2E7              MOV     C,ACC.7
0039 13                RRC     A
003A CE                XCH     A,R6
003B 13                RRC     A
003C         ?C0321:
003C D8F8              DJNZ    R0,?C0320
003E 5401              ANL     A,#01H
0040 FF                MOV     R7,A
                                           ; SOURCE LINE # 2062
0041 0500        E     INC     ?C_IBP
0043 0500        E     INC     ?C_IBP
0045 22                RET     
             ; FUNCTION _?LD (END)

             ; FUNCTION _?LDB (BEGIN)
                                           ; SOURCE LINE # 2063
                                           ; SOURCE LINE # 2064
0000 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 2065
0003 A800        E     MOV     R0,?C_IBP
0005 E6                MOV     A,@R0
0006 FC                MOV     R4,A
0007 08                INC     R0
0008 E6                MOV     A,@R0
0009 FD                MOV     R5,A
000A EC                MOV     A,R4
000B C4                SWAP    A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 165 

000C F8                MOV     R0,A
000D 54F0              ANL     A,#0F0H
000F C8                XCH     A,R0
0010 68                XRL     A,R0
0011 FE                MOV     R6,A
0012 ED                MOV     A,R5
0013 C4                SWAP    A
0014 540F              ANL     A,#0FH
0016 48                ORL     A,R0
0017 25E0              ADD     A,ACC
0019 FF                MOV     R7,A
001A EE                MOV     A,R6
001B 33                RLC     A
001C FE                MOV     R6,A
001D 7400        R     MOV     A,#LOW NVRAM0
001F 2F                ADD     A,R7
0020 F582              MOV     DPL,A
0022 7400        R     MOV     A,#HIGH NVRAM0
0024 3E                ADDC    A,R6
0025 F583              MOV     DPH,A
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C ED                MOV     A,R5
002D 540F              ANL     A,#0FH
002F FD                MOV     R5,A
0030 EF                MOV     A,R7
0031 A805              MOV     R0,AR5
0033 08                INC     R0
0034 8006              SJMP    ?C0323
0036         ?C0322:
0036 CE                XCH     A,R6
0037 A2E7              MOV     C,ACC.7
0039 13                RRC     A
003A CE                XCH     A,R6
003B 13                RRC     A
003C         ?C0323:
003C D8F8              DJNZ    R0,?C0322
003E 20E004            JB      ACC.0,?C0165
0041 7F01              MOV     R7,#01H
0043 8002              SJMP    ?C0166
0045         ?C0165:
0045 7F00              MOV     R7,#00H
0047         ?C0166:
                                           ; SOURCE LINE # 2066
0047 0500        E     INC     ?C_IBP
0049 0500        E     INC     ?C_IBP
004B 22                RET     
             ; FUNCTION _?LDB (END)

             ; FUNCTION _?LDP (BEGIN)
                                           ; SOURCE LINE # 2067
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 A800        E     MOV     R0,?C_IBP
0006 A606              MOV     @R0,AR6
0008 08                INC     R0
0009 A607              MOV     @R0,AR7
000B 1500        E     DEC     ?C_IBP
000D 1500        E     DEC     ?C_IBP
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 166 

                                           ; SOURCE LINE # 2069
000F A800        E     MOV     R0,?C_IBP
0011 08                INC     R0
0012 08                INC     R0
0013 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 2070
0016 A800        E     MOV     R0,?C_IBP
0018 08                INC     R0
0019 08                INC     R0
001A E6                MOV     A,@R0
001B FC                MOV     R4,A
001C 08                INC     R0
001D E6                MOV     A,@R0
001E FD                MOV     R5,A
001F EC                MOV     A,R4
0020 C4                SWAP    A
0021 F8                MOV     R0,A
0022 54F0              ANL     A,#0F0H
0024 C8                XCH     A,R0
0025 68                XRL     A,R0
0026 FE                MOV     R6,A
0027 ED                MOV     A,R5
0028 C4                SWAP    A
0029 540F              ANL     A,#0FH
002B 48                ORL     A,R0
002C 25E0              ADD     A,ACC
002E FB                MOV     R3,A
002F EE                MOV     A,R6
0030 33                RLC     A
0031 FA                MOV     R2,A
0032 7400        R     MOV     A,#LOW NVRAM0
0034 2B                ADD     A,R3
0035 F582              MOV     DPL,A
0037 7400        R     MOV     A,#HIGH NVRAM0
0039 3A                ADDC    A,R2
003A F583              MOV     DPH,A
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 ED                MOV     A,R5
0042 540F              ANL     A,#0FH
0044 FD                MOV     R5,A
0045 EF                MOV     A,R7
0046 A805              MOV     R0,AR5
0048 08                INC     R0
0049 8006              SJMP    ?C0325
004B         ?C0324:
004B CE                XCH     A,R6
004C A2E7              MOV     C,ACC.7
004E 13                RRC     A
004F CE                XCH     A,R6
0050 13                RRC     A
0051         ?C0325:
0051 D8F8              DJNZ    R0,?C0324
0053 5401              ANL     A,#01H
0055 A800        E     MOV     R0,?C_IBP
0057 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2071
0058 7400        R     MOV     A,#LOW NVRAM1
005A 2B                ADD     A,R3
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 167 

005B F582              MOV     DPL,A
005D 7400        R     MOV     A,#HIGH NVRAM1
005F 3A                ADDC    A,R2
0060 F583              MOV     DPH,A
0062 E0                MOVX    A,@DPTR
0063 FE                MOV     R6,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 A805              MOV     R0,AR5
0068 08                INC     R0
0069 8006              SJMP    ?C0327
006B         ?C0326:
006B CE                XCH     A,R6
006C A2E7              MOV     C,ACC.7
006E 13                RRC     A
006F CE                XCH     A,R6
0070 13                RRC     A
0071         ?C0327:
0071 D8F8              DJNZ    R0,?C0326
0073 5401              ANL     A,#01H
0075 A800        E     MOV     R0,?C_IBP
0077 08                INC     R0
0078 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2072
0079 A800        E     MOV     R0,?C_IBP
007B E6                MOV     A,@R0
007C 6401              XRL     A,#01H
007E 700A              JNZ     ?C0168
0080 08                INC     R0
0081 E6                MOV     A,@R0
0082 6401              XRL     A,#01H
0084 6004              JZ      ?C0168
                                           ; SOURCE LINE # 2073
0086 7F01              MOV     R7,#01H
0088 8002              SJMP    ?C0169
008A         ?C0168:
                                           ; SOURCE LINE # 2075
008A 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2076
008C         ?C0169:
008C E500        E     MOV     A,?C_IBP
008E 2404              ADD     A,#04H
0090 F500        E     MOV     ?C_IBP,A
0092 22                RET     
             ; FUNCTION _?LDP (END)

             ; FUNCTION _?LDN (BEGIN)
                                           ; SOURCE LINE # 2077
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 A800        E     MOV     R0,?C_IBP
0006 A606              MOV     @R0,AR6
0008 08                INC     R0
0009 A607              MOV     @R0,AR7
000B 1500        E     DEC     ?C_IBP
000D 1500        E     DEC     ?C_IBP
                                           ; SOURCE LINE # 2079
000F A800        E     MOV     R0,?C_IBP
0011 08                INC     R0
0012 08                INC     R0
0013 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 2080
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 168 

0016 A800        E     MOV     R0,?C_IBP
0018 08                INC     R0
0019 08                INC     R0
001A 08                INC     R0
001B E6                MOV     A,@R0
001C 540F              ANL     A,#0FH
001E 25E0              ADD     A,ACC
0020 FD                MOV     R5,A
0021 E4                CLR     A
0022 33                RLC     A
0023 FC                MOV     R4,A
0024 7400        R     MOV     A,#LOW NVRAM0
0026 2D                ADD     A,R5
0027 F582              MOV     DPL,A
0029 7400        R     MOV     A,#HIGH NVRAM0
002B 3C                ADDC    A,R4
002C F583              MOV     DPH,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FB                MOV     R3,A
0031 A800        E     MOV     R0,?C_IBP
0033 08                INC     R0
0034 08                INC     R0
0035 A900              MOV     R1,AR0
0037 E7                MOV     A,@R1
0038 C4                SWAP    A
0039 F8                MOV     R0,A
003A 54F0              ANL     A,#0F0H
003C C8                XCH     A,R0
003D 68                XRL     A,R0
003E FE                MOV     R6,A
003F 09                INC     R1
0040 E7                MOV     A,@R1
0041 C4                SWAP    A
0042 540F              ANL     A,#0FH
0044 48                ORL     A,R0
0045 25E0              ADD     A,ACC
0047 FF                MOV     R7,A
0048 EE                MOV     A,R6
0049 33                RLC     A
004A FE                MOV     R6,A
004B 7400        R     MOV     A,#LOW NVRAM0
004D 2F                ADD     A,R7
004E F582              MOV     DPL,A
0050 7400        R     MOV     A,#HIGH NVRAM0
0052 3E                ADDC    A,R6
0053 F583              MOV     DPH,A
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 A803              MOV     R0,AR3
005B 08                INC     R0
005C 8006              SJMP    ?C0329
005E         ?C0328:
005E CE                XCH     A,R6
005F A2E7              MOV     C,ACC.7
0061 13                RRC     A
0062 CE                XCH     A,R6
0063 13                RRC     A
0064         ?C0329:
0064 D8F8              DJNZ    R0,?C0328
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 169 

0066 A800        E     MOV     R0,?C_IBP
0068 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2081
0069 7400        R     MOV     A,#LOW NVRAM1
006B 2D                ADD     A,R5
006C F582              MOV     DPL,A
006E 7400        R     MOV     A,#HIGH NVRAM1
0070 3C                ADDC    A,R4
0071 F583              MOV     DPH,A
0073 A3                INC     DPTR
0074 E0                MOVX    A,@DPTR
0075 FD                MOV     R5,A
0076 A800        E     MOV     R0,?C_IBP
0078 08                INC     R0
0079 08                INC     R0
007A A900              MOV     R1,AR0
007C E7                MOV     A,@R1
007D C4                SWAP    A
007E F8                MOV     R0,A
007F 54F0              ANL     A,#0F0H
0081 C8                XCH     A,R0
0082 68                XRL     A,R0
0083 FE                MOV     R6,A
0084 09                INC     R1
0085 E7                MOV     A,@R1
0086 C4                SWAP    A
0087 540F              ANL     A,#0FH
0089 48                ORL     A,R0
008A 25E0              ADD     A,ACC
008C FF                MOV     R7,A
008D EE                MOV     A,R6
008E 33                RLC     A
008F FE                MOV     R6,A
0090 7400        R     MOV     A,#LOW NVRAM1
0092 2F                ADD     A,R7
0093 F582              MOV     DPL,A
0095 7400        R     MOV     A,#HIGH NVRAM1
0097 3E                ADDC    A,R6
0098 F583              MOV     DPH,A
009A E0                MOVX    A,@DPTR
009B FE                MOV     R6,A
009C A3                INC     DPTR
009D E0                MOVX    A,@DPTR
009E A805              MOV     R0,AR5
00A0 08                INC     R0
00A1 8006              SJMP    ?C0331
00A3         ?C0330:
00A3 CE                XCH     A,R6
00A4 A2E7              MOV     C,ACC.7
00A6 13                RRC     A
00A7 CE                XCH     A,R6
00A8 13                RRC     A
00A9         ?C0331:
00A9 D8F8              DJNZ    R0,?C0330
00AB A800        E     MOV     R0,?C_IBP
00AD 08                INC     R0
00AE F6                MOV     @R0,A
                                           ; SOURCE LINE # 2082
00AF A800        E     MOV     R0,?C_IBP
00B1 E6                MOV     A,@R0
00B2 7008              JNZ     ?C0171
00B4 08                INC     R0
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 170 

00B5 E6                MOV     A,@R0
00B6 6004              JZ      ?C0171
                                           ; SOURCE LINE # 2083
00B8 7F01              MOV     R7,#01H
00BA 8002              SJMP    ?C0172
00BC         ?C0171:
                                           ; SOURCE LINE # 2085
00BC 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2086
00BE         ?C0172:
00BE E500        E     MOV     A,?C_IBP
00C0 2404              ADD     A,#04H
00C2 F500        E     MOV     ?C_IBP,A
00C4 22                RET     
             ; FUNCTION _?LDN (END)

             ; FUNCTION _T1MS (BEGIN)
                                           ; SOURCE LINE # 2087
0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2092
0002 ED                MOV     A,R5
0003 7003              JNZ     $ + 5H
0005 020000      R     LJMP    ?C0174
                                           ; SOURCE LINE # 2093
0008 EF                MOV     A,R7
0009 25E0              ADD     A,ACC
000B FF                MOV     R7,A
000C E4                CLR     A
000D 33                RLC     A
000E FE                MOV     R6,A
000F 7400        R     MOV     A,#LOW NVRAM0+0146H
0011 2F                ADD     A,R7
0012 F582              MOV     DPL,A
0014 7400        R     MOV     A,#HIGH NVRAM0+0146H
0016 3E                ADDC    A,R6
0017 F583              MOV     DPH,A
0019 E0                MOVX    A,@DPTR
001A FE                MOV     R6,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D C3                CLR     C
001E 9B                SUBB    A,R3
001F EE                MOV     A,R6
0020 9A                SUBB    A,R2
0021 4037              JC      ?C0175
                                           ; SOURCE LINE # 2094
0023 E500        R     MOV     A,A
0025 C4                SWAP    A
0026 540F              ANL     A,#0FH
0028 25E0              ADD     A,ACC
002A FF                MOV     R7,A
002B E4                CLR     A
002C 33                RLC     A
002D FE                MOV     R6,A
002E 7400        R     MOV     A,#LOW NVRAM0+0140H
0030 2F                ADD     A,R7
0031 F582              MOV     DPL,A
0033 7400        R     MOV     A,#HIGH NVRAM0+0140H
0035 3E                ADDC    A,R6
0036 F583              MOV     DPH,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 171 

0038 C083              PUSH    DPH
003A C082              PUSH    DPL
003C E500        R     MOV     A,A
003E 540F              ANL     A,#0FH
0040 FF                MOV     R7,A
0041 7E00              MOV     R6,#00H
0043 7401              MOV     A,#01H
0045 A807              MOV     R0,AR7
0047 08                INC     R0
0048 8005              SJMP    ?C0333
004A         ?C0332:
004A C3                CLR     C
004B 33                RLC     A
004C CE                XCH     A,R6
004D 33                RLC     A
004E CE                XCH     A,R6
004F         ?C0333:
004F D8F9              DJNZ    R0,?C0332
0051 FF                MOV     R7,A
0052 E0                MOVX    A,@DPTR
0053 4E                ORL     A,R6
0054 FE                MOV     R6,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 4F                ORL     A,R7
                                           ; SOURCE LINE # 2095
0058 8039              SJMP    ?C0429
005A         ?C0175:
                                           ; SOURCE LINE # 2096
                                           ; SOURCE LINE # 2097
005A E500        R     MOV     A,A
005C C4                SWAP    A
005D 540F              ANL     A,#0FH
005F 25E0              ADD     A,ACC
0061 FF                MOV     R7,A
0062 E4                CLR     A
0063 33                RLC     A
0064 FE                MOV     R6,A
0065 7400        R     MOV     A,#LOW NVRAM0+0140H
0067 2F                ADD     A,R7
0068 F582              MOV     DPL,A
006A 7400        R     MOV     A,#HIGH NVRAM0+0140H
006C 3E                ADDC    A,R6
006D F583              MOV     DPH,A
006F C083              PUSH    DPH
0071 C082              PUSH    DPL
0073 E500        R     MOV     A,A
0075 540F              ANL     A,#0FH
0077 FF                MOV     R7,A
0078 7E00              MOV     R6,#00H
007A 7401              MOV     A,#01H
007C A807              MOV     R0,AR7
007E 08                INC     R0
007F 8005              SJMP    ?C0335
0081         ?C0334:
0081 C3                CLR     C
0082 33                RLC     A
0083 CE                XCH     A,R6
0084 33                RLC     A
0085 CE                XCH     A,R6
0086         ?C0335:
0086 D8F9              DJNZ    R0,?C0334
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 172 

0088 F4                CPL     A
0089 FF                MOV     R7,A
008A EE                MOV     A,R6
008B F4                CPL     A
008C FE                MOV     R6,A
008D E0                MOVX    A,@DPTR
008E 5E                ANL     A,R6
008F FE                MOV     R6,A
0090 A3                INC     DPTR
0091 E0                MOVX    A,@DPTR
0092 5F                ANL     A,R7
0093         ?C0429:
0093 FF                MOV     R7,A
0094 D082              POP     DPL
0096 D083              POP     DPH
0098 EE                MOV     A,R6
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2098
                                           ; SOURCE LINE # 2100
009D 22                RET     
009E         ?C0174:
                                           ; SOURCE LINE # 2101
                                           ; SOURCE LINE # 2102
009E E500        R     MOV     A,A
00A0 C4                SWAP    A
00A1 540F              ANL     A,#0FH
00A3 25E0              ADD     A,ACC
00A5 FF                MOV     R7,A
00A6 E4                CLR     A
00A7 33                RLC     A
00A8 FE                MOV     R6,A
00A9 7400        R     MOV     A,#LOW NVRAM0+0140H
00AB 2F                ADD     A,R7
00AC F582              MOV     DPL,A
00AE 7400        R     MOV     A,#HIGH NVRAM0+0140H
00B0 3E                ADDC    A,R6
00B1 F583              MOV     DPH,A
00B3 C083              PUSH    DPH
00B5 C082              PUSH    DPL
00B7 E500        R     MOV     A,A
00B9 540F              ANL     A,#0FH
00BB FF                MOV     R7,A
00BC 7E00              MOV     R6,#00H
00BE 7401              MOV     A,#01H
00C0 A807              MOV     R0,AR7
00C2 08                INC     R0
00C3 8005              SJMP    ?C0337
00C5         ?C0336:
00C5 C3                CLR     C
00C6 33                RLC     A
00C7 CE                XCH     A,R6
00C8 33                RLC     A
00C9 CE                XCH     A,R6
00CA         ?C0337:
00CA D8F9              DJNZ    R0,?C0336
00CC F4                CPL     A
00CD FF                MOV     R7,A
00CE EE                MOV     A,R6
00CF F4                CPL     A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 173 

00D0 FE                MOV     R6,A
00D1 E0                MOVX    A,@DPTR
00D2 5E                ANL     A,R6
00D3 FE                MOV     R6,A
00D4 A3                INC     DPTR
00D5 E0                MOVX    A,@DPTR
00D6 5F                ANL     A,R7
00D7 FF                MOV     R7,A
00D8 D082              POP     DPL
00DA D083              POP     DPH
00DC EE                MOV     A,R6
00DD F0                MOVX    @DPTR,A
00DE A3                INC     DPTR
00DF EF                MOV     A,R7
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2103
00E1 E500        R     MOV     A,A
00E3 25E0              ADD     A,ACC
00E5 FF                MOV     R7,A
00E6 E4                CLR     A
00E7 33                RLC     A
00E8 FE                MOV     R6,A
00E9 7400        R     MOV     A,#LOW NVRAM0+0146H
00EB 2F                ADD     A,R7
00EC F582              MOV     DPL,A
00EE 7400        R     MOV     A,#HIGH NVRAM0+0146H
00F0 3E                ADDC    A,R6
00F1 F583              MOV     DPH,A
00F3 E4                CLR     A
00F4 F0                MOVX    @DPTR,A
00F5 A3                INC     DPTR
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2104
                                           ; SOURCE LINE # 2105
00F7         ?C0178:
00F7 22                RET     
             ; FUNCTION _T1MS (END)

             ; FUNCTION _T10MS (BEGIN)
                                           ; SOURCE LINE # 2106
0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2111
0002 ED                MOV     A,R5
0003 7003              JNZ     $ + 5H
0005 020000      R     LJMP    ?C0179
                                           ; SOURCE LINE # 2112
0008 EF                MOV     A,R7
0009 25E0              ADD     A,ACC
000B FF                MOV     R7,A
000C E4                CLR     A
000D 33                RLC     A
000E FE                MOV     R6,A
000F 7400        R     MOV     A,#LOW NVRAM0+0166H
0011 2F                ADD     A,R7
0012 F582              MOV     DPL,A
0014 7400        R     MOV     A,#HIGH NVRAM0+0166H
0016 3E                ADDC    A,R6
0017 F583              MOV     DPH,A
0019 E0                MOVX    A,@DPTR
001A FE                MOV     R6,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 174 

001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D C3                CLR     C
001E 9B                SUBB    A,R3
001F EE                MOV     A,R6
0020 9A                SUBB    A,R2
0021 4037              JC      ?C0180
                                           ; SOURCE LINE # 2113
0023 E500        R     MOV     A,A
0025 C4                SWAP    A
0026 540F              ANL     A,#0FH
0028 25E0              ADD     A,ACC
002A FF                MOV     R7,A
002B E4                CLR     A
002C 33                RLC     A
002D FE                MOV     R6,A
002E 7400        R     MOV     A,#LOW NVRAM0+0142H
0030 2F                ADD     A,R7
0031 F582              MOV     DPL,A
0033 7400        R     MOV     A,#HIGH NVRAM0+0142H
0035 3E                ADDC    A,R6
0036 F583              MOV     DPH,A
0038 C083              PUSH    DPH
003A C082              PUSH    DPL
003C E500        R     MOV     A,A
003E 540F              ANL     A,#0FH
0040 FF                MOV     R7,A
0041 7E00              MOV     R6,#00H
0043 7401              MOV     A,#01H
0045 A807              MOV     R0,AR7
0047 08                INC     R0
0048 8005              SJMP    ?C0339
004A         ?C0338:
004A C3                CLR     C
004B 33                RLC     A
004C CE                XCH     A,R6
004D 33                RLC     A
004E CE                XCH     A,R6
004F         ?C0339:
004F D8F9              DJNZ    R0,?C0338
0051 FF                MOV     R7,A
0052 E0                MOVX    A,@DPTR
0053 4E                ORL     A,R6
0054 FE                MOV     R6,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 4F                ORL     A,R7
                                           ; SOURCE LINE # 2114
0058 8039              SJMP    ?C0430
005A         ?C0180:
                                           ; SOURCE LINE # 2115
                                           ; SOURCE LINE # 2116
005A E500        R     MOV     A,A
005C C4                SWAP    A
005D 540F              ANL     A,#0FH
005F 25E0              ADD     A,ACC
0061 FF                MOV     R7,A
0062 E4                CLR     A
0063 33                RLC     A
0064 FE                MOV     R6,A
0065 7400        R     MOV     A,#LOW NVRAM0+0142H
0067 2F                ADD     A,R7
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 175 

0068 F582              MOV     DPL,A
006A 7400        R     MOV     A,#HIGH NVRAM0+0142H
006C 3E                ADDC    A,R6
006D F583              MOV     DPH,A
006F C083              PUSH    DPH
0071 C082              PUSH    DPL
0073 E500        R     MOV     A,A
0075 540F              ANL     A,#0FH
0077 FF                MOV     R7,A
0078 7E00              MOV     R6,#00H
007A 7401              MOV     A,#01H
007C A807              MOV     R0,AR7
007E 08                INC     R0
007F 8005              SJMP    ?C0341
0081         ?C0340:
0081 C3                CLR     C
0082 33                RLC     A
0083 CE                XCH     A,R6
0084 33                RLC     A
0085 CE                XCH     A,R6
0086         ?C0341:
0086 D8F9              DJNZ    R0,?C0340
0088 F4                CPL     A
0089 FF                MOV     R7,A
008A EE                MOV     A,R6
008B F4                CPL     A
008C FE                MOV     R6,A
008D E0                MOVX    A,@DPTR
008E 5E                ANL     A,R6
008F FE                MOV     R6,A
0090 A3                INC     DPTR
0091 E0                MOVX    A,@DPTR
0092 5F                ANL     A,R7
0093         ?C0430:
0093 FF                MOV     R7,A
0094 D082              POP     DPL
0096 D083              POP     DPH
0098 EE                MOV     A,R6
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2117
                                           ; SOURCE LINE # 2118
009D 22                RET     
009E         ?C0179:
                                           ; SOURCE LINE # 2119
                                           ; SOURCE LINE # 2120
009E E500        R     MOV     A,A
00A0 C4                SWAP    A
00A1 540F              ANL     A,#0FH
00A3 25E0              ADD     A,ACC
00A5 FF                MOV     R7,A
00A6 E4                CLR     A
00A7 33                RLC     A
00A8 FE                MOV     R6,A
00A9 7400        R     MOV     A,#LOW NVRAM0+0142H
00AB 2F                ADD     A,R7
00AC F582              MOV     DPL,A
00AE 7400        R     MOV     A,#HIGH NVRAM0+0142H
00B0 3E                ADDC    A,R6
00B1 F583              MOV     DPH,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 176 

00B3 C083              PUSH    DPH
00B5 C082              PUSH    DPL
00B7 E500        R     MOV     A,A
00B9 540F              ANL     A,#0FH
00BB FF                MOV     R7,A
00BC 7E00              MOV     R6,#00H
00BE 7401              MOV     A,#01H
00C0 A807              MOV     R0,AR7
00C2 08                INC     R0
00C3 8005              SJMP    ?C0343
00C5         ?C0342:
00C5 C3                CLR     C
00C6 33                RLC     A
00C7 CE                XCH     A,R6
00C8 33                RLC     A
00C9 CE                XCH     A,R6
00CA         ?C0343:
00CA D8F9              DJNZ    R0,?C0342
00CC F4                CPL     A
00CD FF                MOV     R7,A
00CE EE                MOV     A,R6
00CF F4                CPL     A
00D0 FE                MOV     R6,A
00D1 E0                MOVX    A,@DPTR
00D2 5E                ANL     A,R6
00D3 FE                MOV     R6,A
00D4 A3                INC     DPTR
00D5 E0                MOVX    A,@DPTR
00D6 5F                ANL     A,R7
00D7 FF                MOV     R7,A
00D8 D082              POP     DPL
00DA D083              POP     DPH
00DC EE                MOV     A,R6
00DD F0                MOVX    @DPTR,A
00DE A3                INC     DPTR
00DF EF                MOV     A,R7
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2121
00E1 E500        R     MOV     A,A
00E3 25E0              ADD     A,ACC
00E5 FF                MOV     R7,A
00E6 E4                CLR     A
00E7 33                RLC     A
00E8 FE                MOV     R6,A
00E9 7400        R     MOV     A,#LOW NVRAM0+0166H
00EB 2F                ADD     A,R7
00EC F582              MOV     DPL,A
00EE 7400        R     MOV     A,#HIGH NVRAM0+0166H
00F0 3E                ADDC    A,R6
00F1 F583              MOV     DPH,A
00F3 E4                CLR     A
00F4 F0                MOVX    @DPTR,A
00F5 A3                INC     DPTR
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2122
                                           ; SOURCE LINE # 2123
00F7         ?C0183:
00F7 22                RET     
             ; FUNCTION _T10MS (END)

             ; FUNCTION _T100MS (BEGIN)
                                           ; SOURCE LINE # 2124
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 177 

0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2129
0002 ED                MOV     A,R5
0003 7003              JNZ     $ + 5H
0005 020000      R     LJMP    ?C0184
                                           ; SOURCE LINE # 2130
0008 EF                MOV     A,R7
0009 25E0              ADD     A,ACC
000B FF                MOV     R7,A
000C E4                CLR     A
000D 33                RLC     A
000E FE                MOV     R6,A
000F 7400        R     MOV     A,#LOW NVRAM0+0186H
0011 2F                ADD     A,R7
0012 F582              MOV     DPL,A
0014 7400        R     MOV     A,#HIGH NVRAM0+0186H
0016 3E                ADDC    A,R6
0017 F583              MOV     DPH,A
0019 E0                MOVX    A,@DPTR
001A FE                MOV     R6,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D C3                CLR     C
001E 9B                SUBB    A,R3
001F EE                MOV     A,R6
0020 9A                SUBB    A,R2
0021 4037              JC      ?C0185
                                           ; SOURCE LINE # 2131
0023 E500        R     MOV     A,A
0025 C4                SWAP    A
0026 540F              ANL     A,#0FH
0028 25E0              ADD     A,ACC
002A FF                MOV     R7,A
002B E4                CLR     A
002C 33                RLC     A
002D FE                MOV     R6,A
002E 7400        R     MOV     A,#LOW NVRAM0+0144H
0030 2F                ADD     A,R7
0031 F582              MOV     DPL,A
0033 7400        R     MOV     A,#HIGH NVRAM0+0144H
0035 3E                ADDC    A,R6
0036 F583              MOV     DPH,A
0038 C083              PUSH    DPH
003A C082              PUSH    DPL
003C E500        R     MOV     A,A
003E 540F              ANL     A,#0FH
0040 FF                MOV     R7,A
0041 7E00              MOV     R6,#00H
0043 7401              MOV     A,#01H
0045 A807              MOV     R0,AR7
0047 08                INC     R0
0048 8005              SJMP    ?C0345
004A         ?C0344:
004A C3                CLR     C
004B 33                RLC     A
004C CE                XCH     A,R6
004D 33                RLC     A
004E CE                XCH     A,R6
004F         ?C0345:
004F D8F9              DJNZ    R0,?C0344
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 178 

0051 FF                MOV     R7,A
0052 E0                MOVX    A,@DPTR
0053 4E                ORL     A,R6
0054 FE                MOV     R6,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 4F                ORL     A,R7
                                           ; SOURCE LINE # 2132
0058 8039              SJMP    ?C0431
005A         ?C0185:
                                           ; SOURCE LINE # 2133
                                           ; SOURCE LINE # 2134
005A E500        R     MOV     A,A
005C C4                SWAP    A
005D 540F              ANL     A,#0FH
005F 25E0              ADD     A,ACC
0061 FF                MOV     R7,A
0062 E4                CLR     A
0063 33                RLC     A
0064 FE                MOV     R6,A
0065 7400        R     MOV     A,#LOW NVRAM0+0144H
0067 2F                ADD     A,R7
0068 F582              MOV     DPL,A
006A 7400        R     MOV     A,#HIGH NVRAM0+0144H
006C 3E                ADDC    A,R6
006D F583              MOV     DPH,A
006F C083              PUSH    DPH
0071 C082              PUSH    DPL
0073 E500        R     MOV     A,A
0075 540F              ANL     A,#0FH
0077 FF                MOV     R7,A
0078 7E00              MOV     R6,#00H
007A 7401              MOV     A,#01H
007C A807              MOV     R0,AR7
007E 08                INC     R0
007F 8005              SJMP    ?C0347
0081         ?C0346:
0081 C3                CLR     C
0082 33                RLC     A
0083 CE                XCH     A,R6
0084 33                RLC     A
0085 CE                XCH     A,R6
0086         ?C0347:
0086 D8F9              DJNZ    R0,?C0346
0088 F4                CPL     A
0089 FF                MOV     R7,A
008A EE                MOV     A,R6
008B F4                CPL     A
008C FE                MOV     R6,A
008D E0                MOVX    A,@DPTR
008E 5E                ANL     A,R6
008F FE                MOV     R6,A
0090 A3                INC     DPTR
0091 E0                MOVX    A,@DPTR
0092 5F                ANL     A,R7
0093         ?C0431:
0093 FF                MOV     R7,A
0094 D082              POP     DPL
0096 D083              POP     DPH
0098 EE                MOV     A,R6
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 179 

009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2135
                                           ; SOURCE LINE # 2136
009D 22                RET     
009E         ?C0184:
                                           ; SOURCE LINE # 2137
                                           ; SOURCE LINE # 2138
009E E500        R     MOV     A,A
00A0 C4                SWAP    A
00A1 540F              ANL     A,#0FH
00A3 25E0              ADD     A,ACC
00A5 FF                MOV     R7,A
00A6 E4                CLR     A
00A7 33                RLC     A
00A8 FE                MOV     R6,A
00A9 7400        R     MOV     A,#LOW NVRAM0+0144H
00AB 2F                ADD     A,R7
00AC F582              MOV     DPL,A
00AE 7400        R     MOV     A,#HIGH NVRAM0+0144H
00B0 3E                ADDC    A,R6
00B1 F583              MOV     DPH,A
00B3 C083              PUSH    DPH
00B5 C082              PUSH    DPL
00B7 E500        R     MOV     A,A
00B9 540F              ANL     A,#0FH
00BB FF                MOV     R7,A
00BC 7E00              MOV     R6,#00H
00BE 7401              MOV     A,#01H
00C0 A807              MOV     R0,AR7
00C2 08                INC     R0
00C3 8005              SJMP    ?C0349
00C5         ?C0348:
00C5 C3                CLR     C
00C6 33                RLC     A
00C7 CE                XCH     A,R6
00C8 33                RLC     A
00C9 CE                XCH     A,R6
00CA         ?C0349:
00CA D8F9              DJNZ    R0,?C0348
00CC F4                CPL     A
00CD FF                MOV     R7,A
00CE EE                MOV     A,R6
00CF F4                CPL     A
00D0 FE                MOV     R6,A
00D1 E0                MOVX    A,@DPTR
00D2 5E                ANL     A,R6
00D3 FE                MOV     R6,A
00D4 A3                INC     DPTR
00D5 E0                MOVX    A,@DPTR
00D6 5F                ANL     A,R7
00D7 FF                MOV     R7,A
00D8 D082              POP     DPL
00DA D083              POP     DPH
00DC EE                MOV     A,R6
00DD F0                MOVX    @DPTR,A
00DE A3                INC     DPTR
00DF EF                MOV     A,R7
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2139
00E1 E500        R     MOV     A,A
00E3 25E0              ADD     A,ACC
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 180 

00E5 FF                MOV     R7,A
00E6 E4                CLR     A
00E7 33                RLC     A
00E8 FE                MOV     R6,A
00E9 7400        R     MOV     A,#LOW NVRAM0+0186H
00EB 2F                ADD     A,R7
00EC F582              MOV     DPL,A
00EE 7400        R     MOV     A,#HIGH NVRAM0+0186H
00F0 3E                ADDC    A,R6
00F1 F583              MOV     DPH,A
00F3 E4                CLR     A
00F4 F0                MOVX    @DPTR,A
00F5 A3                INC     DPTR
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2140
                                           ; SOURCE LINE # 2141
00F7         ?C0188:
00F7 22                RET     
             ; FUNCTION _T100MS (END)

             ; FUNCTION _TNTC (BEGIN)
                                           ; SOURCE LINE # 2142
;---- Variable 'dat' assigned to Register 'DPTR' ----
0000 8F82              MOV     DPL,R7
0002 8E83              MOV     DPH,R6
                                           ; SOURCE LINE # 2145
0004 EE                MOV     A,R6
0005 33                RLC     A
0006 95E0              SUBB    A,ACC
0008 FD                MOV     R5,A
0009 FC                MOV     R4,A
000A E4                CLR     A
000B 7B98              MOV     R3,#098H
000D 7A08              MOV     R2,#08H
000F F9                MOV     R1,A
0010 F8                MOV     R0,A
0011 D3                SETB    C
0012 120000      E     LCALL   ?C?SLCMP
0015 5003              JNC     ?C0189
0017 900898            MOV     DPTR,#0898H
001A         ?C0189:
                                           ; SOURCE LINE # 2146
001A C3                CLR     C
001B E583              MOV     A,DPH
001D 6480              XRL     A,#080H
001F 9480              SUBB    A,#080H
0021 5005              JNC     ?C0190
0023 E4                CLR     A
0024 F583              MOV     DPH,A
0026 F582              MOV     DPL,A
0028         ?C0190:
                                           ; SOURCE LINE # 2148
0028 AE83              MOV     R6,DPH
002A AF82              MOV     R7,DPL
002C EE                MOV     A,R6
002D 33                RLC     A
002E 95E0              SUBB    A,ACC
0030 FD                MOV     R5,A
0031 FC                MOV     R4,A
0032 E4                CLR     A
0033 7B98              MOV     R3,#098H
0035 7A08              MOV     R2,#08H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 181 

0037 F9                MOV     R1,A
0038 F8                MOV     R0,A
0039 120000      E     LCALL   ?C?LMUL
003C E4                CLR     A
003D FB                MOV     R3,A
003E 7A10              MOV     R2,#010H
0040 F9                MOV     R1,A
0041 F8                MOV     R0,A
0042 120000      E     LCALL   ?C?SLDIV
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2149
0045 C3                CLR     C
0046 7488              MOV     A,#088H
0048 9F                SUBB    A,R7
0049 FD                MOV     R5,A
004A 7413              MOV     A,#013H
004C 9E                SUBB    A,R6
004D FC                MOV     R4,A
004E 7EF0              MOV     R6,#0F0H
0050 7F80              MOV     R7,#080H
0052 120000      E     LCALL   ?C?UIDIV
                                           ; SOURCE LINE # 2151
0055 AD07              MOV     R5,AR7
0057 AC06              MOV     R4,AR6
0059 E4                CLR     A
005A 120000      E     LCALL   ?C?FCASTI
005D 7B00              MOV     R3,#00H
005F 7A40              MOV     R2,#040H
0061 791C              MOV     R1,#01CH
0063 7846              MOV     R0,#046H
0065 120000      E     LCALL   ?C?FPDIV
0068 120000      E     LCALL   _log
006B 7B97              MOV     R3,#097H
006D 7AC9              MOV     R2,#0C9H
006F 7996              MOV     R1,#096H
0071 7839              MOV     R0,#039H
0073 120000      E     LCALL   ?C?FPMUL
0076 7B62              MOV     R3,#062H
0078 7AEB              MOV     R2,#0EBH
007A 795B              MOV     R1,#05BH
007C 783B              MOV     R0,#03BH
007E 120000      E     LCALL   ?C?FPADD
0081 8F00        R     MOV     ftemp+03H,R7
0083 8E00        R     MOV     ftemp+02H,R6
0085 8D00        R     MOV     ftemp+01H,R5
0087 8C00        R     MOV     ftemp,R4
                                           ; SOURCE LINE # 2152
0089 AB00        R     MOV     R3,ftemp+03H
008B AA00        R     MOV     R2,ftemp+02H
008D A900        R     MOV     R1,ftemp+01H
008F A800        R     MOV     R0,ftemp
0091 E4                CLR     A
0092 FF                MOV     R7,A
0093 FE                MOV     R6,A
0094 7D80              MOV     R5,#080H
0096 7C3F              MOV     R4,#03FH
0098 120000      E     LCALL   ?C?FPDIV
009B 7B00              MOV     R3,#00H
009D 7A80              MOV     R2,#080H
009F 7988              MOV     R1,#088H
00A1 78C3              MOV     R0,#0C3H
00A3 120000      E     LCALL   ?C?FPADD
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 182 

00A6 8F00        R     MOV     ftemp+03H,R7
00A8 8E00        R     MOV     ftemp+02H,R6
00AA 8D00        R     MOV     ftemp+01H,R5
00AC 8C00        R     MOV     ftemp,R4
                                           ; SOURCE LINE # 2153
00AE E4                CLR     A
00AF FF                MOV     R7,A
00B0 FE                MOV     R6,A
00B1 7DC8              MOV     R5,#0C8H
00B3 7C42              MOV     R4,#042H
00B5 AB00        R     MOV     R3,ftemp+03H
00B7 AA00        R     MOV     R2,ftemp+02H
00B9 A900        R     MOV     R1,ftemp+01H
00BB A800        R     MOV     R0,ftemp
00BD 120000      E     LCALL   ?C?FPCMP3
00C0 400B              JC      ?C0191
00C2 E4                CLR     A
00C3 F500        R     MOV     ftemp+03H,A
00C5 F500        R     MOV     ftemp+02H,A
00C7 7500C8      R     MOV     ftemp+01H,#0C8H
00CA 750042      R     MOV     ftemp,#042H
00CD         ?C0191:
                                           ; SOURCE LINE # 2154
00CD E4                CLR     A
00CE FF                MOV     R7,A
00CF FE                MOV     R6,A
00D0 7DC8              MOV     R5,#0C8H
00D2 7CC2              MOV     R4,#0C2H
00D4 AB00        R     MOV     R3,ftemp+03H
00D6 AA00        R     MOV     R2,ftemp+02H
00D8 A900        R     MOV     R1,ftemp+01H
00DA A800        R     MOV     R0,ftemp
00DC 120000      E     LCALL   ?C?FPCMP3
00DF 6002              JZ      $ + 4H
00E1 500B              JNC     ?C0192
00E3 E4                CLR     A
00E4 F500        R     MOV     ftemp+03H,A
00E6 F500        R     MOV     ftemp+02H,A
00E8 7500C8      R     MOV     ftemp+01H,#0C8H
00EB 7500C2      R     MOV     ftemp,#0C2H
00EE         ?C0192:
                                           ; SOURCE LINE # 2155
00EE E4                CLR     A
00EF FF                MOV     R7,A
00F0 FE                MOV     R6,A
00F1 7D20              MOV     R5,#020H
00F3 7C41              MOV     R4,#041H
00F5 AB00        R     MOV     R3,ftemp+03H
00F7 AA00        R     MOV     R2,ftemp+02H
00F9 A900        R     MOV     R1,ftemp+01H
00FB A800        R     MOV     R0,ftemp
00FD 120000      E     LCALL   ?C?FPMUL
0100 020000      E     LJMP    ?C?CASTF
             ; FUNCTION _TNTC (END)

             ; FUNCTION _TENV (BEGIN)
                                           ; SOURCE LINE # 2157
;---- Variable 'dat' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2159
0000 EE                MOV     A,R6
0001 33                RLC     A
0002 95E0              SUBB    A,ACC
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 183 

0004 FD                MOV     R5,A
0005 FC                MOV     R4,A
0006 E4                CLR     A
0007 7B98              MOV     R3,#098H
0009 7A08              MOV     R2,#08H
000B F9                MOV     R1,A
000C F8                MOV     R0,A
000D 120000      E     LCALL   ?C?LMUL
0010 E4                CLR     A
0011 FB                MOV     R3,A
0012 7A10              MOV     R2,#010H
0014 F9                MOV     R1,A
0015 F8                MOV     R0,A
0016 120000      E     LCALL   ?C?SLDIV
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2160
0019 EF                MOV     A,R7
001A 24A8              ADD     A,#0A8H
001C FF                MOV     R7,A
001D EE                MOV     A,R6
001E 34FC              ADDC    A,#0FCH
0020 FE                MOV     R6,A
0021 E4                CLR     A
0022 34FF              ADDC    A,#0FFH
0024 FD                MOV     R5,A
0025 E4                CLR     A
0026 34FF              ADDC    A,#0FFH
0028 FC                MOV     R4,A
0029 E4                CLR     A
002A 7BE8              MOV     R3,#0E8H
002C 7A03              MOV     R2,#03H
002E F9                MOV     R1,A
002F F8                MOV     R0,A
0030 120000      E     LCALL   ?C?LMUL
0033 E4                CLR     A
0034 7B02              MOV     R3,#02H
0036 7A0D              MOV     R2,#0DH
0038 F9                MOV     R1,A
0039 F8                MOV     R0,A
003A 020000      E     LJMP    ?C?SLDIV
             ; FUNCTION _TENV (END)

             ; FUNCTION _MAX (BEGIN)
                                           ; SOURCE LINE # 2163
;---- Variable 'len' assigned to Register 'R5' ----
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 2166
0006 120000      E     LCALL   ?C?ILDPTR
0009 F500        R     MOV     max+01H,A
000B 85F000      R     MOV     max,B
                                           ; SOURCE LINE # 2167
;---- Variable 'i' assigned to Register 'R7' ----
000E E4                CLR     A
000F FF                MOV     R7,A
0010         ?C0195:
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9D                SUBB    A,R5
0013 502B              JNC     ?C0196
                                           ; SOURCE LINE # 2168
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 184 

0015 AB00        R     MOV     R3,s
0017 AA00        R     MOV     R2,s+01H
0019 A900        R     MOV     R1,s+02H
001B 75F002            MOV     B,#02H
001E EF                MOV     A,R7
001F A4                MUL     AB
0020 F582              MOV     DPL,A
0022 85F083            MOV     DPH,B
0025 120000      E     LCALL   ?C?ILDOPTR
0028 FB                MOV     R3,A
0029 AAF0              MOV     R2,B
002B D3                SETB    C
002C 9500        R     SUBB    A,max+01H
002E E500        R     MOV     A,max
0030 6480              XRL     A,#080H
0032 F8                MOV     R0,A
0033 EA                MOV     A,R2
0034 6480              XRL     A,#080H
0036 98                SUBB    A,R0
0037 4004              JC      ?C0197
                                           ; SOURCE LINE # 2169
0039 8A00        R     MOV     max,R2
003B 8B00        R     MOV     max+01H,R3
                                           ; SOURCE LINE # 2170
                                           ; SOURCE LINE # 2171
003D         ?C0197:
003D 0F                INC     R7
003E 80D0              SJMP    ?C0195
0040         ?C0196:
                                           ; SOURCE LINE # 2172
0040 AE00        R     MOV     R6,max
0042 AF00        R     MOV     R7,max+01H
                                           ; SOURCE LINE # 2173
0044 22                RET     
             ; FUNCTION _MAX (END)

             ; FUNCTION _MIN (BEGIN)
                                           ; SOURCE LINE # 2174
;---- Variable 'len' assigned to Register 'R5' ----
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 2177
0006 120000      E     LCALL   ?C?ILDPTR
0009 F500        R     MOV     min+01H,A
000B 85F000      R     MOV     min,B
                                           ; SOURCE LINE # 2178
;---- Variable 'i' assigned to Register 'R7' ----
000E E4                CLR     A
000F FF                MOV     R7,A
0010         ?C0200:
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9D                SUBB    A,R5
0013 502B              JNC     ?C0201
                                           ; SOURCE LINE # 2179
0015 AB00        R     MOV     R3,s
0017 AA00        R     MOV     R2,s+01H
0019 A900        R     MOV     R1,s+02H
001B 75F002            MOV     B,#02H
001E EF                MOV     A,R7
001F A4                MUL     AB
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 185 

0020 F582              MOV     DPL,A
0022 85F083            MOV     DPH,B
0025 120000      E     LCALL   ?C?ILDOPTR
0028 FB                MOV     R3,A
0029 AAF0              MOV     R2,B
002B C3                CLR     C
002C 9500        R     SUBB    A,min+01H
002E E500        R     MOV     A,min
0030 6480              XRL     A,#080H
0032 F8                MOV     R0,A
0033 EA                MOV     A,R2
0034 6480              XRL     A,#080H
0036 98                SUBB    A,R0
0037 5004              JNC     ?C0202
                                           ; SOURCE LINE # 2180
0039 8A00        R     MOV     min,R2
003B 8B00        R     MOV     min+01H,R3
                                           ; SOURCE LINE # 2181
                                           ; SOURCE LINE # 2182
003D         ?C0202:
003D 0F                INC     R7
003E 80D0              SJMP    ?C0200
0040         ?C0201:
                                           ; SOURCE LINE # 2183
0040 AE00        R     MOV     R6,min
0042 AF00        R     MOV     R7,min+01H
                                           ; SOURCE LINE # 2184
0044 22                RET     
             ; FUNCTION _MIN (END)

             ; FUNCTION wdtInit (BEGIN)
                                           ; SOURCE LINE # 2186
                                           ; SOURCE LINE # 2188
0000 75FF07            MOV     WDTCN,#07H
                                           ; SOURCE LINE # 2190
0003 22                RET     
             ; FUNCTION wdtInit (END)

             ; FUNCTION wdtEnable (BEGIN)
                                           ; SOURCE LINE # 2191
                                           ; SOURCE LINE # 2193
0000 75FFA5            MOV     WDTCN,#0A5H
                                           ; SOURCE LINE # 2195
0003 22                RET     
             ; FUNCTION wdtEnable (END)

             ; FUNCTION wdtDisable (BEGIN)
                                           ; SOURCE LINE # 2196
                                           ; SOURCE LINE # 2198
0000 A2AF              MOV     C,EA
0002 E4                CLR     A
0003 33                RLC     A
;---- Variable 'flagEA' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2199
0004 C2AF              CLR     EA
                                           ; SOURCE LINE # 2201
0006 75FFDE            MOV     WDTCN,#0DEH
                                           ; SOURCE LINE # 2202
0009 75FFAD            MOV     WDTCN,#0ADH
                                           ; SOURCE LINE # 2206
000C 24FF              ADD     A,#0FFH
000E 92AF              MOV     EA,C
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 186 

                                           ; SOURCE LINE # 2207
0010 22                RET     
             ; FUNCTION wdtDisable (END)

             ; FUNCTION _?wdtFeed (BEGIN)
                                           ; SOURCE LINE # 2208
                                           ; SOURCE LINE # 2210
0000 75FFA5            MOV     WDTCN,#0A5H
                                           ; SOURCE LINE # 2212
0003 22                RET     
             ; FUNCTION _?wdtFeed (END)

             ; FUNCTION pcaInit (BEGIN)
                                           ; SOURCE LINE # 2214
                                           ; SOURCE LINE # 2215
0000 22                RET     
             ; FUNCTION pcaInit (END)

             ; FUNCTION timer0Init (BEGIN)
                                           ; SOURCE LINE # 2216
                                           ; SOURCE LINE # 2218
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW TimerCounter_1mS
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2219
0004 08                INC     R0
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2221
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2222
0006 74CD              MOV     A,#0CDH
0008 08                INC     R0
0009 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2223
000A 74F8              MOV     A,#0F8H
000C 08                INC     R0
000D F6                MOV     @R0,A
                                           ; SOURCE LINE # 2224
000E F58C              MOV     TH0,A
                                           ; SOURCE LINE # 2225
0010 758ACD            MOV     TL0,#0CDH
                                           ; SOURCE LINE # 2226
0013 538EF7            ANL     CKCON,#0F7H
                                           ; SOURCE LINE # 2227
0016 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 2228
0019 438901            ORL     TMOD,#01H
                                           ; SOURCE LINE # 2229
001C D2A9              SETB    ET0
                                           ; SOURCE LINE # 2230
001E D28C              SETB    TR0
                                           ; SOURCE LINE # 2232
0020 22                RET     
             ; FUNCTION timer0Init (END)

             ; FUNCTION timer0Isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 187 

000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 2233
                                           ; SOURCE LINE # 2235
001D C28D              CLR     TF0
                                           ; SOURCE LINE # 2236
001F C28C              CLR     TR0
                                           ; SOURCE LINE # 2237
0021 7800        R     MOV     R0,#LOW Timer0_H
0023 E6                MOV     A,@R0
0024 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 2238
0026 18                DEC     R0
0027 E6                MOV     A,@R0
0028 F58A              MOV     TL0,A
                                           ; SOURCE LINE # 2239
002A D28C              SETB    TR0
                                           ; SOURCE LINE # 2240
002C 900000      R     MOV     DPTR,#NVRAM0+03B8H
002F E0                MOVX    A,@DPTR
0030 A2E7              MOV     C,ACC.7
0032 13                RRC     A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 13                RRC     A
0036 30E006            JNB     ACC.0,?C0211
                                           ; SOURCE LINE # 2241
0039 E0                MOVX    A,@DPTR
003A 54FD              ANL     A,#0FDH
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2242
003D 8007              SJMP    ?C0212
003F         ?C0211:
                                           ; SOURCE LINE # 2243
                                           ; SOURCE LINE # 2244
003F 900000      R     MOV     DPTR,#NVRAM0+03B9H
0042 E0                MOVX    A,@DPTR
0043 4402              ORL     A,#02H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2245
0046         ?C0212:
                                           ; SOURCE LINE # 2246
;---- Variable 'i' assigned to Register 'R4/R5' ----
0046 7DA3              MOV     R5,#0A3H
0048 7C00              MOV     R4,#00H
004A         ?C0213:
                                           ; SOURCE LINE # 2247
004A ED                MOV     A,R5
004B 25E0              ADD     A,ACC
004D FF                MOV     R7,A
004E EC                MOV     A,R4
004F 33                RLC     A
0050 FE                MOV     R6,A
0051 7400        R     MOV     A,#LOW NVRAM0
0053 2F                ADD     A,R7
0054 F582              MOV     DPL,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 188 

0056 7400        R     MOV     A,#HIGH NVRAM0
0058 3E                ADDC    A,R6
0059 F583              MOV     DPH,A
005B E0                MOVX    A,@DPTR
005C FA                MOV     R2,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F C3                CLR     C
0060 94FF              SUBB    A,#0FFH
0062 EA                MOV     A,R2
0063 6480              XRL     A,#080H
0065 94FF              SUBB    A,#0FFH
0067 5011              JNC     ?C0215
                                           ; SOURCE LINE # 2248
0069 7400        R     MOV     A,#LOW NVRAM0
006B 2F                ADD     A,R7
006C F582              MOV     DPL,A
006E 7400        R     MOV     A,#HIGH NVRAM0
0070 3E                ADDC    A,R6
0071 F583              MOV     DPH,A
0073 E4                CLR     A
0074 75F001            MOV     B,#01H
0077 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 2249
                                           ; SOURCE LINE # 2250
007A         ?C0215:
007A 0D                INC     R5
007B BD0001            CJNE    R5,#00H,?C0350
007E 0C                INC     R4
007F         ?C0350:
007F ED                MOV     A,R5
0080 64B3              XRL     A,#0B3H
0082 4C                ORL     A,R4
0083 70C5              JNZ     ?C0213
0085         ?C0214:
                                           ; SOURCE LINE # 2251
0085 7800        R     MOV     R0,#LOW TimerCounter_1mS
0087 E6                MOV     A,@R0
0088 C3                CLR     C
0089 940A              SUBB    A,#0AH
008B 7480              MOV     A,#080H
008D 9480              SUBB    A,#080H
008F 4066              JC      ?C0217
                                           ; SOURCE LINE # 2252
0091 900000      R     MOV     DPTR,#NVRAM0+03B8H
0094 E0                MOVX    A,@DPTR
0095 FE                MOV     R6,A
0096 A3                INC     DPTR
0097 E0                MOVX    A,@DPTR
0098 7802              MOV     R0,#02H
009A         ?C0351:
009A CE                XCH     A,R6
009B A2E7              MOV     C,ACC.7
009D 13                RRC     A
009E CE                XCH     A,R6
009F 13                RRC     A
00A0 D8F8              DJNZ    R0,?C0351
00A2 900000      R     MOV     DPTR,#NVRAM0+03B9H
00A5 30E006            JNB     ACC.0,?C0218
                                           ; SOURCE LINE # 2253
00A8 E0                MOVX    A,@DPTR
00A9 54FB              ANL     A,#0FBH
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 189 

00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2254
00AC 8004              SJMP    ?C0219
00AE         ?C0218:
                                           ; SOURCE LINE # 2255
                                           ; SOURCE LINE # 2256
00AE E0                MOVX    A,@DPTR
00AF 4404              ORL     A,#04H
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2257
00B2         ?C0219:
                                           ; SOURCE LINE # 2258
00B2 7C00              MOV     R4,#00H
00B4 7DB3              MOV     R5,#0B3H
00B6         ?C0220:
                                           ; SOURCE LINE # 2259
00B6 ED                MOV     A,R5
00B7 25E0              ADD     A,ACC
00B9 FF                MOV     R7,A
00BA EC                MOV     A,R4
00BB 33                RLC     A
00BC FE                MOV     R6,A
00BD 7400        R     MOV     A,#LOW NVRAM0
00BF 2F                ADD     A,R7
00C0 F582              MOV     DPL,A
00C2 7400        R     MOV     A,#HIGH NVRAM0
00C4 3E                ADDC    A,R6
00C5 F583              MOV     DPH,A
00C7 E0                MOVX    A,@DPTR
00C8 FA                MOV     R2,A
00C9 A3                INC     DPTR
00CA E0                MOVX    A,@DPTR
00CB C3                CLR     C
00CC 94FF              SUBB    A,#0FFH
00CE EA                MOV     A,R2
00CF 6480              XRL     A,#080H
00D1 94FF              SUBB    A,#0FFH
00D3 5011              JNC     ?C0222
                                           ; SOURCE LINE # 2260
00D5 7400        R     MOV     A,#LOW NVRAM0
00D7 2F                ADD     A,R7
00D8 F582              MOV     DPL,A
00DA 7400        R     MOV     A,#HIGH NVRAM0
00DC 3E                ADDC    A,R6
00DD F583              MOV     DPH,A
00DF E4                CLR     A
00E0 75F001            MOV     B,#01H
00E3 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 2261
                                           ; SOURCE LINE # 2262
00E6         ?C0222:
00E6 0D                INC     R5
00E7 BD0001            CJNE    R5,#00H,?C0352
00EA 0C                INC     R4
00EB         ?C0352:
00EB ED                MOV     A,R5
00EC 64C3              XRL     A,#0C3H
00EE 4C                ORL     A,R4
00EF 70C5              JNZ     ?C0220
00F1         ?C0221:
                                           ; SOURCE LINE # 2263
00F1 7800        R     MOV     R0,#LOW TimerCounter_10mS
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 190 

00F3 06                INC     @R0
                                           ; SOURCE LINE # 2264
00F4 18                DEC     R0
00F5 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 2265
00F7         ?C0217:
                                           ; SOURCE LINE # 2266
00F7 7800        R     MOV     R0,#LOW TimerCounter_10mS
00F9 E6                MOV     A,@R0
00FA C3                CLR     C
00FB 940A              SUBB    A,#0AH
00FD 7480              MOV     A,#080H
00FF 9480              SUBB    A,#080H
0101 4073              JC      ?C0224
                                           ; SOURCE LINE # 2267
0103 900000      R     MOV     DPTR,#NVRAM0+03B8H
0106 E0                MOVX    A,@DPTR
0107 FE                MOV     R6,A
0108 A3                INC     DPTR
0109 E0                MOVX    A,@DPTR
010A 7803              MOV     R0,#03H
010C         ?C0353:
010C CE                XCH     A,R6
010D A2E7              MOV     C,ACC.7
010F 13                RRC     A
0110 CE                XCH     A,R6
0111 13                RRC     A
0112 D8F8              DJNZ    R0,?C0353
0114 900000      R     MOV     DPTR,#NVRAM0+03B9H
0117 30E006            JNB     ACC.0,?C0225
                                           ; SOURCE LINE # 2268
011A E0                MOVX    A,@DPTR
011B 54F7              ANL     A,#0F7H
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2269
011E 8004              SJMP    ?C0226
0120         ?C0225:
                                           ; SOURCE LINE # 2270
                                           ; SOURCE LINE # 2271
0120 E0                MOVX    A,@DPTR
0121 4408              ORL     A,#08H
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2272
0124         ?C0226:
                                           ; SOURCE LINE # 2273
0124 7C00              MOV     R4,#00H
0126 7DC3              MOV     R5,#0C3H
0128         ?C0227:
                                           ; SOURCE LINE # 2274
0128 ED                MOV     A,R5
0129 25E0              ADD     A,ACC
012B FF                MOV     R7,A
012C EC                MOV     A,R4
012D 33                RLC     A
012E FE                MOV     R6,A
012F 7400        R     MOV     A,#LOW NVRAM0
0131 2F                ADD     A,R7
0132 F582              MOV     DPL,A
0134 7400        R     MOV     A,#HIGH NVRAM0
0136 3E                ADDC    A,R6
0137 F583              MOV     DPH,A
0139 E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 191 

013A FA                MOV     R2,A
013B A3                INC     DPTR
013C E0                MOVX    A,@DPTR
013D C3                CLR     C
013E 94FF              SUBB    A,#0FFH
0140 EA                MOV     A,R2
0141 6480              XRL     A,#080H
0143 94FF              SUBB    A,#0FFH
0145 5011              JNC     ?C0229
                                           ; SOURCE LINE # 2275
0147 7400        R     MOV     A,#LOW NVRAM0
0149 2F                ADD     A,R7
014A F582              MOV     DPL,A
014C 7400        R     MOV     A,#HIGH NVRAM0
014E 3E                ADDC    A,R6
014F F583              MOV     DPH,A
0151 E4                CLR     A
0152 75F001            MOV     B,#01H
0155 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 2276
                                           ; SOURCE LINE # 2277
0158         ?C0229:
0158 0D                INC     R5
0159 BD0001            CJNE    R5,#00H,?C0354
015C 0C                INC     R4
015D         ?C0354:
015D ED                MOV     A,R5
015E 64D2              XRL     A,#0D2H
0160 4C                ORL     A,R4
0161 70C5              JNZ     ?C0227
0163         ?C0228:
                                           ; SOURCE LINE # 2278
0163 7800        R     MOV     R0,#LOW TimerCounter_10mS
0165 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 2279
0167 120000      R     LCALL   getLedRun
016A EF                MOV     A,R7
016B 6004              JZ      ?C0231
                                           ; SOURCE LINE # 2280
016D E4                CLR     A
016E FF                MOV     R7,A
                                           ; SOURCE LINE # 2281
016F 8002              SJMP    ?C0432
0171         ?C0231:
                                           ; SOURCE LINE # 2282
                                           ; SOURCE LINE # 2283
0171 7F01              MOV     R7,#01H
0173         ?C0432:
0173 120000      R     LCALL   _setLedRun
                                           ; SOURCE LINE # 2284
                                           ; SOURCE LINE # 2285
0176         ?C0224:
                                           ; SOURCE LINE # 2287
0176 120000      R     LCALL   adcProcess
                                           ; SOURCE LINE # 2289
0179 7800        R     MOV     R0,#LOW TimerCounter_1mS
017B 06                INC     @R0
                                           ; SOURCE LINE # 2290
017C D007              POP     AR7
017E D006              POP     AR6
0180 D005              POP     AR5
0182 D004              POP     AR4
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 192 

0184 D003              POP     AR3
0186 D002              POP     AR2
0188 D001              POP     AR1
018A D000              POP     AR0
018C D0D0              POP     PSW
018E D082              POP     DPL
0190 D083              POP     DPH
0192 D0F0              POP     B
0194 D0E0              POP     ACC
0196 32                RETI    
             ; FUNCTION timer0Isr (END)

             ; FUNCTION inputInit (BEGIN)
                                           ; SOURCE LINE # 2292
                                           ; SOURCE LINE # 2293
0000 7E00              MOV     R6,#00H
0002 7F10              MOV     R7,#010H
0004 7D00              MOV     R5,#00H
0006 7B00              MOV     R3,#00H
0008 7A00        R     MOV     R2,#HIGH inputFilter
000A 7900        R     MOV     R1,#LOW inputFilter
000C 020000      E     LJMP    ?C?MEMSET
             ; FUNCTION inputInit (END)

             ; FUNCTION outputInit (BEGIN)
                                           ; SOURCE LINE # 2295
                                           ; SOURCE LINE # 2299
0000 22                RET     
             ; FUNCTION outputInit (END)

             ; FUNCTION inputRefresh (BEGIN)
                                           ; SOURCE LINE # 2300
                                           ; SOURCE LINE # 2302
0000 E586              MOV     A,P6
0002 C4                SWAP    A
0003 13                RRC     A
0004 13                RRC     A
0005 13                RRC     A
0006 5401              ANL     A,#01H
;---- Variable 'ctemp0' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 2303
0008 601F              JZ      ?C0236
                                           ; SOURCE LINE # 2304
000A 7800        R     MOV     R0,#LOW inputFilter
000C E6                MOV     A,@R0
000D FD                MOV     R5,A
000E 33                RLC     A
000F 95E0              SUBB    A,ACC
0011 FC                MOV     R4,A
0012 C3                CLR     C
0013 ED                MOV     A,R5
0014 9403              SUBB    A,#03H
0016 EC                MOV     A,R4
0017 6480              XRL     A,#080H
0019 9480              SUBB    A,#080H
001B 5003              JNC     ?C0237
                                           ; SOURCE LINE # 2305
001D 06                INC     @R0
                                           ; SOURCE LINE # 2306
001E 8026              SJMP    ?C0239
0020         ?C0237:
                                           ; SOURCE LINE # 2307
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 193 

                                           ; SOURCE LINE # 2308
0020 900000      R     MOV     DPTR,#NVRAM0+01A9H
0023 E0                MOVX    A,@DPTR
0024 4401              ORL     A,#01H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2309
                                           ; SOURCE LINE # 2310
0027 801D              SJMP    ?C0239
0029         ?C0236:
                                           ; SOURCE LINE # 2311
                                           ; SOURCE LINE # 2312
0029 7800        R     MOV     R0,#LOW inputFilter
002B E6                MOV     A,@R0
002C FF                MOV     R7,A
002D 33                RLC     A
002E 95E0              SUBB    A,ACC
0030 FE                MOV     R6,A
0031 D3                SETB    C
0032 EF                MOV     A,R7
0033 94FD              SUBB    A,#0FDH
0035 EE                MOV     A,R6
0036 6480              XRL     A,#080H
0038 947F              SUBB    A,#07FH
003A 4003              JC      ?C0240
                                           ; SOURCE LINE # 2313
003C 16                DEC     @R0
                                           ; SOURCE LINE # 2314
003D 8007              SJMP    ?C0239
003F         ?C0240:
                                           ; SOURCE LINE # 2315
                                           ; SOURCE LINE # 2316
003F 900000      R     MOV     DPTR,#NVRAM0+01A9H
0042 E0                MOVX    A,@DPTR
0043 54FE              ANL     A,#0FEH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2317
                                           ; SOURCE LINE # 2318
0046         ?C0239:
                                           ; SOURCE LINE # 2319
0046 E586              MOV     A,P6
0048 C4                SWAP    A
0049 13                RRC     A
004A 13                RRC     A
004B 5401              ANL     A,#01H
                                           ; SOURCE LINE # 2320
004D 601D              JZ      ?C0242
                                           ; SOURCE LINE # 2321
004F 7800        R     MOV     R0,#LOW inputFilter+01H
0051 E6                MOV     A,@R0
0052 FF                MOV     R7,A
0053 33                RLC     A
0054 95E0              SUBB    A,ACC
0056 FE                MOV     R6,A
0057 C3                CLR     C
0058 EF                MOV     A,R7
0059 9403              SUBB    A,#03H
005B EE                MOV     A,R6
005C 6480              XRL     A,#080H
005E 9480              SUBB    A,#080H
0060 5002              JNC     ?C0243
                                           ; SOURCE LINE # 2322
0062 06                INC     @R0
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 194 

                                           ; SOURCE LINE # 2323
0063 22                RET     
0064         ?C0243:
                                           ; SOURCE LINE # 2324
                                           ; SOURCE LINE # 2325
0064 900000      R     MOV     DPTR,#NVRAM0+01A9H
0067 E0                MOVX    A,@DPTR
0068 4402              ORL     A,#02H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2326
                                           ; SOURCE LINE # 2327
006B 22                RET     
006C         ?C0242:
                                           ; SOURCE LINE # 2328
                                           ; SOURCE LINE # 2329
006C 7800        R     MOV     R0,#LOW inputFilter+01H
006E E6                MOV     A,@R0
006F FF                MOV     R7,A
0070 33                RLC     A
0071 95E0              SUBB    A,ACC
0073 FE                MOV     R6,A
0074 D3                SETB    C
0075 EF                MOV     A,R7
0076 94FD              SUBB    A,#0FDH
0078 EE                MOV     A,R6
0079 6480              XRL     A,#080H
007B 947F              SUBB    A,#07FH
007D 4002              JC      ?C0246
                                           ; SOURCE LINE # 2330
007F 16                DEC     @R0
                                           ; SOURCE LINE # 2331
0080 22                RET     
0081         ?C0246:
                                           ; SOURCE LINE # 2332
                                           ; SOURCE LINE # 2333
0081 900000      R     MOV     DPTR,#NVRAM0+01A9H
0084 E0                MOVX    A,@DPTR
0085 54FD              ANL     A,#0FDH
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2334
                                           ; SOURCE LINE # 2335
                                           ; SOURCE LINE # 2336
0088         ?C0248:
0088 22                RET     
             ; FUNCTION inputRefresh (END)

             ; FUNCTION outputRefresh (BEGIN)
                                           ; SOURCE LINE # 2337
                                           ; SOURCE LINE # 2338
0000 900000      R     MOV     DPTR,#NVRAM0+01AAH
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 30E005            JNB     ACC.0,?C0249
                                           ; SOURCE LINE # 2339
000B 438620            ORL     P6,#020H
                                           ; SOURCE LINE # 2340
000E 8003              SJMP    ?C0250
0010         ?C0249:
                                           ; SOURCE LINE # 2341
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 195 

                                           ; SOURCE LINE # 2342
0010 5386DF            ANL     P6,#0DFH
                                           ; SOURCE LINE # 2343
0013         ?C0250:
                                           ; SOURCE LINE # 2344
0013 EE                MOV     A,R6
0014 A2E7              MOV     C,ACC.7
0016 13                RRC     A
0017 EF                MOV     A,R7
0018 13                RRC     A
0019 30E004            JNB     ACC.0,?C0251
                                           ; SOURCE LINE # 2345
001C 438610            ORL     P6,#010H
                                           ; SOURCE LINE # 2346
001F 22                RET     
0020         ?C0251:
                                           ; SOURCE LINE # 2347
                                           ; SOURCE LINE # 2348
0020 5386EF            ANL     P6,#0EFH
                                           ; SOURCE LINE # 2349
                                           ; SOURCE LINE # 2350
0023         ?C0253:
0023 22                RET     
             ; FUNCTION outputRefresh (END)

             ; FUNCTION chipAdcInit (BEGIN)
                                           ; SOURCE LINE # 2351
                                           ; SOURCE LINE # 2354
0000 D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 2355
0002 D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 2357
0004 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 2358
0006 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 2360
0008 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 2361
000A D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 2363
000C D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 2364
000E D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 2366
0010 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 2367
0012 D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 2369
0014 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 2370
0016 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 2372
0018 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 2373
001A D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 2375
001C E4                CLR     A
001D F5E8              MOV     ADC0CN,A
                                           ; SOURCE LINE # 2376
001F 43E840            ORL     ADC0CN,#040H
                                           ; SOURCE LINE # 2377
0022 43E880            ORL     ADC0CN,#080H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 196 

                                           ; SOURCE LINE # 2378
0025 F5BC              MOV     ADC0CF,A
                                           ; SOURCE LINE # 2379
0027 43BC58            ORL     ADC0CF,#058H
                                           ; SOURCE LINE # 2380
002A F5BA              MOV     AMX0CF,A
                                           ; SOURCE LINE # 2381
002C F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 2382
002E D2ED              SETB    AD0INT
                                           ; SOURCE LINE # 2383
0030 D2EC              SETB    AD0BUSY
                                           ; SOURCE LINE # 2385
0032 7800        R     MOV     R0,#LOW adcSelect
0034 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2386
0035 F500        R     MOV     i,A
0037         ?C0254:
0037 D3                SETB    C
0038 E500        R     MOV     A,i
003A 9440              SUBB    A,#040H
003C 7480              MOV     A,#080H
003E 9480              SUBB    A,#080H
0040 5017              JNC     ?C0257
                                           ; SOURCE LINE # 2387
0042 E500        R     MOV     A,i
0044 75F01F            MOV     B,#01FH
0047 A4                MUL     AB
0048 2400        R     ADD     A,#LOW adcTempDat
004A F9                MOV     R1,A
004B 7400        R     MOV     A,#HIGH adcTempDat
004D 35F0              ADDC    A,B
004F FA                MOV     R2,A
0050 7B01              MOV     R3,#01H
0052 120000      R     LCALL   _initAdcData
                                           ; SOURCE LINE # 2388
0055 0500        R     INC     i
0057 80DE              SJMP    ?C0254
                                           ; SOURCE LINE # 2389
0059         ?C0257:
0059 22                RET     
             ; FUNCTION chipAdcInit (END)

             ; FUNCTION refreshDac (BEGIN)
                                           ; SOURCE LINE # 2390
                                           ; SOURCE LINE # 2392
0000 900000      R     MOV     DPTR,#NVRAM1+0A8H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#NVRAM0+0A8H
000B E0                MOVX    A,@DPTR
000C 6E                XRL     A,R6
000D 7003              JNZ     ?C0355
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 6F                XRL     A,R7
0012         ?C0355:
0012 6019              JZ      ?C0258
                                           ; SOURCE LINE # 2393
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 197 

0014 E4                CLR     A
0015 FF                MOV     R7,A
0016 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2394
0019 900000      R     MOV     DPTR,#NVRAM0+0A8H
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FD                MOV     R5,A
0021 AC06              MOV     R4,AR6
0023 7F07              MOV     R7,#07H
0025 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2395
0028 7F01              MOV     R7,#01H
002A 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2396
002D         ?C0258:
                                           ; SOURCE LINE # 2397
002D 900000      R     MOV     DPTR,#NVRAM1+0AAH
0030 E0                MOVX    A,@DPTR
0031 FE                MOV     R6,A
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#NVRAM0+0AAH
0038 E0                MOVX    A,@DPTR
0039 6E                XRL     A,R6
003A 7003              JNZ     ?C0356
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E 6F                XRL     A,R7
003F         ?C0356:
003F 6019              JZ      ?C0259
                                           ; SOURCE LINE # 2398
0041 E4                CLR     A
0042 FF                MOV     R7,A
0043 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2399
0046 900000      R     MOV     DPTR,#NVRAM0+0AAH
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FD                MOV     R5,A
004E AC06              MOV     R4,AR6
0050 7F05              MOV     R7,#05H
0052 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2400
0055 7F01              MOV     R7,#01H
0057 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2401
005A         ?C0259:
                                           ; SOURCE LINE # 2402
005A 900000      R     MOV     DPTR,#NVRAM1+0ACH
005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 900000      R     MOV     DPTR,#NVRAM0+0ACH
0065 E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 198 

0066 6E                XRL     A,R6
0067 7003              JNZ     ?C0357
0069 A3                INC     DPTR
006A E0                MOVX    A,@DPTR
006B 6F                XRL     A,R7
006C         ?C0357:
006C 6019              JZ      ?C0260
                                           ; SOURCE LINE # 2403
006E E4                CLR     A
006F FF                MOV     R7,A
0070 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2404
0073 900000      R     MOV     DPTR,#NVRAM0+0ACH
0076 E0                MOVX    A,@DPTR
0077 FE                MOV     R6,A
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A FD                MOV     R5,A
007B AC06              MOV     R4,AR6
007D 7F03              MOV     R7,#03H
007F 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2405
0082 7F01              MOV     R7,#01H
0084 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2406
0087         ?C0260:
                                           ; SOURCE LINE # 2407
0087 900000      R     MOV     DPTR,#NVRAM1+0AEH
008A E0                MOVX    A,@DPTR
008B FE                MOV     R6,A
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F 900000      R     MOV     DPTR,#NVRAM0+0AEH
0092 E0                MOVX    A,@DPTR
0093 6E                XRL     A,R6
0094 7003              JNZ     ?C0358
0096 A3                INC     DPTR
0097 E0                MOVX    A,@DPTR
0098 6F                XRL     A,R7
0099         ?C0358:
0099 6019              JZ      ?C0261
                                           ; SOURCE LINE # 2408
009B E4                CLR     A
009C FF                MOV     R7,A
009D 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2409
00A0 900000      R     MOV     DPTR,#NVRAM0+0AEH
00A3 E0                MOVX    A,@DPTR
00A4 FE                MOV     R6,A
00A5 A3                INC     DPTR
00A6 E0                MOVX    A,@DPTR
00A7 FD                MOV     R5,A
00A8 AC06              MOV     R4,AR6
00AA 7F01              MOV     R7,#01H
00AC 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2410
00AF 7F01              MOV     R7,#01H
00B1 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2411
00B4         ?C0261:
                                           ; SOURCE LINE # 2412
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 199 

00B4 900000      R     MOV     DPTR,#NVRAM1+0B0H
00B7 E0                MOVX    A,@DPTR
00B8 FE                MOV     R6,A
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC 900000      R     MOV     DPTR,#NVRAM0+0B0H
00BF E0                MOVX    A,@DPTR
00C0 6E                XRL     A,R6
00C1 7003              JNZ     ?C0359
00C3 A3                INC     DPTR
00C4 E0                MOVX    A,@DPTR
00C5 6F                XRL     A,R7
00C6         ?C0359:
00C6 6019              JZ      ?C0262
                                           ; SOURCE LINE # 2413
00C8 E4                CLR     A
00C9 FF                MOV     R7,A
00CA 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2414
00CD 900000      R     MOV     DPTR,#NVRAM0+0B0H
00D0 E0                MOVX    A,@DPTR
00D1 FE                MOV     R6,A
00D2 A3                INC     DPTR
00D3 E0                MOVX    A,@DPTR
00D4 FD                MOV     R5,A
00D5 AC06              MOV     R4,AR6
00D7 7F06              MOV     R7,#06H
00D9 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2415
00DC 7F01              MOV     R7,#01H
00DE 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2416
00E1         ?C0262:
                                           ; SOURCE LINE # 2417
00E1 900000      R     MOV     DPTR,#NVRAM1+0B2H
00E4 E0                MOVX    A,@DPTR
00E5 FE                MOV     R6,A
00E6 A3                INC     DPTR
00E7 E0                MOVX    A,@DPTR
00E8 FF                MOV     R7,A
00E9 900000      R     MOV     DPTR,#NVRAM0+0B2H
00EC E0                MOVX    A,@DPTR
00ED 6E                XRL     A,R6
00EE 7003              JNZ     ?C0360
00F0 A3                INC     DPTR
00F1 E0                MOVX    A,@DPTR
00F2 6F                XRL     A,R7
00F3         ?C0360:
00F3 6019              JZ      ?C0263
                                           ; SOURCE LINE # 2418
00F5 E4                CLR     A
00F6 FF                MOV     R7,A
00F7 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2419
00FA 900000      R     MOV     DPTR,#NVRAM0+0B2H
00FD E0                MOVX    A,@DPTR
00FE FE                MOV     R6,A
00FF A3                INC     DPTR
0100 E0                MOVX    A,@DPTR
0101 FD                MOV     R5,A
0102 AC06              MOV     R4,AR6
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 200 

0104 7F04              MOV     R7,#04H
0106 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2420
0109 7F01              MOV     R7,#01H
010B 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2421
010E         ?C0263:
                                           ; SOURCE LINE # 2422
010E 900000      R     MOV     DPTR,#NVRAM1+0B4H
0111 E0                MOVX    A,@DPTR
0112 FE                MOV     R6,A
0113 A3                INC     DPTR
0114 E0                MOVX    A,@DPTR
0115 FF                MOV     R7,A
0116 900000      R     MOV     DPTR,#NVRAM0+0B4H
0119 E0                MOVX    A,@DPTR
011A 6E                XRL     A,R6
011B 7003              JNZ     ?C0361
011D A3                INC     DPTR
011E E0                MOVX    A,@DPTR
011F 6F                XRL     A,R7
0120         ?C0361:
0120 6019              JZ      ?C0264
                                           ; SOURCE LINE # 2423
0122 E4                CLR     A
0123 FF                MOV     R7,A
0124 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2424
0127 900000      R     MOV     DPTR,#NVRAM0+0B4H
012A E0                MOVX    A,@DPTR
012B FE                MOV     R6,A
012C A3                INC     DPTR
012D E0                MOVX    A,@DPTR
012E FD                MOV     R5,A
012F AC06              MOV     R4,AR6
0131 7F04              MOV     R7,#04H
0133 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2425
0136 7F01              MOV     R7,#01H
0138 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2426
013B         ?C0264:
                                           ; SOURCE LINE # 2427
013B 900000      R     MOV     DPTR,#NVRAM1+0B6H
013E E0                MOVX    A,@DPTR
013F FE                MOV     R6,A
0140 A3                INC     DPTR
0141 E0                MOVX    A,@DPTR
0142 FF                MOV     R7,A
0143 900000      R     MOV     DPTR,#NVRAM0+0B6H
0146 E0                MOVX    A,@DPTR
0147 6E                XRL     A,R6
0148 7003              JNZ     ?C0362
014A A3                INC     DPTR
014B E0                MOVX    A,@DPTR
014C 6F                XRL     A,R7
014D         ?C0362:
014D 6019              JZ      ?C0265
                                           ; SOURCE LINE # 2428
014F E4                CLR     A
0150 FF                MOV     R7,A
0151 120000      R     LCALL   _setLedDac
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 201 

                                           ; SOURCE LINE # 2429
0154 900000      R     MOV     DPTR,#NVRAM0+0B6H
0157 E0                MOVX    A,@DPTR
0158 FE                MOV     R6,A
0159 A3                INC     DPTR
015A E0                MOVX    A,@DPTR
015B FD                MOV     R5,A
015C AC06              MOV     R4,AR6
015E E4                CLR     A
015F FF                MOV     R7,A
0160 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2430
0163 7F01              MOV     R7,#01H
0165 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2431
0168         ?C0265:
                                           ; SOURCE LINE # 2433
0168 900000      R     MOV     DPTR,#NVRAM1+0B8H
016B E0                MOVX    A,@DPTR
016C FE                MOV     R6,A
016D A3                INC     DPTR
016E E0                MOVX    A,@DPTR
016F FF                MOV     R7,A
0170 900000      R     MOV     DPTR,#NVRAM0+0B8H
0173 E0                MOVX    A,@DPTR
0174 6E                XRL     A,R6
0175 7003              JNZ     ?C0363
0177 A3                INC     DPTR
0178 E0                MOVX    A,@DPTR
0179 6F                XRL     A,R7
017A         ?C0363:
017A 6019              JZ      ?C0266
                                           ; SOURCE LINE # 2434
017C E4                CLR     A
017D FF                MOV     R7,A
017E 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2435
0181 900000      R     MOV     DPTR,#NVRAM0+0B8H
0184 E0                MOVX    A,@DPTR
0185 FE                MOV     R6,A
0186 A3                INC     DPTR
0187 E0                MOVX    A,@DPTR
0188 FD                MOV     R5,A
0189 AC06              MOV     R4,AR6
018B 7F07              MOV     R7,#07H
018D 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2436
0190 7F01              MOV     R7,#01H
0192 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2437
0195         ?C0266:
                                           ; SOURCE LINE # 2438
0195 900000      R     MOV     DPTR,#NVRAM1+0BAH
0198 E0                MOVX    A,@DPTR
0199 FE                MOV     R6,A
019A A3                INC     DPTR
019B E0                MOVX    A,@DPTR
019C FF                MOV     R7,A
019D 900000      R     MOV     DPTR,#NVRAM0+0BAH
01A0 E0                MOVX    A,@DPTR
01A1 6E                XRL     A,R6
01A2 7003              JNZ     ?C0364
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 202 

01A4 A3                INC     DPTR
01A5 E0                MOVX    A,@DPTR
01A6 6F                XRL     A,R7
01A7         ?C0364:
01A7 6019              JZ      ?C0267
                                           ; SOURCE LINE # 2439
01A9 E4                CLR     A
01AA FF                MOV     R7,A
01AB 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2440
01AE 900000      R     MOV     DPTR,#NVRAM0+0BAH
01B1 E0                MOVX    A,@DPTR
01B2 FE                MOV     R6,A
01B3 A3                INC     DPTR
01B4 E0                MOVX    A,@DPTR
01B5 FD                MOV     R5,A
01B6 AC06              MOV     R4,AR6
01B8 7F05              MOV     R7,#05H
01BA 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2441
01BD 7F01              MOV     R7,#01H
01BF 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2442
01C2         ?C0267:
                                           ; SOURCE LINE # 2443
01C2 900000      R     MOV     DPTR,#NVRAM1+0BCH
01C5 E0                MOVX    A,@DPTR
01C6 FE                MOV     R6,A
01C7 A3                INC     DPTR
01C8 E0                MOVX    A,@DPTR
01C9 FF                MOV     R7,A
01CA 900000      R     MOV     DPTR,#NVRAM0+0BCH
01CD E0                MOVX    A,@DPTR
01CE 6E                XRL     A,R6
01CF 7003              JNZ     ?C0365
01D1 A3                INC     DPTR
01D2 E0                MOVX    A,@DPTR
01D3 6F                XRL     A,R7
01D4         ?C0365:
01D4 6019              JZ      ?C0268
                                           ; SOURCE LINE # 2444
01D6 E4                CLR     A
01D7 FF                MOV     R7,A
01D8 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2445
01DB 900000      R     MOV     DPTR,#NVRAM0+0BCH
01DE E0                MOVX    A,@DPTR
01DF FE                MOV     R6,A
01E0 A3                INC     DPTR
01E1 E0                MOVX    A,@DPTR
01E2 FD                MOV     R5,A
01E3 AC06              MOV     R4,AR6
01E5 7F03              MOV     R7,#03H
01E7 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2446
01EA 7F01              MOV     R7,#01H
01EC 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2447
01EF         ?C0268:
                                           ; SOURCE LINE # 2448
01EF 900000      R     MOV     DPTR,#NVRAM1+0BEH
01F2 E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 203 

01F3 FE                MOV     R6,A
01F4 A3                INC     DPTR
01F5 E0                MOVX    A,@DPTR
01F6 FF                MOV     R7,A
01F7 900000      R     MOV     DPTR,#NVRAM0+0BEH
01FA E0                MOVX    A,@DPTR
01FB 6E                XRL     A,R6
01FC 7003              JNZ     ?C0366
01FE A3                INC     DPTR
01FF E0                MOVX    A,@DPTR
0200 6F                XRL     A,R7
0201         ?C0366:
0201 6019              JZ      ?C0269
                                           ; SOURCE LINE # 2449
0203 E4                CLR     A
0204 FF                MOV     R7,A
0205 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2450
0208 900000      R     MOV     DPTR,#NVRAM0+0BEH
020B E0                MOVX    A,@DPTR
020C FE                MOV     R6,A
020D A3                INC     DPTR
020E E0                MOVX    A,@DPTR
020F FD                MOV     R5,A
0210 AC06              MOV     R4,AR6
0212 7F01              MOV     R7,#01H
0214 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2451
0217 7F01              MOV     R7,#01H
0219 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2452
021C         ?C0269:
                                           ; SOURCE LINE # 2453
021C 900000      R     MOV     DPTR,#NVRAM1+0C0H
021F E0                MOVX    A,@DPTR
0220 FE                MOV     R6,A
0221 A3                INC     DPTR
0222 E0                MOVX    A,@DPTR
0223 FF                MOV     R7,A
0224 900000      R     MOV     DPTR,#NVRAM0+0C0H
0227 E0                MOVX    A,@DPTR
0228 6E                XRL     A,R6
0229 7003              JNZ     ?C0367
022B A3                INC     DPTR
022C E0                MOVX    A,@DPTR
022D 6F                XRL     A,R7
022E         ?C0367:
022E 6019              JZ      ?C0270
                                           ; SOURCE LINE # 2454
0230 E4                CLR     A
0231 FF                MOV     R7,A
0232 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2455
0235 900000      R     MOV     DPTR,#NVRAM0+0C0H
0238 E0                MOVX    A,@DPTR
0239 FE                MOV     R6,A
023A A3                INC     DPTR
023B E0                MOVX    A,@DPTR
023C FD                MOV     R5,A
023D AC06              MOV     R4,AR6
023F 7F06              MOV     R7,#06H
0241 120000      E     LCALL   _dac8568_1_WriteDacRegister
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 204 

                                           ; SOURCE LINE # 2456
0244 7F01              MOV     R7,#01H
0246 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2457
0249         ?C0270:
                                           ; SOURCE LINE # 2458
0249 900000      R     MOV     DPTR,#NVRAM1+0C2H
024C E0                MOVX    A,@DPTR
024D FE                MOV     R6,A
024E A3                INC     DPTR
024F E0                MOVX    A,@DPTR
0250 FF                MOV     R7,A
0251 900000      R     MOV     DPTR,#NVRAM0+0C2H
0254 E0                MOVX    A,@DPTR
0255 6E                XRL     A,R6
0256 7003              JNZ     ?C0368
0258 A3                INC     DPTR
0259 E0                MOVX    A,@DPTR
025A 6F                XRL     A,R7
025B         ?C0368:
025B 6019              JZ      ?C0271
                                           ; SOURCE LINE # 2459
025D E4                CLR     A
025E FF                MOV     R7,A
025F 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2460
0262 900000      R     MOV     DPTR,#NVRAM0+0C2H
0265 E0                MOVX    A,@DPTR
0266 FE                MOV     R6,A
0267 A3                INC     DPTR
0268 E0                MOVX    A,@DPTR
0269 FD                MOV     R5,A
026A AC06              MOV     R4,AR6
026C 7F04              MOV     R7,#04H
026E 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2461
0271 7F01              MOV     R7,#01H
0273 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2462
0276         ?C0271:
                                           ; SOURCE LINE # 2463
0276 900000      R     MOV     DPTR,#NVRAM1+0C4H
0279 E0                MOVX    A,@DPTR
027A FE                MOV     R6,A
027B A3                INC     DPTR
027C E0                MOVX    A,@DPTR
027D FF                MOV     R7,A
027E 900000      R     MOV     DPTR,#NVRAM0+0C4H
0281 E0                MOVX    A,@DPTR
0282 6E                XRL     A,R6
0283 7003              JNZ     ?C0369
0285 A3                INC     DPTR
0286 E0                MOVX    A,@DPTR
0287 6F                XRL     A,R7
0288         ?C0369:
0288 6019              JZ      ?C0272
                                           ; SOURCE LINE # 2464
028A E4                CLR     A
028B FF                MOV     R7,A
028C 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2465
028F 900000      R     MOV     DPTR,#NVRAM0+0C4H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 205 

0292 E0                MOVX    A,@DPTR
0293 FE                MOV     R6,A
0294 A3                INC     DPTR
0295 E0                MOVX    A,@DPTR
0296 FD                MOV     R5,A
0297 AC06              MOV     R4,AR6
0299 7F02              MOV     R7,#02H
029B 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2466
029E 7F01              MOV     R7,#01H
02A0 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2467
02A3         ?C0272:
                                           ; SOURCE LINE # 2468
02A3 900000      R     MOV     DPTR,#NVRAM1+0C6H
02A6 E0                MOVX    A,@DPTR
02A7 FE                MOV     R6,A
02A8 A3                INC     DPTR
02A9 E0                MOVX    A,@DPTR
02AA FF                MOV     R7,A
02AB 900000      R     MOV     DPTR,#NVRAM0+0C6H
02AE E0                MOVX    A,@DPTR
02AF 6E                XRL     A,R6
02B0 7003              JNZ     ?C0370
02B2 A3                INC     DPTR
02B3 E0                MOVX    A,@DPTR
02B4 6F                XRL     A,R7
02B5         ?C0370:
02B5 6019              JZ      ?C0273
                                           ; SOURCE LINE # 2469
02B7 E4                CLR     A
02B8 FF                MOV     R7,A
02B9 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2470
02BC 900000      R     MOV     DPTR,#NVRAM0+0C6H
02BF E0                MOVX    A,@DPTR
02C0 FE                MOV     R6,A
02C1 A3                INC     DPTR
02C2 E0                MOVX    A,@DPTR
02C3 FD                MOV     R5,A
02C4 AC06              MOV     R4,AR6
02C6 E4                CLR     A
02C7 FF                MOV     R7,A
02C8 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2471
02CB 7F01              MOV     R7,#01H
02CD 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2472
02D0         ?C0273:
                                           ; SOURCE LINE # 2474
02D0 900000      R     MOV     DPTR,#NVRAM1+0C8H
02D3 E0                MOVX    A,@DPTR
02D4 FE                MOV     R6,A
02D5 A3                INC     DPTR
02D6 E0                MOVX    A,@DPTR
02D7 FF                MOV     R7,A
02D8 900000      R     MOV     DPTR,#NVRAM0+0C8H
02DB E0                MOVX    A,@DPTR
02DC 6E                XRL     A,R6
02DD 7003              JNZ     ?C0371
02DF A3                INC     DPTR
02E0 E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 206 

02E1 6F                XRL     A,R7
02E2         ?C0371:
02E2 6019              JZ      ?C0274
                                           ; SOURCE LINE # 2475
02E4 E4                CLR     A
02E5 FF                MOV     R7,A
02E6 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2476
02E9 900000      R     MOV     DPTR,#NVRAM0+0C8H
02EC E0                MOVX    A,@DPTR
02ED FE                MOV     R6,A
02EE A3                INC     DPTR
02EF E0                MOVX    A,@DPTR
02F0 FD                MOV     R5,A
02F1 AC06              MOV     R4,AR6
02F3 7F07              MOV     R7,#07H
02F5 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2477
02F8 7F01              MOV     R7,#01H
02FA 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2478
02FD         ?C0274:
                                           ; SOURCE LINE # 2479
02FD 900000      R     MOV     DPTR,#NVRAM1+0CAH
0300 E0                MOVX    A,@DPTR
0301 FE                MOV     R6,A
0302 A3                INC     DPTR
0303 E0                MOVX    A,@DPTR
0304 FF                MOV     R7,A
0305 900000      R     MOV     DPTR,#NVRAM0+0CAH
0308 E0                MOVX    A,@DPTR
0309 6E                XRL     A,R6
030A 7003              JNZ     ?C0372
030C A3                INC     DPTR
030D E0                MOVX    A,@DPTR
030E 6F                XRL     A,R7
030F         ?C0372:
030F 6019              JZ      ?C0275
                                           ; SOURCE LINE # 2480
0311 E4                CLR     A
0312 FF                MOV     R7,A
0313 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2481
0316 900000      R     MOV     DPTR,#NVRAM0+0CAH
0319 E0                MOVX    A,@DPTR
031A FE                MOV     R6,A
031B A3                INC     DPTR
031C E0                MOVX    A,@DPTR
031D FD                MOV     R5,A
031E AC06              MOV     R4,AR6
0320 7F05              MOV     R7,#05H
0322 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2482
0325 7F01              MOV     R7,#01H
0327 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2483
032A         ?C0275:
                                           ; SOURCE LINE # 2484
032A 900000      R     MOV     DPTR,#NVRAM1+0CCH
032D E0                MOVX    A,@DPTR
032E FE                MOV     R6,A
032F A3                INC     DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 207 

0330 E0                MOVX    A,@DPTR
0331 FF                MOV     R7,A
0332 900000      R     MOV     DPTR,#NVRAM0+0CCH
0335 E0                MOVX    A,@DPTR
0336 6E                XRL     A,R6
0337 7003              JNZ     ?C0373
0339 A3                INC     DPTR
033A E0                MOVX    A,@DPTR
033B 6F                XRL     A,R7
033C         ?C0373:
033C 6019              JZ      ?C0276
                                           ; SOURCE LINE # 2485
033E E4                CLR     A
033F FF                MOV     R7,A
0340 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2486
0343 900000      R     MOV     DPTR,#NVRAM0+0CCH
0346 E0                MOVX    A,@DPTR
0347 FE                MOV     R6,A
0348 A3                INC     DPTR
0349 E0                MOVX    A,@DPTR
034A FD                MOV     R5,A
034B AC06              MOV     R4,AR6
034D 7F03              MOV     R7,#03H
034F 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2487
0352 7F01              MOV     R7,#01H
0354 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2488
0357         ?C0276:
                                           ; SOURCE LINE # 2489
0357 900000      R     MOV     DPTR,#NVRAM1+0CEH
035A E0                MOVX    A,@DPTR
035B FE                MOV     R6,A
035C A3                INC     DPTR
035D E0                MOVX    A,@DPTR
035E FF                MOV     R7,A
035F 900000      R     MOV     DPTR,#NVRAM0+0CEH
0362 E0                MOVX    A,@DPTR
0363 6E                XRL     A,R6
0364 7003              JNZ     ?C0374
0366 A3                INC     DPTR
0367 E0                MOVX    A,@DPTR
0368 6F                XRL     A,R7
0369         ?C0374:
0369 6019              JZ      ?C0277
                                           ; SOURCE LINE # 2490
036B E4                CLR     A
036C FF                MOV     R7,A
036D 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2491
0370 900000      R     MOV     DPTR,#NVRAM0+0CEH
0373 E0                MOVX    A,@DPTR
0374 FE                MOV     R6,A
0375 A3                INC     DPTR
0376 E0                MOVX    A,@DPTR
0377 FD                MOV     R5,A
0378 AC06              MOV     R4,AR6
037A 7F01              MOV     R7,#01H
037C 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2492
037F 7F01              MOV     R7,#01H
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 208 

0381 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2493
0384         ?C0277:
                                           ; SOURCE LINE # 2494
0384 900000      R     MOV     DPTR,#NVRAM1+0D0H
0387 E0                MOVX    A,@DPTR
0388 FE                MOV     R6,A
0389 A3                INC     DPTR
038A E0                MOVX    A,@DPTR
038B FF                MOV     R7,A
038C 900000      R     MOV     DPTR,#NVRAM0+0D0H
038F E0                MOVX    A,@DPTR
0390 6E                XRL     A,R6
0391 7003              JNZ     ?C0375
0393 A3                INC     DPTR
0394 E0                MOVX    A,@DPTR
0395 6F                XRL     A,R7
0396         ?C0375:
0396 6019              JZ      ?C0278
                                           ; SOURCE LINE # 2495
0398 E4                CLR     A
0399 FF                MOV     R7,A
039A 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2496
039D 900000      R     MOV     DPTR,#NVRAM0+0D0H
03A0 E0                MOVX    A,@DPTR
03A1 FE                MOV     R6,A
03A2 A3                INC     DPTR
03A3 E0                MOVX    A,@DPTR
03A4 FD                MOV     R5,A
03A5 AC06              MOV     R4,AR6
03A7 7F06              MOV     R7,#06H
03A9 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2497
03AC 7F01              MOV     R7,#01H
03AE 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2498
03B1         ?C0278:
                                           ; SOURCE LINE # 2499
03B1 900000      R     MOV     DPTR,#NVRAM1+0D2H
03B4 E0                MOVX    A,@DPTR
03B5 FE                MOV     R6,A
03B6 A3                INC     DPTR
03B7 E0                MOVX    A,@DPTR
03B8 FF                MOV     R7,A
03B9 900000      R     MOV     DPTR,#NVRAM0+0D2H
03BC E0                MOVX    A,@DPTR
03BD 6E                XRL     A,R6
03BE 7003              JNZ     ?C0376
03C0 A3                INC     DPTR
03C1 E0                MOVX    A,@DPTR
03C2 6F                XRL     A,R7
03C3         ?C0376:
03C3 6019              JZ      ?C0279
                                           ; SOURCE LINE # 2500
03C5 E4                CLR     A
03C6 FF                MOV     R7,A
03C7 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2501
03CA 900000      R     MOV     DPTR,#NVRAM0+0D2H
03CD E0                MOVX    A,@DPTR
03CE FE                MOV     R6,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 209 

03CF A3                INC     DPTR
03D0 E0                MOVX    A,@DPTR
03D1 FD                MOV     R5,A
03D2 AC06              MOV     R4,AR6
03D4 7F04              MOV     R7,#04H
03D6 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2502
03D9 7F01              MOV     R7,#01H
03DB 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2503
03DE         ?C0279:
                                           ; SOURCE LINE # 2504
03DE 900000      R     MOV     DPTR,#NVRAM1+0D4H
03E1 E0                MOVX    A,@DPTR
03E2 FE                MOV     R6,A
03E3 A3                INC     DPTR
03E4 E0                MOVX    A,@DPTR
03E5 FF                MOV     R7,A
03E6 900000      R     MOV     DPTR,#NVRAM0+0D4H
03E9 E0                MOVX    A,@DPTR
03EA 6E                XRL     A,R6
03EB 7003              JNZ     ?C0377
03ED A3                INC     DPTR
03EE E0                MOVX    A,@DPTR
03EF 6F                XRL     A,R7
03F0         ?C0377:
03F0 6019              JZ      ?C0280
                                           ; SOURCE LINE # 2505
03F2 E4                CLR     A
03F3 FF                MOV     R7,A
03F4 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2506
03F7 900000      R     MOV     DPTR,#NVRAM0+0D4H
03FA E0                MOVX    A,@DPTR
03FB FE                MOV     R6,A
03FC A3                INC     DPTR
03FD E0                MOVX    A,@DPTR
03FE FD                MOV     R5,A
03FF AC06              MOV     R4,AR6
0401 7F02              MOV     R7,#02H
0403 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2507
0406 7F01              MOV     R7,#01H
0408 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2508
040B         ?C0280:
                                           ; SOURCE LINE # 2509
040B 900000      R     MOV     DPTR,#NVRAM1+0D6H
040E E0                MOVX    A,@DPTR
040F FE                MOV     R6,A
0410 A3                INC     DPTR
0411 E0                MOVX    A,@DPTR
0412 FF                MOV     R7,A
0413 900000      R     MOV     DPTR,#NVRAM0+0D6H
0416 E0                MOVX    A,@DPTR
0417 6E                XRL     A,R6
0418 7003              JNZ     ?C0378
041A A3                INC     DPTR
041B E0                MOVX    A,@DPTR
041C 6F                XRL     A,R7
041D         ?C0378:
041D 6019              JZ      ?C0281
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 210 

                                           ; SOURCE LINE # 2510
041F E4                CLR     A
0420 FF                MOV     R7,A
0421 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2511
0424 900000      R     MOV     DPTR,#NVRAM0+0D6H
0427 E0                MOVX    A,@DPTR
0428 FE                MOV     R6,A
0429 A3                INC     DPTR
042A E0                MOVX    A,@DPTR
042B FD                MOV     R5,A
042C AC06              MOV     R4,AR6
042E E4                CLR     A
042F FF                MOV     R7,A
0430 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2512
0433 7F01              MOV     R7,#01H
0435 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2513
0438         ?C0281:
                                           ; SOURCE LINE # 2515
0438 900000      R     MOV     DPTR,#NVRAM1+0D8H
043B E0                MOVX    A,@DPTR
043C FE                MOV     R6,A
043D A3                INC     DPTR
043E E0                MOVX    A,@DPTR
043F FF                MOV     R7,A
0440 900000      R     MOV     DPTR,#NVRAM0+0D8H
0443 E0                MOVX    A,@DPTR
0444 6E                XRL     A,R6
0445 7003              JNZ     ?C0379
0447 A3                INC     DPTR
0448 E0                MOVX    A,@DPTR
0449 6F                XRL     A,R7
044A         ?C0379:
044A 6019              JZ      ?C0282
                                           ; SOURCE LINE # 2516
044C E4                CLR     A
044D FF                MOV     R7,A
044E 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2517
0451 900000      R     MOV     DPTR,#NVRAM0+0D8H
0454 E0                MOVX    A,@DPTR
0455 FE                MOV     R6,A
0456 A3                INC     DPTR
0457 E0                MOVX    A,@DPTR
0458 FD                MOV     R5,A
0459 AC06              MOV     R4,AR6
045B 7F07              MOV     R7,#07H
045D 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2518
0460 7F01              MOV     R7,#01H
0462 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2519
0465         ?C0282:
                                           ; SOURCE LINE # 2520
0465 900000      R     MOV     DPTR,#NVRAM1+0DAH
0468 E0                MOVX    A,@DPTR
0469 FE                MOV     R6,A
046A A3                INC     DPTR
046B E0                MOVX    A,@DPTR
046C FF                MOV     R7,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 211 

046D 900000      R     MOV     DPTR,#NVRAM0+0DAH
0470 E0                MOVX    A,@DPTR
0471 6E                XRL     A,R6
0472 7003              JNZ     ?C0380
0474 A3                INC     DPTR
0475 E0                MOVX    A,@DPTR
0476 6F                XRL     A,R7
0477         ?C0380:
0477 6019              JZ      ?C0283
                                           ; SOURCE LINE # 2521
0479 E4                CLR     A
047A FF                MOV     R7,A
047B 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2522
047E 900000      R     MOV     DPTR,#NVRAM0+0DCH
0481 E0                MOVX    A,@DPTR
0482 FE                MOV     R6,A
0483 A3                INC     DPTR
0484 E0                MOVX    A,@DPTR
0485 FD                MOV     R5,A
0486 AC06              MOV     R4,AR6
0488 7F05              MOV     R7,#05H
048A 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2523
048D 7F01              MOV     R7,#01H
048F 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2524
0492         ?C0283:
                                           ; SOURCE LINE # 2525
0492 900000      R     MOV     DPTR,#NVRAM1+0DCH
0495 E0                MOVX    A,@DPTR
0496 FE                MOV     R6,A
0497 A3                INC     DPTR
0498 E0                MOVX    A,@DPTR
0499 FF                MOV     R7,A
049A 900000      R     MOV     DPTR,#NVRAM0+0DCH
049D E0                MOVX    A,@DPTR
049E 6E                XRL     A,R6
049F 7003              JNZ     ?C0381
04A1 A3                INC     DPTR
04A2 E0                MOVX    A,@DPTR
04A3 6F                XRL     A,R7
04A4         ?C0381:
04A4 6019              JZ      ?C0284
                                           ; SOURCE LINE # 2526
04A6 E4                CLR     A
04A7 FF                MOV     R7,A
04A8 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2527
04AB 900000      R     MOV     DPTR,#NVRAM0+0DCH
04AE E0                MOVX    A,@DPTR
04AF FE                MOV     R6,A
04B0 A3                INC     DPTR
04B1 E0                MOVX    A,@DPTR
04B2 FD                MOV     R5,A
04B3 AC06              MOV     R4,AR6
04B5 7F03              MOV     R7,#03H
04B7 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2528
04BA 7F01              MOV     R7,#01H
04BC 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2529
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 212 

04BF         ?C0284:
                                           ; SOURCE LINE # 2530
04BF 900000      R     MOV     DPTR,#NVRAM1+0DEH
04C2 E0                MOVX    A,@DPTR
04C3 FE                MOV     R6,A
04C4 A3                INC     DPTR
04C5 E0                MOVX    A,@DPTR
04C6 FF                MOV     R7,A
04C7 900000      R     MOV     DPTR,#NVRAM0+0DEH
04CA E0                MOVX    A,@DPTR
04CB 6E                XRL     A,R6
04CC 7003              JNZ     ?C0382
04CE A3                INC     DPTR
04CF E0                MOVX    A,@DPTR
04D0 6F                XRL     A,R7
04D1         ?C0382:
04D1 6019              JZ      ?C0285
                                           ; SOURCE LINE # 2531
04D3 E4                CLR     A
04D4 FF                MOV     R7,A
04D5 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2532
04D8 900000      R     MOV     DPTR,#NVRAM0+0DEH
04DB E0                MOVX    A,@DPTR
04DC FE                MOV     R6,A
04DD A3                INC     DPTR
04DE E0                MOVX    A,@DPTR
04DF FD                MOV     R5,A
04E0 AC06              MOV     R4,AR6
04E2 7F01              MOV     R7,#01H
04E4 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2533
04E7 7F01              MOV     R7,#01H
04E9 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2534
04EC         ?C0285:
                                           ; SOURCE LINE # 2535
04EC 900000      R     MOV     DPTR,#NVRAM1+0E0H
04EF E0                MOVX    A,@DPTR
04F0 FE                MOV     R6,A
04F1 A3                INC     DPTR
04F2 E0                MOVX    A,@DPTR
04F3 FF                MOV     R7,A
04F4 900000      R     MOV     DPTR,#NVRAM0+0E0H
04F7 E0                MOVX    A,@DPTR
04F8 6E                XRL     A,R6
04F9 7003              JNZ     ?C0383
04FB A3                INC     DPTR
04FC E0                MOVX    A,@DPTR
04FD 6F                XRL     A,R7
04FE         ?C0383:
04FE 6019              JZ      ?C0286
                                           ; SOURCE LINE # 2536
0500 E4                CLR     A
0501 FF                MOV     R7,A
0502 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2537
0505 900000      R     MOV     DPTR,#NVRAM0+0E0H
0508 E0                MOVX    A,@DPTR
0509 FE                MOV     R6,A
050A A3                INC     DPTR
050B E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 213 

050C FD                MOV     R5,A
050D AC06              MOV     R4,AR6
050F 7F06              MOV     R7,#06H
0511 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2538
0514 7F01              MOV     R7,#01H
0516 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2539
0519         ?C0286:
                                           ; SOURCE LINE # 2540
0519 900000      R     MOV     DPTR,#NVRAM1+0E2H
051C E0                MOVX    A,@DPTR
051D FE                MOV     R6,A
051E A3                INC     DPTR
051F E0                MOVX    A,@DPTR
0520 FF                MOV     R7,A
0521 900000      R     MOV     DPTR,#NVRAM0+0E2H
0524 E0                MOVX    A,@DPTR
0525 6E                XRL     A,R6
0526 7003              JNZ     ?C0384
0528 A3                INC     DPTR
0529 E0                MOVX    A,@DPTR
052A 6F                XRL     A,R7
052B         ?C0384:
052B 6019              JZ      ?C0287
                                           ; SOURCE LINE # 2541
052D E4                CLR     A
052E FF                MOV     R7,A
052F 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2542
0532 900000      R     MOV     DPTR,#NVRAM0+0E2H
0535 E0                MOVX    A,@DPTR
0536 FE                MOV     R6,A
0537 A3                INC     DPTR
0538 E0                MOVX    A,@DPTR
0539 FD                MOV     R5,A
053A AC06              MOV     R4,AR6
053C 7F04              MOV     R7,#04H
053E 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2543
0541 7F01              MOV     R7,#01H
0543 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2544
0546         ?C0287:
                                           ; SOURCE LINE # 2545
0546 900000      R     MOV     DPTR,#NVRAM1+0E4H
0549 E0                MOVX    A,@DPTR
054A FE                MOV     R6,A
054B A3                INC     DPTR
054C E0                MOVX    A,@DPTR
054D FF                MOV     R7,A
054E 900000      R     MOV     DPTR,#NVRAM0+0E4H
0551 E0                MOVX    A,@DPTR
0552 6E                XRL     A,R6
0553 7003              JNZ     ?C0385
0555 A3                INC     DPTR
0556 E0                MOVX    A,@DPTR
0557 6F                XRL     A,R7
0558         ?C0385:
0558 6019              JZ      ?C0288
                                           ; SOURCE LINE # 2546
055A E4                CLR     A
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 214 

055B FF                MOV     R7,A
055C 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2547
055F 900000      R     MOV     DPTR,#NVRAM0+0E4H
0562 E0                MOVX    A,@DPTR
0563 FE                MOV     R6,A
0564 A3                INC     DPTR
0565 E0                MOVX    A,@DPTR
0566 FD                MOV     R5,A
0567 AC06              MOV     R4,AR6
0569 7F02              MOV     R7,#02H
056B 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2548
056E 7F01              MOV     R7,#01H
0570 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2549
0573         ?C0288:
                                           ; SOURCE LINE # 2550
0573 900000      R     MOV     DPTR,#NVRAM1+0E6H
0576 E0                MOVX    A,@DPTR
0577 FE                MOV     R6,A
0578 A3                INC     DPTR
0579 E0                MOVX    A,@DPTR
057A FF                MOV     R7,A
057B 900000      R     MOV     DPTR,#NVRAM0+0E6H
057E E0                MOVX    A,@DPTR
057F 6E                XRL     A,R6
0580 7003              JNZ     ?C0386
0582 A3                INC     DPTR
0583 E0                MOVX    A,@DPTR
0584 6F                XRL     A,R7
0585         ?C0386:
0585 6019              JZ      ?C0290
                                           ; SOURCE LINE # 2551
0587 E4                CLR     A
0588 FF                MOV     R7,A
0589 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2552
058C 900000      R     MOV     DPTR,#NVRAM0+0E6H
058F E0                MOVX    A,@DPTR
0590 FE                MOV     R6,A
0591 A3                INC     DPTR
0592 E0                MOVX    A,@DPTR
0593 FD                MOV     R5,A
0594 AC06              MOV     R4,AR6
0596 E4                CLR     A
0597 FF                MOV     R7,A
0598 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2553
059B 7F01              MOV     R7,#01H
059D 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2554
                                           ; SOURCE LINE # 2555
05A0         ?C0290:
05A0 22                RET     
             ; FUNCTION refreshDac (END)

             ; FUNCTION chipDacInit (BEGIN)
                                           ; SOURCE LINE # 2556
                                           ; SOURCE LINE # 2557
0000 120000      E     LCALL   dac8568_0_Init
                                           ; SOURCE LINE # 2558
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 215 

0003 120000      E     LCALL   dac8568_1_Init
                                           ; SOURCE LINE # 2559
0006 120000      E     LCALL   dac8568_2_Init
                                           ; SOURCE LINE # 2560
0009 020000      E     LJMP    dac8568_3_Init
             ; FUNCTION chipDacInit (END)

             ; FUNCTION sPlcInit (BEGIN)
                                           ; SOURCE LINE # 2562
                                           ; SOURCE LINE # 2563
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _setLedError
                                           ; SOURCE LINE # 2564
0005 120000      R     LCALL   _setLedRun
                                           ; SOURCE LINE # 2565
0008 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2566
000B 120000      R     LCALL   _setLedEprom
                                           ; SOURCE LINE # 2567
000E 120000      R     LCALL   wdtInit
                                           ; SOURCE LINE # 2568
0011 120000      R     LCALL   wdtDisable
                                           ; SOURCE LINE # 2570
0014 7F80              MOV     R7,#080H
0016 7E25              MOV     R6,#025H
0018 7D00              MOV     R5,#00H
001A 7C00              MOV     R4,#00H
001C 120000      E     LCALL   _initUart1
                                           ; SOURCE LINE # 2573
001F 120000      R     LCALL   nvramLoad
                                           ; SOURCE LINE # 2576
0022 120000      R     LCALL   chipAdcInit
                                           ; SOURCE LINE # 2579
0025 120000      R     LCALL   chipDacInit
                                           ; SOURCE LINE # 2582
0028 750000      E     MOV     ?_initModbus?BYTE+04H,#00H
002B 7500C2      E     MOV     ?_initModbus?BYTE+03H,#0C2H
002E 750001      E     MOV     ?_initModbus?BYTE+02H,#01H
0031 750000      E     MOV     ?_initModbus?BYTE+01H,#00H
0034 7F01              MOV     R7,#01H
0036 120000      E     LCALL   _initModbus
                                           ; SOURCE LINE # 2584
0039 120000      R     LCALL   timer0Init
                                           ; SOURCE LINE # 2585
003C 900000      R     MOV     DPTR,#NVRAM0+03B9H
003F E0                MOVX    A,@DPTR
0040 4401              ORL     A,#01H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2586
0043 7F01              MOV     R7,#01H
0045 020000      R     LJMP    _setLedError
             ; FUNCTION sPlcInit (END)

             ; FUNCTION sPlcProcessStart (BEGIN)
                                           ; SOURCE LINE # 2588
                                           ; SOURCE LINE # 2590
0000 120000      R     LCALL   _?wdtFeed
                                           ; SOURCE LINE # 2593
0003 120000      E     LCALL   modbusPorcess
                                           ; SOURCE LINE # 2596
0006 120000      R     LCALL   inputRefresh
                                           ; SOURCE LINE # 2599
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 216 

0009 020000      R     LJMP    _?wdtFeed
             ; FUNCTION sPlcProcessStart (END)

             ; FUNCTION sPlcProcessEnd (BEGIN)
                                           ; SOURCE LINE # 2602
                                           ; SOURCE LINE # 2604
0000 120000      R     LCALL   _?wdtFeed
                                           ; SOURCE LINE # 2607
0003 120000      R     LCALL   outputRefresh
                                           ; SOURCE LINE # 2610
0006 120000      R     LCALL   refreshDac
                                           ; SOURCE LINE # 2613
0009 120000      R     LCALL   nvramUpdata
                                           ; SOURCE LINE # 2616
000C 020000      R     LJMP    _?wdtFeed
             ; FUNCTION sPlcProcessEnd (END)

C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 217 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
fp32_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
fp64_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
bool . . . . . . . . . . . . . . . . .  TYPEDEF  -----  BIT      -----  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
U8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
U16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
U32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
S8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
S16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
S32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
UU16 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 218 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU16 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU32 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
UU32 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_GENERIC_PTR . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GENERIC_PTR . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P6 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
CKCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P7 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
AMX0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
AMX0SL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
ADC0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
ADC0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
WDTCN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
ADC0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BEH  2
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
AD0INT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
AD0BUSY. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_log . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromWriteOneByte . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromRead . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromWrite. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 219 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


dac8568_0_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_0_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_1_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_1_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_2_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_2_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_3_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_3_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
_initUart1 . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_initModbus. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
modbusPorcess. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
adcTempDat_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  31
  dat. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  28
  out. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001CH  2
  wIndex . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   001EH  1
NVRAM0 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  484
NVRAM1 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    01E4H  484
wdtDisable . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  flagEA . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
sPlcInit . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcProcessStart . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcProcessEnd . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_?assertCoilAddress. . . . . . . . . .  STATIC   CODE   PROC     0012H  -----
  adr. . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
_?assertRegisterAddress. . . . . . . .  STATIC   CODE   PROC     0000H  -----
  adr. . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
nvramUpdata. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  sp0. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  sp1. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0006H  2
clearDM. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearEM. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearR . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearT . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearTD. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearC . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
nvramLoad. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
nvramSave. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_?SET. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
_?RES. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
_?FLIP . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0002H  2
  temp . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
_?LD . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
_?LDB. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
_?LDP. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0002H  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 220 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  temp0. . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
  temp1. . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0001H  1
_?LDN. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0002H  2
  temp0. . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
  temp1. . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0001H  1
_T1MS. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_T10MS . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_T100MS. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
chipDacInit. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
chipAdcInit. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
refreshDac . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
ADCMUX_0_3_S0. . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
ADCMUX_0_3_S1. . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
ADCMUX_0_3_OE1 . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
ADCMUX_0_3_OE2 . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
ADCMUX_4_7_S0. . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
ADCMUX_4_7_S1. . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
ADCMUC_4_7_OE1 . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
ADCMUC_4_7_OE2 . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
ADCMUX_8_11_S0 . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
ADCMUX_8_11_S1 . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
ADCMUX_8_11_OE1. . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
ADCMUX_8_11_OE2. . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
ADCMUX_12_15_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
ADCMUX_12_15_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
ADCMUX_12_15_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
ADCMUX_12_15_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
ADCMUX_16_19_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
ADCMUX_16_19_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
ADCMUX_16_19_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
ADCMUX_16_19_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
ADCMUX_20_23_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
ADCMUX_20_23_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
ADCMUX_20_23_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
ADCMUX_20_23_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
ADCMUX_24_27_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
ADCMUX_24_27_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
ADCMUX_24_27_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
ADCMUX_24_27_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
TimerCounter_1mS . . . . . . . . . . .  STATIC   IDATA  U_CHAR   0000H  1
TimerCounter_10mS. . . . . . . . . . .  STATIC   IDATA  U_CHAR   0001H  1
Timer0_L . . . . . . . . . . . . . . .  STATIC   IDATA  U_CHAR   0002H  1
Timer0_H . . . . . . . . . . . . . . .  STATIC   IDATA  U_CHAR   0003H  1
inputFilter. . . . . . . . . . . . . .  STATIC   IDATA  ARRAY    0004H  16
adcTempDat . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    03C8H  1984
adcSelect. . . . . . . . . . . . . . .  STATIC   IDATA  U_CHAR   0014H  1
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 221 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_refreshAdcData. . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  sum. . . . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0004H  4
adcProcess . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  result . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_initAdcData . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getGlobalInterrupt . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_setLedRun . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedRun. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_setLedEprom . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedEprom. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_setLedDac . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedDac. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_setLedError . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_?getLedError. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
clearMR. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearX . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearY . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearSPREG . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearSPCOIL. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_TNTC. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0082H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  ftemp. . . . . . . . . . . . . . . .  AUTO     DATA   FLOAT    0000H  4
_TENV. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_MAX . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  max. . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0003H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_MIN . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  min. . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0003H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
wdtInit. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
wdtEnable. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_?wdtFeed. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
pcaInit. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
timer0Init . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/16/2019 18:31:17 PAGE 222 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


timer0Isr. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
inputInit. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
outputInit . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
inputRefresh . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  ctemp0 . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
outputRefresh. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7741    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   2952    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      37
   IDATA SIZE       =     21    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
