C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SPLC
OBJECT MODULE PLACED IN .\Objects\sPlc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MainApp\sPlc.c OPTIMIZE(9,SPEED) REGFILE(.\Objects\dwLaser_F020.ORC) BRO
                    -WSE ORDER INCDIR(.\Lib;.\Driver;.\MainApp;.\Modbus) DEFINE(C8051F020) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(
                    -.\Listings\sPlc.lst) PREPRINT(.\Listings\sPlc.i) OBJECT(.\Objects\sPlc.obj)

line level    source

   1          #include "sPlc.h"
   1      =1  #ifndef __SPLC_H__
   2      =1  #define __SPLC_H__
   3      =1  /*****************************************************************************/
   4      =1  #include "appConfig.h"
   1      =2  #ifndef __APPCONFIG_H__
   2      =2  #define __APPCONFIG_H__
   3      =2  /*****************************************************************************/
   4      =2  #define CONFIG_SYSCLK                       (22118400L)
   5      =2  #ifdef C8051F020
   6      =2  #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
   7      =2  #endif
   8      =2  #define CONFIG_DEBUG                        0//调试功能
   9      =2  #define CONFIG_USING_WDT                                        0//使能看门狗
  10      =2  #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
  11      =2  #define CONFIG_VERSION                                          0x0001
  12      =2  #define CONFIG_CHECK_CODE                                       0x5A00
  13      =2  #define CONFIG_USING_SIMULATION                         1
  14      =2  /*****************************************************************************/
  15      =2  #define CONFIG_UART0_BAUDRATE                           57600//串口波特率
  16      =2  #define CONFIG_UART0_PARITY                                     NONE
  17      =2  #define CONFIG_UART0_STOPBIT                            1
  18      =2  #define CONFIG_UART0_DATABIT                            8
  19      =2  
  20      =2  #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
  21      =2  #define CONFIG_UART1_PARITY                                     NONE
  22      =2  #define CONFIG_UART1_STOPBIT                            1
  23      =2  #define CONFIG_UART1_DATABIT                            8
  24      =2  /*****************************************************************************/
  25      =2  #define CONFIG_I2C0_FREQ                                        1               
  26      =2  /*****************************************************************************/
  27      =2  #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
  28      =2  #define CONFIG_AT24C02_SIZE                             256
  29      =2  #define CONFIG_AT24C04_SIZE                             512
  30      =2  #define CONFIG_AT24C08_SIZE                             1024
  31      =2  #define CONFIG_AT24C16_SIZE                             2048
  32      =2  #define CONFIG_AT24C32_SIZE                             4096
  33      =2  #define CONFIG_AT24C64_SIZE                                     8192
  34      =2  #define CONFIG_AT24C128_SIZE                            16384
  35      =2  #define CONFIG_AT24C256_SIZE                            32768
  36      =2  #define CONFIG_EPROM_ADDRESS                            0x50
  37      =2  #define CONFIG_EPROM_FRAM                                       0//铁电存储体无写入等待
  38      =2  #define CONFIG_EPROM_PAGEWRITE                          0//页写入
  39      =2  /*****************************************************************************/
  40      =2  //SPLC设置
  41      =2  #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
  42      =2  #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
  43      =2  /*****************************************************************************/
  44      =2  #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
  45      =2  /*****************************************************************************/
  46      =2  #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
  47      =2  /*****************************************************************************/
  48      =2  #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 2   

  49      =2  /*****************************************************************************/
  50      =2  #define CONFIG_SPLC_USING_EPROM                         1//EPROM掉电存储启用
  51      =2  /*****************************************************************************/
  52      =2  #define CONFIG_SPLC_USING_ADC                           1//使能ADC模块
  53      =2  #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
  54      =2  #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
  55      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
  56      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
  57      =2  #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
  58      =2  #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
  59      =2  /*****************************************************************************/
  60      =2  #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
  61      =2  /*****************************************************************************/
  62      =2  #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
  63      =2  #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
  64      =2  #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
  65      =2  #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
  66      =2  #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
  67      =2  #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
  68      =2  /*****************************************************************************/
  69      =2  /*****************************************************************************/
  70      =2  #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
  71      =2  #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
  72      =2  #define DISABLE_INTERRUPT                                       EA = 0;
  73      =2  #define ENABLE_INTERRUPT                                        EA = 1;
  74      =2  /*****************************************************************************/
  75      =2  #define BOX_CMD_STX                                                     0x81
  76      =2  #define BOX_CMD_ETX                                                     0x84
  77      =2  /*****************************************************************************/
  78      =2  #include "stdint.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDINT_H
   8      =3  #define STDINT_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef unsigned char uint8_t;
  13      =3  typedef unsigned short uint16_t;
  14      =3  typedef unsigned long uint32_t;
  15      =3  typedef uint32_t uint64_t[2];
  16      =3  
  17      =3  typedef signed char int8_t;
  18      =3  typedef short int16_t;
  19      =3  typedef long int32_t;
  20      =3  typedef int32_t int64_t[2];
  21      =3  typedef float fp32_t;
  22      =3  typedef double fp64_t;
  23      =3  
  24      =3  #elif defined __ICC8051__
           =3 
           =3 /* Fixed size types. These are all optional. */
           =3 #ifdef __INT8_T_TYPE__
           =3   typedef __INT8_T_TYPE__   int8_t;
           =3   typedef __UINT8_T_TYPE__ uint8_t;
           =3 #endif /* __INT8_T_TYPE__ */
           =3 
           =3 #ifdef __INT16_T_TYPE__
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 3   

           =3   typedef __INT16_T_TYPE__   int16_t;
           =3   typedef __UINT16_T_TYPE__ uint16_t;
           =3 #endif /* __INT16_T_TYPE__ */
           =3 
           =3 #ifdef __INT32_T_TYPE__
           =3   typedef __INT32_T_TYPE__   int32_t;
           =3   typedef __UINT32_T_TYPE__ uint32_t;
           =3 #endif /* __INT32_T_TYPE__ */
           =3 
           =3 #ifdef __INT64_T_TYPE__
           =3   #pragma language=save
           =3   #pragma language=extended
           =3   typedef __INT64_T_TYPE__   int64_t;
           =3   typedef __UINT64_T_TYPE__ uint64_t;
           =3   #pragma language=restore
           =3 #endif /* __INT64_T_TYPE__ */
           =3 
           =3 #endif
  51      =3  
  52      =3  #endif
  79      =2  #include "stdbool.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDBOOL_H
   8      =3  #define STDBOOL_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef bit bool;
  13      =3  enum{
  14      =3    false = 0,
  15      =3    true = 1,
  16      =3  };
  17      =3  
  18      =3  #elif defined __ICC8051__
           =3 
           =3 #ifndef _SYSTEM_BUILD
           =3   #pragma system_include
           =3 #endif
           =3 
           =3 #ifndef __cplusplus
           =3 
           =3 #define bool _Bool
           =3 #define true 1
           =3 #define false 0
           =3 
           =3 #define __bool_true_false_are_defined 1
           =3 
           =3 #endif /* !__cplusplus */
           =3 
           =3 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 
           =3 typedef bit bool;
           =3 enum{
           =3   false = 0,
           =3   true = 1,
           =3 };
           =3 
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 4   

           =3 #endif
  43      =3  
  44      =3  #endif //STDBOOL_H
  45      =3  
  80      =2  #include "endian.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __ENDIAN_H__
   8      =3  #define __ENDIAN_H__
   9      =3  
  10      =3  #define bswapu16(x) (((x) >> 8) | ((x) << 8))
  11      =3  #define bswapu32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) \
  12      =3                    | (((x) & 0x0000FF00) << 8) | ((x) << 24))
  13      =3  
  14      =3  #define bswap16(x) bswapu16((uint16_t)(x))
  15      =3  #define bswap32(x) bswapu32((uint32_t)(x))
  16      =3  
  17      =3  // Big Endian Compilers
  18      =3  #if ((defined __C51__) || (defined __RC51__) || (defined _CC51))
  19      =3  
  20      =3  #define htobe16(x) (x)
  21      =3  #define htobe32(x) (x)
  22      =3  #define be16toh(x) (x)
  23      =3  #define be32toh(x) (x)
  24      =3  
  25      =3  #define htole16(x) bswap16(x)
  26      =3  #define htole32(x) bswap32(x)
  27      =3  #define le16toh(x) bswap16(x)
  28      =3  #define le32toh(x) bswap32(x)
  29      =3  
  30      =3  #elif ((defined SDCC) || (defined HI_TECH_C) || (defined __ICC8051__))
           =3 
           =3 #define htobe16(x) bswap16(x)
           =3 #define htobe32(x) bswap32(x)
           =3 #define be16toh(x) bswap16(x)
           =3 #define be32toh(x) bswap32(x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #else
           =3 
           =3 #define htobe16(x) (x)
           =3 #define htobe32(x) (x)
           =3 #define be16toh(x) (x)
           =3 #define be32toh(x) (x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #endif  // Compiler Definitions
  55      =3  
  56      =3  #endif  // __ENDIAN_H__
  81      =2  #include "si_toolchain.h"
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 5   

   1      =3  /******************************************************************************
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __SI_TOOLCHAIN_H__
   8      =3  #define __SI_TOOLCHAIN_H__
   9      =3  
  10      =3  #include <stdint.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 6   

  11      =3  #include <stdbool.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
  12      =3  
  13      =3  /**************************************************************************//**
  14      =3   *
  15      =3   * @addtogroup toolchain_group Toolchain Abstraction
  16      =3   *
  17      =3   * @brief Macros for toolchain abstraction.
  18      =3   *
  19      =3   * # Introduction #
  20      =3   *
  21      =3   * This header file contains macros that are used to provide an abstraction
  22      =3   * for toolchain use in source code.  The 8051 compiler requires C-language
  23      =3   * extensions in order to fully use features of the 8051 architecture.  All
  24      =3   * compilers for 8051 implement a set of extensions but use different names
  25      =3   * and ways of implementing those extensions.  This header file provides
  26      =3   * macros that are defined for each supported toolchain and can be used in
  27      =3   * the source code.  This allows the source code to use 8051 extensions and
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 7   

  28      =3   * remain independent of which toolchain is used for compilation.
  29      =3   *
  30      =3   * ## Variable and Pointer Declarations ##
  31      =3   *
  32      =3   * It is often useful to specify the memory area (or segment) of a variable,
  33      =3   * pointer, or pointer target.  For example, you may wish to place all
  34      =3   * variables in XDATA by default, but for variables used in time-sensitive
  35      =3   * code you use DATA for efficient access.  In this case you declare the
  36      =3   * XDATA variable in the normal C way, but declare the variables to be located
  37      =3   * in the DATA segment using @ref SI_SEGMENT_VARIABLE.
  38      =3   *
  39      =3   * Pointers are more complicated because there are two memory spaces
  40      =3   * associated with a pointer, the pointer target, and the pointer variable
  41      =3   * itself.  When using default memory segment for the pointer location and
  42      =3   * target, then no special macro is needed.  But if you wish to specify the
  43      =3   * pointer variable location, or target memory segment, then you can use one
  44      =3   * of the following macros to do this in a toolchain-independent way.
  45      =3   *
  46      =3   * |Pointer segment|Target segment|Macro                                   |
  47      =3   * |---------------|--------------|----------------------------------------|
  48      =3   * |default        |generic       |None                                    |
  49      =3   * |default        |specific      |@ref SI_VARIABLE_SEGMENT_POINTER        |
  50      =3   * |specific       |generic       |@ref SI_SEGMENT_POINTER                 |
  51      =3   * |specific       |specific      |@ref SI_SEGMENT_VARIABLE_SEGMENT_POINTER|
  52      =3   *
  53      =3   * ## Prior Toolchain Abstraction Header File ##
  54      =3   *
  55      =3   * This file supercedes an earlier header file named `compiler_defs.h`.  We
  56      =3   * are deprecating the use of compiler_defs.h, however it will remain for
  57      =3   * backwards compatibility.  This file was created to normalize macro names,
  58      =3   * remove unused macros, and to provide documentation.
  59      =3   *
  60      =3   * ## Supported Toolchains ##
  61      =3   *
  62      =3   * - Keil/ARM C51
  63      =3   *
  64      =3   * @{
  65      =3   *
  66      =3   *****************************************************************************/
  67      =3  
  68      =3  // Make sure there is a NULL defined if the toolchain does not provide it.
  69      =3  #ifndef NULL
  70      =3  #define NULL ((void *)0)
  71      =3  #endif
  72      =3  
  73      =3  // -------------------------------
  74      =3  // Keil/ARM C51
  75      =3  //
  76      =3  #if defined(__C51__)
  77      =3  
  78      =3  /// Used with pointers, declares a generic pointer.  Generic pointers
  79      =3  /// work with any memory space but are inefficient.
  80      =3  #define SI_SEG_GENERIC
  81      =3  
  82      =3  /// Declares a variable to be located in 8051 DATA space.
  83      =3  #define SI_SEG_DATA data
  84      =3  
  85      =3  /// Declares a variable to be located in 8051 IDATA space.
  86      =3  #define SI_SEG_IDATA idata
  87      =3  
  88      =3  /// Declares a variable to be located in 8051 XDATA space.
  89      =3  #define SI_SEG_XDATA xdata
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 8   

  90      =3  
  91      =3  /// Declares a variable to be located in 8051 PDATA space.
  92      =3  #define SI_SEG_PDATA pdata
  93      =3  
  94      =3  /// Declares a variable to be located in 8051 BDATA (bit-addressable) space.
  95      =3  #define SI_SEG_BDATA bdata
  96      =3  
  97      =3  /// Declares a variable to be located in 8051 CODE space.
  98      =3  #define SI_SEG_CODE code
  99      =3  
 100      =3  /**************************************************************************//**
 101      =3   * Declares a bit variable in a bit-addressable memory space.
 102      =3   *
 103      =3   * @param name The name of the bit variable.
 104      =3   *****************************************************************************/
 105      =3  #define SI_BIT(name) bit name
 106      =3  
 107      =3  /**************************************************************************//**
 108      =3   * Declares a bit variable in a bit-addressable SFR or memory space.
 109      =3   *
 110      =3   * @param name The name of the bit variable.
 111      =3   * @param address The address of the byte containing the bit.
 112      =3   * @param bitnum The bit number (0-7) within the byte.
 113      =3   *
 114      =3   * This cannot be used to make any arbitrary SFR or variable into
 115      =3   * a bit variable.  The underlying memory must support bit-addressability.
 116      =3   *****************************************************************************/
 117      =3  #define SI_SBIT(name, address, bitnum) sbit name = address^bitnum
 118      =3  
 119      =3  /**************************************************************************//**
 120      =3   * Declares an 8-bit special function register (SFR) variable.
 121      =3   *
 122      =3   * @param name The name of the SFR variable.
 123      =3   * @param address The address of the SFR.
 124      =3   *
 125      =3   * This creates a C variable (8-bit) that maps to a physical special function
 126      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 127      =3   * location into an SFR.  The _address_ must map to a real SFR in the memory
 128      =3   * map.
 129      =3   *****************************************************************************/
 130      =3  #define SI_SFR(name, address) sfr name = address
 131      =3  
 132      =3  /**************************************************************************//**
 133      =3   * Declares a 16-bit special function register (SFR) variable.
 134      =3   *
 135      =3   * @param name The name of the SFR variable.
 136      =3   * @param address The address of the 16-bit SFR.
 137      =3   *
 138      =3   * This creates a C variable (16-bit) that maps to a physical special function
 139      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 140      =3   * location into an SFR.  The _address_ must map to a real 16-bit SFR in the
 141      =3   * memory map.
 142      =3   *****************************************************************************/
 143      =3  #define SI_SFR16(name, address) sfr16 name = address
 144      =3  
 145      =3  #ifndef __SLS_IDE__
 146      =3  /**************************************************************************//**
 147      =3   * Define an interrupt handler function for an interrupt vector.
 148      =3   *
 149      =3   * @param name The name of the interrupt handler function.
 150      =3   * @param vector The interrupt vector number.
 151      =3   *
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 9   

 152      =3   * This macro defines a function to be an interrupt handler.  The _vector_
 153      =3   * parameter is the 8051 interrupt vector number, not the address.  This
 154      =3   * will cause the compiler to treat the function as the interrupt handler
 155      =3   * and generate the appropriate prolog/epilog code.
 156      =3   *
 157      =3   * @note This macro is used to define the function implementation.  To declare
 158      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO.
 159      =3   *****************************************************************************/
 160      =3  #define SI_INTERRUPT(name, vector) void name (void) interrupt vector
 161      =3  
 162      =3  /**************************************************************************//**
 163      =3   * Define an interrupt handler function using a specific register bank.
 164      =3   *
 165      =3   * @param name The name of the interrupt handler function.
 166      =3   * @param vector The interrupt vector number.
 167      =3   * @param regnum The register bank number (0-3).
 168      =3   *
 169      =3   * This macro defines a function to be an interrupt handler, using a specific
 170      =3   * register bank for the interrupt code.  The _vector_ parameter is the 8051
 171      =3   * interrupt vector number, not the address.  The _regnum_ parameter is the
 172      =3   * register bank number (0-3) that will be used as general purpose registers
 173      =3   * for the instructions in the compiled code.  Using dedicated register banks
 174      =3   * for interrupt handlers allows the prolog code to just switch banks instead
 175      =3   * of saving and restoring all the general purpose registers.  This can make
 176      =3   * interrupt entry/exit faster but requires dedicating a register bank for
 177      =3   * the interrupt handler.
 178      =3   *
 179      =3   * @note This macro is used to define the function implementation.  To declare
 180      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO_USING.
 181      =3   *****************************************************************************/
 182      =3  #define SI_INTERRUPT_USING(name, vector, regnum)                             \
 183      =3               void name (void) interrupt vector using regnum
 184      =3  
 185      =3  /**************************************************************************//**
 186      =3   * Declare an interrupt handler prototype for an interrupt vector.
 187      =3   *
 188      =3   * @param name The name of the interrupt handler function.
 189      =3   * @param vector The interrupt vector number.
 190      =3   *
 191      =3   * This macro declares a function prototype for an interrupt handler.  The
 192      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 193      =3   * Declaring the function prototype this way will cause the compiler to
 194      =3   * recognize that the function is an interrupt handler and not a normal C
 195      =3   * function.
 196      =3   *
 197      =3   * @note This macro is used to declare a prototype for the interrupt function.
 198      =3   * To define the interrupt function implementation, use @ref SI_INTERRUPT.
 199      =3   *****************************************************************************/
 200      =3  #define SI_INTERRUPT_PROTO(name, vector) void name (void)
 201      =3  
 202      =3  /**************************************************************************//**
 203      =3   * Declare an interrupt handler prototype using a specific register bank.
 204      =3   *
 205      =3   * @param name The name of the interrupt handler function.
 206      =3   * @param vector The interrupt vector number.
 207      =3   * @param regnum The register bank number (0-3).
 208      =3   *
 209      =3   * This macro declares a function prototype for an interrupt handler, for a
 210      =3   * function that uses a specific register bank for the interrupt code.  The
 211      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 212      =3   * The _regnum_ parameter is the register bank number (0-3) that will be used
 213      =3   * as general purpose registers in the function.  Declaring the function
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 10  

 214      =3   * prototype this way will cause the compiler to recognize that the function
 215      =3   * is an interrupt handler and is not a normal C function.
 216      =3   *
 217      =3   * @note This macro is used to declare a prototype for the interrupt function.
 218      =3   * To define the interrupt function implementation,
 219      =3   * use @ref SI_INTERRUPT_USING.
 220      =3   *****************************************************************************/
 221      =3  #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 222      =3  
 223      =3  /**************************************************************************//**
 224      =3   * Define a function to be reentrant (store local variables on the stack).
 225      =3   *
 226      =3   * @param name The name of the function.
 227      =3   * @param return_type The data type of the function return value
 228      =3   * (void, int, etc).
 229      =3   * @param parameter One C function parameter (or "void") (type and name).
 230      =3   *
 231      =3   * This macro defines a function to be reentrant.
 232      =3   *
 233      =3   * You must specify the _return_type_ which is the type of the function.  It
 234      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 235      =3   * is the list of function parameters.  It can be `void` or else it must be
 236      =3   * a parameter data type and name.  It can also be multiple parameters but
 237      =3   * they must be enclosed in parentheses and separated by commas.
 238      =3   *
 239      =3   * __Example__
 240      =3   *
 241      =3   * ~~~~~~~~.c
 242      =3   * // The following is used to implement a function with the following
 243      =3   * // signature...
 244      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 245      =3   *
 246      =3   * SI_REENTRANT_FUNCTION(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2))
 247      =3   * {
 248      =3   *   // Function implementation body
 249      =3   * }
 250      =3   * ~~~~~~~~
 251      =3   *
 252      =3   * @note This macro is used to define the function implementation.  To declare
 253      =3   * the function prototype, use @ref SI_REENTRANT_FUNCTION_PROTO.
 254      =3   *****************************************************************************/
 255      =3  #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
 256      =3    return_type name parameter reentrant
 257      =3  
 258      =3  /**************************************************************************//**
 259      =3   * Declare a function to be reentrant (store local variables on the stack).
 260      =3   *
 261      =3   * @param name The name of the function.
 262      =3   * @param return_type The data type of the function return value
 263      =3   * (void, int, etc).
 264      =3   * @param parameter One C function parameter (or "void") (type and name).
 265      =3   *
 266      =3   * This macro declares a function prototype for a C function that is reentrant.
 267      =3   * See the documentation for @ref SI_REENTRANT_FUNCTION for an explanation of
 268      =3   * the macro arguments.  This is an advanced feature.
 269      =3   *
 270      =3   * @note This macro is used to declare a prototype for the function.  To
 271      =3   * define the function implementation, use @ref SI_REENTRANT_FUNCTION.
 272      =3   *****************************************************************************/
 273      =3  #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
 274      =3    return_type name parameter reentrant
 275      =3                 
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 11  

 276      =3  /**************************************************************************//**
 277      =3   * Define a function to use a specific register bank.
 278      =3   *
 279      =3   * @param name The name of the function.
 280      =3   * @param return_value The data type of the function return value
 281      =3   * (void, int, etc).
 282      =3   * @param parameter One C function parameter (or "void") (type and name).
 283      =3   * @param regnum The register bank number (0-3).
 284      =3   *
 285      =3   * This macro defines a function that uses a specific register bank.  The
 286      =3   * _regnum_ parameter is the register bank number (0-3) that will be used as
 287      =3   * general purpose registers for the instructions in the compiled function
 288      =3   * code.  Using dedicated register banks for a function can reduce the amount
 289      =3   * of registers saving and restoring needed on entry and exit to the
 290      =3   * function.  However, this is an advanced feature and you should not use it
 291      =3   * unless you fully understand how and when to use register banking.
 292      =3   *
 293      =3   * You must specify the _return_value_ which is the type of the function.  It
 294      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 295      =3   * is the list of function parameters.  It can be `void` or else it must be
 296      =3   * a parameter data type and name.  It can also be multiple parameters but
 297      =3   * they must be enclosed in parentheses and separated by commas.
 298      =3   *
 299      =3   * __Example__
 300      =3   *
 301      =3   * ~~~~~~~~.c
 302      =3   * // The following is used to implement a function with the following
 303      =3   * // signature, and that uses register bank 3 ...
 304      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 305      =3   *
 306      =3   * SI_FUNCTION_USING(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2), 3)
 307      =3   * {
 308      =3   *   // Function implementation body
 309      =3   * }
 310      =3   * ~~~~~~~~
 311      =3   *
 312      =3   * @note This macro is used to define the function implementation.  To declare
 313      =3   * the function prototype, use @ref SI_FUNCTION_PROTO_USING.
 314      =3   *****************************************************************************/
 315      =3  #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
 316      =3               return_value name parameter using regnum
 317      =3  
 318      =3  /**************************************************************************//**
 319      =3   * Declare a function that uses a specific register bank.
 320      =3   *
 321      =3   * @param name The name of the function.
 322      =3   * @param return_value The data type of the function return value
 323      =3   * (void, int, etc).
 324      =3   * @param parameter One C function parameter (or "void") (type and name).
 325      =3   * @param regnum The register bank number (0-3).
 326      =3   *
 327      =3   * This macro declares a function prototype for a C function that uses a
 328      =3   * specific register its working registers.  See the documentation for
 329      =3   * @ref SI_FUNCTION_USING for an explanation of the macro arguments.  This is
 330      =3   * an advanced feature.
 331      =3   *
 332      =3   * @note This macro is used to declare a prototype for the function.  To
 333      =3   * define the function implementation, use @ref SI_FUNCTION_USING.
 334      =3   *****************************************************************************/
 335      =3  #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
 336      =3               return_value name parameter
 337      =3  
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 12  

 338      =3  /**************************************************************************//**
 339      =3   * Declare a variable to be located in a specific memory segment.
 340      =3   *
 341      =3   * @param name The variable name.
 342      =3   * @param vartype The variable data type.* @param memseg The memory segment to use for the variable.
 343      =3   *
 344      =3   * This macro declares a variable to be located in a specific memory area
 345      =3   * (or segment) of the 8051 memory space.  It is only necessary to use this
 346      =3   * macro if you want to force the variable into a specific memory space instead
 347      =3   * of the default memory space used by the compiler.  The segment can be
 348      =3   * one of the following:
 349      =3   *
 350      =3   * - @ref SI_SEG_DATA
 351      =3   * - @ref SI_SEG_IDATA
 352      =3   * - @ref SI_SEG_BDATA
 353      =3   * - @ref SI_SEG_PDATA
 354      =3   * - @ref SI_SEG_XDATA
 355      =3   * - @ref SI_SEG_CODE
 356      =3   *
 357      =3   * __Example__
 358      =3   *
 359      =3   * ~~~~~~~~.c
 360      =3   * // The following macro can be used to create a variable located in
 361      =3   * // XDATA with the following signature:
 362      =3   * uint8_t myVar;
 363      =3   *
 364      =3   * SI_SEGMENT_VARIABLE(myVar, uint8_t, SEG_XDATA);
 365      =3   * ~~~~~~~~
 366      =3   *****************************************************************************/
 367      =3  #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype memseg name
 368      =3  
 369      =3  /**************************************************************************//**
 370      =3   * Declare a memory segment specific pointer variable.
 371      =3   *
 372      =3   * @param name The pointer variable name.
 373      =3   * @param vartype The pointer data type.
 374      =3   * @param targseg The target memory segment for the pointer.
 375      =3   *
 376      =3   * This macro declares a pointer that points at a specific memory area
 377      =3   * (or segment).  The memory segment of the pointer variable itself is not
 378      =3   * specified and the default is used.  The segment can be one of the following:
 379      =3   *
 380      =3   * - @ref SI_SEG_DATA
 381      =3   * - @ref SI_SEG_IDATA
 382      =3   * - @ref SI_SEG_BDATA
 383      =3   * - @ref SI_SEG_PDATA
 384      =3   * - @ref SI_SEG_XDATA
 385      =3   * - @ref SI_SEG_CODE
 386      =3   *
 387      =3   * __Example__
 388      =3   *
 389      =3   * ~~~~~~~~.c
 390      =3   * // The following macro can be used to create a pointer that points to
 391      =3   * // a location in XDATA with the following signature:
 392      =3   * uint8_t *pVar; // where pVar is pointing at XDATA
 393      =3   *
 394      =3   * SI_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA);
 395      =3   * ~~~~~~~~
 396      =3   *****************************************************************************/
 397      =3  #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
 398      =3               vartype targseg * name
 399      =3  
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 13  

 400      =3  /**************************************************************************//**
 401      =3   * Declare a memory segment specific pointer variable, in a specific segment.
 402      =3   *
 403      =3   * @param name The pointer variable name.
 404      =3   * @param vartype The pointer data type.
 405      =3   * @param targseg The target memory segment for the pointer.
 406      =3   * @param memseg The memory segment to use for the pointer variable.
 407      =3   *
 408      =3   * This macro declares a pointer that points at a specific memory area
 409      =3   * (or segment).  The pointer variable itself is also located in a specified
 410      =3   * memory segment by _memseg_.  The arguments _targseg_ and _memseg_ can be
 411      =3   * one of the following:
 412      =3   *
 413      =3   * - @ref SI_SEG_DATA
 414      =3   * - @ref SI_SEG_IDATA
 415      =3   * - @ref SI_SEG_BDATA
 416      =3   * - @ref SI_SEG_PDATA
 417      =3   * - @ref SI_SEG_XDATA
 418      =3   * - @ref SI_SEG_CODE
 419      =3   *
 420      =3   * __Example__
 421      =3   *
 422      =3   * ~~~~~~~~.c
 423      =3   * // The following macro can be used to create a pointer that points to
 424      =3   * // a location in XDATA while the pointer itself is located in DATA, with
 425      =3   * // the following signature:
 426      =3   * uint8_t *pVar; // where pVar is located in DATA and is pointing at XDATA
 427      =3   *
 428      =3   * SI_SEGMENT_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA, SEG_DATA);
 429      =3   * ~~~~~~~~
 430      =3   *****************************************************************************/
 431      =3  #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
 432      =3               vartype targseg * memseg name
 433      =3  
 434      =3  /**************************************************************************//**
 435      =3   * Declare a generic pointer variable that is located in a specific segment.
 436      =3   *
 437      =3   * @param name The pointer variable name.
 438      =3   * @param vartype The pointer data type.
 439      =3   * @param memseg The memory segment to use for the pointer variable.
 440      =3   *
 441      =3   * This macro declares a pointer that is a generic pointer.  This means it can
 442      =3   * point at any kind of memory location.  However the pointer variable itself
 443      =3   * is located in a specific memory segment by _memseg_, which can be one of
 444      =3   * the following:
 445      =3   *
 446      =3   * - @ref SI_SEG_DATA
 447      =3   * - @ref SI_SEG_IDATA
 448      =3   * - @ref SI_SEG_BDATA
 449      =3   * - @ref SI_SEG_PDATA
 450      =3   * - @ref SI_SEG_XDATA
 451      =3   * - @ref SI_SEG_CODE
 452      =3   *
 453      =3   * __Example__
 454      =3   *
 455      =3   * ~~~~~~~~.c
 456      =3   * // The following macro can be used to create a generic pointer that
 457      =3   * // is located in DATA and points at any memory type, with the
 458      =3   * // following signature:
 459      =3   * uint8_t *pVar; // where pVar is located in DATA and is a generic pointer
 460      =3   *
 461      =3   * SI_SEGMENT_POINTER(pVar, uint8_t, SEG_DATA);
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 14  

 462      =3   * ~~~~~~~~
 463      =3   *****************************************************************************/
 464      =3  #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * memseg name
 465      =3  
 466      =3  /**************************************************************************//**
 467      =3   * Declare an uninitialized variable that is located at a specific address.
 468      =3   *
 469      =3   * @param name The variable name.
 470      =3   * @param vartype The variable data type.
 471      =3   * @param memseg The memory segment to use for the variable.
 472      =3   * @param address The memory address of the variable.
 473      =3   *
 474      =3   * This macro allows declaring a variable that can be placed at a specific
 475      =3   * location in memory.  This can only be used for variables that do not need
 476      =3   * initializers.  The _address_ is the memory address within the specified
 477      =3   * segment.  The memory segment, _memseg_, can be one of the following:
 478      =3   *
 479      =3   * - @ref SI_SEG_DATA
 480      =3   * - @ref SI_SEG_IDATA
 481      =3   * - @ref SI_SEG_BDATA
 482      =3   * - @ref SI_SEG_PDATA
 483      =3   * - @ref SI_SEG_XDATA
 484      =3   * - @ref SI_SEG_CODE
 485      =3   *
 486      =3   * __Example__
 487      =3   *
 488      =3   * ~~~~~~~~.c
 489      =3   * // The following declares a variable located at 0x4000 in XDATA with
 490      =3   * // the following signature:
 491      =3   * uint8_t myMemVar;
 492      =3   *
 493      =3   * SI_LOCATED_VARIABLE_NO_INIT(myMemVar, uint8_t, SEG_DATA, 0x4000);
 494      =3   * ~~~~~~~~
 495      =3   *****************************************************************************/
 496      =3  #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
 497      =3               vartype memseg name _at_ address
 498      =3  
 499      =3  
 500      =3  #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 #define SI_REENTRANT_FUNCTION(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_value, parameter, regnum) return_value name (parameter)
           =3 
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 #endif // __SLS_IDE__
 519      =3  
 520      =3  // The following are used for byte ordering when referring to individual
 521      =3  // bytes within a SI_UU32_t.  B0 is the least significant byte.
 522      =3  #define B0 3 ///< Least significant byte of a 4 byte word
 523      =3  #define B1 2 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 15  

 524      =3  #define B2 1 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
 525      =3  #define B3 0 ///< Most significant byte of a 4-byte word
 526      =3  
 527      =3  #define LSB 1 ///< Index to least significant bit of a 2 byte word
 528      =3  #define MSB 0 ///< Index to most significant bit of a 2 byte word
 529      =3  
 530      =3  /// A union type to make it easier to access individual bytes of a 16-bit
 531      =3  /// word, and to use as signed or unsigned type.
 532      =3  typedef union SI_UU16
 533      =3  {
 534      =3    uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
 535      =3    int16_t s16;    ///< The two byte value as a 16-bit signed integer.
 536      =3    uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
 537      =3    int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
 538      =3  } SI_UU16_t;
 539      =3  
 540      =3  /// A union type to make it easier to access individual bytes within a
 541      =3  /// 32-bit word, or to access it as variations of 16-bit words, or to
 542      =3  /// use as signed or unsigned type.
 543      =3  typedef union SI_UU32
 544      =3  {
 545      =3    uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
 546      =3    int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
 547      =3    SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
 548      =3    uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
 549      =3    int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
 550      =3    uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
 551      =3    int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
 552      =3  } SI_UU32_t;
 553      =3  
 554      =3  // Generic pointer memory segment constants.
 555      =3  #define SI_GPTR                   ///< Generic pointer indeterminate type.
 556      =3  #define SI_GPTR_MTYPE_DATA  0x00  ///< Generic pointer for DATA segment.
 557      =3  #define SI_GPTR_MTYPE_IDATA 0x00  ///< Generic pointer for IDATA segment.
 558      =3  #define SI_GPTR_MTYPE_BDATA 0x00  ///< Generic pointer for BDATA segment.
 559      =3  #define SI_GPTR_MTYPE_PDATA 0xFE  ///< Generic pointer for PDATA segment.
 560      =3  #define SI_GPTR_MTYPE_XDATA 0x01  ///< Generic pointer for XDATA segment.
 561      =3  #define SI_GPTR_MTYPE_CODE  0xFF  ///< Generic pointer for CODE segment.
 562      =3  
 563      =3  /// Generic pointer structure containing the type and address.
 564      =3  typedef struct
 565      =3  {
 566      =3    uint8_t memtype;    ///< The type of memory of the generic pointer.
 567      =3    SI_UU16_t address;  ///< The address of the generic pointer.
 568      =3  } GPTR_t;
 569      =3  
 570      =3  /// A union type to allow access to the fields of a generic pointer.
 571      =3  /// A generic pointer has a field indicating the type of memory and an
 572      =3  /// address within the memory.
 573      =3  typedef union SI_GEN_PTR
 574      =3  {
 575      =3    uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
 576      =3    GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
 577      =3  } SI_GEN_PTR_t;
 578      =3  
 579      =3  // Declaration of Keil intrinisc
 580      =3  extern void _nop_(void);
 581      =3  /// Macro to insert a no-operation (NOP) instruction.
 582      =3  #define NOP() _nop_()
 583      =3  
 584      =3  // -------------------------------
 585      =3  // GCC for ARM Cortex-M
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 16  

 586      =3  // Provides support for code that can be compiled for 8 or 32-bit
 587      =3  //
 588      =3  #elif defined (__GNUC__)
           =3 #if defined(__ARMEL__) && ((__ARMEL__ == 1) && ((__ARM_ARCH == 6) || (__ARM_ARCH == 7)))
           =3 
           =3 // these ignore any memory segment directives
           =3 #define SI_SEG_GENERIC
           =3 #define SI_SEG_DATA
           =3 #define SI_SEG_IDATA
           =3 #define SI_SEG_XDATA
           =3 #define SI_SEG_PDATA
           =3 #define SI_SEG_BDATA
           =3 #define SI_SEG_CODE
           =3 
           =3 // the following create a variable of the specified name but ignore the
           =3 // address and bit number.  If the using-code cares about the actual
           =3 // address or bit number, this probably will break it
           =3 #define SI_SBIT(name, address, bitnum) uint8_t name
           =3 #define SI_SFR(name, address) uint8_t name
           =3 #define SI_SFR16(name, address) uint16_t name
           =3 
           =3 // the following create function and variable names of the specified types
           =3 // but the 8051-specific aspects (like memory segment) are ignored
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name (parameter)
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =3              vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =3              vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =3              vartype name
           =3 
           =3 #define B0 0
           =3 #define B1 1
           =3 #define B2 2
           =3 #define B3 3
           =3 #define LSB 0
           =3 #define MSB 1
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;
           =3   int16_t s16;
           =3   uint8_t u8[2];
           =3   int8_t s8[2];
           =3 } SI_UU16_t;
           =3 
           =3 typedef union SI_UU32
           =3 {
           =3   uint32_t u32;
           =3   int32_t s32;
           =3   SI_UU16_t uu16[2];
           =3   uint16_t u16[2];
           =3   int16_t s16[2];
           =3   uint8_t u8[4];
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 17  

           =3   int8_t s8[4];
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer stuff is left out because if you are accessing
           =3 // generic pointer fields then it will need to be rewritten for 32-bit
           =3 
           =3 // __NOP should be declared in cmsis header core_cmInstr.h
           =3 extern void __NOP(void);
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __NOP()
           =3 
           =3 #else // ARM_ARCH 6 | 7
           =3 #error unsupported ARM arch
           =3 #endif
           =3 
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <intrinsics.h>
           =3 
           =3 #define SI_BIT(name)              __no_init bool __bit name
           =3 #define SI_SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 #define SI_SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 #define SI_SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 
           =3 #define SI_SEG_GENERIC __generic
           =3 #define SI_SEG_FAR  __xdata
           =3 #define SI_SEG_DATA __data
           =3 #define SI_SEG_NEAR __data
           =3 #define SI_SEG_IDATA __idata
           =3 #define SI_SEG_XDATA __xdata
           =3 #define SI_SEG_PDATA __pdata
           =3 #define SI_SEG_CODE  __code
           =3 #define SI_SEG_BDATA __bdata
           =3 
           =3 #define _PPTOSTR_(x) #x
           =3 #define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 #define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 #define SI_INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __in
             -terrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 #if (__DATA_MODEL__ == 0) /* TINY */ || \
           =3     (__DATA_MODEL__ == 1) /* SMALL */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #elif (__DATA_MODEL__ == 2) /* LARGE */ || \
           =3       (__DATA_MODEL__ == 3) /* GENERIC */ || \
           =3       (__DATA_MODEL__ == 4) /* FAR */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name (parameter)
           =3 #else
           =3 #error "Illegal memory model setting."
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 18  

           =3 #endif
           =3 
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name parameter
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name parameter
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment)  vartype locsegment name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * 
             -locsegment name
           =3                
           =3 #define SI_SEGMENT_POINTER(name, vartype, ptrseg) vartype __generic * ptrseg name
           =3 
           =3 #define SI_LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ add
             -r
           =3 
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment __no_init vartype name @ a
             -ddr
           =3 
           =3 // The following are used for byte ordering when referring to individual
           =3 // bytes within a SI_UU32_t.  B0 is the least significant byte.
           =3 #define B0 0 ///< Least significant byte of a 4 byte word
           =3 #define B1 1 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
           =3 #define B2 2 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
           =3 #define B3 3 ///< Most significant byte of a 4-byte word
           =3 
           =3 #define LSB 0 ///< Index to least significant bit of a 2 byte word
           =3 #define MSB 1 ///< Index to most significant bit of a 2 byte word
           =3 
           =3 /// A union type to make it easier to access individual bytes of a 16-bit
           =3 /// word, and to use as signed or unsigned type.
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
           =3   int16_t s16;    ///< The two byte value as a 16-bit signed integer.
           =3   uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
           =3   int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
           =3 } SI_UU16_t;
           =3 
           =3 /// A union type to make it easier to access individual bytes within a
           =3 /// 32-bit word, or to access it as variations of 16-bit words, or to
           =3 /// use as signed or unsigned type.
           =3 typedef union SI_UU32
           =3 {
           =3   uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
           =3   int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
           =3   SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
           =3   uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
           =3   int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
           =3   uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
           =3   int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer memory segment constants.
           =3 #define SI_GPTR                   ///< Generic pointer indeterminate type.
           =3 #define SI_GPTR_MTYPE_DATA  0x01  ///< Generic pointer for DATA segment.
           =3 #define SI_GPTR_MTYPE_IDATA 0x01  ///< Generic pointer for IDATA segment.
           =3 #define SI_GPTR_MTYPE_BDATA 0x01  ///< Generic pointer for BDATA segment.
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 19  

           =3 #define SI_GPTR_MTYPE_PDATA 0x00  ///< Generic pointer for PDATA segment.
           =3 #define SI_GPTR_MTYPE_XDATA 0x00  ///< Generic pointer for XDATA segment.
           =3 #define SI_GPTR_MTYPE_CODE  0x80  ///< Generic pointer for CODE segment.
           =3 
           =3 /// Generic pointer structure containing the type and address.
           =3 typedef struct
           =3 {
           =3   SI_UU16_t address;  ///< The address of the generic pointer.
           =3   uint8_t memtype;    ///< The type of memory of the generic pointer.  
           =3 } GPTR_t;
           =3 
           =3 /// A union type to allow access to the fields of a generic pointer.
           =3 /// A generic pointer has a field indicating the type of memory and an
           =3 /// address within the memory.
           =3 typedef union SI_GEN_PTR
           =3 {
           =3   uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
           =3   GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
           =3 } SI_GEN_PTR_t;
           =3 
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __no_operation()
           =3 
           =3 #else // unknown toolchain
           =3 #error Unrecognized toolchain in si_toolchain.h
           =3 #endif
 794      =3  
 795      =3  /** @} */
 796      =3  
 797      =3  #endif
  82      =2  #include "compiler_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // compiler_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Portions of this file are copyright Maarten Brock
   5      =3  // http://sdcc.sourceforge.net
   6      =3  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
   7      =3  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =3  //
   9      =3  // GNU LGPL boilerplate:
  10      =3  /** This library is free software; you can redistribute it and/or
  11      =3    * modify it under the terms of the GNU Lesser General Public
  12      =3    * License as published by the Free Software Foundation; either
  13      =3    * version 2.1 of the License, or (at your option) any later version.
  14      =3    *
  15      =3    * This library is distributed in the hope that it will be useful,
  16      =3    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =3    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  18      =3    * Lesser General Public License for more details.
  19      =3    *
  20      =3    * You should have received a copy of the GNU Lesser General Public
  21      =3    * License along with this library; if not, write to the Free Software
  22      =3    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =3    *
  24      =3    * In other words, you are welcome to use, share and improve this program.
  25      =3    * You are forbidden to forbid anyone else to use, share and improve
  26      =3    * what you give them. Help stamp out software-hoarding!
  27      =3  **/
  28      =3  // Program Description:
  29      =3  //
  30      =3  // **Important Note**: This header file should be included before including
  31      =3  // a device-specific header file such as C8051F300_defs.h.
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 20  

  32      =3  //
  33      =3  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =3  // special function registers and other 8051-specific features such as NOP
  35      =3  // generation, and locating variables in memory-specific segments.  The
  36      =3  // compilers are identified by their unique predefined macros. See also:
  37      =3  // http://predef.sourceforge.net/precomp.html
  38      =3  //
  39      =3  // SBIT and SFR define special bit and special function registers at the given
  40      =3  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =3  // little-endian format. SFR16E and SFR32E define sfr combinations without
  42      =3  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =3  // combinations will guarantee the order in which they are accessed when read
  44      =3  // or written.
  45      =3  //
  46      =3  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
  47      =3  // to avoid portability issues because of compiler endianness.
  48      =3  //
  49      =3  // Example:
  50      =3  // // my_mcu.c: main 'c' file for my mcu
  51      =3  // #include <compiler_defs.h>  // this file
  52      =3  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =3  //
  54      =3  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =3  // SFR   (P0, 0x80);           // Port 0
  56      =3  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
  57      =3  //                             // xdata memory at 0xE600
  58      =3  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =3  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =3  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =3  //                             // lsb at 0x93, msb at 0x96
  62      =3  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =3  //                             // lsb at 0xE2, msb at 0xE5
  64      =3  //
  65      =3  // Target:         C8051xxxx
  66      =3  // Tool chain:     Generic
  67      =3  // Command Line:   None
  68      =3  // 
  69      =3  // Release 2.7 - 25 JUN 2014 (JM)
  70      =3  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =3  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =3  //     pointed at by a generic poitner
  73      =3  // Release 2.6 - 14 DEC 2012 (GO)
  74      =3  //        -Added define for deprecated SDCC keyword 'at'
  75      =3  // Release 2.5 - 12 SEP 2012 (TP)
  76      =3  //    -Added defines for deprecated SDCC keywords bit and code
  77      =3  // Release 2.4 - 27 AUG 2012 (TP)
  78      =3  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =3  // Release 2.3 - 27 MAY 2010 (DM)
  80      =3  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =3  // Release 2.2 - 06 APR 2010 (ES)
  82      =3  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =3  // Release 2.1 - 16 JUL 2009 (ES)
  84      =3  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =3  // Release 2.0 - 19 MAY 2009 (ES)
  87      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
  88      =3  // Release 1.9 - 23 OCT 2008 (ES)
  89      =3  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =3  //    -Added SFR16 macro defintion for Hi-Tech
  91      =3  // Release 1.8 - 31 JUL 2008 (ES)
  92      =3  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =3  //    -Added macro's for IAR
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 21  

  94      =3  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =3  // Release 1.7 - 11 SEP 2007 (BW)
  96      =3  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =3  // Release 1.6 - 27 AUG 2007 (BW)
  98      =3  //    -Updated copyright notice per agreement with Maartin Brock
  99      =3  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =3  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =3  // Release 1.5 - 24 AUG 2007 (BW)
 102      =3  //    -Added support for NOP () macro
 103      =3  //    -Added support for Hi-Tech ver 9.01
 104      =3  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =3  //    -Removed FID and fixed formatting.
 106      =3  // Release 1.3 - 30 SEP 2007 (TP)
 107      =3  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =3  //     under SDCC.
 109      =3  // Release 1.2 - (BW)
 110      =3  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =3  // Release 1.1 - (BW)
 112      =3  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =3  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =3  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =3  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =3  //    -Initial revision
 117      =3  
 118      =3  //-----------------------------------------------------------------------------
 119      =3  // Header File Preprocessor Directive
 120      =3  //-----------------------------------------------------------------------------
 121      =3  
 122      =3  #ifndef COMPILER_DEFS_H
 123      =3  #define COMPILER_DEFS_H
 124      =3  
 125      =3  #include "stdbool.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 22  

           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
 126      =3  #include "stdint.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 23  

           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
 127      =3  
 128      =3  //-----------------------------------------------------------------------------
 129      =3  // Macro definitions
 130      =3  //-----------------------------------------------------------------------------
 131      =3  
 132      =3  //SDK Version
 133      =3  #define SDK_VERSION   2
 134      =3  
 135      =3  #ifndef NULL
           =3 #define NULL ((void*) 0)
           =3 #endif
 138      =3  
 139      =3  
 140      =3  // SDCC - Small Device C Compiler
 141      =3  // http://sdcc.sourceforge.net
 142      =3  
 143      =3  #if defined SDCC
           =3 
           =3 #if (SDCC >= 300)
           =3 
           =3 #define interrupt __interrupt
           =3 #define _asm __asm
           =3 #define _endasm __endasm
           =3 #define bit __bit
           =3 #define code __code
           =3 #define at __at
           =3 
           =3 #endif
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   __xdata
           =3 # define SEG_DATA  __data
           =3 # define SEG_NEAR  __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =3 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =3 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
           =3 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =3 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
           =3 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =3 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 24  

             -regnum)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() _asm NOP _endasm
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x40
           =3 #define SI_GPTR_MTYPE_IDATA      0x40
           =3 #define SI_GPTR_MTYPE_BDATA      0x40
           =3 #define SI_GPTR_MTYPE_PDATA      0x60
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 25  

           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Raisonance (must be placed before Keil C51)
           =3 // http://www.raisonance.com
           =3 
           =3 #elif defined __RC51__
           =3 
           =3 //#error Raisonance C51 detected.
           =3 
           =3 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =3 # define SEG_FAR   xdata
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  data
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =3 # define SFR(name, addr)        sfr at addr                name
           =3 # define SFR16(name, addr)      sfr16 at addr              name
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =3 
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 26  

           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support -- NOP is opcode 0x00
           =3 #define NOP() asm { 0x00 }
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x04
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x04
           =3 #define SI_GPTR_MTYPE_PDATA      0x03
           =3 #define SI_GPTR_MTYPE_XDATA      0x02
           =3 #define SI_GPTR_MTYPE_CODE       0x05
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         U8 MTYPE;
           =3         UU16 ADDR;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // Keil C51
           =3 // http://www.keil.com
           =3 
           =3 #elif defined __C51__
 360      =3  
 361      =3  //#error Keil C51 detected.
 362      =3  
 363      =3  # define SEG_GENERIC
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 27  

 364      =3  # define SEG_FAR   xdata
 365      =3  # define SEG_DATA  data
 366      =3  # define SEG_NEAR  data
 367      =3  # define SEG_IDATA idata
 368      =3  # define SEG_XDATA xdata
 369      =3  # define SEG_PDATA pdata
 370      =3  # define SEG_CODE  code
 371      =3  # define SEG_BDATA bdata
 372      =3  
 373      =3  # define SBIT(name, addr, bit)  sbit  name = addr^bit
 374      =3  # define SFR(name, addr)        sfr   name = addr
 375      =3  # define SFR16(name, addr)      sfr16 name = addr
 376      =3  # define SFR16E(name, fulladdr) /* not supported */
 377      =3  # define SFR32(name, fulladdr)  /* not supported */
 378      =3  # define SFR32E(name, fulladdr) /* not supported */
 379      =3  
 380      =3  # ifndef __SLS_IDE__
 381      =3  
 382      =3  # define INTERRUPT(name, vector) void name (void) interrupt vector
 383      =3  # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
 384      =3  # define INTERRUPT_PROTO(name, vector) void name (void)
 385      =3  # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 386      =3  
 387      =3  # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
 388      =3  # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
 389      =3  // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
 390      =3  
 391      =3  # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
 392      =3  # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
 393      =3  # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
 394      =3  # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
 395      =3  # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
 396      =3  
 397      =3  # else  // __SLS_IDE__
           =3 
           =3 # define INTERRUPT(name, vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 
           =3 # endif // __SLS_IDE__
 415      =3  
 416      =3  // used with UU16
 417      =3  # define LSB 1
 418      =3  # define MSB 0
 419      =3  
 420      =3  // used with UU32 (b0 is least-significant byte)
 421      =3  # define b0 3
 422      =3  # define b1 2
 423      =3  # define b2 1
 424      =3  # define b3 0
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 28  

 425      =3  
 426      =3  typedef unsigned char U8;
 427      =3  typedef unsigned int U16;
 428      =3  typedef unsigned long U32;
 429      =3  
 430      =3  typedef signed char S8;
 431      =3  typedef signed int S16;
 432      =3  typedef signed long S32;
 433      =3  
 434      =3  typedef union UU16
 435      =3  {
 436      =3     U16 U16;
 437      =3     S16 S16;
 438      =3     U8 U8[2];
 439      =3     S8 S8[2];
 440      =3  } UU16;
 441      =3  
 442      =3  typedef union UU32
 443      =3  {
 444      =3     U32 U32;
 445      =3     S32 S32;
 446      =3     UU16 UU16[2];
 447      =3     U16 U16[2];
 448      =3     S16 S16[2];
 449      =3     U8 U8[4];
 450      =3     S8 S8[4];
 451      =3  } UU32;
 452      =3  
 453      =3  // NOP () macro support
 454      =3  extern void _nop_ (void);
 455      =3  #define NOP() _nop_()
 456      =3  
 457      =3  // generic pointer memory type specifiers
 458      =3  #define SI_GPTR
 459      =3  #define SI_GPTR_MTYPE_DATA      0x00
 460      =3  #define SI_GPTR_MTYPE_IDATA     0x00
 461      =3  #define SI_GPTR_MTYPE_BDATA     0x00
 462      =3  #define SI_GPTR_MTYPE_PDATA     0xFE
 463      =3  #define SI_GPTR_MTYPE_XDATA     0x01
 464      =3  #define SI_GPTR_MTYPE_CODE      0xFF
 465      =3  
 466      =3  // generic pointer access struct
 467      =3  typedef union SI_GENERIC_PTR
 468      =3  {
 469      =3      U8 U8[3];
 470      =3      struct
 471      =3      {
 472      =3          U8 MTYPE;
 473      =3          UU16 ADDR;
 474      =3      } GPTR;
 475      =3  } SI_GENERIC_PTR;
 476      =3  
 477      =3  //-----------------------------------------------------------------------------
 478      =3  
 479      =3  // Hi-Tech 8051
 480      =3  // http://www.htsoft.com
 481      =3  
 482      =3  #elif defined HI_TECH_C
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   far
           =3 # define SEG_DATA  data
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 29  

           =3 # define SEG_NEAR  near
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 
           =3 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =3 # define SFR(name, addr)          static volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =3 # define INTERRUPT_PROTO(name, vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: Hi-Tech does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 30  

           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() asm(" nop ")
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Tasking / Altium
           =3 // http://www.altium.com/tasking
           =3 
           =3 
           =3 #elif defined _CC51
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   _xdat
           =3 # define SEG_DATA  _data
           =3 # define SEG_NEAR  _data
           =3 # define SEG_IDATA _idat
           =3 # define SEG_XDATA _xdat
           =3 # define SEG_PDATA _pdat
           =3 # define SEG_CODE  _rom
           =3 # define SEG_BDATA _bdat
           =3 
           =3 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =3 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =3 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =3 #if _CC51 > 71
           =3 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =3 #else
           =3 # define SFR16(name, addr)      /* not supported */
           =3 #endif
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 
           =3 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =3 // is also using the same register bank. If not, the compiler will generate an error.
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
             -ameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 31  

           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 extern void _nop (void);
           =3 #define NOP() _nop()
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <stdbool.h>
           =3 #include <intrinsics.h>
           =3 
           =3 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr) /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define SEG_GENERIC __generic
           =3 # define SEG_FAR  __xdata
           =3 # define SEG_DATA __data
           =3 # define SEG_NEAR __data
           =3 # define SEG_IDATA __idata
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 32  

           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 #define bit bool
           =3 
           =3 # define _PPTOSTR_(x) #x
           =3 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 33  

           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 
           =3 #define NOP() __no_operation();
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x01
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x01
           =3 #define SI_GPTR_MTYPE_PDATA      0x00
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Crossware
           =3 // http://www.crossware.com
           =3 
           =3 #elif defined _XC51_VER
           =3 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =3 # define SFR(name, addr)        _sfr     name = addr
           =3 # define SFR16(name, addr)      _sfrword name = addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Wickenh盲user
           =3 // http://www.wickenhaeuser.de
           =3 
           =3 #elif defined __UC__
           =3 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =3 # define SFR(name, addr)        near unsigned char name @ addr
           =3 # define SFR16(name, addr)      /* not supported */
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Default
           =3 // Unknown compiler
           =3 
           =3 #else
           =3 # warning unrecognized compiler
           =3 # define SBIT(name, addr, bit)  volatile bool           name
           =3 # define SFR(name, addr)        volatile unsigned char  name
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 34  

           =3 # define SFRX(name, addr)       volatile unsigned char  name
           =3 # define SFR16(name, addr)      volatile unsigned short name
           =3 # define SFR16E(name, fulladdr) volatile unsigned short name
           =3 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =3 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =3 
           =3 #endif
 798      =3  
 799      =3  //-----------------------------------------------------------------------------
 800      =3  // Header File PreProcessor Directive
 801      =3  //-----------------------------------------------------------------------------
 802      =3  
 803      =3  #endif                                 // #define COMPILER_DEFS_H
 804      =3  
 805      =3  //-----------------------------------------------------------------------------
 806      =3  // End Of File
 807      =3  //-----------------------------------------------------------------------------
  83      =2  #include "C8051F020_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // C8051F020_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Copyright 2007, Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Register/bit definitions for the C8051F02x family.
  10      =3  // **Important Note**: The compiler_defs.h header file should be included
  11      =3  // before including this header file.
  12      =3  //
  13      =3  // Target:         C8051F020, 'F021, 'F022, 'F023
  14      =3  // Tool chain:     Generic
  15      =3  // Command Line:   None
  16      =3  //
  17      =3  // Release 1.4 - 20 AUG 2012 (TP)
  18      =3  //    -Added #define for _XPAGE to provide support for SDCC memory paging
  19      =3  //     (pdata)
  20      =3  // Release 1.3 - 07 AUG 2007 (PKC)
  21      =3  //    -Removed #include <compiler_defs.h>. The C source file should include it.
  22      =3  // Release 1.2 - 09 JUL 2007 (PKC)
  23      =3  //    -Reformatted header file to enable portable SFR definitions
  24      =3  
  25      =3  //-----------------------------------------------------------------------------
  26      =3  // Header File Preprocessor Directive
  27      =3  //-----------------------------------------------------------------------------
  28      =3  
  29      =3  #ifndef C8051F020_DEFS_H
  30      =3  #define C8051F020_DEFS_H
  31      =3  
  32      =3  //-----------------------------------------------------------------------------
  33      =3  // Byte Registers
  34      =3  //-----------------------------------------------------------------------------
  35      =3  
  36      =3  SFR (P0, 0x80);                        // Port 0 Latch
  37      =3  SFR (SP, 0x81);                        // Stack Pointer
  38      =3  SFR (DPL, 0x82);                       // Data Pointer Low
  39      =3  SFR (DPH, 0x83);                       // Data Pointer High
  40      =3  SFR (P4, 0x84);                        // Port 4 Latch
  41      =3  SFR (P5, 0x85);                        // Port 5 Latch
  42      =3  SFR (P6, 0x86);                        // Port 6 Latch
  43      =3  SFR (PCON, 0x87);                      // Power Control
  44      =3  SFR (TCON, 0x88);                      // Timer/Counter Control
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 35  

  45      =3  SFR (TMOD, 0x89);                      // Timer/Counter Mode
  46      =3  SFR (TL0, 0x8A);                       // Timer/Counter 0 Low
  47      =3  SFR (TL1, 0x8B);                       // Timer/Counter 1 Low
  48      =3  SFR (TH0, 0x8C);                       // Timer/Counter 0 High
  49      =3  SFR (TH1, 0x8D);                       // Timer/Counter 1 High
  50      =3  SFR (CKCON, 0x8E);                     // Clock Control
  51      =3  SFR (PSCTL, 0x8F);                     // Program Store R/W Control
  52      =3  SFR (P1, 0x90);                        // Port 1 Latch
  53      =3  SFR (TMR3CN, 0x91);                    // Timer/Counter 3 Control
  54      =3  SFR (TMR3RLL, 0x92);                   // Timer/Counter 3 Reload Low
  55      =3  SFR (TMR3RLH, 0x93);                   // Timer/Counter 3 Reload High
  56      =3  SFR (TMR3L, 0x94);                     // Timer/Counter 3 Low
  57      =3  SFR (TMR3H, 0x95);                     // Timer/Counter 3 High
  58      =3  SFR (P7, 0x96);                        // Port 7 Latch
  59      =3  SFR (SCON0, 0x98);                     // Serial Port UART0 Control
  60      =3  SFR (SBUF0, 0x99);                     // Serial Port UART0 Data Buffer
  61      =3  SFR (SPI0CFG, 0x9A);                   // SPI0 Configuration
  62      =3  SFR (SPI0DAT, 0x9B);                   // SPI0 Data
  63      =3  SFR (ADC1, 0x9C);                      // ADC1 Data
  64      =3  SFR (SPI0CKR, 0x9D);                   // SPI0 Clock Rate Control
  65      =3  SFR (CPT0CN, 0x9E);                    // Comparator 0 Control
  66      =3  SFR (CPT1CN, 0x9F);                    // Comparator 1 Control
  67      =3  SFR (P2, 0xA0);                        // Port 2 Latch
  68      =3  SFR (EMI0TC, 0xA1);                    // EMIF Timing Control
  69      =3  SFR (EMI0CF, 0xA3);                    // EMIF Configuration
  70      =3  SFR (P0MDOUT, 0xA4);                   // Port 0 Output Mode Configuration
  71      =3  SFR (P1MDOUT, 0xA5);                   // Port 1 Output Mode Configuration
  72      =3  SFR (P2MDOUT, 0xA6);                   // Port 2 Output Mode Configuration
  73      =3  SFR (P3MDOUT, 0xA7);                   // Port 3 Output Mode Configuration
  74      =3  SFR (IE, 0xA8);                        // Interrupt Enable
  75      =3  SFR (SADDR0, 0xA9);                    // Serial Port UART0 Slave Address
  76      =3  SFR (ADC1CN, 0xAA);                    // ADC1 Control
  77      =3  SFR (ADC1CF, 0xAB);                    // ADC1 Analog Mux Configuration
  78      =3  SFR (AMX1SL, 0xAC);                    // ADC1 Analog Mux Channel Select
  79      =3  SFR (P3IF, 0xAD);                      // Port 3 External Interrupt Flags
  80      =3  SFR (SADEN1, 0xAE);                    // Serial Port UART1 Slave Address Mask
  81      =3  SFR (EMI0CN, 0xAF);                    // EMIF Control
  82      =3  SFR (P3, 0xB0);                        // Port 3 Latch
  83      =3  SFR (OSCXCN, 0xB1);                    // External Oscillator Control
  84      =3  SFR (OSCICN, 0xB2);                    // Internal Oscillator Control
  85      =3  SFR (P74OUT, 0xB5);                    // Ports 4 - 7 Output Mode
  86      =3  SFR (FLSCL, 0xB6);                     // Flash Memory Timing Prescaler
  87      =3  SFR (FLACL, 0xB7);                     // Flash Acess Limit
  88      =3  SFR (IP, 0xB8);                        // Interrupt Priority
  89      =3  SFR (SADEN0, 0xB9);                    // Serial Port UART0 Slave Address Mask
  90      =3  SFR (AMX0CF, 0xBA);                    // ADC0 Mux Configuration
  91      =3  SFR (AMX0SL, 0xBB);                    // ADC0 Mux Channel Selection
  92      =3  SFR (ADC0CF, 0xBC);                    // ADC0 Configuration
  93      =3  SFR (P1MDIN, 0xBD);                    // Port 1 Input Mode
  94      =3  SFR (ADC0L, 0xBE);                     // ADC0 Data Low
  95      =3  SFR (ADC0H, 0xBF);                     // ADC0 Data High
  96      =3  SFR (SMB0CN, 0xC0);                    // SMBus0 Control
  97      =3  SFR (SMB0STA, 0xC1);                   // SMBus0 Status
  98      =3  SFR (SMB0DAT, 0xC2);                   // SMBus0 Data
  99      =3  SFR (SMB0ADR, 0xC3);                   // SMBus0 Slave Address
 100      =3  SFR (ADC0GTL, 0xC4);                   // ADC0 Greater-Than Register Low
 101      =3  SFR (ADC0GTH, 0xC5);                   // ADC0 Greater-Than Register High
 102      =3  SFR (ADC0LTL, 0xC6);                   // ADC0 Less-Than Register Low
 103      =3  SFR (ADC0LTH, 0xC7);                   // ADC0 Less-Than Register High
 104      =3  SFR (T2CON, 0xC8);                     // Timer/Counter 2 Control
 105      =3  SFR (T4CON, 0xC9);                     // Timer/Counter 4 Control
 106      =3  SFR (RCAP2L, 0xCA);                    // Timer/Counter 2 Capture Low
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 36  

 107      =3  SFR (RCAP2H, 0xCB);                    // Timer/Counter 2 Capture High
 108      =3  SFR (TL2, 0xCC);                       // Timer/Counter 2 Low
 109      =3  SFR (TH2, 0xCD);                       // Timer/Counter 2 High
 110      =3  SFR (SMB0CR, 0xCF);                    // SMBus0 Clock Rate
 111      =3  SFR (PSW, 0xD0);                       // Program Status Word
 112      =3  SFR (REF0CN, 0xD1);                    // Voltage Reference 0 Control
 113      =3  SFR (DAC0L, 0xD2);                     // DAC0 Register Low
 114      =3  SFR (DAC0H, 0xD3);                     // DAC0 Register High
 115      =3  SFR (DAC0CN, 0xD4);                    // DAC0 Control
 116      =3  SFR (DAC1L, 0xD5);                     // DAC1 Register Low
 117      =3  SFR (DAC1H, 0xD6);                     // DAC1 Register High
 118      =3  SFR (DAC1CN, 0xD7);                    // DAC1 Control
 119      =3  SFR (PCA0CN, 0xD8);                    // PCA0 Control
 120      =3  SFR (PCA0MD, 0xD9);                    // PCA0 Mode
 121      =3  SFR (PCA0CPM0, 0xDA);                  // PCA0 Module 0 Mode Register
 122      =3  SFR (PCA0CPM1, 0xDB);                  // PCA0 Module 1 Mode Register
 123      =3  SFR (PCA0CPM2, 0xDC);                  // PCA0 Module 2 Mode Register
 124      =3  SFR (PCA0CPM3, 0xDD);                  // PCA0 Module 3 Mode Register
 125      =3  SFR (PCA0CPM4, 0xDE);                  // PCA0 Module 4 Mode Register
 126      =3  SFR (ACC, 0xE0);                       // Accumulator
 127      =3  SFR (XBR0, 0xE1);                      // Port I/O Crossbar Control 0
 128      =3  SFR (XBR1, 0xE2);                      // Port I/O Crossbar Control 1
 129      =3  SFR (XBR2, 0xE3);                      // Port I/O Crossbar Control 2
 130      =3  SFR (RCAP4L, 0xE4);                    // Timer 4 Capture Register Low
 131      =3  SFR (RCAP4H, 0xE5);                    // Timer 4 Capture Register High
 132      =3  SFR (EIE1, 0xE6);                      // External Interrupt Enable 1
 133      =3  SFR (EIE2, 0xE7);                      // External Interrupt Enable 2
 134      =3  SFR (ADC0CN, 0xE8);                    // ADC0 Control
 135      =3  SFR (PCA0L, 0xE9);                     // PCA0 Counter Low
 136      =3  SFR (PCA0CPL0, 0xEA);                  // PCA0 Capture 0 Low
 137      =3  SFR (PCA0CPL1, 0xEB);                  // PCA0 Capture 1 Low
 138      =3  SFR (PCA0CPL2, 0xEC);                  // PCA0 Capture 2 Low
 139      =3  SFR (PCA0CPL3, 0xED);                  // PCA0 Capture 3 Low
 140      =3  SFR (PCA0CPL4, 0xEE);                  // PCA0 Capture 4 Low
 141      =3  SFR (RSTSRC, 0xEF);                    // Reset Source Configuration/Status
 142      =3  SFR (B, 0xF0);                         // B Register
 143      =3  SFR (SCON1, 0xF1);                     // Serial Port UART1 Control
 144      =3  SFR (SBUF1, 0xF2);                     // Serail Port UART1 Data
 145      =3  SFR (SADDR1, 0xF3);                    // Serail Port UART1 Slave Address
 146      =3  SFR (TL4, 0xF4);                       // Timer/Counter 4 Low
 147      =3  SFR (TH4, 0xF5);                       // Timer/Counter 4 High
 148      =3  SFR (EIP1, 0xF6);                      // External Interrupt Priority 1
 149      =3  SFR (EIP2, 0xF7);                      // External Interrupt Priority 2
 150      =3  SFR (SPI0CN, 0xF8);                    // SPI0 Control
 151      =3  SFR (PCA0H, 0xF9);                     // PCA0 Counter High
 152      =3  SFR (PCA0CPH0, 0xFA);                  // PCA0 Capture 0 High
 153      =3  SFR (PCA0CPH1, 0xFB);                  // PCA0 Capture 1 High
 154      =3  SFR (PCA0CPH2, 0xFC);                  // PCA0 Capture 2 High
 155      =3  SFR (PCA0CPH3, 0xFD);                  // PCA0 Capture 3 High
 156      =3  SFR (PCA0CPH4, 0xFE);                  // PCA0 Capture 4 High
 157      =3  SFR (WDTCN, 0xFF);                     // Watchdog Timer Control
 158      =3  
 159      =3  //-----------------------------------------------------------------------------
 160      =3  // 16-bit Register Definitions (might not be supported by all compilers)
 161      =3  //-----------------------------------------------------------------------------
 162      =3  
 163      =3  SFR16 (DP, 0x82);                      // Data Pointer
 164      =3  SFR16 (TMR3RL, 0x92);                  // Timer3 Reload Value
 165      =3  SFR16 (TMR3, 0x94);                    // Timer3 Counter
 166      =3  SFR16 (ADC0, 0xBE);                    // ADC0 Data
 167      =3  SFR16 (ADC0GT, 0xC4);                  // ADC0 Greater Than Window
 168      =3  SFR16 (ADC0LT, 0xC6);                  // ADC0 Less Than Window
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 37  

 169      =3  SFR16 (RCAP2, 0xCA);                   // Timer2 Capture/Reload
 170      =3  SFR16 (T2, 0xCC);                      // Timer2 Counter
 171      =3  SFR16 (TMR2RL, 0xCA);                  // Timer2 Capture/Reload
 172      =3  SFR16 (TMR2, 0xCC);                    // Timer2 Counter
 173      =3  SFR16 (RCAP4, 0xE4);                   // Timer4 Capture/Reload
 174      =3  SFR16 (T4, 0xF4);                      // Timer4 Counter
 175      =3  SFR16 (TMR4RL, 0xE4);                  // Timer4 Capture/Reload
 176      =3  SFR16 (TMR4, 0xF4);                    // Timer4 Counter
 177      =3  SFR16 (DAC0, 0xD2);                    // DAC0 Data
 178      =3  SFR16 (DAC1, 0xD5);                    // DAC1 Data
 179      =3  
 180      =3  //-----------------------------------------------------------------------------
 181      =3  // Address Definitions for bit-addressable SFRs
 182      =3  //-----------------------------------------------------------------------------
 183      =3  
 184      =3  #define SFR_P0       0x80
 185      =3  #define SFR_TCON     0x88
 186      =3  #define SFR_P1       0x90
 187      =3  #define SFR_SCON0    0x98
 188      =3  #define SFR_P2       0xA0
 189      =3  #define SFR_IE       0xA8
 190      =3  #define SFR_P3       0xB0
 191      =3  #define SFR_IP       0xB8
 192      =3  #define SFR_SMB0CN   0xC0
 193      =3  #define SFR_T2CON    0xC8
 194      =3  #define SFR_PSW      0xD0
 195      =3  #define SFR_PCA0CN   0xD8
 196      =3  #define SFR_ACC      0xE0
 197      =3  #define SFR_ADC0CN   0xE8
 198      =3  #define SFR_B        0xF0
 199      =3  #define SFR_SPI0CN   0xF8
 200      =3  
 201      =3  //-----------------------------------------------------------------------------
 202      =3  // Bit Definitions
 203      =3  //-----------------------------------------------------------------------------
 204      =3  
 205      =3  // TCON 0x88
 206      =3  SBIT (TF1, SFR_TCON, 7);               // Timer 1 Overflow Flag
 207      =3  SBIT (TR1, SFR_TCON, 6);               // Timer 1 On/Off Control
 208      =3  SBIT (TF0, SFR_TCON, 5);               // Timer 0 Overflow Flag
 209      =3  SBIT (TR0, SFR_TCON, 4);               // Timer 0 On/Off Control
 210      =3  SBIT (IE1, SFR_TCON, 3);               // Ext. Interrupt 1 Edge Flag
 211      =3  SBIT (IT1, SFR_TCON, 2);               // Ext. Interrupt 1 Type
 212      =3  SBIT (IE0, SFR_TCON, 1);               // Ext. Interrupt 0 Edge Flag
 213      =3  SBIT (IT0, SFR_TCON, 0);               // Ext. Interrupt 0 Type
 214      =3  
 215      =3  // SCON0 0x98
 216      =3  SBIT (SM00, SFR_SCON0, 7);             // Serial Mode Control Bit 0
 217      =3  SBIT (SM10, SFR_SCON0, 6);             // Serial Mode Control Bit 1
 218      =3  SBIT (SM20, SFR_SCON0, 5);             // Multiprocessor Communication Enable
 219      =3  SBIT (REN0, SFR_SCON0, 4);             // Receive Enable
 220      =3  SBIT (TB80, SFR_SCON0, 3);             // Transmit Bit 8
 221      =3  SBIT (RB80, SFR_SCON0, 2);             // Receive Bit 8
 222      =3  SBIT (TI0, SFR_SCON0, 1);              // Transmit Interrupt Flag
 223      =3  SBIT (RI0, SFR_SCON0, 0);              // Receive Interrupt Flag
 224      =3  
 225      =3  // IE 0xA8
 226      =3  SBIT (EA, SFR_IE, 7);                  // Global Interrupt Enable
 227      =3  SBIT (IEGF0, SFR_IE, 6);               // General Purpose Flag 0
 228      =3  SBIT (ET2, SFR_IE, 5);                 // Timer 2 Interrupt Enable
 229      =3  SBIT (ES0, SFR_IE, 4);                 // Uart0 Interrupt Enable
 230      =3  SBIT (ET1, SFR_IE, 3);                 // Timer 1 Interrupt Enable
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 38  

 231      =3  SBIT (EX1, SFR_IE, 2);                 // External Interrupt 1 Enable
 232      =3  SBIT (ET0, SFR_IE, 1);                 // Timer 0 Interrupt Enable
 233      =3  SBIT (EX0, SFR_IE, 0);                 // External Interrupt 0 Enable
 234      =3  
 235      =3  // IP 0xB8
 236      =3                                         // Bit7 UNUSED
 237      =3                                         // Bit6 UNUSED
 238      =3  SBIT (PT2, SFR_IP, 5);                 // Timer 2 Priority
 239      =3  SBIT (PS, SFR_IP, 4);                  // Serial Port Priority
 240      =3  SBIT (PT1, SFR_IP, 3);                 // Timer 1 Priority
 241      =3  SBIT (PX1, SFR_IP, 2);                 // External Interrupt 1 Priority
 242      =3  SBIT (PT0, SFR_IP, 1);                 // Timer 0 Priority
 243      =3  SBIT (PX0, SFR_IP, 0);                 // External Interrupt 0 Priority
 244      =3  
 245      =3  // SMB0CN 0xC0
 246      =3  SBIT (BUSY, SFR_SMB0CN, 7);            // SMBus 0 Busy
 247      =3  SBIT (ENSMB, SFR_SMB0CN, 6);           // SMBus 0 Enable
 248      =3  SBIT (STA, SFR_SMB0CN, 5);             // SMBus 0 Start Flag
 249      =3  SBIT (STO, SFR_SMB0CN, 4);             // SMBus 0 Stop Flag
 250      =3  SBIT (SI, SFR_SMB0CN, 3);              // SMBus 0 Interrupt Pending Flag
 251      =3  SBIT (AA, SFR_SMB0CN, 2);              // SMBus 0 Assert/Acknowledge Flag
 252      =3  SBIT (SMBFTE, SFR_SMB0CN, 1);          // SMBus 0 Free Timer Enable
 253      =3  SBIT (SMBTOE, SFR_SMB0CN, 0);          // SMBus 0 Timeout Enable
 254      =3  
 255      =3  // T2CON 0xC8
 256      =3  SBIT (TF2, SFR_T2CON, 7);              // Timer 2 Overflow Flag
 257      =3  SBIT (EXF2, SFR_T2CON, 6);             // External Flag
 258      =3  SBIT (RCLK0, SFR_T2CON, 5);            // Uart0 Rx Clock Source
 259      =3  SBIT (TCLK0, SFR_T2CON, 4);            // Uart0 Tx Clock Source
 260      =3  SBIT (EXEN2, SFR_T2CON, 3);            // Timer 2 External Enable Flag
 261      =3  SBIT (TR2, SFR_T2CON, 2);              // Timer 2 On/Off Control
 262      =3  SBIT (CT2, SFR_T2CON, 1);              // Timer Or Counter Select
 263      =3  SBIT (CPRL2, SFR_T2CON, 0);            // Capture Or Reload Select
 264      =3  
 265      =3  //  PSW 0xD0
 266      =3  SBIT (CY, SFR_PSW, 7);                 // Carry Flag
 267      =3  SBIT (AC, SFR_PSW, 6);                 // Auxiliary Carry Flag
 268      =3  SBIT (F0, SFR_PSW, 5);                 // User Flag 0
 269      =3  SBIT (RS1, SFR_PSW, 4);                // Register Bank Select 1
 270      =3  SBIT (RS0, SFR_PSW, 3);                // Register Bank Select 0
 271      =3  SBIT (OV, SFR_PSW, 2);                 // Overflow Flag
 272      =3  SBIT (F1, SFR_PSW, 1);                 // User Flag 1
 273      =3  SBIT (P, SFR_PSW, 0);                  // Accumulator Parity Flag
 274      =3  
 275      =3  // PCA0CN 0xD8
 276      =3  SBIT (CF, SFR_PCA0CN, 7);              // PCA 0 Counter Overflow Flag
 277      =3  SBIT (CR, SFR_PCA0CN, 6);              // PCA 0 Counter Run Control Bit
 278      =3                                         // Bit5 UNUSED
 279      =3  SBIT (CCF4, SFR_PCA0CN, 4);            // PCA 0 Module 4 Interrupt Flag
 280      =3  SBIT (CCF3, SFR_PCA0CN, 3);            // PCA 0 Module 3 Interrupt Flag
 281      =3  SBIT (CCF2, SFR_PCA0CN, 2);            // PCA 0 Module 2 Interrupt Flag
 282      =3  SBIT (CCF1, SFR_PCA0CN, 1);            // PCA 0 Module 1 Interrupt Flag
 283      =3  SBIT (CCF0, SFR_PCA0CN, 0);            // PCA 0 Module 0 Interrupt Flag
 284      =3  
 285      =3  // ADC0CN 0xE8
 286      =3  SBIT (AD0EN, SFR_ADC0CN, 7);           // ADC 0 Enable
 287      =3  SBIT (AD0TM, SFR_ADC0CN, 6);           // ADC 0 Track Mode
 288      =3  SBIT (AD0INT, SFR_ADC0CN, 5);          // ADC 0 Converision Complete Interrupt Flag
 289      =3  SBIT (AD0BUSY, SFR_ADC0CN, 4);         // ADC 0 Busy Flag
 290      =3  SBIT (AD0CM1, SFR_ADC0CN, 3);          // ADC 0 Start Of Conversion Mode Bit 1
 291      =3  SBIT (AD0CM0, SFR_ADC0CN, 2);          // ADC 0 Start Of Conversion Mode Bit 0
 292      =3  SBIT (AD0WINT, SFR_ADC0CN, 1);         // ADC 0 Window Compare Interrupt Flag
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 39  

 293      =3  SBIT (AD0LJST, SFR_ADC0CN, 0);         // ADC 0 Right Justify Data Bit
 294      =3  
 295      =3  // SPI0CN 0xF8
 296      =3  SBIT (SPIF, SFR_SPI0CN, 7);            // SPI 0 Interrupt Flag
 297      =3  SBIT (WCOL, SFR_SPI0CN, 6);            // SPI 0 Write Collision Flag
 298      =3  SBIT (MODF, SFR_SPI0CN, 5);            // SPI 0 Mode Fault Flag
 299      =3  SBIT (RXOVRN, SFR_SPI0CN, 4);          // SPI 0 Rx Overrun Flag
 300      =3  SBIT (TXBSY, SFR_SPI0CN, 3);           // SPI 0 Tx Busy Flag
 301      =3  SBIT (SLVSEL, SFR_SPI0CN, 2);          // SPI 0 Slave Select
 302      =3  SBIT (MSTEN, SFR_SPI0CN, 1);           // SPI 0 Master Enable
 303      =3  SBIT (SPIEN, SFR_SPI0CN, 0);           // SPI 0 SPI Enable
 304      =3  
 305      =3  //-----------------------------------------------------------------------------
 306      =3  // Interrupt Priorities
 307      =3  //-----------------------------------------------------------------------------
 308      =3  
 309      =3  #define INTERRUPT_INT0           0     // External Interrupt 0
 310      =3  #define INTERRUPT_TIMER0         1     // Timer0 Overflow
 311      =3  #define INTERRUPT_INT1           2     // External Interrupt 1
 312      =3  #define INTERRUPT_TIMER1         3     // Timer1 Overflow
 313      =3  #define INTERRUPT_UART0          4     // Serial Port UART0
 314      =3  #define INTERRUPT_TIMER2         5     // Timer2 Overflow
 315      =3  #define INTERRUPT_SPI0           6     // SPI0 Interface
 316      =3  #define INTERRUPT_SMBUS0         7     // SMBus0 Interface
 317      =3  #define INTERRUPT_ADC0_WINDOW    8     // ADC0 Window Comparison
 318      =3  #define INTERRUPT_PCA0           9     // PCA0 Peripheral
 319      =3  #define INTERRUPT_COMPARATOR0F   10    // Comparator0 Falling Edge
 320      =3  #define INTERRUPT_COMPARATOR0R   11    // Comparator0 Rising Edge
 321      =3  #define INTERRUPT_COMPARATOR1F   12    // Comparator1 Falling Edge
 322      =3  #define INTERRUPT_COMPARATOR1R   13    // Comparator1 Rising Edge
 323      =3  #define INTERRUPT_TIMER3         14    // Timer3 Overflow
 324      =3  #define INTERRUPT_ADC0_EOC       15    // ADC0 End Of Conversion
 325      =3  #define INTERRUPT_TIMER4         16    // Timer4 Overflow
 326      =3  #define INTERRUPT_ADC1_EOC       17    // ADC1 End Of Conversion
 327      =3  #define INTERRUPT_INT6           18    // External Interrupt 6
 328      =3  #define INTERRUPT_INT7           19    // External Interrupt 7
 329      =3  #define INTERRUPT_UART1          20    // Serial Port UART1
 330      =3  #define INTERRUPT_XTAL_READY     21    // External Crystal Oscillator Ready
 331      =3  
 332      =3  //-----------------------------------------------------------------------------
 333      =3  // SDCC PDATA External Memory Paging Support
 334      =3  //-----------------------------------------------------------------------------
 335      =3  
 336      =3  #if defined SDCC
           =3 
           =3 SFR(_XPAGE, 0xAF); // Point to the EMI0CN register
           =3 
           =3 #endif
 341      =3  
 342      =3  //-----------------------------------------------------------------------------
 343      =3  // Header File PreProcessor Directive
 344      =3  //-----------------------------------------------------------------------------
 345      =3  
 346      =3  #endif                                 // #define C8051F020_DEFS_H
 347      =3  
 348      =3  //-----------------------------------------------------------------------------
 349      =3  // End Of File
 350      =3  //-----------------------------------------------------------------------------
  84      =2  /*****************************************************************************/
  85      =2  #include <stdio.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDIO.H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 40  

   3      =3  
   4      =3  Prototypes for standard I/O functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __STDIO_H__
  10      =3  #define __STDIO_H__
  11      =3  
  12      =3  #ifndef EOF
  13      =3   #define EOF -1
  14      =3  #endif
  15      =3  
  16      =3  #ifndef NULL
           =3  #define NULL ((void *) 0)
           =3 #endif
  19      =3  
  20      =3  #ifndef _SIZE_T
  21      =3   #define _SIZE_T
  22      =3   typedef unsigned int size_t;
  23      =3  #endif
  24      =3  
  25      =3  #pragma SAVE
  26      =3  #pragma REGPARMS
  27      =3  extern char _getkey (void);
  28      =3  extern char getchar (void);
  29      =3  extern char ungetchar (char);
  30      =3  extern char putchar (char);
  31      =3  extern int printf   (const char *, ...);
  32      =3  extern int sprintf  (char *, const char *, ...);
  33      =3  extern int vprintf  (const char *, char *);
  34      =3  extern int vsprintf (char *, const char *, char *);
  35      =3  extern char *gets (char *, int n);
  36      =3  extern int scanf (const char *, ...);
  37      =3  extern int sscanf (char *, const char *, ...);
  38      =3  extern int puts (const char *);
  39      =3  
  40      =3  #pragma RESTORE
  41      =3  
  42      =3  #endif
  43      =3  
  86      =2  #include <stdlib.h> 
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDLIB.H
   3      =3  
   4      =3  Standard functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STDLIB_H__
  11      =3  #define __STDLIB_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 41  

  21      =3  
  22      =3  #ifndef _WCHAR_T_DEFINED_
  23      =3  #define _WCHAR_T_DEFINED_
  24      =3  typedef char wchar_t;
  25      =3  #endif
  26      =3  
  27      =3  #if defined (__CX2__)
           =3 #ifndef _DIV_T_DEFINED
           =3 typedef struct _div_t {
           =3         int quot;
           =3         int rem;
           =3 } div_t;
           =3 typedef struct _ldiv_t {
           =3         long quot;
           =3         long rem;
           =3 } ldiv_t;
           =3 #define _DIV_T_DEFINED
           =3 #endif // _DIV_T_DEFINED
           =3 #endif // __CX2__
  40      =3  
  41      =3  #ifndef RAND_MAX
  42      =3   #define RAND_MAX  32767u
  43      =3  #endif
  44      =3  
  45      =3  #if defined (__CX2__)
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif // __CX2__
  52      =3  
  53      =3  #pragma SAVE
  54      =3  #pragma REGPARMS
  55      =3  
  56      =3  extern char   cabs (char  val);
  57      =3  #if !defined (__CX2__)
  58      =3  extern int    abs  (int   val);
  59      =3  #endif // __CX2__
  60      =3  extern long   labs (long  val);
  61      =3  
  62      =3  extern float  atof (const char *s1);
  63      =3  extern long   atol (const char *s1);
  64      =3  extern int    atoi (const char *s1);
  65      =3  extern int    rand (void);
  66      =3  extern void   srand (unsigned int seed);
  67      =3  
  68      =3  #ifdef _DIV_T_DEFINED
           =3 extern div_t  __div (int numer, int denom);
           =3 #define div(numer,denom)  __div((numer),(denom));
           =3 extern ldiv_t ldiv (long numer, long denom);
           =3 #endif // _DIV_T_DEFINED
  73      =3  
  74      =3  extern float         strtod  (const char *nptr, char **endptr);
  75      =3  extern long          strtol  (const char *nptr, char **endptr, unsigned char base);
  76      =3  extern unsigned long strtoul (const char *nptr, char **endptr, unsigned char base);
  77      =3  
  78      =3  #define _MALLOC_MEM_    xdata
  79      =3  
  80      =3  extern void init_mempool          (void _MALLOC_MEM_ *p, size_t size);
  81      =3  extern void _MALLOC_MEM_ *malloc  (size_t size);
  82      =3  extern void free                  (void _MALLOC_MEM_ *p);
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 42  

  83      =3  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, size_t size);
  84      =3  extern void _MALLOC_MEM_ *calloc  (size_t nmemb, size_t size);
  85      =3  
  86      =3  #if defined (__CX2__)
           =3 extern void abort(void);
           =3 #endif // __CX2__
  89      =3  
  90      =3  #pragma RESTORE
  91      =3  
  92      =3  #endif // __STDLIB_H__
  87      =2  #include <string.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STRING.H
   3      =3  
   4      =3  String functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STRING_H__
  11      =3  #define __STRING_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #pragma SAVE
  23      =3  #pragma REGPARMS
  24      =3  extern char  *strcat  (char *s1, const char *s2);
  25      =3  extern char  *strncat (char *s1, const char *s2, size_t n);
  26      =3  
  27      =3  extern char   strcmp  (const char *s1, const char *s2);
  28      =3  extern char   strncmp (const char *s1, const char *s2, size_t n);
  29      =3  
  30      =3  extern char  *strcpy  (char *s1, const char *s2);
  31      =3  extern char  *strncpy (char *s1, const char *s2, size_t n);
  32      =3  
  33      =3  extern size_t strlen  (const char *);
  34      =3  
  35      =3  extern char  *strchr  (const char *s, char c);
  36      =3  extern int    strpos  (const char *s, char c);
  37      =3  extern char  *strrchr (const char *s, char c);
  38      =3  extern int    strrpos (const char *s, char c);
  39      =3  
  40      =3  extern size_t strspn  (const char *s, const char *set);
  41      =3  extern size_t strcspn (const char *s, const char *set);
  42      =3  extern char  *strpbrk (const char *s, const char *set);
  43      =3  extern char  *strrpbrk(const char *s, const char *set);
  44      =3  extern char  *strstr  (const char *s, const char *sub);
  45      =3  extern char  *strtok  (char *str, const char *set);
  46      =3  
  47      =3  extern char   memcmp  (const void *s1, const void *s2, size_t n);
  48      =3  extern void  *memcpy  (void *s1, const void *s2, size_t n);
  49      =3  extern void  *memchr  (const void *s, char val, size_t n);
  50      =3  extern void  *memccpy (void *s1, const void *s2, char val, size_t n);
  51      =3  extern void  *memmove (void *s1, const void *s2, size_t n);
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 43  

  52      =3  extern void  *memset  (void *s, char val, size_t n);
  53      =3  #pragma RESTORE
  54      =3  
  55      =3  #endif
  88      =2  #include <INTRINS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  INTRINS.H
   3      =3  
   4      =3  Intrinsic functions for C51.
   5      =3  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __INTRINS_H__
  10      =3  #define __INTRINS_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  
  14      =3  #if defined (__CX2__)
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 #endif
  18      =3  
  19      =3  extern void          _nop_     (void);
  20      =3  extern bit           _testbit_ (bit);
  21      =3  extern unsigned char _cror_    (unsigned char, unsigned char);
  22      =3  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  23      =3  extern unsigned long _lror_    (unsigned long, unsigned char);
  24      =3  extern unsigned char _crol_    (unsigned char, unsigned char);
  25      =3  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  26      =3  extern unsigned long _lrol_    (unsigned long, unsigned char);
  27      =3  extern unsigned char _chkfloat_(float);
  28      =3  #if defined (__CX2__)
           =3 extern int           abs       (int);
           =3 extern void          _illop_   (void);
           =3 #endif
  32      =3  #if !defined (__CX2__)
  33      =3  extern void          _push_    (unsigned char _sfr);
  34      =3  extern void          _pop_     (unsigned char _sfr);
  35      =3  #endif
  36      =3  
  37      =3  #pragma RESTORE
  38      =3  
  39      =3  #endif
  40      =3  
  89      =2  #include <ctype.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  CTYPE.H
   3      =3  
   4      =3  Prototypes for character functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __CTYPE_H__
  10      =3  #define __CTYPE_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  #pragma REGPARMS
  14      =3  extern bit isalpha (unsigned char);
  15      =3  extern bit isalnum (unsigned char);
  16      =3  extern bit iscntrl (unsigned char);
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 44  

  17      =3  extern bit isdigit (unsigned char);
  18      =3  extern bit isgraph (unsigned char);
  19      =3  extern bit isprint (unsigned char);
  20      =3  extern bit ispunct (unsigned char);
  21      =3  extern bit islower (unsigned char);
  22      =3  extern bit isupper (unsigned char);
  23      =3  extern bit isspace (unsigned char);
  24      =3  extern bit isxdigit (unsigned char);
  25      =3  extern unsigned char tolower (unsigned char);
  26      =3  extern unsigned char toupper (unsigned char);
  27      =3  extern unsigned char toint (unsigned char);
  28      =3  
  29      =3  #define _tolower(c) ( (c)-'A'+'a' )
  30      =3  #define _toupper(c) ( (c)-'a'+'A' )
  31      =3  #define toascii(c)  ( (c) & 0x7F )
  32      =3  #pragma RESTORE
  33      =3  
  34      =3  #endif
  90      =2  #include <LIMITS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  LIMITS.H
   3      =3  
   4      =3  ANSI standard include file.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2009 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __LIMITS_H__
  11      =3  #define __LIMITS_H__
  12      =3  
  13      =3  #define CHAR_BIT         8              /* Number of bits in any "char" */
  14      =3  #define CHAR_MAX         127            /* Max             "char" value */
  15      =3  #define CHAR_MIN       (-128)           /* Min             "char" value */
  16      =3  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  17      =3  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
  18      =3  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  19      =3  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  20      =3  #define SHRT_MIN       (-32767-1)       /* Min ("signed") "short" value */
  21      =3  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  22      =3  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  23      =3  #define INT_MIN        (-32767-1)       /* Min ("signed")   "int" value */
  24      =3  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  25      =3  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  26      =3  #define LONG_MIN   (-2147483647L-1L)    /* Min ("signed")  "long" value */
  27      =3  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
  28      =3  
  29      =3  #endif
  91      =2  #include <math.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  MATH.H
   3      =3  
   4      =3  Prototypes for mathematic functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __MATH_H__
  11      =3  #define __MATH_H__
  12      =3  
  13      =3  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 45  

           =3 #ifndef HUGE_VAL
           =3 #define HUGE_VAL __inf__
           =3 #endif // HUGE_VAL
           =3 
           =3 #ifndef NAN
           =3 #define NAN __nan__
           =3 #endif // NAN
           =3 
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif
  28      =3  
  29      =3  #pragma SAVE
  30      =3  #pragma REGPARMS
  31      =3  #if !defined (__CX2__)
  32      =3  extern char  cabs  (char  val);
  33      =3  extern int    abs  (int   val);
  34      =3  extern long  labs  (long  val);
  35      =3  #endif
  36      =3  
  37      =3  extern float fabs  (float val);
  38      =3  extern float sqrt  (float val);
  39      =3  extern float exp   (float val);
  40      =3  extern float log   (float val);
  41      =3  extern float log10 (float val);
  42      =3  extern float sin   (float val);
  43      =3  extern float cos   (float val);
  44      =3  extern float tan   (float val);
  45      =3  extern float asin  (float val);
  46      =3  extern float acos  (float val);
  47      =3  extern float atan  (float val);
  48      =3  extern float sinh  (float val);
  49      =3  extern float cosh  (float val);
  50      =3  extern float tanh  (float val);
  51      =3  extern float atan2 (float y, float x);
  52      =3  
  53      =3  extern float ceil  (float val);
  54      =3  extern float floor (float val);
  55      =3  extern float modf  (float val, float *n);
  56      =3  extern float fmod  (float x, float y);
  57      =3  extern float pow   (float x, float y);
  58      =3  
  59      =3  #if defined (__CX2__)
           =3 extern float frexp (float val, int *exp);
           =3 extern float ldexp (float val, int exp);
           =3 #endif
  63      =3  
  64      =3  #pragma RESTORE
  65      =3  
  66      =3  #endif
  92      =2  #include "crc32.h"
   1      =3  #ifndef __CRC32_H__
   2      =3  #define __CRC32_H__
   3      =3  
   4      =3  //#ifdef __cplusplus
   5      =3  //extern "C" {
   6      =3  //#endif
   7      =3  /*****************************************************************************/
   8      =3  #include "AppConfig.h"
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 46  

   1      =4  #ifndef __APPCONFIG_H__
           =4 #define __APPCONFIG_H__
           =4 /*****************************************************************************/
           =4 #define CONFIG_SYSCLK                       (22118400L)
           =4 #ifdef C8051F020
           =4 #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
           =4 #endif
           =4 #define CONFIG_DEBUG                        0//调试功能
           =4 #define CONFIG_USING_WDT                                        0//使能看门狗
           =4 #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
           =4 #define CONFIG_VERSION                                          0x0001
           =4 #define CONFIG_CHECK_CODE                                       0x5A00
           =4 #define CONFIG_USING_SIMULATION                         1
           =4 /*****************************************************************************/
           =4 #define CONFIG_UART0_BAUDRATE                           57600//串口波特率
           =4 #define CONFIG_UART0_PARITY                                     NONE
           =4 #define CONFIG_UART0_STOPBIT                            1
           =4 #define CONFIG_UART0_DATABIT                            8
           =4 
           =4 #define CONFIG_UART1_BAUDRATE                           9600//串口波特率
           =4 #define CONFIG_UART1_PARITY                                     NONE
           =4 #define CONFIG_UART1_STOPBIT                            1
           =4 #define CONFIG_UART1_DATABIT                            8
           =4 /*****************************************************************************/
           =4 #define CONFIG_I2C0_FREQ                                        1               
           =4 /*****************************************************************************/
           =4 #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
           =4 #define CONFIG_AT24C02_SIZE                             256
           =4 #define CONFIG_AT24C04_SIZE                             512
           =4 #define CONFIG_AT24C08_SIZE                             1024
           =4 #define CONFIG_AT24C16_SIZE                             2048
           =4 #define CONFIG_AT24C32_SIZE                             4096
           =4 #define CONFIG_AT24C64_SIZE                                     8192
           =4 #define CONFIG_AT24C128_SIZE                            16384
           =4 #define CONFIG_AT24C256_SIZE                            32768
           =4 #define CONFIG_EPROM_ADDRESS                            0x50
           =4 #define CONFIG_EPROM_FRAM                                       0//铁电存储体无写入等待
           =4 #define CONFIG_EPROM_PAGEWRITE                          0//页写入
           =4 /*****************************************************************************/
           =4 //SPLC设置
           =4 #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
           =4 #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_WDT                           0//看门狗启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_EPROM                         1//EPROM掉电存储启用
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_ADC                           1//使能ADC模块
           =4 #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
           =4 #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
           =4 #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
           =4 #define CONFIG_SPLC_ADC_INTERNAL_VREF           2200L// ADC Voltage Reference (mV)
           =4 #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
           =4 /*****************************************************************************/
           =4 #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 47  

           =4 #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
           =4 #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
           =4 #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
           =4 #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
           =4 #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
           =4 /*****************************************************************************/
           =4 /*****************************************************************************/
           =4 #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
           =4 #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
           =4 #define DISABLE_INTERRUPT                                       EA = 0;
           =4 #define ENABLE_INTERRUPT                                        EA = 1;
           =4 /*****************************************************************************/
           =4 #define BOX_CMD_STX                                                     0x81
           =4 #define BOX_CMD_ETX                                                     0x84
           =4 /*****************************************************************************/
           =4 #include "stdint.h"
           =4 #include "stdbool.h"
           =4 #include "endian.h"
           =4 #include "si_toolchain.h"
           =4 #include "compiler_defs.h"
           =4 #include "C8051F020_defs.h"
           =4 /*****************************************************************************/
           =4 #include <stdio.h>
           =4 #include <stdlib.h> 
           =4 #include <string.h>
           =4 #include <INTRINS.H>
           =4 #include <ctype.h>
           =4 #include <LIMITS.H>
           =4 #include <math.h>
           =4 #include "crc32.h"
           =4 /*****************************************************************************/
           =4 #include "InitDeviceF020.h"
           =4 #include "delay.h"
           =4 #include "i2c0.h"
           =4 #include "eprom.h"
           =4 #include "dac8568_0.h"
           =4 #include "dac8568_1.h"
           =4 #include "dac8568_2.h"
           =4 #include "dac8568_3.h"
           =4 #include "boxCmd.h"
           =4 /*****************************************************************************/
           =4 #include "Modbus.h"
           =4 #include "ModbusPort.h"
           =4 /*****************************************************************************/
           =4 #include "sPLC.h"
           =4 /*****************************************************************************/
           =4 #endif
   9      =3  /*****************************************************************************/
  10      =3  uint32_t crc32Calculate(uint8_t *buf, uint32_t len);//CRC32 计算数组
  11      =3  uint32_t crc32CalculateAdd(uint8_t dat);//CRC32 计算连续字节
  12      =3  void crc32Clear(void);//清空旧CRC32结果
  13      =3  void crc32SetCrcOld(uint32_t old);
  14      =3  /*****************************************************************************/
  15      =3  //#ifdef __cplusplus
  16      =3  //}
  17      =3  //#endif
  18      =3  #endif
  19      =3  
  20      =3  
  21      =3  
  93      =2  /*****************************************************************************/
  94      =2  #include "InitDeviceF020.h"
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 48  

   1      =3  #ifndef __INITDEVICEF020_H__
   2      =3  #define __INITDEVICEF020_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
           =2 #include "delay.h"
           =2 #include "i2c0.h"
           =2 #include "eprom.h"
           =2 #include "dac8568_0.h"
           =2 #include "dac8568_1.h"
           =2 #include "dac8568_2.h"
           =2 #include "dac8568_3.h"
           =2 #include "boxCmd.h"
           =2 /*****************************************************************************/
           =2 #include "Modbus.h"
           =2 #include "ModbusPort.h"
           =2 /*****************************************************************************/
           =2 #include "sPLC.h"
           =2 /*****************************************************************************/
           =2 #endif
   4      =3  #ifndef __INITDEVICEF020_H__
   4      =3  #define __INITDEVICEF020_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void initDeviceF020(void);
   7      =3  #endif
   1      =3  #ifndef __DELAY_H__
   2      =3  #define __DELAY_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __DELAY_H__
   4      =3  #define __DELAY_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void delayMs(uint8_t ms) reentrant;
   7      =3  void delayUs(uint8_t us) reentrant;
   8      =3  void hwDelayInit(uint8_t reload_h, uint8_t reload_l);
   9      =3  void hwDelay(uint8_t control, uint8_t reload_h, uint8_t reload_l);
  10      =3  /*****************************************************************************/
  11      =3  #endif
  12      =3  
   1      =3  #ifndef __I2C0_H__
   2      =3  #define __I2C0_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C0_H__
   4      =3  #define __I2C0_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic0Init(void);
   9      =3  void iic0Start(void);
  10      =3  void iic0Stop(void);
  11      =3  uint8_t iic0WaitAck(void);
  12      =3  void iic0Ack(void);
  13      =3  void iic0NAck(void);
  14      =3  void iic0SendByte(uint8_t txd);
  15      =3  uint8_t iic0ReadByte(uint8_t ack);
  16      =3  
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 49  

  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __EPROM_H__
   2      =3  #define __EPROM_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __EPROM_H__
   4      =3  #define __EPROM_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  /*****************************************************************************/
   7      =3  void epromInit(void);
   8      =3  uint8_t epromReadOneByte(uint16_t ReadAddr);
   9      =3  void epromWriteOneByte(uint16_t WriteAddr, uint8_t DataToWrite);
  10      =3  void epromWriteLenByte(uint16_t WriteAddr, uint32_t DataToWrite, uint8_t Len);
  11      =3  uint32_t epromReadLenByte(uint16_t ReadAddr, uint8_t Len);
  12      =3  void epromRead(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead);
  13      =3  void epromWrite(uint16_t WriteAddr, uint8_t *pBuffer, uint16_t NumToWrite);
  14      =3  void epromTest(void);
  15      =3  #endif
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_0_Init(void);
   4      =3  void dac8568_0_Update(uint8_t ch);
   5      =3  void dac8568_0_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_0_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_0_Clear(void);
   8      =3  void dac8568_0_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_1_Init(void);
   4      =3  void dac8568_1_Update(uint8_t ch);
   5      =3  void dac8568_1_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_1_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_1_Clear(void);
   8      =3  void dac8568_1_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_2_Init(void);
   4      =3  void dac8568_2_Update(uint8_t ch);
   5      =3  void dac8568_2_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_2_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_2_Clear(void);
   8      =3  void dac8568_2_Reset(void);
   1      =3  #include "appConfig.h"
   1      =3  #include "appConfig.h"
   2      =3  /*****************************************************************************/
   3      =3  void dac8568_3_Init(void);
   4      =3  void dac8568_3_Update(uint8_t ch);
   5      =3  void dac8568_3_WriteInputRegister(uint8_t ch, uint16_t dat);
   6      =3  void dac8568_3_WriteDacRegister(uint8_t ch, uint16_t dat);
   7      =3  void dac8568_3_Clear(void);
   8      =3  void dac8568_3_Reset(void);
   1      =3  #ifndef __BOXCMD_H__
   2      =3  #define __BOXCMD_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 50  

   4      =3  #ifndef __BOXCMD_H__
   4      =3  #define __BOXCMD_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void initboxSerial(uint32_t baudrate);
   7      =3  void boxRedLedRefresh(void);
   8      =3  void boxGreenLedRefresh(void);
   9      =3  #endif
   1      =3  #ifndef __MODBUS__H__
   2      =3  #define __MODBUS__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUS__H__
   4      =3  #define __MODBUS__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern volatile uint16_t modbusTimerValue;
   7      =3  extern volatile uint8_t modbusReceiveCounter;// Collected data number
   8      =3  extern xdata volatile uint8_t modbusReceiveBuffer[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];
   9      =3  /*****************************************************************************/
  10      =3  extern void initModbus(uint8_t modbusSlaveAddress, uint32_t bd);
  11      =3  extern void modbusPorcess(void);
  12      =3  #endif
   1      =3  #ifndef __MODBUSPORT__H__
   2      =3  #define __MODBUSPORT__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUSPORT__H__
   4      =3  #define __MODBUSPORT__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern void modBusUartInitialise(uint32_t baudrate);
   7      =3  extern void modBusTimerInitialise(void);
   8      =3  extern void modBusUartPutch(uint8_t c);
   9      =3  extern uint8_t modBusUartString(uint8_t *s, uint16_t Length);
  10      =3  extern void receiveInterrupt(uint8_t Data);
  11      =3  /*****************************************************************************/
  12      =3  #endif
   1      =3  #ifndef __SPLC_H__
           =3 #define __SPLC_H__
           =3 /*****************************************************************************/
           =3 #include "appConfig.h"
           =3 /*****************************************************************************/
           =3 //线圈 保持 4 * 16 = 64BIT
           =3 #define MR_START                                                0
           =3 #define MR_END                                                  3
           =3 //线圈寄存器 非保持 4 * 16 = 64BIT
           =3 #define R_START                                                 4
           =3 #define R_END                                                   7
           =3 //数据寄存器 保持 8
           =3 #define DM_START                                                8
           =3 #define DM_END                                                  15
           =3 //数据寄存器 非保持 128个字
           =3 #define EM_START                                                16
           =3 #define EM_END                                                  143
           =3 //延时线圈
           =3 //1MS 1 * 16 = 16BIT
           =3 #define T_1MS_START                                             144
           =3 #define T_1MS_END                                               144
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 51  

           =3 //10MS 1 * 16 = 16BIT
           =3 #define T_10MS_START                                    145
           =3 #define T_10MS_END                                              145
           =3 //100MS 1 * 16 = 16BIT
           =3 #define T_100MS_START                                   146
           =3 #define T_100MS_END                                             146
           =3 //延时计时器 
           =3 //1MS 32
           =3 #define TD_1MS_START                                    147
           =3 #define TD_1MS_END                                              162
           =3 //10MS 32
           =3 #define TD_10MS_START                                   163
           =3 #define TD_10MS_END                                             178
           =3 //100MS 32
           =3 #define TD_100MS_START                                  179
           =3 #define TD_100MS_END                                    194
           =3 //计数器 1
           =3 #define C_START                                                 195
           =3 #define C_END                                                   195
           =3 //输入位寄存器 1 * 16 = 128个
           =3 #define X_START                                                 196
           =3 #define X_END                                                   196                     
           =3 //输出位寄存器 1 * 16 = 128个
           =3 #define Y_START                                                 197
           =3 #define Y_END                                                   197
           =3 //特殊寄存器 4个字
           =3 #define SPREG_START                                             198
           =3 #define SPREG_END                                               201
           =3 //特殊线圈      4 * 16 = 64个
           =3 #define SPCOIL_START                                    202
           =3 #define SPCOIL_END                                              205
           =3 /*****************************************************************************/
           =3 #define EM_ADC_0                                                (EM_START + 0)//ADC0->MLD0
           =3 #define EM_ADC_1                                                (EM_START + 1)//ADC1->MLD1
           =3 #define EM_ADC_2                                                (EM_START + 2)//ADC2->MLD2
           =3 #define EM_ADC_3                                                (EM_START + 3)//ADC3->MLD3
           =3 #define EM_ADC_4                                                (EM_START + 4)//ADC4->MLD4
           =3 #define EM_ADC_5                                                (EM_START + 5)//ADC5->MLD5
           =3 #define EM_ADC_6                                                (EM_START + 6)//ADC6->MLD6
           =3 #define EM_ADC_7                                                (EM_START + 7)//ADC7->MLD7
           =3 #define EM_ADC_8                                                (EM_START + 8)//ADC8->MLD8
           =3 #define EM_ADC_9                                                (EM_START + 9)//ADC9->MLD9
           =3 #define EM_ADC_10                                               (EM_START + 10)//ADC10->MLD10
           =3 #define EM_ADC_11                                               (EM_START + 11)//ADC11->MLD11
           =3 #define EM_ADC_12                                               (EM_START + 12)//ADC12->MLD12
           =3 #define EM_ADC_13                                               (EM_START + 13)//ADC13->MLD13
           =3 #define EM_ADC_14                                               (EM_START + 14)//ADC14->MLD14
           =3 #define EM_ADC_15                                               (EM_START + 15)//ADC15->MLD15
           =3 #define EM_ADC_16                                               (EM_START + 16)//ADC16->MLD16
           =3 #define EM_ADC_17                                               (EM_START + 17)//ADC17->MLD17
           =3 #define EM_ADC_18                                               (EM_START + 18)//ADC18->MLD18
           =3 #define EM_ADC_19                                               (EM_START + 19)//ADC19->MLD19
           =3 #define EM_ADC_20                                               (EM_START + 20)//ADC20->MLD20
           =3 #define EM_ADC_21                                               (EM_START + 21)//ADC21->MLD21
           =3 #define EM_ADC_22                                               (EM_START + 22)//ADC22->MLD22
           =3 #define EM_ADC_23                                               (EM_START + 23)//ADC23->MLD23
           =3 #define EM_ADC_24                                               (EM_START + 24)//ADC24->MLD24
           =3 #define EM_ADC_25                                               (EM_START + 25)//ADC25->MLD25
           =3 #define EM_ADC_26                                               (EM_START + 26)//ADC26->MLD26
           =3 #define EM_ADC_27                                               (EM_START + 27)//ADC27->MLD27
           =3 #define EM_ADC_28                                               (EM_START + 28)//ADC28->MLD28
           =3 #define EM_ADC_29                                               (EM_START + 29)//ADC29->MLD29
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 52  

           =3 #define EM_ADC_30                                               (EM_START + 30)//ADC30->MLD30
           =3 #define EM_ADC_31                                               (EM_START + 31)//ADC31->MLD31
           =3 #define EM_ADC_32                                               (EM_START + 32)//ADC32->MPD0
           =3 #define EM_ADC_33                                               (EM_START + 33)//ADC33->MPD1
           =3 #define EM_ADC_34                                               (EM_START + 34)//ADC34->MPD2
           =3 #define EM_ADC_35                                               (EM_START + 35)//ADC35->MPD3
           =3 #define EM_ADC_36                                               (EM_START + 36)//ADC36->MPD4
           =3 #define EM_ADC_37                                               (EM_START + 37)//ADC37->MPD5
           =3 #define EM_ADC_38                                               (EM_START + 38)//ADC38->MPD6
           =3 #define EM_ADC_39                                               (EM_START + 39)//ADC39->MPD7
           =3 #define EM_ADC_40                                               (EM_START + 40)//ADC40->MPD8
           =3 #define EM_ADC_41                                               (EM_START + 41)//ADC41->MPD9
           =3 #define EM_ADC_42                                               (EM_START + 42)//ADC42->MPD10
           =3 #define EM_ADC_43                                               (EM_START + 43)//ADC42->MPD11
           =3 #define EM_ADC_44                                               (EM_START + 44)//ADC42->MPD12
           =3 #define EM_ADC_45                                               (EM_START + 45)//ADC42->MPD13
           =3 #define EM_ADC_46                                               (EM_START + 46)//ADC42->MPD14
           =3 #define EM_ADC_47                                               (EM_START + 47)//ADC42->MPD15
           =3 #define EM_ADC_48                                               (EM_START + 48)//ADC42->MPD16
           =3 #define EM_ADC_49                                               (EM_START + 49)//ADC42->MPD17
           =3 #define EM_ADC_50                                               (EM_START + 50)//ADC42->MPD18
           =3 #define EM_ADC_51                                               (EM_START + 51)//ADC42->MPD19
           =3 #define EM_ADC_52                                               (EM_START + 52)//ADC42->MPD20
           =3 #define EM_ADC_53                                               (EM_START + 53)//ADC43->MPD21
           =3 #define EM_ADC_54                                               (EM_START + 54)//ADC44->MPD22
           =3 #define EM_ADC_55                                               (EM_START + 55)//ADC45->MPD23
           =3 #define EM_ADC_56                                               (EM_START + 56)//ADC46->MPD24
           =3 #define EM_ADC_57                                               (EM_START + 57)//ADC47->MPD25
           =3 #define EM_ADC_58                                               (EM_START + 58)//ADC48->MPD26
           =3 #define EM_ADC_59                                               (EM_START + 59)//ADC49->MPD27
           =3 #define EM_ADC_60                                               (EM_START + 60)//ADC50->MPD28
           =3 #define EM_ADC_61                                               (EM_START + 61)//ADC50->MPD29
           =3 #define EM_ADC_62                                               (EM_START + 62)//ADC50->MPD30
           =3 #define EM_ADC_63                                               (EM_START + 63)//ADC50->MPD31
           =3 #define EM_DAC_0                                                (EM_START + 64)//DAC0
           =3 #define EM_DAC_1                                                (EM_START + 65)//DAC1
           =3 #define EM_DAC_2                                                (EM_START + 66)//DAC2
           =3 #define EM_DAC_3                                                (EM_START + 67)//DAC3
           =3 #define EM_DAC_4                                                (EM_START + 68)//DAC4
           =3 #define EM_DAC_5                                                (EM_START + 69)//DAC5
           =3 #define EM_DAC_6                                                (EM_START + 70)//DAC6
           =3 #define EM_DAC_7                                                (EM_START + 71)//DAC7
           =3 #define EM_DAC_8                                                (EM_START + 72)//DAC8
           =3 #define EM_DAC_9                                                (EM_START + 73)//DAC9
           =3 #define EM_DAC_10                                               (EM_START + 74)//DAC10
           =3 #define EM_DAC_11                                               (EM_START + 75)//DAC11
           =3 #define EM_DAC_12                                               (EM_START + 76)//DAC12
           =3 #define EM_DAC_13                                               (EM_START + 77)//DAC13
           =3 #define EM_DAC_14                                               (EM_START + 78)//DAC14
           =3 #define EM_DAC_15                                               (EM_START + 79)//DAC15
           =3 #define EM_DAC_16                                               (EM_START + 80)//DAC16
           =3 #define EM_DAC_17                                               (EM_START + 81)//DAC17
           =3 #define EM_DAC_18                                               (EM_START + 82)//DAC18
           =3 #define EM_DAC_19                                               (EM_START + 83)//DAC19
           =3 #define EM_DAC_20                                               (EM_START + 84)//DAC20
           =3 #define EM_DAC_21                                               (EM_START + 85)//DAC21
           =3 #define EM_DAC_22                                               (EM_START + 86)//DAC22
           =3 #define EM_DAC_23                                               (EM_START + 87)//DAC23
           =3 #define EM_DAC_24                                               (EM_START + 88)//DAC24
           =3 #define EM_DAC_25                                               (EM_START + 89)//DAC25
           =3 #define EM_DAC_26                                               (EM_START + 90)//DAC26
           =3 #define EM_DAC_27                                               (EM_START + 91)//DAC27
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 53  

           =3 #define EM_DAC_28                                               (EM_START + 92)//DAC28
           =3 #define EM_DAC_29                                               (EM_START + 93)//DAC29
           =3 #define EM_DAC_30                                               (EM_START + 94)//DAC30
           =3 #define EM_DAC_31                                               (EM_START + 95)//DAC31
           =3 /*****************************************************************************/
           =3 #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
           =3 /*****************************************************************************/
           =3 #define SPCOIL_ON                                               0//长通线圈
           =3 #define SPCOIL_PS1MS                                    1//1mS间隔 50%占空比脉冲
           =3 #define SPCOIL_PS10MS                                   2//10mS
           =3 #define SPCOIL_PS100MS                                  3//100mS
           =3 /*****************************************************************************/
           =3 #define SP_EM_MODBUS_SLAVE_ERR                  300
           =3 #define SP_R_ON                                                 800//上电ON
           =3 #define SP_R_TICK_1MS                                   801//
           =3 #define SP_R_TICK_10MS                                  802//
           =3 #define SP_R_TICK_100MS                                 803//
           =3 #define SP_R_TICK_1S                                    804//
           =3 /*****************************************************************************/
           =3 typedef struct{//ADC滤波器
           =3         uint16_t dat[CONFIG_SPLC_ADC_FILTER_TAP];
           =3         uint16_t out;
           =3         uint8_t wIndex;//写入指针
           =3 }adcTempDat_t;
           =3 /*****************************************************************************/
           =3 extern uint16_t ModbusSlaveAsciiOverTimeCounter;//Modbus Slave通信超时计时器
           =3 extern xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
           =3 extern xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
           =3 /*****************************************************************************/
           =3 void wdtDisable(void);//看门狗屏蔽
           =3 void sPlcInit(void);//软逻辑初始化
           =3 void sPlcProcessStart(void);//sPLC轮询起始
           =3 void sPlcProcessEnd(void);//sPLC轮询结束
           =3 /*****************************************************************************/
           =3 void assertCoilAddress(uint16_t adr);
           =3 void assertRegisterAddress(uint16_t adr);
           =3 /*****************************************************************************/
           =3 void nvramUpdata(void);
           =3 void clearDM(void);
           =3 void clearEM(void);
           =3 void clearR(void);
           =3 void clearT(void);
           =3 void clearTD(void);
           =3 void clearC(void);
           =3 void nvramLoad(void);
           =3 void nvramSave(void);
           =3 void nvramUpdata(void);
           =3 /*****************************************************************************/
           =3 void SET(uint16_t A);//置位
           =3 void RESET(uint16_t A);//复位
           =3 void FLIP(uint16_t A);//翻转
           =3 uint8_t LD(uint16_t A);//载入
           =3 uint8_t LDP(uint16_t A);//脉冲上升沿
           =3 uint8_t LDN(uint16_t A);//脉冲下降沿
           =3 void T100US(uint8_t A, uint8_t start, uint16_t value);
           =3 void T1MS(uint8_t A, uint8_t start, uint16_t value);
           =3 void T10MS(uint8_t A, uint8_t start, uint16_t value);
           =3 void T100MS(uint8_t A, uint8_t start, uint16_t value);
           =3 /*****************************************************************************/
           =3 void chipDacInit(void);
           =3 void chipAdcInit(void);
           =3 void sPlcInit(void);
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 54  

           =3 void refreshInput(void);
           =3 void refreshOutput(void);
           =3 void refreshDac(void);
           =3 /*****************************************************************************/
           =3 #endif
   5      =1  /*****************************************************************************/
   6      =1  //线圈 保持 4 * 16 = 64BIT
   7      =1  #define MR_START                                                0
   8      =1  #define MR_END                                                  3
   9      =1  //线圈寄存器 非保持 4 * 16 = 64BIT
  10      =1  #define R_START                                                 4
  11      =1  #define R_END                                                   7
  12      =1  //数据寄存器 保持 8
  13      =1  #define DM_START                                                8
  14      =1  #define DM_END                                                  15
  15      =1  //数据寄存器 非保持 128个字
  16      =1  #define EM_START                                                16
  17      =1  #define EM_END                                                  143
  18      =1  //延时线圈
  19      =1  //1MS 1 * 16 = 16BIT
  20      =1  #define T_1MS_START                                             144
  21      =1  #define T_1MS_END                                               144
  22      =1  //10MS 1 * 16 = 16BIT
  23      =1  #define T_10MS_START                                    145
  24      =1  #define T_10MS_END                                              145
  25      =1  //100MS 1 * 16 = 16BIT
  26      =1  #define T_100MS_START                                   146
  27      =1  #define T_100MS_END                                             146
  28      =1  //延时计时器 
  29      =1  //1MS 32
  30      =1  #define TD_1MS_START                                    147
  31      =1  #define TD_1MS_END                                              162
  32      =1  //10MS 32
  33      =1  #define TD_10MS_START                                   163
  34      =1  #define TD_10MS_END                                             178
  35      =1  //100MS 32
  36      =1  #define TD_100MS_START                                  179
  37      =1  #define TD_100MS_END                                    194
  38      =1  //计数器 1
  39      =1  #define C_START                                                 195
  40      =1  #define C_END                                                   195
  41      =1  //输入位寄存器 1 * 16 = 128个
  42      =1  #define X_START                                                 196
  43      =1  #define X_END                                                   196                     
  44      =1  //输出位寄存器 1 * 16 = 128个
  45      =1  #define Y_START                                                 197
  46      =1  #define Y_END                                                   197
  47      =1  //特殊寄存器 4个字
  48      =1  #define SPREG_START                                             198
  49      =1  #define SPREG_END                                               201
  50      =1  //特殊线圈      4 * 16 = 64个
  51      =1  #define SPCOIL_START                                    202
  52      =1  #define SPCOIL_END                                              205
  53      =1  /*****************************************************************************/
  54      =1  #define EM_ADC_0                                                (EM_START + 0)//ADC0->MLD0
  55      =1  #define EM_ADC_1                                                (EM_START + 1)//ADC1->MLD1
  56      =1  #define EM_ADC_2                                                (EM_START + 2)//ADC2->MLD2
  57      =1  #define EM_ADC_3                                                (EM_START + 3)//ADC3->MLD3
  58      =1  #define EM_ADC_4                                                (EM_START + 4)//ADC4->MLD4
  59      =1  #define EM_ADC_5                                                (EM_START + 5)//ADC5->MLD5
  60      =1  #define EM_ADC_6                                                (EM_START + 6)//ADC6->MLD6
  61      =1  #define EM_ADC_7                                                (EM_START + 7)//ADC7->MLD7
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 55  

  62      =1  #define EM_ADC_8                                                (EM_START + 8)//ADC8->MLD8
  63      =1  #define EM_ADC_9                                                (EM_START + 9)//ADC9->MLD9
  64      =1  #define EM_ADC_10                                               (EM_START + 10)//ADC10->MLD10
  65      =1  #define EM_ADC_11                                               (EM_START + 11)//ADC11->MLD11
  66      =1  #define EM_ADC_12                                               (EM_START + 12)//ADC12->MLD12
  67      =1  #define EM_ADC_13                                               (EM_START + 13)//ADC13->MLD13
  68      =1  #define EM_ADC_14                                               (EM_START + 14)//ADC14->MLD14
  69      =1  #define EM_ADC_15                                               (EM_START + 15)//ADC15->MLD15
  70      =1  #define EM_ADC_16                                               (EM_START + 16)//ADC16->MLD16
  71      =1  #define EM_ADC_17                                               (EM_START + 17)//ADC17->MLD17
  72      =1  #define EM_ADC_18                                               (EM_START + 18)//ADC18->MLD18
  73      =1  #define EM_ADC_19                                               (EM_START + 19)//ADC19->MLD19
  74      =1  #define EM_ADC_20                                               (EM_START + 20)//ADC20->MLD20
  75      =1  #define EM_ADC_21                                               (EM_START + 21)//ADC21->MLD21
  76      =1  #define EM_ADC_22                                               (EM_START + 22)//ADC22->MLD22
  77      =1  #define EM_ADC_23                                               (EM_START + 23)//ADC23->MLD23
  78      =1  #define EM_ADC_24                                               (EM_START + 24)//ADC24->MLD24
  79      =1  #define EM_ADC_25                                               (EM_START + 25)//ADC25->MLD25
  80      =1  #define EM_ADC_26                                               (EM_START + 26)//ADC26->MLD26
  81      =1  #define EM_ADC_27                                               (EM_START + 27)//ADC27->MLD27
  82      =1  #define EM_ADC_28                                               (EM_START + 28)//ADC28->MLD28
  83      =1  #define EM_ADC_29                                               (EM_START + 29)//ADC29->MLD29
  84      =1  #define EM_ADC_30                                               (EM_START + 30)//ADC30->MLD30
  85      =1  #define EM_ADC_31                                               (EM_START + 31)//ADC31->MLD31
  86      =1  #define EM_ADC_32                                               (EM_START + 32)//ADC32->MPD0
  87      =1  #define EM_ADC_33                                               (EM_START + 33)//ADC33->MPD1
  88      =1  #define EM_ADC_34                                               (EM_START + 34)//ADC34->MPD2
  89      =1  #define EM_ADC_35                                               (EM_START + 35)//ADC35->MPD3
  90      =1  #define EM_ADC_36                                               (EM_START + 36)//ADC36->MPD4
  91      =1  #define EM_ADC_37                                               (EM_START + 37)//ADC37->MPD5
  92      =1  #define EM_ADC_38                                               (EM_START + 38)//ADC38->MPD6
  93      =1  #define EM_ADC_39                                               (EM_START + 39)//ADC39->MPD7
  94      =1  #define EM_ADC_40                                               (EM_START + 40)//ADC40->MPD8
  95      =1  #define EM_ADC_41                                               (EM_START + 41)//ADC41->MPD9
  96      =1  #define EM_ADC_42                                               (EM_START + 42)//ADC42->MPD10
  97      =1  #define EM_ADC_43                                               (EM_START + 43)//ADC42->MPD11
  98      =1  #define EM_ADC_44                                               (EM_START + 44)//ADC42->MPD12
  99      =1  #define EM_ADC_45                                               (EM_START + 45)//ADC42->MPD13
 100      =1  #define EM_ADC_46                                               (EM_START + 46)//ADC42->MPD14
 101      =1  #define EM_ADC_47                                               (EM_START + 47)//ADC42->MPD15
 102      =1  #define EM_ADC_48                                               (EM_START + 48)//ADC42->MPD16
 103      =1  #define EM_ADC_49                                               (EM_START + 49)//ADC42->MPD17
 104      =1  #define EM_ADC_50                                               (EM_START + 50)//ADC42->MPD18
 105      =1  #define EM_ADC_51                                               (EM_START + 51)//ADC42->MPD19
 106      =1  #define EM_ADC_52                                               (EM_START + 52)//ADC42->MPD20
 107      =1  #define EM_ADC_53                                               (EM_START + 53)//ADC43->MPD21
 108      =1  #define EM_ADC_54                                               (EM_START + 54)//ADC44->MPD22
 109      =1  #define EM_ADC_55                                               (EM_START + 55)//ADC45->MPD23
 110      =1  #define EM_ADC_56                                               (EM_START + 56)//ADC46->MPD24
 111      =1  #define EM_ADC_57                                               (EM_START + 57)//ADC47->MPD25
 112      =1  #define EM_ADC_58                                               (EM_START + 58)//ADC48->MPD26
 113      =1  #define EM_ADC_59                                               (EM_START + 59)//ADC49->MPD27
 114      =1  #define EM_ADC_60                                               (EM_START + 60)//ADC50->MPD28
 115      =1  #define EM_ADC_61                                               (EM_START + 61)//ADC50->MPD29
 116      =1  #define EM_ADC_62                                               (EM_START + 62)//ADC50->MPD30
 117      =1  #define EM_ADC_63                                               (EM_START + 63)//ADC50->MPD31
 118      =1  #define EM_DAC_0                                                (EM_START + 64)//DAC0
 119      =1  #define EM_DAC_1                                                (EM_START + 65)//DAC1
 120      =1  #define EM_DAC_2                                                (EM_START + 66)//DAC2
 121      =1  #define EM_DAC_3                                                (EM_START + 67)//DAC3
 122      =1  #define EM_DAC_4                                                (EM_START + 68)//DAC4
 123      =1  #define EM_DAC_5                                                (EM_START + 69)//DAC5
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 56  

 124      =1  #define EM_DAC_6                                                (EM_START + 70)//DAC6
 125      =1  #define EM_DAC_7                                                (EM_START + 71)//DAC7
 126      =1  #define EM_DAC_8                                                (EM_START + 72)//DAC8
 127      =1  #define EM_DAC_9                                                (EM_START + 73)//DAC9
 128      =1  #define EM_DAC_10                                               (EM_START + 74)//DAC10
 129      =1  #define EM_DAC_11                                               (EM_START + 75)//DAC11
 130      =1  #define EM_DAC_12                                               (EM_START + 76)//DAC12
 131      =1  #define EM_DAC_13                                               (EM_START + 77)//DAC13
 132      =1  #define EM_DAC_14                                               (EM_START + 78)//DAC14
 133      =1  #define EM_DAC_15                                               (EM_START + 79)//DAC15
 134      =1  #define EM_DAC_16                                               (EM_START + 80)//DAC16
 135      =1  #define EM_DAC_17                                               (EM_START + 81)//DAC17
 136      =1  #define EM_DAC_18                                               (EM_START + 82)//DAC18
 137      =1  #define EM_DAC_19                                               (EM_START + 83)//DAC19
 138      =1  #define EM_DAC_20                                               (EM_START + 84)//DAC20
 139      =1  #define EM_DAC_21                                               (EM_START + 85)//DAC21
 140      =1  #define EM_DAC_22                                               (EM_START + 86)//DAC22
 141      =1  #define EM_DAC_23                                               (EM_START + 87)//DAC23
 142      =1  #define EM_DAC_24                                               (EM_START + 88)//DAC24
 143      =1  #define EM_DAC_25                                               (EM_START + 89)//DAC25
 144      =1  #define EM_DAC_26                                               (EM_START + 90)//DAC26
 145      =1  #define EM_DAC_27                                               (EM_START + 91)//DAC27
 146      =1  #define EM_DAC_28                                               (EM_START + 92)//DAC28
 147      =1  #define EM_DAC_29                                               (EM_START + 93)//DAC29
 148      =1  #define EM_DAC_30                                               (EM_START + 94)//DAC30
 149      =1  #define EM_DAC_31                                               (EM_START + 95)//DAC31
 150      =1  /*****************************************************************************/
 151      =1  #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
 152      =1  /*****************************************************************************/
 153      =1  #define SPCOIL_ON                                               0//长通线圈
 154      =1  #define SPCOIL_PS1MS                                    1//1mS间隔 50%占空比脉冲
 155      =1  #define SPCOIL_PS10MS                                   2//10mS
 156      =1  #define SPCOIL_PS100MS                                  3//100mS
 157      =1  /*****************************************************************************/
 158      =1  #define SP_EM_MODBUS_SLAVE_ERR                  300
 159      =1  #define SP_R_ON                                                 800//上电ON
 160      =1  #define SP_R_TICK_1MS                                   801//
 161      =1  #define SP_R_TICK_10MS                                  802//
 162      =1  #define SP_R_TICK_100MS                                 803//
 163      =1  #define SP_R_TICK_1S                                    804//
 164      =1  /*****************************************************************************/
 165      =1  typedef struct{//ADC滤波器
 166      =1          uint16_t dat[CONFIG_SPLC_ADC_FILTER_TAP];
 167      =1          uint16_t out;
 168      =1          uint8_t wIndex;//写入指针
 169      =1  }adcTempDat_t;
 170      =1  /*****************************************************************************/
 171      =1  extern uint16_t ModbusSlaveAsciiOverTimeCounter;//Modbus Slave通信超时计时器
 172      =1  extern xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
 173      =1  extern xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
 174      =1  /*****************************************************************************/
 175      =1  void wdtDisable(void);//看门狗屏蔽
 176      =1  void sPlcInit(void);//软逻辑初始化
 177      =1  void sPlcProcessStart(void);//sPLC轮询起始
 178      =1  void sPlcProcessEnd(void);//sPLC轮询结束
 179      =1  /*****************************************************************************/
 180      =1  void assertCoilAddress(uint16_t adr);
 181      =1  void assertRegisterAddress(uint16_t adr);
 182      =1  /*****************************************************************************/
 183      =1  void nvramUpdata(void);
 184      =1  void clearDM(void);
 185      =1  void clearEM(void);
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 57  

 186      =1  void clearR(void);
 187      =1  void clearT(void);
 188      =1  void clearTD(void);
 189      =1  void clearC(void);
 190      =1  void nvramLoad(void);
 191      =1  void nvramSave(void);
 192      =1  void nvramUpdata(void);
 193      =1  /*****************************************************************************/
 194      =1  void SET(uint16_t A);//置位
 195      =1  void RESET(uint16_t A);//复位
 196      =1  void FLIP(uint16_t A);//翻转
 197      =1  uint8_t LD(uint16_t A);//载入
 198      =1  uint8_t LDP(uint16_t A);//脉冲上升沿
 199      =1  uint8_t LDN(uint16_t A);//脉冲下降沿
 200      =1  void T100US(uint8_t A, uint8_t start, uint16_t value);
 201      =1  void T1MS(uint8_t A, uint8_t start, uint16_t value);
 202      =1  void T10MS(uint8_t A, uint8_t start, uint16_t value);
 203      =1  void T100MS(uint8_t A, uint8_t start, uint16_t value);
 204      =1  /*****************************************************************************/
 205      =1  void chipDacInit(void);
 206      =1  void chipAdcInit(void);
 207      =1  void sPlcInit(void);
 208      =1  void refreshInput(void);
 209      =1  void refreshOutput(void);
 210      =1  void refreshDac(void);
 211      =1  /*****************************************************************************/
 212      =1  #endif
   2          /*****************************************************************************/
   3          //ADC MUX3253 CH0-CH3
   4          sbit ADCMUX_0_3_S0 = P1^4;
   5          sbit ADCMUX_0_3_S1      = P1^7;
   6          sbit ADCMUX_0_3_OE1 = P1^6;
   7          sbit ADCMUX_0_3_OE2 = P1^5;
   8          //ADC MUX3253 CH4-CH7
   9          sbit ADCMUX_4_7_S0 = P1^2;
  10          sbit ADCMUX_4_7_S1 = P1^1;
  11          sbit ADCMUC_4_7_OE1 = P1^0;
  12          sbit ADCMUC_4_7_OE2 = P1^3;
  13          //ADC MUX3253 CH8-CH11
  14          sbit ADCMUX_8_11_S0 = P2^4;
  15          sbit ADCMUX_8_11_S1 = P2^6;
  16          sbit ADCMUX_8_11_OE1 = P2^7;
  17          sbit ADCMUX_8_11_OE2 = P2^5;
  18          //ADC MUX3253 CH12-CH15
  19          sbit ADCMUX_12_15_S0 = P2^0;
  20          sbit ADCMUX_12_15_S1 = P2^2;
  21          sbit ADCMUX_12_15_OE1 = P2^3;
  22          sbit ADCMUX_12_15_OE2 = P2^1;
  23          //ADC MUX3253 CH16-CH19
  24          sbit ADCMUX_16_19_S0 = P3^5;
  25          sbit ADCMUX_16_19_S1 = P3^7;
  26          sbit ADCMUX_16_19_OE1 = P3^6;
  27          sbit ADCMUX_16_19_OE2 = P3^4;
  28          //ADC MUX3253 CH20-CH23
  29          sbit ADCMUX_20_23_S0 = P3^1;
  30          sbit ADCMUX_20_23_S1 = P3^3;
  31          sbit ADCMUX_20_23_OE1 = P3^2;
  32          sbit ADCMUX_20_23_OE2 = P3^0;
  33          //ADC MUX3253 CH24-CH27
  34          sbit ADCMUX_24_27_S0 = P0^5;
  35          sbit ADCMUX_24_27_S1 = P0^7;
  36          sbit ADCMUX_24_27_OE1 = P0^6;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 58  

  37          sbit ADCMUX_24_27_OE2 = P0^4;
  38          /*****************************************************************************/
  39          xdata int16_t NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
  40          xdata int16_t NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
  41          static data uint8_t TimerCounter_1mS = 0;
  42          static data uint8_t TimerCounter_10mS = 0;
  43          static data uint8_t Timer0_L, Timer0_H;
  44          /*****************************************************************************/
  45          static pdata int8_t inputFilter[(X_END - X_START + 1) * 16];//IO输入滤波器缓冲区
  46          static xdata adcTempDat_t adcTempDat[CONFIG_SPLC_ADC_CHANNLE];
  47          static uint8_t adcSelect;//ADC通道选择
  48          static void refreshAdcData(adcTempDat_t *s , uint16_t dat);
  49          static void adcProcess(void);
  50          static void initAdcData(adcTempDat_t *s);
  51          static void chipDacInit(void);
  52          static void chipAdcInit(void);
  53          /******************************************************************************/
  54          static uint8_t getGlobalInterrupt(void){
  55   1              return EA;
  56   1      }
  57          static void setLedRun(uint8_t st){//LED RUN P7_0
  58   1              if(st){
  59   2                      P7 |= (uint8_t)(1 << 0);
  60   2              }
  61   1              else{
  62   2                      P7 &= ~(uint8_t)(1 << 0);
  63   2              }
  64   1      }
  65          static uint8_t getLedRun(void){//LED RUN P7_0
  66   1              return (uint8_t)((P7 >> 0) & 0x01);
  67   1      }
  68          static void setLedEprom(uint8_t st){//LED EPROM P7_1
  69   1              if(st){
  70   2                      P7 |= (uint8_t)(1 << 1);
  71   2              }
  72   1              else{
  73   2                      P7 &= ~(uint8_t)(1 << 1);
  74   2              }
  75   1      }
  76          static uint8_t getLedEprom(void){//LED EPROM P7_1
  77   1              return (uint8_t)((P7 >> 1) & 0x01);
  78   1      }
  79          static void setLedDac(uint8_t st){//LED DAC P7_2
  80   1              if(st){
  81   2                      P7 |= (uint8_t)(1 << 2);
  82   2              }
  83   1              else{
  84   2                      P7 &= ~(uint8_t)(1 << 2);
  85   2              }
  86   1      }
  87          static uint8_t getLedDac(void){//LED DAC P7_2
  88   1              return (uint8_t)((P7 >> 2) & 0x01);
  89   1      }
  90          static void setLedError(uint8_t st){//LED ERROR P7_3
  91   1              if(st){
  92   2                      P7 |= (uint8_t)(1 << 3);
  93   2              }
  94   1              else{
  95   2                      P7 &= ~(uint8_t)(1 << 3);
  96   2              }
  97   1      }
  98          static uint8_t getLedError(void) reentrant{
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 59  

  99   1              return (uint8_t)((P7 >> 3) & 0x01);
 100   1      }
 101          static void adcProcess(void){//循环采集ADC
 102   1              uint16_t result = 0;
 103   1      #ifdef C8051F020
 104   1              //while(!AD0INT);
 105   1      #endif
 106   1              result = (ADC0 & 0xFFF);
 107   1              refreshAdcData(&adcTempDat[adcSelect], result);
 108   1              NVRAM0[EM_ADC_0 + adcSelect] = adcTempDat[adcSelect].out;
 109   1              if(adcSelect < (CONFIG_SPLC_ADC_CHANNLE - 1)){
 110   2                      adcSelect ++;
 111   2              }
 112   1              else{
 113   2                      adcSelect = 0;
 114   2              }
 115   1              switch(adcSelect){
 116   2                      case 0:{//MLD0
 117   3                              //ADC MUX
 118   3                              AMX0SL = 0x00;
 119   3                              //CHIP0
 120   3                              ADCMUX_0_3_OE1 = true;
 121   3                              ADCMUX_0_3_OE2 = true;
 122   3                              ADCMUX_0_3_S1 = false;
 123   3                              ADCMUX_0_3_S0 = true;
 124   3                              //CHIP1
 125   3                              ADCMUC_4_7_OE1 = true;
 126   3                              ADCMUC_4_7_OE2 = true;
 127   3                              //CHIP2
 128   3                              ADCMUX_8_11_OE1 = true;
 129   3                              ADCMUX_8_11_OE2 = true;
 130   3                              //CHIP3
 131   3                              ADCMUX_12_15_OE1 = true;
 132   3                              ADCMUX_12_15_OE2 = true;
 133   3                              //CHIP4
 134   3                              ADCMUX_16_19_OE1 = true;
 135   3                              ADCMUX_16_19_OE2 = true;
 136   3                              //CHIP5
 137   3                              ADCMUX_20_23_OE1 = true;
 138   3                              ADCMUX_20_23_OE2 = true;
 139   3                              //CHIP6
 140   3                              ADCMUX_24_27_OE1 = true;
 141   3                              ADCMUX_24_27_OE2 = true;
 142   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 143   3                              ADCMUX_0_3_OE1 = false;
 144   3                              ADCMUX_0_3_OE2 = true;
 145   3                              break;
 146   3                      }
 147   2                      case 1:{//MLD1
 148   3                              //ADC MUX
 149   3                              AMX0SL = 0x00;
 150   3                              //CHIP0
 151   3                              ADCMUX_0_3_OE1 = true;
 152   3                              ADCMUX_0_3_OE2 = true;
 153   3                              ADCMUX_0_3_S1 = true;
 154   3                              ADCMUX_0_3_S0 = true;
 155   3                              //CHIP1
 156   3                              ADCMUC_4_7_OE1 = true;
 157   3                              ADCMUC_4_7_OE2 = true;
 158   3                              //CHIP2
 159   3                              ADCMUX_8_11_OE1 = true;
 160   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 60  

 161   3                              //CHIP3
 162   3                              ADCMUX_12_15_OE1 = true;
 163   3                              ADCMUX_12_15_OE2 = true;
 164   3                              //CHIP4
 165   3                              ADCMUX_16_19_OE1 = true;
 166   3                              ADCMUX_16_19_OE2 = true;
 167   3                              //CHIP5
 168   3                              ADCMUX_20_23_OE1 = true;
 169   3                              ADCMUX_20_23_OE2 = true;
 170   3                              //CHIP6
 171   3                              ADCMUX_24_27_OE1 = true;
 172   3                              ADCMUX_24_27_OE2 = true;
 173   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 174   3                              ADCMUX_0_3_OE1 = false;
 175   3                              ADCMUX_0_3_OE2 = true;
 176   3                              break;
 177   3                      }
 178   2                      case 2:{//MLD2
 179   3                              //ADC MUX
 180   3                              AMX0SL = 0x00;
 181   3                              //CHIP0
 182   3                              ADCMUX_0_3_OE1 = true;
 183   3                              ADCMUX_0_3_OE2 = true;
 184   3                              ADCMUX_0_3_S1 = false;
 185   3                              ADCMUX_0_3_S0 = true;
 186   3                              //CHIP1
 187   3                              ADCMUC_4_7_OE1 = true;
 188   3                              ADCMUC_4_7_OE2 = true;
 189   3                              //CHIP2
 190   3                              ADCMUX_8_11_OE1 = true;
 191   3                              ADCMUX_8_11_OE2 = true;
 192   3                              //CHIP3
 193   3                              ADCMUX_12_15_OE1 = true;
 194   3                              ADCMUX_12_15_OE2 = true;
 195   3                              //CHIP4
 196   3                              ADCMUX_16_19_OE1 = true;
 197   3                              ADCMUX_16_19_OE2 = true;
 198   3                              //CHIP5
 199   3                              ADCMUX_20_23_OE1 = true;
 200   3                              ADCMUX_20_23_OE2 = true;
 201   3                              //CHIP6
 202   3                              ADCMUX_24_27_OE1 = true;
 203   3                              ADCMUX_24_27_OE2 = true;
 204   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 205   3                              ADCMUX_0_3_OE1 = true;
 206   3                              ADCMUX_0_3_OE2 = false;
 207   3                              break;
 208   3                      }
 209   2                      case 3:{//MLD3
 210   3                              //ADC MUX
 211   3                              AMX0SL = 0x00;
 212   3                              //CHIP0
 213   3                              ADCMUX_0_3_OE1 = true;
 214   3                              ADCMUX_0_3_OE2 = true;
 215   3                              ADCMUX_0_3_S1 = true;
 216   3                              ADCMUX_0_3_S0 = true;
 217   3                              //CHIP1
 218   3                              ADCMUC_4_7_OE1 = true;
 219   3                              ADCMUC_4_7_OE2 = true;
 220   3                              //CHIP2
 221   3                              ADCMUX_8_11_OE1 = true;
 222   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 61  

 223   3                              //CHIP3
 224   3                              ADCMUX_12_15_OE1 = true;
 225   3                              ADCMUX_12_15_OE2 = true;
 226   3                              //CHIP4
 227   3                              ADCMUX_16_19_OE1 = true;
 228   3                              ADCMUX_16_19_OE2 = true;
 229   3                              //CHIP5
 230   3                              ADCMUX_20_23_OE1 = true;
 231   3                              ADCMUX_20_23_OE2 = true;
 232   3                              //CHIP6
 233   3                              ADCMUX_24_27_OE1 = true;
 234   3                              ADCMUX_24_27_OE2 = true;
 235   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 236   3                              ADCMUX_0_3_OE1 = true;
 237   3                              ADCMUX_0_3_OE2 = false;
 238   3                              break;
 239   3                      }
 240   2                      case 4:{//MLD4
 241   3                              //ADC MUX
 242   3                              AMX0SL = 0x01;
 243   3                              //CHIP0
 244   3                              ADCMUX_0_3_OE1 = true;
 245   3                              ADCMUX_0_3_OE2 = true;
 246   3                              //CHIP1
 247   3                              ADCMUC_4_7_OE1 = true;
 248   3                              ADCMUC_4_7_OE2 = true;
 249   3                              ADCMUX_4_7_S1 = false;
 250   3                              ADCMUX_4_7_S0 = true;
 251   3                              //CHIP2
 252   3                              ADCMUX_8_11_OE1 = true;
 253   3                              ADCMUX_8_11_OE2 = true;
 254   3                              //CHIP3
 255   3                              ADCMUX_12_15_OE1 = true;
 256   3                              ADCMUX_12_15_OE2 = true;
 257   3                              //CHIP4
 258   3                              ADCMUX_16_19_OE1 = true;
 259   3                              ADCMUX_16_19_OE2 = true;
 260   3                              //CHIP5
 261   3                              ADCMUX_20_23_OE1 = true;
 262   3                              ADCMUX_20_23_OE2 = true;
 263   3                              //CHIP6
 264   3                              ADCMUX_24_27_OE1 = true;
 265   3                              ADCMUX_24_27_OE2 = true;
 266   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 267   3                              ADCMUC_4_7_OE1 = false;
 268   3                              ADCMUC_4_7_OE2 = true;
 269   3                              break;
 270   3                      }
 271   2                      case 5:{//MLD5
 272   3                              //ADC MUX
 273   3                              AMX0SL = 0x01;
 274   3                              //CHIP0
 275   3                              ADCMUX_0_3_OE1 = true;
 276   3                              ADCMUX_0_3_OE2 = true;
 277   3                              //CHIP1
 278   3                              ADCMUC_4_7_OE1 = true;
 279   3                              ADCMUC_4_7_OE2 = true;
 280   3                              ADCMUX_0_3_S1 = true;
 281   3                              ADCMUX_0_3_S0 = true;
 282   3                              //CHIP2
 283   3                              ADCMUX_8_11_OE1 = true;
 284   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 62  

 285   3                              //CHIP3
 286   3                              ADCMUX_12_15_OE1 = true;
 287   3                              ADCMUX_12_15_OE2 = true;
 288   3                              //CHIP4
 289   3                              ADCMUX_16_19_OE1 = true;
 290   3                              ADCMUX_16_19_OE2 = true;
 291   3                              //CHIP5
 292   3                              ADCMUX_20_23_OE1 = true;
 293   3                              ADCMUX_20_23_OE2 = true;
 294   3                              //CHIP6
 295   3                              ADCMUX_24_27_OE1 = true;
 296   3                              ADCMUX_24_27_OE2 = true;
 297   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 298   3                              ADCMUC_4_7_OE1 = false;
 299   3                              ADCMUC_4_7_OE2 = true;
 300   3                              break;
 301   3                      }
 302   2                      case 6:{//MLD6
 303   3                              //ADC MUX
 304   3                              AMX0SL = 0x01;
 305   3                              //CHIP0
 306   3                              ADCMUX_0_3_OE1 = true;
 307   3                              ADCMUX_0_3_OE2 = true;
 308   3                              //CHIP1
 309   3                              ADCMUC_4_7_OE1 = true;
 310   3                              ADCMUC_4_7_OE2 = true;
 311   3                              ADCMUX_4_7_S1 = true;
 312   3                              ADCMUX_4_7_S0 = true;
 313   3                              //CHIP2
 314   3                              ADCMUX_8_11_OE1 = true;
 315   3                              ADCMUX_8_11_OE2 = true;
 316   3                              //CHIP3
 317   3                              ADCMUX_12_15_OE1 = true;
 318   3                              ADCMUX_12_15_OE2 = true;
 319   3                              //CHIP4
 320   3                              ADCMUX_16_19_OE1 = true;
 321   3                              ADCMUX_16_19_OE2 = true;
 322   3                              //CHIP5
 323   3                              ADCMUX_20_23_OE1 = true;
 324   3                              ADCMUX_20_23_OE2 = true;
 325   3                              //CHIP6
 326   3                              ADCMUX_24_27_OE1 = true;
 327   3                              ADCMUX_24_27_OE2 = true;
 328   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 329   3                              ADCMUC_4_7_OE1 = true;
 330   3                              ADCMUC_4_7_OE2 = false;
 331   3                              break;
 332   3                      }
 333   2                      case 7:{//MLD7
 334   3                              //ADC MUX
 335   3                              AMX0SL = 0x01;
 336   3                              //CHIP0
 337   3                              ADCMUX_0_3_OE1 = true;
 338   3                              ADCMUX_0_3_OE2 = true;
 339   3                              //CHIP1
 340   3                              ADCMUC_4_7_OE1 = true;
 341   3                              ADCMUC_4_7_OE2 = true;
 342   3                              ADCMUX_4_7_S1 = true;
 343   3                              ADCMUX_4_7_S0 = true;
 344   3                              //CHIP2
 345   3                              ADCMUX_8_11_OE1 = true;
 346   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 63  

 347   3                              //CHIP3
 348   3                              ADCMUX_12_15_OE1 = true;
 349   3                              ADCMUX_12_15_OE2 = true;
 350   3                              //CHIP4
 351   3                              ADCMUX_16_19_OE1 = true;
 352   3                              ADCMUX_16_19_OE2 = true;
 353   3                              //CHIP5
 354   3                              ADCMUX_20_23_OE1 = true;
 355   3                              ADCMUX_20_23_OE2 = true;
 356   3                              //CHIP6
 357   3                              ADCMUX_24_27_OE1 = true;
 358   3                              ADCMUX_24_27_OE2 = true;
 359   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 360   3                              ADCMUC_4_7_OE1 = true;
 361   3                              ADCMUC_4_7_OE2 = false;
 362   3                              break;
 363   3                      }
 364   2                      case 8:{//MLD8
 365   3                              //ADC MUX
 366   3                              AMX0SL = 0x02;
 367   3                              //CHIP0
 368   3                              ADCMUX_0_3_OE1 = true;
 369   3                              ADCMUX_0_3_OE2 = true;
 370   3                              //CHIP1
 371   3                              ADCMUC_4_7_OE1 = true;
 372   3                              ADCMUC_4_7_OE2 = true;
 373   3                              //CHIP2
 374   3                              ADCMUX_8_11_OE1 = true;
 375   3                              ADCMUX_8_11_OE2 = true;
 376   3                              ADCMUX_8_11_S1 = false;
 377   3                              ADCMUX_8_11_S0 = true;
 378   3                              //CHIP3
 379   3                              ADCMUX_12_15_OE1 = true;
 380   3                              ADCMUX_12_15_OE2 = true;
 381   3                              //CHIP4
 382   3                              ADCMUX_16_19_OE1 = true;
 383   3                              ADCMUX_16_19_OE2 = true;
 384   3                              //CHIP5
 385   3                              ADCMUX_20_23_OE1 = true;
 386   3                              ADCMUX_20_23_OE2 = true;
 387   3                              //CHIP6
 388   3                              ADCMUX_24_27_OE1 = true;
 389   3                              ADCMUX_24_27_OE2 = true;
 390   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 391   3                              ADCMUX_8_11_OE1 = false;
 392   3                              ADCMUX_8_11_OE2 = true;
 393   3                              break;
 394   3                      }
 395   2                      case 9:{//MLD9
 396   3                              //ADC MUX
 397   3                              AMX0SL = 0x02;
 398   3                              //CHIP0
 399   3                              ADCMUX_0_3_OE1 = true;
 400   3                              ADCMUX_0_3_OE2 = true;
 401   3                              //CHIP1
 402   3                              ADCMUC_4_7_OE1 = true;
 403   3                              ADCMUC_4_7_OE2 = true;
 404   3                              //CHIP2
 405   3                              ADCMUX_8_11_OE1 = true;
 406   3                              ADCMUX_8_11_OE2 = true;
 407   3                              ADCMUX_8_11_S1 = true;
 408   3                              ADCMUX_8_11_S0 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 64  

 409   3                              //CHIP3
 410   3                              ADCMUX_12_15_OE1 = true;
 411   3                              ADCMUX_12_15_OE2 = true;
 412   3                              //CHIP4
 413   3                              ADCMUX_16_19_OE1 = true;
 414   3                              ADCMUX_16_19_OE2 = true;
 415   3                              //CHIP5
 416   3                              ADCMUX_20_23_OE1 = true;
 417   3                              ADCMUX_20_23_OE2 = true;
 418   3                              //CHIP6
 419   3                              ADCMUX_24_27_OE1 = true;
 420   3                              ADCMUX_24_27_OE2 = true;
 421   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 422   3                              ADCMUX_8_11_OE1 = false;
 423   3                              ADCMUX_8_11_OE2 = true;
 424   3                              break;
 425   3                      }
 426   2                      case 10:{//MLD10
 427   3                              //ADC MUX
 428   3                              AMX0SL = 0x02;
 429   3                              //CHIP0
 430   3                              ADCMUX_0_3_OE1 = true;
 431   3                              ADCMUX_0_3_OE2 = true;
 432   3                              //CHIP1
 433   3                              ADCMUC_4_7_OE1 = true;
 434   3                              ADCMUC_4_7_OE2 = true;
 435   3                              //CHIP2
 436   3                              ADCMUX_8_11_OE1 = true;
 437   3                              ADCMUX_8_11_OE2 = true;
 438   3                              ADCMUX_8_11_S1 = false;
 439   3                              ADCMUX_8_11_S0 = true;
 440   3                              //CHIP3
 441   3                              ADCMUX_12_15_OE1 = true;
 442   3                              ADCMUX_12_15_OE2 = true;
 443   3                              //CHIP4
 444   3                              ADCMUX_16_19_OE1 = true;
 445   3                              ADCMUX_16_19_OE2 = true;
 446   3                              //CHIP5
 447   3                              ADCMUX_20_23_OE1 = true;
 448   3                              ADCMUX_20_23_OE2 = true;
 449   3                              //CHIP6
 450   3                              ADCMUX_24_27_OE1 = true;
 451   3                              ADCMUX_24_27_OE2 = true;
 452   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 453   3                              ADCMUX_8_11_OE1 = true;
 454   3                              ADCMUX_8_11_OE2 = false;
 455   3                              break;
 456   3                      }
 457   2                      case 11:{//MLD11
 458   3                              //ADC MUX
 459   3                              AMX0SL = 0x02;
 460   3                              //CHIP0
 461   3                              ADCMUX_0_3_OE1 = true;
 462   3                              ADCMUX_0_3_OE2 = true;
 463   3                              //CHIP1
 464   3                              ADCMUC_4_7_OE1 = true;
 465   3                              ADCMUC_4_7_OE2 = true;
 466   3                              //CHIP2
 467   3                              ADCMUX_8_11_OE1 = true;
 468   3                              ADCMUX_8_11_OE2 = true;
 469   3                              ADCMUX_8_11_S1 = true;
 470   3                              ADCMUX_8_11_S0 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 65  

 471   3                              //CHIP3
 472   3                              ADCMUX_12_15_OE1 = true;
 473   3                              ADCMUX_12_15_OE2 = true;
 474   3                              //CHIP4
 475   3                              ADCMUX_16_19_OE1 = true;
 476   3                              ADCMUX_16_19_OE2 = true;
 477   3                              //CHIP5
 478   3                              ADCMUX_20_23_OE1 = true;
 479   3                              ADCMUX_20_23_OE2 = true;
 480   3                              //CHIP6
 481   3                              ADCMUX_24_27_OE1 = true;
 482   3                              ADCMUX_24_27_OE2 = true;
 483   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 484   3                              ADCMUX_8_11_OE1 = true;
 485   3                              ADCMUX_8_11_OE2 = false;
 486   3                              break;
 487   3                      }
 488   2                      case 12:{//MLD12
 489   3                              //ADC MUX
 490   3                              AMX0SL = 0x03;
 491   3                              //CHIP0
 492   3                              ADCMUX_0_3_OE1 = true;
 493   3                              ADCMUX_0_3_OE2 = true;
 494   3                              //CHIP1
 495   3                              ADCMUC_4_7_OE1 = true;
 496   3                              ADCMUC_4_7_OE2 = true;
 497   3                              //CHIP2
 498   3                              ADCMUX_8_11_OE1 = true;
 499   3                              ADCMUX_8_11_OE2 = true;
 500   3                              //CHIP3
 501   3                              ADCMUX_12_15_OE1 = true;
 502   3                              ADCMUX_12_15_OE2 = true;
 503   3                              ADCMUX_12_15_S1 = false;
 504   3                              ADCMUX_12_15_S0 = true;
 505   3                              //CHIP4
 506   3                              ADCMUX_16_19_OE1 = true;
 507   3                              ADCMUX_16_19_OE2 = true;
 508   3                              //CHIP5
 509   3                              ADCMUX_20_23_OE1 = true;
 510   3                              ADCMUX_20_23_OE2 = true;
 511   3                              //CHIP6
 512   3                              ADCMUX_24_27_OE1 = true;
 513   3                              ADCMUX_24_27_OE2 = true;
 514   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 515   3                              ADCMUX_12_15_OE1 = false;
 516   3                              ADCMUX_12_15_OE2 = true;
 517   3                              break;
 518   3                      }
 519   2                      case 13:{//MLD13
 520   3                              //ADC MUX
 521   3                              AMX0SL = 0x03;
 522   3                              //CHIP0
 523   3                              ADCMUX_0_3_OE1 = true;
 524   3                              ADCMUX_0_3_OE2 = true;
 525   3                              //CHIP1
 526   3                              ADCMUC_4_7_OE1 = true;
 527   3                              ADCMUC_4_7_OE2 = true;
 528   3                              //CHIP2
 529   3                              ADCMUX_8_11_OE1 = true;
 530   3                              ADCMUX_8_11_OE2 = true;
 531   3                              //CHIP3
 532   3                              ADCMUX_12_15_OE1 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 66  

 533   3                              ADCMUX_12_15_OE2 = true;
 534   3                              ADCMUX_12_15_S1 = true;
 535   3                              ADCMUX_12_15_S0 = true;
 536   3                              //CHIP4
 537   3                              ADCMUX_16_19_OE1 = true;
 538   3                              ADCMUX_16_19_OE2 = true;
 539   3                              //CHIP5
 540   3                              ADCMUX_20_23_OE1 = true;
 541   3                              ADCMUX_20_23_OE2 = true;
 542   3                              //CHIP6
 543   3                              ADCMUX_24_27_OE1 = true;
 544   3                              ADCMUX_24_27_OE2 = true;
 545   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 546   3                              ADCMUX_12_15_OE1 = false;
 547   3                              ADCMUX_12_15_OE2 = true;
 548   3                              break;
 549   3                      }
 550   2                      case 14:{//MLD14
 551   3                              //ADC MUX
 552   3                              AMX0SL = 0x03;
 553   3                              //CHIP0
 554   3                              ADCMUX_0_3_OE1 = true;
 555   3                              ADCMUX_0_3_OE2 = true;
 556   3                              //CHIP1
 557   3                              ADCMUC_4_7_OE1 = true;
 558   3                              ADCMUC_4_7_OE2 = true;
 559   3                              //CHIP2
 560   3                              ADCMUX_8_11_OE1 = true;
 561   3                              ADCMUX_8_11_OE2 = true;
 562   3                              //CHIP3
 563   3                              ADCMUX_12_15_OE1 = true;
 564   3                              ADCMUX_12_15_OE2 = true;
 565   3                              ADCMUX_12_15_S1 = false;
 566   3                              ADCMUX_12_15_S0 = true;
 567   3                              //CHIP4
 568   3                              ADCMUX_16_19_OE1 = true;
 569   3                              ADCMUX_16_19_OE2 = true;
 570   3                              //CHIP5
 571   3                              ADCMUX_20_23_OE1 = true;
 572   3                              ADCMUX_20_23_OE2 = true;
 573   3                              //CHIP6
 574   3                              ADCMUX_24_27_OE1 = true;
 575   3                              ADCMUX_24_27_OE2 = true;
 576   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 577   3                              ADCMUX_12_15_OE1 = true;
 578   3                              ADCMUX_12_15_OE2 = false;
 579   3                              break;
 580   3                      }
 581   2                      case 15:{//MLD15
 582   3                              //ADC MUX
 583   3                              AMX0SL = 0x03;
 584   3                              //CHIP0
 585   3                              ADCMUX_0_3_OE1 = true;
 586   3                              ADCMUX_0_3_OE2 = true;
 587   3                              //CHIP1
 588   3                              ADCMUC_4_7_OE1 = true;
 589   3                              ADCMUC_4_7_OE2 = true;
 590   3                              //CHIP2
 591   3                              ADCMUX_8_11_OE1 = true;
 592   3                              ADCMUX_8_11_OE2 = true;
 593   3                              //CHIP3
 594   3                              ADCMUX_12_15_OE1 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 67  

 595   3                              ADCMUX_12_15_OE2 = true;
 596   3                              ADCMUX_12_15_S1 = true;
 597   3                              ADCMUX_12_15_S0 = true;
 598   3                              //CHIP4
 599   3                              ADCMUX_16_19_OE1 = true;
 600   3                              ADCMUX_16_19_OE2 = true;
 601   3                              //CHIP5
 602   3                              ADCMUX_20_23_OE1 = true;
 603   3                              ADCMUX_20_23_OE2 = true;
 604   3                              //CHIP6
 605   3                              ADCMUX_24_27_OE1 = true;
 606   3                              ADCMUX_24_27_OE2 = true;
 607   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 608   3                              ADCMUX_12_15_OE1 = true;
 609   3                              ADCMUX_12_15_OE2 = false;
 610   3                              break;
 611   3                      }
 612   2                      case 16:{//MLD16
 613   3                              //ADC MUX
 614   3                              AMX0SL = 0x04;
 615   3                              //CHIP0
 616   3                              ADCMUX_0_3_OE1 = true;
 617   3                              ADCMUX_0_3_OE2 = true;
 618   3                              //CHIP1
 619   3                              ADCMUC_4_7_OE1 = true;
 620   3                              ADCMUC_4_7_OE2 = true;
 621   3                              //CHIP2
 622   3                              ADCMUX_8_11_OE1 = true;
 623   3                              ADCMUX_8_11_OE2 = true;
 624   3                              //CHIP3
 625   3                              ADCMUX_12_15_OE1 = true;
 626   3                              ADCMUX_12_15_OE2 = true;
 627   3                              //CHIP4
 628   3                              ADCMUX_16_19_OE1 = true;
 629   3                              ADCMUX_16_19_OE2 = true;
 630   3                              ADCMUX_16_19_S1 = false;
 631   3                              ADCMUX_16_19_S0 = true;
 632   3                              //CHIP5
 633   3                              ADCMUX_20_23_OE1 = true;
 634   3                              ADCMUX_20_23_OE2 = true;
 635   3                              //CHIP6
 636   3                              ADCMUX_24_27_OE1 = true;
 637   3                              ADCMUX_24_27_OE2 = true;
 638   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 639   3                              ADCMUX_16_19_OE1 = false;
 640   3                              ADCMUX_16_19_OE2 = true;
 641   3                              break;
 642   3                      }
 643   2                      case 17:{//MLD17
 644   3                              //ADC MUX
 645   3                              AMX0SL = 0x04;
 646   3                              //CHIP0
 647   3                              ADCMUX_0_3_OE1 = true;
 648   3                              ADCMUX_0_3_OE2 = true;
 649   3                              //CHIP1
 650   3                              ADCMUC_4_7_OE1 = true;
 651   3                              ADCMUC_4_7_OE2 = true;
 652   3                              //CHIP2
 653   3                              ADCMUX_8_11_OE1 = true;
 654   3                              ADCMUX_8_11_OE2 = true;
 655   3                              //CHIP3
 656   3                              ADCMUX_12_15_OE1 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 68  

 657   3                              ADCMUX_12_15_OE2 = true;
 658   3                              //CHIP4
 659   3                              ADCMUX_16_19_OE1 = true;
 660   3                              ADCMUX_16_19_OE2 = true;
 661   3                              ADCMUX_16_19_S1 = true;
 662   3                              ADCMUX_16_19_S0 = true;
 663   3                              //CHIP5
 664   3                              ADCMUX_20_23_OE1 = true;
 665   3                              ADCMUX_20_23_OE2 = true;
 666   3                              //CHIP6
 667   3                              ADCMUX_24_27_OE1 = true;
 668   3                              ADCMUX_24_27_OE2 = true;
 669   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 670   3                              ADCMUX_16_19_OE1 = false;
 671   3                              ADCMUX_16_19_OE2 = true;
 672   3                              break;
 673   3                      }
 674   2                      case 18:{//MLD18
 675   3                              //ADC MUX
 676   3                              AMX0SL = 0x04;
 677   3                              //CHIP0
 678   3                              ADCMUX_0_3_OE1 = true;
 679   3                              ADCMUX_0_3_OE2 = true;
 680   3                              //CHIP1
 681   3                              ADCMUC_4_7_OE1 = true;
 682   3                              ADCMUC_4_7_OE2 = true;
 683   3                              //CHIP2
 684   3                              ADCMUX_8_11_OE1 = true;
 685   3                              ADCMUX_8_11_OE2 = true;
 686   3                              //CHIP3
 687   3                              ADCMUX_12_15_OE1 = true;
 688   3                              ADCMUX_12_15_OE2 = true;
 689   3                              //CHIP4
 690   3                              ADCMUX_16_19_OE1 = true;
 691   3                              ADCMUX_16_19_OE2 = true;
 692   3                              ADCMUX_16_19_S1 = false;
 693   3                              ADCMUX_16_19_S0 = true;
 694   3                              //CHIP5
 695   3                              ADCMUX_20_23_OE1 = true;
 696   3                              ADCMUX_20_23_OE2 = true;
 697   3                              //CHIP6
 698   3                              ADCMUX_24_27_OE1 = true;
 699   3                              ADCMUX_24_27_OE2 = true;
 700   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 701   3                              ADCMUX_16_19_OE1 = true;
 702   3                              ADCMUX_16_19_OE2 = false;
 703   3                              break;
 704   3                      }
 705   2                      case 19:{//MLD19
 706   3                              //ADC MUX
 707   3                              AMX0SL = 0x04;
 708   3                              //CHIP0
 709   3                              ADCMUX_0_3_OE1 = true;
 710   3                              ADCMUX_0_3_OE2 = true;
 711   3                              //CHIP1
 712   3                              ADCMUC_4_7_OE1 = true;
 713   3                              ADCMUC_4_7_OE2 = true;
 714   3                              //CHIP2
 715   3                              ADCMUX_8_11_OE1 = true;
 716   3                              ADCMUX_8_11_OE2 = true;
 717   3                              //CHIP3
 718   3                              ADCMUX_12_15_OE1 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 69  

 719   3                              ADCMUX_12_15_OE2 = true;
 720   3                              //CHIP4
 721   3                              ADCMUX_16_19_OE1 = true;
 722   3                              ADCMUX_16_19_OE2 = true;
 723   3                              ADCMUX_16_19_S1 = true;
 724   3                              ADCMUX_16_19_S0 = true;
 725   3                              //CHIP5
 726   3                              ADCMUX_20_23_OE1 = true;
 727   3                              ADCMUX_20_23_OE2 = true;
 728   3                              //CHIP6
 729   3                              ADCMUX_24_27_OE1 = true;
 730   3                              ADCMUX_24_27_OE2 = true;
 731   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 732   3                              ADCMUX_16_19_OE1 = true;
 733   3                              ADCMUX_16_19_OE2 = false;
 734   3                              break;
 735   3                      }
 736   2                      case 20:{//MLD20
 737   3                              //ADC MUX
 738   3                              AMX0SL = 0x04;
 739   3                              //CHIP0
 740   3                              ADCMUX_0_3_OE1 = true;
 741   3                              ADCMUX_0_3_OE2 = true;
 742   3                              //CHIP1
 743   3                              ADCMUC_4_7_OE1 = true;
 744   3                              ADCMUC_4_7_OE2 = true;
 745   3                              //CHIP2
 746   3                              ADCMUX_8_11_OE1 = true;
 747   3                              ADCMUX_8_11_OE2 = true;
 748   3                              //CHIP3
 749   3                              ADCMUX_12_15_OE1 = true;
 750   3                              ADCMUX_12_15_OE2 = true;
 751   3                              //CHIP4
 752   3                              ADCMUX_16_19_OE1 = true;
 753   3                              ADCMUX_16_19_OE2 = true;
 754   3                              //CHIP5
 755   3                              ADCMUX_20_23_OE1 = true;
 756   3                              ADCMUX_20_23_OE2 = true;
 757   3                              ADCMUX_20_23_S1 = false;
 758   3                              ADCMUX_20_23_S0 = true;
 759   3                              //CHIP6
 760   3                              ADCMUX_24_27_OE1 = true;
 761   3                              ADCMUX_24_27_OE2 = true;
 762   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 763   3                              ADCMUX_20_23_OE1 = false;
 764   3                              ADCMUX_20_23_OE2 = true;
 765   3                              break;
 766   3                      }
 767   2                      case 21:{//MLD21
 768   3                              //ADC MUX
 769   3                              AMX0SL = 0x05;
 770   3                              //CHIP0
 771   3                              ADCMUX_0_3_OE1 = true;
 772   3                              ADCMUX_0_3_OE2 = true;
 773   3                              //CHIP1
 774   3                              ADCMUC_4_7_OE1 = true;
 775   3                              ADCMUC_4_7_OE2 = true;
 776   3                              //CHIP2
 777   3                              ADCMUX_8_11_OE1 = true;
 778   3                              ADCMUX_8_11_OE2 = true;
 779   3                              //CHIP3
 780   3                              ADCMUX_12_15_OE1 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 70  

 781   3                              ADCMUX_12_15_OE2 = true;
 782   3                              //CHIP4
 783   3                              ADCMUX_16_19_OE1 = true;
 784   3                              ADCMUX_16_19_OE2 = true;
 785   3                              //CHIP5
 786   3                              ADCMUX_20_23_OE1 = false;
 787   3                              ADCMUX_20_23_OE2 = true;
 788   3                              ADCMUX_20_23_S1 = true;
 789   3                              ADCMUX_20_23_S0 = true;
 790   3                              //CHIP6
 791   3                              ADCMUX_24_27_OE1 = true;
 792   3                              ADCMUX_24_27_OE2 = true;
 793   3                              ADCMUX_24_27_S1 = false;
 794   3                              ADCMUX_24_27_S0 = true;
 795   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 796   3                              ADCMUX_24_27_OE1 = false;
 797   3                              ADCMUX_24_27_OE2 = true;
 798   3                              break;
 799   3                      }
 800   2                      case 22:{//MLD22
 801   3                              //ADC MUX
 802   3                              AMX0SL = 0x05;
 803   3                              //CHIP0
 804   3                              ADCMUX_0_3_OE1 = true;
 805   3                              ADCMUX_0_3_OE2 = true;
 806   3                              //CHIP1
 807   3                              ADCMUC_4_7_OE1 = true;
 808   3                              ADCMUC_4_7_OE2 = true;
 809   3                              //CHIP2
 810   3                              ADCMUX_8_11_OE1 = true;
 811   3                              ADCMUX_8_11_OE2 = true;
 812   3                              //CHIP3
 813   3                              ADCMUX_12_15_OE1 = true;
 814   3                              ADCMUX_12_15_OE2 = true;
 815   3                              //CHIP4
 816   3                              ADCMUX_16_19_OE1 = true;
 817   3                              ADCMUX_16_19_OE2 = true;
 818   3                              //CHIP5
 819   3                              ADCMUX_20_23_OE1 = true;
 820   3                              ADCMUX_20_23_OE2 = true;
 821   3                              ADCMUX_20_23_S1 = false;
 822   3                              ADCMUX_20_23_S0 = true;
 823   3                              //CHIP6
 824   3                              ADCMUX_24_27_OE1 = true;
 825   3                              ADCMUX_24_27_OE2 = true;        
 826   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 827   3                              ADCMUX_20_23_OE1 = true;
 828   3                              ADCMUX_20_23_OE2 = false;
 829   3                              break;
 830   3                      }
 831   2                      case 23:{//MLD23
 832   3                              //ADC MUX
 833   3                              AMX0SL = 0x05;
 834   3                              //CHIP0
 835   3                              ADCMUX_0_3_OE1 = true;
 836   3                              ADCMUX_0_3_OE2 = true;
 837   3                              //CHIP1
 838   3                              ADCMUC_4_7_OE1 = true;
 839   3                              ADCMUC_4_7_OE2 = true;
 840   3                              //CHIP2
 841   3                              ADCMUX_8_11_OE1 = true;
 842   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 71  

 843   3                              //CHIP3
 844   3                              ADCMUX_12_15_OE1 = true;
 845   3                              ADCMUX_12_15_OE2 = true;
 846   3                              //CHIP4
 847   3                              ADCMUX_16_19_OE1 = true;
 848   3                              ADCMUX_16_19_OE2 = true;
 849   3                              //CHIP5
 850   3                              ADCMUX_20_23_OE1 = true;
 851   3                              ADCMUX_20_23_OE2 = true;
 852   3                              ADCMUX_20_23_S1 = true;
 853   3                              ADCMUX_20_23_S0 = true;
 854   3                              //CHIP6
 855   3                              ADCMUX_24_27_OE1 = true;
 856   3                              ADCMUX_24_27_OE2 = true;
 857   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 858   3                              ADCMUX_20_23_OE1 = true;
 859   3                              ADCMUX_20_23_OE2 = false;
 860   3                              break;
 861   3                      }
 862   2                      case 24:{//MLD24
 863   3                              //ADC MUX
 864   3                              AMX0SL = 0x06;
 865   3                              //CHIP0
 866   3                              ADCMUX_0_3_OE1 = true;
 867   3                              ADCMUX_0_3_OE2 = true;
 868   3                              //CHIP1
 869   3                              ADCMUC_4_7_OE1 = true;
 870   3                              ADCMUC_4_7_OE2 = true;
 871   3                              //CHIP2
 872   3                              ADCMUX_8_11_OE1 = true;
 873   3                              ADCMUX_8_11_OE2 = true;
 874   3                              //CHIP3
 875   3                              ADCMUX_12_15_OE1 = true;
 876   3                              ADCMUX_12_15_OE2 = true;
 877   3                              //CHIP4
 878   3                              ADCMUX_16_19_OE1 = true;
 879   3                              ADCMUX_16_19_OE2 = true;
 880   3                              //CHIP5
 881   3                              ADCMUX_20_23_OE1 = true;
 882   3                              ADCMUX_20_23_OE2 = true;
 883   3                              //CHIP6
 884   3                              ADCMUX_24_27_OE1 = true;
 885   3                              ADCMUX_24_27_OE2 = true;
 886   3                              ADCMUX_24_27_S1 = false;
 887   3                              ADCMUX_24_27_S0 = true;
 888   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 889   3                              ADCMUX_24_27_OE1 = false;
 890   3                              ADCMUX_24_27_OE2 = true;
 891   3                              break;
 892   3                      }
 893   2                      case 25:{//MLD25
 894   3                              //ADC MUX
 895   3                              AMX0SL = 0x06;
 896   3                              //CHIP0
 897   3                              ADCMUX_0_3_OE1 = true;
 898   3                              ADCMUX_0_3_OE2 = true;
 899   3                              //CHIP1
 900   3                              ADCMUC_4_7_OE1 = true;
 901   3                              ADCMUC_4_7_OE2 = true;
 902   3                              //CHIP2
 903   3                              ADCMUX_8_11_OE1 = true;
 904   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 72  

 905   3                              //CHIP3
 906   3                              ADCMUX_12_15_OE1 = true;
 907   3                              ADCMUX_12_15_OE2 = true;
 908   3                              //CHIP4
 909   3                              ADCMUX_16_19_OE1 = true;
 910   3                              ADCMUX_16_19_OE2 = true;
 911   3                              //CHIP5
 912   3                              ADCMUX_20_23_OE1 = true;
 913   3                              ADCMUX_20_23_OE2 = true;
 914   3                              //CHIP6
 915   3                              ADCMUX_24_27_OE1 = true;
 916   3                              ADCMUX_24_27_OE2 = true;
 917   3                              ADCMUX_24_27_S1 = true;
 918   3                              ADCMUX_24_27_S0 = true;
 919   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 920   3                              ADCMUX_24_27_OE1 = false;
 921   3                              ADCMUX_24_27_OE2 = true;
 922   3                              break;
 923   3                      }
 924   2                      case 26:{//MLD26
 925   3                              //ADC MUX
 926   3                              AMX0SL = 0x06;
 927   3                              //CHIP0
 928   3                              ADCMUX_0_3_OE1 = true;
 929   3                              ADCMUX_0_3_OE2 = true;
 930   3                              //CHIP1
 931   3                              ADCMUC_4_7_OE1 = true;
 932   3                              ADCMUC_4_7_OE2 = true;
 933   3                              //CHIP2
 934   3                              ADCMUX_8_11_OE1 = true;
 935   3                              ADCMUX_8_11_OE2 = true;
 936   3                              //CHIP3
 937   3                              ADCMUX_12_15_OE1 = true;
 938   3                              ADCMUX_12_15_OE2 = true;
 939   3                              //CHIP4
 940   3                              ADCMUX_16_19_OE1 = true;
 941   3                              ADCMUX_16_19_OE2 = true;
 942   3                              //CHIP5
 943   3                              ADCMUX_20_23_OE1 = true;
 944   3                              ADCMUX_20_23_OE2 = true;
 945   3                              //CHIP6
 946   3                              ADCMUX_24_27_OE1 = true;
 947   3                              ADCMUX_24_27_OE2 = true;
 948   3                              ADCMUX_24_27_S1 = false;
 949   3                              ADCMUX_24_27_S0 = true;
 950   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 951   3                              ADCMUX_24_27_OE1 = true;
 952   3                              ADCMUX_24_27_OE2 = false;
 953   3                              break;
 954   3                      }
 955   2                      case 27:{//MLD27
 956   3                              //ADC MUX
 957   3                              AMX0SL = 0x06;
 958   3                              //CHIP0
 959   3                              ADCMUX_0_3_OE1 = true;
 960   3                              ADCMUX_0_3_OE2 = true;
 961   3                              //CHIP1
 962   3                              ADCMUC_4_7_OE1 = true;
 963   3                              ADCMUC_4_7_OE2 = true;
 964   3                              //CHIP2
 965   3                              ADCMUX_8_11_OE1 = true;
 966   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 73  

 967   3                              //CHIP3
 968   3                              ADCMUX_12_15_OE1 = true;
 969   3                              ADCMUX_12_15_OE2 = true;
 970   3                              //CHIP4
 971   3                              ADCMUX_16_19_OE1 = true;
 972   3                              ADCMUX_16_19_OE2 = true;
 973   3                              //CHIP5
 974   3                              ADCMUX_20_23_OE1 = true;
 975   3                              ADCMUX_20_23_OE2 = true;
 976   3                              //CHIP6
 977   3                              ADCMUX_24_27_OE1 = true;
 978   3                              ADCMUX_24_27_OE2 = true;
 979   3                              ADCMUX_24_27_S1 = true;
 980   3                              ADCMUX_24_27_S0 = true;
 981   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
 982   3                              ADCMUX_24_27_OE1 = true;
 983   3                              ADCMUX_24_27_OE2 = false;
 984   3                              break;
 985   3                      }
 986   2                      case 32:{//MPD0
 987   3                              //ADC MUX
 988   3                              AMX0SL = 0x00;
 989   3                              //CHIP0
 990   3                              ADCMUX_0_3_OE1 = true;
 991   3                              ADCMUX_0_3_OE2 = true;
 992   3                              ADCMUX_0_3_S1 = false;
 993   3                              ADCMUX_0_3_S0 = false;
 994   3                              //CHIP1
 995   3                              ADCMUC_4_7_OE1 = true;
 996   3                              ADCMUC_4_7_OE2 = true;
 997   3                              //CHIP2
 998   3                              ADCMUX_8_11_OE1 = true;
 999   3                              ADCMUX_8_11_OE2 = true;
1000   3                              //CHIP3
1001   3                              ADCMUX_12_15_OE1 = true;
1002   3                              ADCMUX_12_15_OE2 = true;
1003   3                              //CHIP4
1004   3                              ADCMUX_16_19_OE1 = true;
1005   3                              ADCMUX_16_19_OE2 = true;
1006   3                              //CHIP5
1007   3                              ADCMUX_20_23_OE1 = true;
1008   3                              ADCMUX_20_23_OE2 = true;
1009   3                              //CHIP6
1010   3                              ADCMUX_24_27_OE1 = true;
1011   3                              ADCMUX_24_27_OE2 = true;
1012   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1013   3                              ADCMUX_0_3_OE1 = false;
1014   3                              ADCMUX_0_3_OE2 = true;
1015   3                              break;
1016   3                      }
1017   2                      case 33:{//MPD1
1018   3                              //ADC MUX
1019   3                              AMX0SL = 0x00;
1020   3                              //CHIP0
1021   3                              ADCMUX_0_3_OE1 = true;
1022   3                              ADCMUX_0_3_OE2 = true;
1023   3                              ADCMUX_0_3_S1 = true;
1024   3                              ADCMUX_0_3_S0 = false;
1025   3                              //CHIP1
1026   3                              ADCMUC_4_7_OE1 = true;
1027   3                              ADCMUC_4_7_OE2 = true;
1028   3                              //CHIP2
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 74  

1029   3                              ADCMUX_8_11_OE1 = true;
1030   3                              ADCMUX_8_11_OE2 = true;
1031   3                              //CHIP3
1032   3                              ADCMUX_12_15_OE1 = true;
1033   3                              ADCMUX_12_15_OE2 = true;
1034   3                              //CHIP4
1035   3                              ADCMUX_16_19_OE1 = true;
1036   3                              ADCMUX_16_19_OE2 = true;
1037   3                              //CHIP5
1038   3                              ADCMUX_20_23_OE1 = true;
1039   3                              ADCMUX_20_23_OE2 = true;
1040   3                              //CHIP6
1041   3                              ADCMUX_24_27_OE1 = true;
1042   3                              ADCMUX_24_27_OE2 = true;
1043   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1044   3                              ADCMUX_0_3_OE1 = false;
1045   3                              ADCMUX_0_3_OE2 = true;
1046   3                              break;
1047   3                      }
1048   2                      case 34:{//MPD2
1049   3                              //ADC MUX
1050   3                              AMX0SL = 0x00;
1051   3                              //CHIP0
1052   3                              ADCMUX_0_3_OE1 = true;
1053   3                              ADCMUX_0_3_OE2 = true;
1054   3                              ADCMUX_0_3_S1 = false;
1055   3                              ADCMUX_0_3_S0 = false;
1056   3                              //CHIP1
1057   3                              ADCMUC_4_7_OE1 = true;
1058   3                              ADCMUC_4_7_OE2 = true;
1059   3                              //CHIP2
1060   3                              ADCMUX_8_11_OE1 = true;
1061   3                              ADCMUX_8_11_OE2 = true;
1062   3                              //CHIP3
1063   3                              ADCMUX_12_15_OE1 = true;
1064   3                              ADCMUX_12_15_OE2 = true;
1065   3                              //CHIP4
1066   3                              ADCMUX_16_19_OE1 = true;
1067   3                              ADCMUX_16_19_OE2 = true;
1068   3                              //CHIP5
1069   3                              ADCMUX_20_23_OE1 = true;
1070   3                              ADCMUX_20_23_OE2 = true;
1071   3                              //CHIP6
1072   3                              ADCMUX_24_27_OE1 = true;
1073   3                              ADCMUX_24_27_OE2 = true;
1074   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1075   3                              ADCMUX_0_3_OE1 = true;
1076   3                              ADCMUX_0_3_OE2 = false;
1077   3                              break;
1078   3                      }
1079   2                      case 35:{//MPD3
1080   3                              //ADC MUX
1081   3                              AMX0SL = 0x00;
1082   3                              //CHIP0
1083   3                              ADCMUX_0_3_OE1 = true;
1084   3                              ADCMUX_0_3_OE2 = true;
1085   3                              ADCMUX_0_3_S1 = true;
1086   3                              ADCMUX_0_3_S0 = false;
1087   3                              //CHIP1
1088   3                              ADCMUC_4_7_OE1 = true;
1089   3                              ADCMUC_4_7_OE2 = true;
1090   3                              //CHIP2
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 75  

1091   3                              ADCMUX_8_11_OE1 = true;
1092   3                              ADCMUX_8_11_OE2 = true;
1093   3                              //CHIP3
1094   3                              ADCMUX_12_15_OE1 = true;
1095   3                              ADCMUX_12_15_OE2 = true;
1096   3                              //CHIP4
1097   3                              ADCMUX_16_19_OE1 = true;
1098   3                              ADCMUX_16_19_OE2 = true;
1099   3                              //CHIP5
1100   3                              ADCMUX_20_23_OE1 = true;
1101   3                              ADCMUX_20_23_OE2 = true;
1102   3                              //CHIP6
1103   3                              ADCMUX_24_27_OE1 = true;
1104   3                              ADCMUX_24_27_OE2 = true;
1105   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1106   3                              ADCMUX_0_3_OE1 = true;
1107   3                              ADCMUX_0_3_OE2 = false;
1108   3                              break;
1109   3                      }
1110   2                      case 36:{//MPD4
1111   3                              //ADC MUX
1112   3                              AMX0SL = 0x01;
1113   3                              //CHIP0
1114   3                              ADCMUX_0_3_OE1 = true;
1115   3                              ADCMUX_0_3_OE2 = true;
1116   3                              //CHIP1
1117   3                              ADCMUC_4_7_OE1 = true;
1118   3                              ADCMUC_4_7_OE2 = true;
1119   3                              ADCMUX_4_7_S1 = false;
1120   3                              ADCMUX_4_7_S0 = false;
1121   3                              //CHIP2
1122   3                              ADCMUX_8_11_OE1 = true;
1123   3                              ADCMUX_8_11_OE2 = true;
1124   3                              //CHIP3
1125   3                              ADCMUX_12_15_OE1 = true;
1126   3                              ADCMUX_12_15_OE2 = true;
1127   3                              //CHIP4
1128   3                              ADCMUX_16_19_OE1 = true;
1129   3                              ADCMUX_16_19_OE2 = true;
1130   3                              //CHIP5
1131   3                              ADCMUX_20_23_OE1 = true;
1132   3                              ADCMUX_20_23_OE2 = true;
1133   3                              //CHIP6
1134   3                              ADCMUX_24_27_OE1 = true;
1135   3                              ADCMUX_24_27_OE2 = true;
1136   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1137   3                              ADCMUC_4_7_OE1 = false;
1138   3                              ADCMUC_4_7_OE2 = true;
1139   3                              break;
1140   3                      }
1141   2                      case 37:{//MPD5
1142   3                              //ADC MUX
1143   3                              AMX0SL = 0x01;
1144   3                              //CHIP0
1145   3                              ADCMUX_0_3_OE1 = true;
1146   3                              ADCMUX_0_3_OE2 = true;
1147   3                              //CHIP1
1148   3                              ADCMUC_4_7_OE1 = true;
1149   3                              ADCMUC_4_7_OE2 = true;
1150   3                              ADCMUX_4_7_S1 = true;
1151   3                              ADCMUX_4_7_S0 = false;
1152   3                              //CHIP2
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 76  

1153   3                              ADCMUX_8_11_OE1 = true;
1154   3                              ADCMUX_8_11_OE2 = true;
1155   3                              //CHIP3
1156   3                              ADCMUX_12_15_OE1 = true;
1157   3                              ADCMUX_12_15_OE2 = true;
1158   3                              //CHIP4
1159   3                              ADCMUX_16_19_OE1 = true;
1160   3                              ADCMUX_16_19_OE2 = true;
1161   3                              //CHIP5
1162   3                              ADCMUX_20_23_OE1 = true;
1163   3                              ADCMUX_20_23_OE2 = true;
1164   3                              //CHIP6
1165   3                              ADCMUX_24_27_OE1 = true;
1166   3                              ADCMUX_24_27_OE2 = true;
1167   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1168   3                              ADCMUC_4_7_OE1 = false;
1169   3                              ADCMUC_4_7_OE2 = true;
1170   3                              break;
1171   3                      }
1172   2                      case 38:{//MPD6
1173   3                              //ADC MUX
1174   3                              AMX0SL = 0x01;
1175   3                              //CHIP0
1176   3                              ADCMUX_0_3_OE1 = true;
1177   3                              ADCMUX_0_3_OE2 = true;
1178   3                              //CHIP1
1179   3                              ADCMUC_4_7_OE1 = true;
1180   3                              ADCMUC_4_7_OE2 = true;
1181   3                              ADCMUX_4_7_S1 = false;
1182   3                              ADCMUX_4_7_S0 = false;
1183   3                              //CHIP2
1184   3                              ADCMUX_8_11_OE1 = true;
1185   3                              ADCMUX_8_11_OE2 = true;
1186   3                              //CHIP3
1187   3                              ADCMUX_12_15_OE1 = true;
1188   3                              ADCMUX_12_15_OE2 = true;
1189   3                              //CHIP4
1190   3                              ADCMUX_16_19_OE1 = true;
1191   3                              ADCMUX_16_19_OE2 = true;
1192   3                              //CHIP5
1193   3                              ADCMUX_20_23_OE1 = true;
1194   3                              ADCMUX_20_23_OE2 = true;
1195   3                              //CHIP6
1196   3                              ADCMUX_24_27_OE1 = true;
1197   3                              ADCMUX_24_27_OE2 = true;
1198   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1199   3                              ADCMUC_4_7_OE1 = true;
1200   3                              ADCMUC_4_7_OE2 = false;
1201   3                              break;
1202   3                      }
1203   2                      case 39:{//MPD7
1204   3                              //ADC MUX
1205   3                              AMX0SL = 0x01;
1206   3                              //CHIP0
1207   3                              ADCMUX_0_3_OE1 = true;
1208   3                              ADCMUX_0_3_OE2 = true;
1209   3                              //CHIP1
1210   3                              ADCMUC_4_7_OE1 = true;
1211   3                              ADCMUC_4_7_OE2 = true;
1212   3                              ADCMUX_4_7_S1 = true;
1213   3                              ADCMUX_4_7_S0 = false;
1214   3                              //CHIP2
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 77  

1215   3                              ADCMUX_8_11_OE1 = true;
1216   3                              ADCMUX_8_11_OE2 = true;
1217   3                              //CHIP3
1218   3                              ADCMUX_12_15_OE1 = true;
1219   3                              ADCMUX_12_15_OE2 = true;
1220   3                              //CHIP4
1221   3                              ADCMUX_16_19_OE1 = true;
1222   3                              ADCMUX_16_19_OE2 = true;
1223   3                              //CHIP5
1224   3                              ADCMUX_20_23_OE1 = true;
1225   3                              ADCMUX_20_23_OE2 = true;
1226   3                              //CHIP6
1227   3                              ADCMUX_24_27_OE1 = true;
1228   3                              ADCMUX_24_27_OE2 = true;
1229   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1230   3                              ADCMUC_4_7_OE1 = true;
1231   3                              ADCMUC_4_7_OE2 = false;
1232   3                              break;
1233   3                      }
1234   2                      case 40:{//MPD8
1235   3                              //ADC MUX
1236   3                              AMX0SL = 0x02;
1237   3                              //CHIP0
1238   3                              ADCMUX_0_3_OE1 = true;
1239   3                              ADCMUX_0_3_OE2 = true;
1240   3                              //CHIP1
1241   3                              ADCMUC_4_7_OE1 = true;
1242   3                              ADCMUC_4_7_OE2 = true;
1243   3                              //CHIP2
1244   3                              ADCMUX_8_11_OE1 = true;
1245   3                              ADCMUX_8_11_OE2 = true;
1246   3                              ADCMUX_8_11_S1 = false;
1247   3                              ADCMUX_8_11_S0 = false;
1248   3                              //CHIP3
1249   3                              ADCMUX_12_15_OE1 = true;
1250   3                              ADCMUX_12_15_OE2 = true;
1251   3                              //CHIP4
1252   3                              ADCMUX_16_19_OE1 = true;
1253   3                              ADCMUX_16_19_OE2 = true;
1254   3                              //CHIP5
1255   3                              ADCMUX_20_23_OE1 = true;
1256   3                              ADCMUX_20_23_OE2 = true;
1257   3                              //CHIP6
1258   3                              ADCMUX_24_27_OE1 = true;
1259   3                              ADCMUX_24_27_OE2 = true;
1260   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1261   3                              ADCMUX_8_11_OE1 = false;
1262   3                              ADCMUX_8_11_OE2 = true;
1263   3                              break;
1264   3                      }
1265   2                      case 41:{//MPD9
1266   3                              //ADC MUX
1267   3                              AMX0SL = 0x02;
1268   3                              //CHIP0
1269   3                              ADCMUX_0_3_OE1 = true;
1270   3                              ADCMUX_0_3_OE2 = true;
1271   3                              //CHIP1
1272   3                              ADCMUC_4_7_OE1 = true;
1273   3                              ADCMUC_4_7_OE2 = true;
1274   3                              //CHIP2
1275   3                              ADCMUX_8_11_OE1 = true;
1276   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 78  

1277   3                              ADCMUX_8_11_S1 = true;
1278   3                              ADCMUX_8_11_S0 = false;
1279   3                              //CHIP3
1280   3                              ADCMUX_12_15_OE1 = true;
1281   3                              ADCMUX_12_15_OE2 = true;
1282   3                              //CHIP4
1283   3                              ADCMUX_16_19_OE1 = true;
1284   3                              ADCMUX_16_19_OE2 = true;
1285   3                              //CHIP5
1286   3                              ADCMUX_20_23_OE1 = true;
1287   3                              ADCMUX_20_23_OE2 = true;
1288   3                              //CHIP6
1289   3                              ADCMUX_24_27_OE1 = true;
1290   3                              ADCMUX_24_27_OE2 = true;
1291   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1292   3                              ADCMUX_8_11_OE1 = false;
1293   3                              ADCMUX_8_11_OE2 = true;
1294   3                              break;
1295   3                      }
1296   2                      case 42:{//MPD10
1297   3                              //ADC MUX
1298   3                              AMX0SL = 0x02;
1299   3                              //CHIP0
1300   3                              ADCMUX_0_3_OE1 = true;
1301   3                              ADCMUX_0_3_OE2 = true;
1302   3                              //CHIP1
1303   3                              ADCMUC_4_7_OE1 = true;
1304   3                              ADCMUC_4_7_OE2 = true;
1305   3                              //CHIP2
1306   3                              ADCMUX_8_11_OE1 = true;
1307   3                              ADCMUX_8_11_OE2 = true;
1308   3                              ADCMUX_8_11_S1 = false;
1309   3                              ADCMUX_8_11_S0 = false;
1310   3                              //CHIP3
1311   3                              ADCMUX_12_15_OE1 = true;
1312   3                              ADCMUX_12_15_OE2 = true;
1313   3                              //CHIP4
1314   3                              ADCMUX_16_19_OE1 = true;
1315   3                              ADCMUX_16_19_OE2 = true;
1316   3                              //CHIP5
1317   3                              ADCMUX_20_23_OE1 = true;
1318   3                              ADCMUX_20_23_OE2 = true;
1319   3                              //CHIP6
1320   3                              ADCMUX_24_27_OE1 = true;
1321   3                              ADCMUX_24_27_OE2 = true;
1322   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1323   3                              ADCMUX_8_11_OE1 = false;
1324   3                              ADCMUX_8_11_OE2 = true;
1325   3                              break;
1326   3                      }
1327   2                      case 43:{//MPD11
1328   3                              //ADC MUX
1329   3                              AMX0SL = 0x02;
1330   3                              //CHIP0
1331   3                              ADCMUX_0_3_OE1 = true;
1332   3                              ADCMUX_0_3_OE2 = true;
1333   3                              //CHIP1
1334   3                              ADCMUC_4_7_OE1 = true;
1335   3                              ADCMUC_4_7_OE2 = true;
1336   3                              //CHIP2
1337   3                              ADCMUX_8_11_OE1 = true;
1338   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 79  

1339   3                              ADCMUX_8_11_S1 = true;
1340   3                              ADCMUX_8_11_S0 = false;
1341   3                              //CHIP3
1342   3                              ADCMUX_12_15_OE1 = true;
1343   3                              ADCMUX_12_15_OE2 = true;
1344   3                              //CHIP4
1345   3                              ADCMUX_16_19_OE1 = true;
1346   3                              ADCMUX_16_19_OE2 = true;
1347   3                              //CHIP5
1348   3                              ADCMUX_20_23_OE1 = true;
1349   3                              ADCMUX_20_23_OE2 = true;
1350   3                              //CHIP6
1351   3                              ADCMUX_24_27_OE1 = true;
1352   3                              ADCMUX_24_27_OE2 = true;
1353   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1354   3                              ADCMUX_8_11_OE1 = true;
1355   3                              ADCMUX_8_11_OE2 = false;
1356   3                              break;
1357   3                      }
1358   2                      case 44:{//MPD12
1359   3                              //ADC MUX
1360   3                              AMX0SL = 0x03;
1361   3                              //CHIP0
1362   3                              ADCMUX_0_3_OE1 = true;
1363   3                              ADCMUX_0_3_OE2 = true;
1364   3                              //CHIP1
1365   3                              ADCMUC_4_7_OE1 = true;
1366   3                              ADCMUC_4_7_OE2 = true;
1367   3                              //CHIP2
1368   3                              ADCMUX_8_11_OE1 = true;
1369   3                              ADCMUX_8_11_OE2 = true;
1370   3                              //CHIP3
1371   3                              ADCMUX_12_15_OE1 = true;
1372   3                              ADCMUX_12_15_OE2 = true;
1373   3                              ADCMUX_12_15_S1 = false;
1374   3                              ADCMUX_12_15_S0 = false;
1375   3                              //CHIP4
1376   3                              ADCMUX_16_19_OE1 = true;
1377   3                              ADCMUX_16_19_OE2 = true;
1378   3                              //CHIP5
1379   3                              ADCMUX_20_23_OE1 = true;
1380   3                              ADCMUX_20_23_OE2 = true;
1381   3                              //CHIP6
1382   3                              ADCMUX_24_27_OE1 = true;
1383   3                              ADCMUX_24_27_OE2 = true;
1384   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1385   3                              ADCMUX_12_15_OE1 = false;
1386   3                              ADCMUX_12_15_OE2 = true;
1387   3                              break;
1388   3                      }
1389   2                      case 45:{//MPD13
1390   3                              //ADC MUX
1391   3                              AMX0SL = 0x03;
1392   3                              //CHIP0
1393   3                              ADCMUX_0_3_OE1 = true;
1394   3                              ADCMUX_0_3_OE2 = true;
1395   3                              //CHIP1
1396   3                              ADCMUC_4_7_OE1 = true;
1397   3                              ADCMUC_4_7_OE2 = true;
1398   3                              //CHIP2
1399   3                              ADCMUX_8_11_OE1 = true;
1400   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 80  

1401   3                              //CHIP3
1402   3                              ADCMUX_12_15_OE1 = true;
1403   3                              ADCMUX_12_15_OE2 = true;
1404   3                              ADCMUX_12_15_S1 = true;
1405   3                              ADCMUX_12_15_S0 = false;
1406   3                              //CHIP4
1407   3                              ADCMUX_16_19_OE1 = true;
1408   3                              ADCMUX_16_19_OE2 = true;
1409   3                              //CHIP5
1410   3                              ADCMUX_20_23_OE1 = true;
1411   3                              ADCMUX_20_23_OE2 = true;
1412   3                              //CHIP6
1413   3                              ADCMUX_24_27_OE1 = true;
1414   3                              ADCMUX_24_27_OE2 = true;
1415   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1416   3                              ADCMUX_12_15_OE1 = false;
1417   3                              ADCMUX_12_15_OE2 = true;
1418   3                              break;
1419   3                      }
1420   2                      case 46:{//MPD14
1421   3                              //ADC MUX
1422   3                              AMX0SL = 0x03;
1423   3                              //CHIP0
1424   3                              ADCMUX_0_3_OE1 = true;
1425   3                              ADCMUX_0_3_OE2 = true;
1426   3                              //CHIP1
1427   3                              ADCMUC_4_7_OE1 = true;
1428   3                              ADCMUC_4_7_OE2 = true;
1429   3                              //CHIP2
1430   3                              ADCMUX_8_11_OE1 = true;
1431   3                              ADCMUX_8_11_OE2 = true;
1432   3                              //CHIP3
1433   3                              ADCMUX_12_15_OE1 = true;
1434   3                              ADCMUX_12_15_OE2 = true;
1435   3                              ADCMUX_12_15_S1 = false;
1436   3                              ADCMUX_12_15_S0 = false;
1437   3                              //CHIP4
1438   3                              ADCMUX_16_19_OE1 = true;
1439   3                              ADCMUX_16_19_OE2 = true;
1440   3                              //CHIP5
1441   3                              ADCMUX_20_23_OE1 = true;
1442   3                              ADCMUX_20_23_OE2 = true;
1443   3                              //CHIP6
1444   3                              ADCMUX_24_27_OE1 = true;
1445   3                              ADCMUX_24_27_OE2 = true;
1446   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1447   3                              ADCMUX_12_15_OE1 = true;
1448   3                              ADCMUX_12_15_OE2 = false;
1449   3                              break;
1450   3                      }
1451   2                      case 47:{//MPD15
1452   3                              //ADC MUX
1453   3                              AMX0SL = 0x03;
1454   3                              //CHIP0
1455   3                              ADCMUX_0_3_OE1 = true;
1456   3                              ADCMUX_0_3_OE2 = true;
1457   3                              //CHIP1
1458   3                              ADCMUC_4_7_OE1 = true;
1459   3                              ADCMUC_4_7_OE2 = true;
1460   3                              //CHIP2
1461   3                              ADCMUX_8_11_OE1 = true;
1462   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 81  

1463   3                              //CHIP3
1464   3                              ADCMUX_12_15_OE1 = true;
1465   3                              ADCMUX_12_15_OE2 = true;
1466   3                              ADCMUX_12_15_S1 = true;
1467   3                              ADCMUX_12_15_S0 = false;
1468   3                              //CHIP4
1469   3                              ADCMUX_16_19_OE1 = true;
1470   3                              ADCMUX_16_19_OE2 = true;
1471   3                              //CHIP5
1472   3                              ADCMUX_20_23_OE1 = true;
1473   3                              ADCMUX_20_23_OE2 = true;
1474   3                              //CHIP6
1475   3                              ADCMUX_24_27_OE1 = true;
1476   3                              ADCMUX_24_27_OE2 = true;
1477   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1478   3                              ADCMUX_12_15_OE1 = true;
1479   3                              ADCMUX_12_15_OE2 = false;
1480   3                              break;
1481   3                      }
1482   2                      case 48:{//MPD16
1483   3                              //ADC MUX
1484   3                              AMX0SL = 0x04;
1485   3                              //CHIP0
1486   3                              ADCMUX_0_3_OE1 = true;
1487   3                              ADCMUX_0_3_OE2 = true;
1488   3                              //CHIP1
1489   3                              ADCMUC_4_7_OE1 = true;
1490   3                              ADCMUC_4_7_OE2 = true;
1491   3                              //CHIP2
1492   3                              ADCMUX_8_11_OE1 = true;
1493   3                              ADCMUX_8_11_OE2 = true;
1494   3                              //CHIP3
1495   3                              ADCMUX_12_15_OE1 = true;
1496   3                              ADCMUX_12_15_OE2 = true;
1497   3                              //CHIP4
1498   3                              ADCMUX_16_19_OE1 = true;
1499   3                              ADCMUX_16_19_OE2 = true;
1500   3                              ADCMUX_16_19_S1 = false;
1501   3                              ADCMUX_16_19_S0 = false;
1502   3                              //CHIP5
1503   3                              ADCMUX_20_23_OE1 = true;
1504   3                              ADCMUX_20_23_OE2 = true;
1505   3                              //CHIP6
1506   3                              ADCMUX_24_27_OE1 = true;
1507   3                              ADCMUX_24_27_OE2 = true;
1508   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1509   3                              ADCMUX_16_19_OE1 = false;
1510   3                              ADCMUX_16_19_OE2 = true;
1511   3                              break;
1512   3                      }
1513   2                      case 49:{//MPD17
1514   3                              //ADC MUX
1515   3                              AMX0SL = 0x04;
1516   3                              //CHIP0
1517   3                              ADCMUX_0_3_OE1 = true;
1518   3                              ADCMUX_0_3_OE2 = true;
1519   3                              //CHIP1
1520   3                              ADCMUC_4_7_OE1 = true;
1521   3                              ADCMUC_4_7_OE2 = true;
1522   3                              //CHIP2
1523   3                              ADCMUX_8_11_OE1 = true;
1524   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 82  

1525   3                              //CHIP3
1526   3                              ADCMUX_12_15_OE1 = true;
1527   3                              ADCMUX_12_15_OE2 = true;
1528   3                              //CHIP4
1529   3                              ADCMUX_16_19_OE1 = true;
1530   3                              ADCMUX_16_19_OE2 = true;
1531   3                              ADCMUX_16_19_S1 = true;
1532   3                              ADCMUX_16_19_S0 = false;
1533   3                              //CHIP5
1534   3                              ADCMUX_20_23_OE1 = true;
1535   3                              ADCMUX_20_23_OE2 = true;
1536   3                              //CHIP6
1537   3                              ADCMUX_24_27_OE1 = true;
1538   3                              ADCMUX_24_27_OE2 = true;
1539   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1540   3                              ADCMUX_16_19_OE1 = false;
1541   3                              ADCMUX_16_19_OE2 = true;
1542   3                              break;
1543   3                      }
1544   2                      case 50:{//MPD18
1545   3                              //ADC MUX
1546   3                              AMX0SL = 0x04;
1547   3                              //CHIP0
1548   3                              ADCMUX_0_3_OE1 = true;
1549   3                              ADCMUX_0_3_OE2 = true;
1550   3                              //CHIP1
1551   3                              ADCMUC_4_7_OE1 = true;
1552   3                              ADCMUC_4_7_OE2 = true;
1553   3                              //CHIP2
1554   3                              ADCMUX_8_11_OE1 = true;
1555   3                              ADCMUX_8_11_OE2 = true;
1556   3                              //CHIP3
1557   3                              ADCMUX_12_15_OE1 = true;
1558   3                              ADCMUX_12_15_OE2 = true;
1559   3                              //CHIP4
1560   3                              ADCMUX_16_19_OE1 = true;
1561   3                              ADCMUX_16_19_OE2 = true;
1562   3                              ADCMUX_16_19_S1 = true;
1563   3                              ADCMUX_16_19_S0 = false;
1564   3                              //CHIP5
1565   3                              ADCMUX_20_23_OE1 = true;
1566   3                              ADCMUX_20_23_OE2 = true;
1567   3                              //CHIP6
1568   3                              ADCMUX_24_27_OE1 = true;
1569   3                              ADCMUX_24_27_OE2 = true;
1570   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1571   3                              ADCMUX_16_19_OE1 = true;
1572   3                              ADCMUX_16_19_OE2 = false;
1573   3                              break;
1574   3                      }
1575   2                      case 51:{//MPD19
1576   3                              //ADC MUX
1577   3                              AMX0SL = 0x04;
1578   3                              //CHIP0
1579   3                              ADCMUX_0_3_OE1 = true;
1580   3                              ADCMUX_0_3_OE2 = true;
1581   3                              //CHIP1
1582   3                              ADCMUC_4_7_OE1 = true;
1583   3                              ADCMUC_4_7_OE2 = true;
1584   3                              //CHIP2
1585   3                              ADCMUX_8_11_OE1 = true;
1586   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 83  

1587   3                              //CHIP3
1588   3                              ADCMUX_12_15_OE1 = true;
1589   3                              ADCMUX_12_15_OE2 = true;
1590   3                              //CHIP4
1591   3                              ADCMUX_16_19_OE1 = true;
1592   3                              ADCMUX_16_19_OE2 = true;
1593   3                              ADCMUX_16_19_S1 = true;
1594   3                              ADCMUX_16_19_S0 = false;
1595   3                              //CHIP5
1596   3                              ADCMUX_20_23_OE1 = true;
1597   3                              ADCMUX_20_23_OE2 = true;
1598   3                              //CHIP6
1599   3                              ADCMUX_24_27_OE1 = true;
1600   3                              ADCMUX_24_27_OE2 = true;
1601   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1602   3                              ADCMUX_16_19_OE1 = true;
1603   3                              ADCMUX_16_19_OE2 = false;
1604   3                              break;
1605   3                      }
1606   2                      case 52:{//MPD20
1607   3                              //ADC MUX
1608   3                              AMX0SL = 0x05;
1609   3                              //CHIP0
1610   3                              ADCMUX_0_3_OE1 = true;
1611   3                              ADCMUX_0_3_OE2 = true;
1612   3                              //CHIP1
1613   3                              ADCMUC_4_7_OE1 = true;
1614   3                              ADCMUC_4_7_OE2 = true;
1615   3                              //CHIP2
1616   3                              ADCMUX_8_11_OE1 = true;
1617   3                              ADCMUX_8_11_OE2 = true;
1618   3                              //CHIP3
1619   3                              ADCMUX_12_15_OE1 = true;
1620   3                              ADCMUX_12_15_OE2 = true;
1621   3                              //CHIP4
1622   3                              ADCMUX_16_19_OE1 = true;
1623   3                              ADCMUX_16_19_OE2 = true;
1624   3                              //CHIP5
1625   3                              ADCMUX_20_23_OE1 = true;
1626   3                              ADCMUX_20_23_OE2 = true;
1627   3                              ADCMUX_20_23_S1 = false;
1628   3                              ADCMUX_20_23_S0 = false;
1629   3                              //CHIP6
1630   3                              ADCMUX_24_27_OE1 = true;
1631   3                              ADCMUX_24_27_OE2 = true;
1632   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1633   3                              ADCMUX_20_23_OE1 = false;
1634   3                              ADCMUX_20_23_OE2 = true;
1635   3                              break;
1636   3                      }
1637   2                      case 53:{//MPD21
1638   3                              //ADC MUX
1639   3                              AMX0SL = 0x05;
1640   3                              //CHIP0
1641   3                              ADCMUX_0_3_OE1 = true;
1642   3                              ADCMUX_0_3_OE2 = true;
1643   3                              //CHIP1
1644   3                              ADCMUC_4_7_OE1 = true;
1645   3                              ADCMUC_4_7_OE2 = true;
1646   3                              //CHIP2
1647   3                              ADCMUX_8_11_OE1 = true;
1648   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 84  

1649   3                              //CHIP3
1650   3                              ADCMUX_12_15_OE1 = true;
1651   3                              ADCMUX_12_15_OE2 = true;
1652   3                              //CHIP4
1653   3                              ADCMUX_16_19_OE1 = true;
1654   3                              ADCMUX_16_19_OE2 = true;
1655   3                              //CHIP5
1656   3                              ADCMUX_20_23_OE1 = true;
1657   3                              ADCMUX_20_23_OE2 = true;
1658   3                              ADCMUX_20_23_S1 = true;
1659   3                              ADCMUX_20_23_S0 = false;
1660   3                              //CHIP6
1661   3                              ADCMUX_24_27_OE1 = true;
1662   3                              ADCMUX_24_27_OE2 = true;
1663   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1664   3                              ADCMUX_20_23_OE1 = false;
1665   3                              ADCMUX_20_23_OE2 = true;
1666   3                              break;
1667   3                      }
1668   2                      case 54:{//MPD22
1669   3                              //ADC MUX
1670   3                              AMX0SL = 0x05;
1671   3                              //CHIP0
1672   3                              ADCMUX_0_3_OE1 = true;
1673   3                              ADCMUX_0_3_OE2 = true;
1674   3                              //CHIP1
1675   3                              ADCMUC_4_7_OE1 = true;
1676   3                              ADCMUC_4_7_OE2 = true;
1677   3                              //CHIP2
1678   3                              ADCMUX_8_11_OE1 = true;
1679   3                              ADCMUX_8_11_OE2 = true;
1680   3                              //CHIP3
1681   3                              ADCMUX_12_15_OE1 = true;
1682   3                              ADCMUX_12_15_OE2 = true;
1683   3                              //CHIP4
1684   3                              ADCMUX_16_19_OE1 = true;
1685   3                              ADCMUX_16_19_OE2 = true;
1686   3                              //CHIP5
1687   3                              ADCMUX_20_23_OE1 = true;
1688   3                              ADCMUX_20_23_OE2 = true;
1689   3                              ADCMUX_20_23_S1 = false;
1690   3                              ADCMUX_20_23_S0 = false;
1691   3                              //CHIP6
1692   3                              ADCMUX_24_27_OE1 = true;
1693   3                              ADCMUX_24_27_OE2 = true;
1694   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1695   3                              ADCMUX_20_23_OE1 = true;
1696   3                              ADCMUX_20_23_OE2 = false;
1697   3                              break;
1698   3                      }
1699   2                      case 55:{//MPD23
1700   3                              //ADC MUX
1701   3                              AMX0SL = 0x06;
1702   3                              //CHIP0
1703   3                              ADCMUX_0_3_OE1 = true;
1704   3                              ADCMUX_0_3_OE2 = true;
1705   3                              //CHIP1
1706   3                              ADCMUC_4_7_OE1 = true;
1707   3                              ADCMUC_4_7_OE2 = true;
1708   3                              //CHIP2
1709   3                              ADCMUX_8_11_OE1 = true;
1710   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 85  

1711   3                              //CHIP3
1712   3                              ADCMUX_12_15_OE1 = true;
1713   3                              ADCMUX_12_15_OE2 = true;
1714   3                              //CHIP4
1715   3                              ADCMUX_16_19_OE1 = true;
1716   3                              ADCMUX_16_19_OE2 = true;
1717   3                              //CHIP5
1718   3                              ADCMUX_20_23_OE1 = true;
1719   3                              ADCMUX_20_23_OE2 = true;
1720   3                              ADCMUX_20_23_S1 = true;
1721   3                              ADCMUX_20_23_S0 = false;
1722   3                              //CHIP6
1723   3                              ADCMUX_24_27_OE1 = true;
1724   3                              ADCMUX_24_27_OE2 = true;
1725   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1726   3                              ADCMUX_20_23_OE1 = true;
1727   3                              ADCMUX_20_23_OE2 = false;
1728   3                              break;
1729   3                      }
1730   2                      case 56:{//MPD24
1731   3                              //ADC MUX
1732   3                              AMX0SL = 0x06;
1733   3                              //CHIP0
1734   3                              ADCMUX_0_3_OE1 = true;
1735   3                              ADCMUX_0_3_OE2 = true;
1736   3                              //CHIP1
1737   3                              ADCMUC_4_7_OE1 = true;
1738   3                              ADCMUC_4_7_OE2 = true;
1739   3                              //CHIP2
1740   3                              ADCMUX_8_11_OE1 = true;
1741   3                              ADCMUX_8_11_OE2 = true;
1742   3                              //CHIP3
1743   3                              ADCMUX_12_15_OE1 = true;
1744   3                              ADCMUX_12_15_OE2 = true;
1745   3                              //CHIP4
1746   3                              ADCMUX_16_19_OE1 = true;
1747   3                              ADCMUX_16_19_OE2 = true;
1748   3                              //CHIP5
1749   3                              ADCMUX_20_23_OE1 = true;
1750   3                              ADCMUX_20_23_OE2 = true;
1751   3                              //CHIP6
1752   3                              ADCMUX_24_27_OE1 = true;
1753   3                              ADCMUX_24_27_OE2 = true;
1754   3                              ADCMUX_24_27_S1 = false;
1755   3                              ADCMUX_24_27_S0 = false;
1756   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1757   3                              ADCMUX_24_27_OE1 = false;
1758   3                              ADCMUX_24_27_OE2 = true;        
1759   3                              break;
1760   3                      }
1761   2                      case 57:{//MPD25
1762   3                              //ADC MUX
1763   3                              AMX0SL = 0x06;
1764   3                              //CHIP0
1765   3                              ADCMUX_0_3_OE1 = true;
1766   3                              ADCMUX_0_3_OE2 = true;
1767   3                              //CHIP1
1768   3                              ADCMUC_4_7_OE1 = true;
1769   3                              ADCMUC_4_7_OE2 = true;
1770   3                              //CHIP2
1771   3                              ADCMUX_8_11_OE1 = true;
1772   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 86  

1773   3                              //CHIP3
1774   3                              ADCMUX_12_15_OE1 = true;
1775   3                              ADCMUX_12_15_OE2 = true;
1776   3                              //CHIP4
1777   3                              ADCMUX_16_19_OE1 = true;
1778   3                              ADCMUX_16_19_OE2 = true;
1779   3                              //CHIP5
1780   3                              ADCMUX_20_23_OE1 = true;
1781   3                              ADCMUX_20_23_OE2 = true;
1782   3                              //CHIP6
1783   3                              ADCMUX_24_27_OE1 = true;
1784   3                              ADCMUX_24_27_OE2 = true;
1785   3                              ADCMUX_20_23_S1 = true;
1786   3                              ADCMUX_20_23_S0 = false;
1787   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1788   3                              ADCMUX_24_27_OE1 = false;
1789   3                              ADCMUX_24_27_OE2 = true;        
1790   3                              break;
1791   3                      }
1792   2                      case 58:{//MPD26
1793   3                              //ADC MUX
1794   3                              AMX0SL = 0x06;
1795   3                              //CHIP0
1796   3                              ADCMUX_0_3_OE1 = true;
1797   3                              ADCMUX_0_3_OE2 = true;
1798   3                              //CHIP1
1799   3                              ADCMUC_4_7_OE1 = true;
1800   3                              ADCMUC_4_7_OE2 = true;
1801   3                              //CHIP2
1802   3                              ADCMUX_8_11_OE1 = true;
1803   3                              ADCMUX_8_11_OE2 = true;
1804   3                              //CHIP3
1805   3                              ADCMUX_12_15_OE1 = true;
1806   3                              ADCMUX_12_15_OE2 = true;
1807   3                              //CHIP4
1808   3                              ADCMUX_16_19_OE1 = true;
1809   3                              ADCMUX_16_19_OE2 = true;
1810   3                              //CHIP5
1811   3                              ADCMUX_20_23_OE1 = true;
1812   3                              ADCMUX_20_23_OE2 = true;
1813   3                              //CHIP6
1814   3                              ADCMUX_24_27_OE1 = true;
1815   3                              ADCMUX_24_27_OE2 = true;
1816   3                              ADCMUX_24_27_S1 = false;
1817   3                              ADCMUX_24_27_S0 = false;
1818   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1819   3                              ADCMUX_24_27_OE1 = true;
1820   3                              ADCMUX_24_27_OE2 = false;
1821   3                              break;
1822   3                      }
1823   2                      case 59:{//MPD27
1824   3                              //ADC MUX
1825   3                              AMX0SL = 0x06;
1826   3                              //CHIP0
1827   3                              ADCMUX_0_3_OE1 = true;
1828   3                              ADCMUX_0_3_OE2 = true;
1829   3                              //CHIP1
1830   3                              ADCMUC_4_7_OE1 = true;
1831   3                              ADCMUC_4_7_OE2 = true;
1832   3                              //CHIP2
1833   3                              ADCMUX_8_11_OE1 = true;
1834   3                              ADCMUX_8_11_OE2 = true;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 87  

1835   3                              //CHIP3
1836   3                              ADCMUX_12_15_OE1 = true;
1837   3                              ADCMUX_12_15_OE2 = true;
1838   3                              //CHIP4
1839   3                              ADCMUX_16_19_OE1 = true;
1840   3                              ADCMUX_16_19_OE2 = true;
1841   3                              //CHIP5
1842   3                              ADCMUX_20_23_OE1 = true;
1843   3                              ADCMUX_20_23_OE2 = true;
1844   3                              //CHIP6
1845   3                              ADCMUX_24_27_OE1 = true;
1846   3                              ADCMUX_24_27_OE2 = true;
1847   3                              ADCMUX_24_27_S1 = true;
1848   3                              ADCMUX_24_27_S0 = false;
1849   3                              _nop_();_nop_();_nop_();_nop_();_nop_();
1850   3                              ADCMUX_24_27_OE1 = true;
1851   3                              ADCMUX_24_27_OE2 = false;
1852   3                              break;
1853   3                      }
1854   2                      default:{
1855   3                              break;
1856   3                      }
1857   2              }
1858   1              AD0INT = 0;
1859   1              AD0BUSY = 1;//AD0BUSY写入1
1860   1      }
1861          static void initAdcData(adcTempDat_t *s){//初始化ADC滤波器
1862   1              uint8_t i;
1863   1              for(i = 0;i < CONFIG_SPLC_ADC_FILTER_TAP; i++){
1864   2                      s->dat[i] = 0x0;
1865   2              }
1866   1              s->out = 0;
1867   1              s->wIndex = 0;
1868   1      }
1869          static void refreshAdcData(adcTempDat_t *s , uint16_t dat){//更新ADC采集值 
1870   1              uint8_t i;
1871   1              uint16_t temp;
1872   1              uint32_t sum;
1873   1              s->dat[s->wIndex] = dat;
1874   1              s->wIndex ++;
1875   1              if(s->wIndex >= CONFIG_SPLC_ADC_FILTER_TAP){
1876   2                      s->wIndex = 0;
1877   2              }
1878   1              //计算总和
1879   1              sum = 0;
1880   1              for(i = 0;i < CONFIG_SPLC_ADC_FILTER_TAP;i ++){
1881   2                      sum += s->dat[i];
1882   2              }
1883   1              //去掉一个最大值和一个最小值
1884   1              
1885   1              temp = (uint16_t)(sum / (uint32_t)CONFIG_SPLC_ADC_FILTER_TAP);
1886   1              s->out = temp;
1887   1      }
1888          static void assertCoilAddress(uint16_t adr){//检查线圈地址
1889   1              if(adr > (SPREG_END * 16))
1890   1                      while(1);
1891   1      }
1892          static void assertRegisterAddress(uint16_t adr){//检查寄存器地址
1893   1              if(adr >= SPREG_END)
1894   1                      while(1);
1895   1      }
1896          static void clearDM(void){//清除DM寄存器
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 88  

1897   1              uint16_t i;
1898   1              for(i = 0;i <= DM_END;i ++)
1899   1              {
1900   2                      NVRAM0[i] = 0x0;
1901   2                      NVRAM1[i] = 0x0;
1902   2              }
1903   1      }
1904          static void clearMR(void){//清除MR寄存器
1905   1              uint16_t i;
1906   1              for(i = MR_START;i <= MR_END;i ++)
1907   1              {
1908   2                      NVRAM0[i] = 0x0;
1909   2                      NVRAM1[i] = 0x0;
1910   2              }
1911   1      }
1912          static void clearEM(void){//清除EM寄存器
1913   1              uint16_t i;
1914   1              for(i = EM_START;i <= EM_END;i ++)
1915   1              {
1916   2                      NVRAM0[i] = 0x0;
1917   2                      NVRAM1[i] = 0x0;
1918   2              }
1919   1      }
1920          static void clearR(void){//清除R寄存器
1921   1              uint16_t i;
1922   1              for(i = R_START;i <= R_END;i ++)
1923   1              {
1924   2                      NVRAM0[i] = 0x0;
1925   2                      NVRAM1[i] = 0x0;
1926   2              }
1927   1      }
1928          static void clearT(void){//清除T寄存器
1929   1              uint16_t i;
1930   1              for(i = T_1MS_START;i <= T_1MS_END;i ++)
1931   1              {
1932   2                      NVRAM0[i] = 0x0;
1933   2                      NVRAM1[i] = 0x0;
1934   2              }
1935   1              for(i = T_10MS_START;i <= T_10MS_END;i ++)
1936   1              {
1937   2                      NVRAM0[i] = 0x0;
1938   2                      NVRAM1[i] = 0x0;
1939   2              }
1940   1              for(i = T_100MS_START;i <= T_100MS_END;i ++)
1941   1              {
1942   2                      NVRAM0[i] = 0x0;
1943   2                      NVRAM1[i] = 0x0;
1944   2              }
1945   1      }
1946          static void clearTD(void){//清除TD寄存器
1947   1              uint16_t i;
1948   1              for(i = TD_1MS_START;i <= TD_1MS_END;i ++)
1949   1              {
1950   2                      NVRAM0[i] = 0x0;
1951   2                      NVRAM1[i] = 0x0;
1952   2              }
1953   1              for(i = TD_10MS_START;i <= TD_10MS_END;i ++)
1954   1              {
1955   2                      NVRAM0[i] = 0x0;
1956   2                      NVRAM1[i] = 0x0;
1957   2              }
1958   1              for(i = TD_100MS_START;i <= TD_100MS_END;i ++)
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 89  

1959   1              {
1960   2                      NVRAM0[i] = 0x0;
1961   2                      NVRAM1[i] = 0x0;
1962   2              }
1963   1      }
1964          static void clearC(void){//清除C寄存器
1965   1              uint16_t i;
1966   1              for(i = C_START;i <= C_END;i ++){
1967   2                      NVRAM0[i] = 0x0;
1968   2                      NVRAM1[i] = 0x0;
1969   2              }
1970   1      }
1971          static void clearX(void){//清除X寄存器
1972   1              uint16_t i;
1973   1              for(i = X_START;i <= X_END;i ++){
1974   2                      NVRAM0[i] = 0x0;
1975   2                      NVRAM1[i] = 0x0;
1976   2              }
1977   1      }
1978          static void clearY(void){//清除Y寄存器
1979   1              uint16_t i;
1980   1              for(i = Y_START;i <= Y_END;i ++){
1981   2                      NVRAM0[i] = 0x0;
1982   2                      NVRAM1[i] = 0x0;
1983   2              }
1984   1      }
1985          static void clearSPREG(void){
1986   1              uint16_t i;
1987   1              for(i = SPREG_START;i <= SPREG_END;i ++){
1988   2                      NVRAM0[i] = 0x0;
1989   2                      NVRAM1[i] = 0x0;
1990   2              }
1991   1      }
1992          static void clearSPCOIL(){
1993   1              uint16_t i;
1994   1              for(i = SPCOIL_START;i <= SPCOIL_END;i ++){
1995   2                      NVRAM0[i] = 0x0;
1996   2                      NVRAM1[i] = 0x0;
1997   2              }
1998   1      }
1999          static void nvramLoad(void){//从EPROM中载入NVRAM
2000   1              memset(NVRAM0, 0x0, (CONFIG_NVRAM_SIZE * 2));//初始化NVRAM
2001   1              epromRead(0, (uint8_t*)NVRAM0, (CONFIG_NVRAM_SIZE * 2));//从EPROM中恢复MR
2002   1              clearEM();
2003   1              clearR();
2004   1              clearT();
2005   1              clearTD();
2006   1              clearC();
2007   1              clearX();
2008   1              clearY();
2009   1              clearSPREG();
2010   1              clearSPCOIL();
2011   1              memcpy(NVRAM1, NVRAM0, CONFIG_NVRAM_SIZE);
2012   1      }
2013          static void nvramSave(void){//强制将NVRAM存入EPROM
2014   1              DISABLE_INTERRUPT;
2015   1              epromWrite(0x0, (uint8_t*)NVRAM0, ((MR_END + 1) * 2));
2016   1              ENABLE_INTERRUPT;
2017   1      }
2018          static void nvramUpdata(void){//更新NVRAM->EPROM
2019   1              uint8_t *sp0, *sp1;
2020   1              uint16_t i;
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 90  

2021   1              sp0 = (uint8_t*)(NVRAM0 + (MR_START * 2));
2022   1              sp1 = (uint8_t*)(NVRAM1 + (MR_START * 2));
2023   1              for(i = MR_START;i < ((MR_END + 1) * 2);i ++){//储存MR
2024   2                      if(*(sp0 + i) != *(sp1 + i)){
2025   3                              epromWriteOneByte(i, *(sp0 + i));
2026   3                      }
2027   2              }
2028   1              sp0 = (uint8_t*)(NVRAM0 + (DM_START * 2));
2029   1              sp1 = (uint8_t*)(NVRAM1 + (DM_START * 2));
2030   1              for(i = DM_START;i < ((DM_END + 1) * 2);i ++){//储存DM
2031   2                      if(*(sp0 + i) != *(sp1 + i)){
2032   3                              epromWriteOneByte(i, *(sp0 + i));
2033   3                      }
2034   2              }
2035   1              memcpy(NVRAM1, NVRAM0, (CONFIG_NVRAM_SIZE * 2));
2036   1      }
2037          /*****************************************************************************/
2038          //软逻辑指令
2039          void SET(uint16_t A){//置位
2040   1              assertCoilAddress(A);//检查地址范围
2041   1              NVRAM0[(A / 16)] |= 1 << (A % 16);
2042   1      }
2043          void RESET(uint16_t A){//置零
2044   1              assertCoilAddress(A);//检查地址范围
2045   1              NVRAM0[(A / 16)] &= ~(1 << (A % 16));
2046   1      }
2047          void FLIP(uint16_t A){//翻转
2048   1              uint16_t temp;
2049   1              assertCoilAddress(A);//检查地址范围
2050   1              temp= NVRAM0[(A / 16)] & (1 << (A % 16));
2051   1              if(temp)
2052   1                      RESET(A);
2053   1              else
2054   1                      SET(A);
2055   1      }
2056          uint8_t LD(uint16_t A){//载入
2057   1              assertCoilAddress(A);//检查地址范围
2058   1              return (uint8_t)(NVRAM0[(A / 16)] >> NVRAM0[(A % 16)]);
2059   1      }
2060          uint8_t LDP(uint16_t A){//脉冲上升沿
2061   1              uint8_t temp0, temp1;
2062   1              assertCoilAddress(A);//检查地址范围
2063   1              temp0 = (uint8_t)(NVRAM0[(A / 16)] >> NVRAM0[(A % 16)]);
2064   1              temp1 = (uint8_t)(NVRAM1[(A / 16)] >> NVRAM1[(A % 16)]);
2065   1              if(temp0 && !temp1)
2066   1                      return 1;
2067   1              else
2068   1                      return 0;
2069   1      }
2070          uint8_t LDN(uint16_t A){//脉冲下降沿
2071   1              uint8_t temp0, temp1;
2072   1              assertCoilAddress(A);
2073   1              temp0 = (uint8_t)(NVRAM0[(A / 16)] >> NVRAM0[(A % 16)]);
2074   1              temp1 = (uint8_t)(NVRAM1[(A / 16)] >> NVRAM1[(A % 16)]);
2075   1              if(!temp0 && temp1)
2076   1                      return 1;
2077   1              else
2078   1                      return 0;
2079   1      }
2080          void T1MS(uint8_t A, uint8_t start, uint16_t value){//1MS延时器
2081   1      #if CONFIG_DEBUG
                      if(A > (TD_1MS_END - TD_1MS_START + 1))
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 91  

                              printf("T1MS:%d Over Num\n", A);
              #endif
2085   1              if(start){
2086   2                      if(NVRAM0[(TD_1MS_START + A)] >= value){
2087   3                              NVRAM0[(T_1MS_START + (A / 16))] |= 1 << (A % 16);
2088   3                      }
2089   2                      else{
2090   3                              NVRAM0[(T_1MS_START + (A / 16))] &= ~(1 << (A % 16));
2091   3                      }
2092   2                              
2093   2              }
2094   1              else{
2095   2                      NVRAM0[(T_1MS_START + (A / 16))] &= ~(1 << (A % 16));
2096   2                      NVRAM0[(TD_1MS_START + A)] = 0x0;
2097   2              }       
2098   1      }
2099          void T10MS(uint8_t A, uint8_t start, uint16_t value){//10MS延时器
2100   1      #if CONFIG_DEBUG
                      if(A > (TD_10MS_END - TD_10MS_START + 1))
                              printf("T10MS:%d Over Num\n", A);
              #endif
2104   1              if(start){
2105   2                      if(NVRAM0[(TD_10MS_START + A)] >= value){
2106   3                              NVRAM0[(T_10MS_START + (A / 16))] |= 1 << (A % 16);
2107   3                      }
2108   2                      else{
2109   3                              NVRAM0[(T_10MS_START + (A / 16))] &= ~(1 << (A % 16));
2110   3                      }
2111   2              }
2112   1              else{
2113   2                      NVRAM0[(T_10MS_START + (A / 16))] &= ~(1 << (A % 16));
2114   2                      NVRAM0[(TD_10MS_START + A)] = 0x0;
2115   2              }       
2116   1      }
2117          void T100MS(uint8_t A, uint8_t start, uint16_t value){//100MS延时器
2118   1      #if CONFIG_DEBUG
                      if(A > (TD_100MS_END - TD_100MS_START + 1))
                              printf("T100MS:%d Over Num\n", A);
              #endif
2122   1              if(start){
2123   2                      if(NVRAM0[(TD_100MS_START + A)] >= value){
2124   3                              NVRAM0[(T_100MS_START + (A / 16))] |= 1 << (A % 16);
2125   3                      }
2126   2                      else{
2127   3                              NVRAM0[(T_100MS_START + (A / 16))] &= ~(1 << (A % 16));
2128   3                      }       
2129   2              }
2130   1              else{
2131   2                      NVRAM0[(T_100MS_START + (A / 16))] &= ~(1 << (A % 16));
2132   2                      NVRAM0[(TD_100MS_START + A)] = 0x0;
2133   2              }
2134   1      }
2135          int16_t TNTC(int16_t dat){//CODE转换为NTC测量温度温度
2136   1              uint16_t temp;
2137   1              fp32_t ftemp;
2138   1              if(dat >= CONFIG_SPLC_ADC_INTERNAL_VREF) dat = CONFIG_SPLC_ADC_INTERNAL_VREF;//限制输入最大值
2139   1              if(dat < 0) dat = 0;
2140   1              
2141   1              temp = (int16_t)(CONFIG_SPLC_ADC_INTERNAL_VREF * dat / 4096);//单位mV
2142   1              temp = 10000 * 5000 / (5000 - temp);//电源5V 分压电阻10K
2143   1              
2144   1              ftemp = ((1.0 / 3477)*log((fp32_t)(temp) / 10000)) + (1 / (25+273.0));//limo R25=10740,B=3450    uniquemode
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 92  

             - 3988
2145   1              ftemp = ( 1.0 / ftemp ) - 273.0;
2146   1              if(ftemp >= 100) ftemp = 100;
2147   1              if(ftemp <= -100) ftemp = -100;
2148   1              return (int16_t)(ftemp * 10);
2149   1      }
2150          int16_t TENV(int16_t dat){//CODE转换为环境温度
2151   1              uint16_t temp;
2152   1              temp = (int16_t)(CONFIG_SPLC_ADC_INTERNAL_VREF * dat / 4096);//单位mV
2153   1              temp = (int16_t)((temp - CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET) * 1000 / CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN);
2154   1              return temp;
2155   1      }
2156          int16_t MAX(int16_t *s, uint8_t len){//找出长度为len的数据s中的最大值
2157   1              int16_t max;
2158   1              uint8_t i;
2159   1              max = *s;
2160   1              for(i = 0;i < len;i ++){
2161   2                      if(*(s +i) > max){
2162   3                              max = *(s + i);
2163   3                      }
2164   2              }
2165   1              return max;
2166   1      }
2167          int16_t MIN(int16_t *s, uint8_t len){//找出长度为len的数据s中的最小值
2168   1              int16_t min;
2169   1              uint8_t i;
2170   1              min = *s;
2171   1              for(i = 0;i < len;i ++){
2172   2                      if(*(s +i) < min){
2173   3                              min = *(s + i);
2174   3                      }
2175   2              }
2176   1              return min;
2177   1      }
2178          /*****************************************************************************/
2179          static void wdtInit(void){//看门狗初始化
2180   1      #ifdef C8051F020
2181   1              WDTCN = 0;//47mS
2182   1      #endif
2183   1      }
2184          static void wdtEnable(void){//使能看门狗
2185   1      #ifdef C8051F020
2186   1              WDTCN = 0xA5;
2187   1      #endif
2188   1      }
2189          static void wdtDisable(void){//关闭看门狗(未锁定)
2190   1              uint8_t flagEA;
2191   1              flagEA = EA;
2192   1              EA = 0;
2193   1      #ifdef C8051F020
2194   1              WDTCN = 0xDE;
2195   1          WDTCN = 0xAD;
2196   1      #endif
2197   1      #ifdef C8051F020
2198   1      #endif
2199   1              EA = flagEA;
2200   1      }
2201          static void wdtFeed(void){//喂狗
2202   1      #ifdef C8051F020
2203   1              WDTCN = 0xA5;
2204   1      #endif
2205   1      }
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 93  

2206          
2207          static void pcaInit(void){//硬件PCA初始化
2208   1      }
2209          static void timer0Init(void){//硬件sTimer计时器初始化
2210   1              data uint16_t temp;
2211   1              TimerCounter_1mS = 0;
2212   1              TimerCounter_10mS = 0;
2213   1      #ifdef C8051F020
2214   1              temp = (uint16_t)(65536 - (CONFIG_SYSCLK / 12 /CONFIG_SOFTPLC_HWTIME));
2215   1              Timer0_L = temp & 0xFF;
2216   1              Timer0_H = (temp >> 8) & 0xFF;
2217   1              TH0 = Timer0_H;// Init T0 High register
2218   1              TL0 = Timer0_L;// Init T0 Low register
2219   1              CKCON &= ~(1 << 3);//SYSCLK / 12        
2220   1              TMOD &= 0xF0;
2221   1              TMOD |= (1 << 0);// T0 in 16-bit mode
2222   1              ET0 = 1;// T0 interrupt enabled
2223   1              TR0 = 1;// T0 ON
2224   1      #endif
2225   1      }
2226          static void timer0Isr(void) interrupt INTERRUPT_TIMER0{//硬件sTimer计时器中断 1mS
2227   1              uint16_t i;
2228   1              TF0 = 0;
2229   1              TR0 = 0;
2230   1              TH0 = Timer0_H;
2231   1              TL0 = Timer0_L;
2232   1              TR0 = 1;
2233   1              if((NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] >> (SPCOIL_PS1MS % 16)) & 0x01){//ON
2234   2                      NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS1MS % 16));
2235   2              }
2236   1              else{//OFF
2237   2                      NVRAM0[(SPCOIL_START + (SPCOIL_PS1MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS1MS % 16));
2238   2              }
2239   1              
2240   1              for(i = TD_1MS_START;i <= TD_1MS_END;i ++){//1mS计时
2241   2                      if(NVRAM0[i] < SHRT_MAX){
2242   3                              NVRAM0[i] ++;
2243   3                      }
2244   2              }
2245   1              if(TimerCounter_1mS >= 10){//10mS计算
2246   2                      if((NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] >> (SPCOIL_PS10MS % 16)) & 0x01){//ON
2247   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS10MS % 16));
2248   3                      }
2249   2                      else{//OFF
2250   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS10MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS10MS % 16));
2251   3                      }
2252   2                      for(i = TD_10MS_START;i <= TD_10MS_END;i ++){
2253   3                              if(NVRAM0[i] < SHRT_MAX){
2254   4                                      NVRAM0[i] ++;
2255   4                              }
2256   3                      }
2257   2                      TimerCounter_10mS ++;
2258   2                      TimerCounter_1mS = 0;
2259   2              }
2260   1              if(TimerCounter_10mS >= 10){//100ms计算
2261   2                      if((NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] >> (SPCOIL_PS100MS % 16)) & 0x01){//ON
2262   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] &= ~(uint16_t)(1 << (SPCOIL_PS100MS % 16));
2263   3                      }
2264   2                      else{//OFF
2265   3                              NVRAM0[(SPCOIL_START + (SPCOIL_PS100MS / 16))] |= (uint16_t)(1 << (SPCOIL_PS100MS % 16));
2266   3                      }
2267   2                      for(i = TD_100MS_START;i < TD_100MS_END;i ++){
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 94  

2268   3                              if(NVRAM0[i] < SHRT_MAX){
2269   4                                      NVRAM0[i] ++;
2270   4                              }
2271   3                      }
2272   2                      TimerCounter_10mS = 0;
2273   2                      if(getLedRun()){
2274   3                              setLedRun(false);
2275   3                      }
2276   2                      else{
2277   3                              setLedRun(true);
2278   3                      }
2279   2              }
2280   1      #if CONFIG_SPLC_USING_ADC == 1
2281   1              adcProcess();//ADC扫描
2282   1      #endif
2283   1              TimerCounter_1mS ++;
2284   1      }
2285          
2286          static void inputInit(void){//IO输入滤波器初始化
2287   1              memset(inputFilter, 0x0, (X_END - X_START + 1) * 16);
2288   1      }
2289          static void outputInit(void){
2290   1      #ifdef C8051F020
2291   1              
2292   1      #endif
2293   1      }
2294          static void inputRefresh(void){//获取输入IO
2295   1              uint8_t ctemp0;
2296   1              ctemp0 = ((P6 >> 7) & 0x01);
2297   1              if(ctemp0){
2298   2                      if(inputFilter[0] < CONFIG_INPUT_FILTER_TIME){
2299   3                              inputFilter[0] ++;
2300   3                      }
2301   2                      else{
2302   3                              NVRAM0[X_START] |= (int16_t)(1 << 0);
2303   3                      }
2304   2              }
2305   1              else{
2306   2                      if(inputFilter[0] > (CONFIG_INPUT_FILTER_TIME * -1)){
2307   3                              inputFilter[0] --;
2308   3                      }
2309   2                      else{
2310   3                              NVRAM0[X_START] &= ~(uint16_t)(1 << 0);
2311   3                      }
2312   2              }
2313   1              ctemp0 = ((P6 >> 6) & 0x01);
2314   1              if(ctemp0){
2315   2                      if(inputFilter[1] < CONFIG_INPUT_FILTER_TIME){
2316   3                              inputFilter[1] ++;
2317   3                      }
2318   2                      else{
2319   3                              NVRAM0[X_START] |= (int16_t)(1 << 1);
2320   3                      }
2321   2              }
2322   1              else{
2323   2                      if(inputFilter[1] > (CONFIG_INPUT_FILTER_TIME * -1)){
2324   3                              inputFilter[1] --;
2325   3                      }
2326   2                      else{
2327   3                              NVRAM0[X_START] &= ~(uint16_t)(1 << 1);
2328   3                      }
2329   2              }
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 95  

2330   1      }
2331          static void outputRefresh(void){//设置输出IO
2332   1              if((NVRAM0[Y_START] >> 0) & 0x01){//P6_5
2333   2                      P6 |= (uint8_t)(1 << 5);
2334   2              }
2335   1              else{
2336   2                      P6 &= ~(uint8_t)(1 << 5);
2337   2              }
2338   1              if((NVRAM0[Y_START] >> 1) & 0x01){//P6_4
2339   2                      P6 |= (uint8_t)(1 << 4);
2340   2              }
2341   1              else{
2342   2                      P6 &= ~(uint8_t)(1 << 4);
2343   2              }
2344   1      }
2345          static void chipAdcInit(void){//ADC模块初始化
2346   1              uint8_t i;
2347   1              //CHIP0
2348   1              ADCMUX_0_3_OE1 = true;
2349   1              ADCMUX_0_3_OE2 = true;
2350   1              //CHIP1
2351   1              ADCMUC_4_7_OE1 = true;
2352   1              ADCMUC_4_7_OE2 = true;
2353   1              //CHIP2
2354   1              ADCMUX_8_11_OE1 = true;
2355   1              ADCMUX_8_11_OE2 = true;
2356   1              //CHIP3
2357   1              ADCMUX_12_15_OE1 = true;
2358   1              ADCMUX_12_15_OE2 = true;
2359   1              //CHIP4
2360   1              ADCMUX_16_19_OE1 = true;
2361   1              ADCMUX_16_19_OE2 = true;
2362   1              //CHIP5
2363   1              ADCMUX_20_23_OE1 = true;
2364   1              ADCMUX_20_23_OE2 = true;
2365   1              //CHIP6
2366   1              ADCMUX_24_27_OE1 = true;
2367   1              ADCMUX_24_27_OE2 = true;
2368   1      #ifdef C8051F020
2369   1              ADC0CN = 0x0;//软件触发
2370   1              ADC0CN |= (1 << 6);//AD0TM = 1 启用跟踪
2371   1              ADC0CN |= (1 << 7);//AD0EN = 1 
2372   1              ADC0CF = 0x0;
2373   1              ADC0CF |= (CONFIG_SYSCLK / SAR_CLK) << 3;     // ADC conversion clock = 2.5MHz
2374   1              AMX0CF = 0x00;                      // AIN inputs are single-ended (default)
2375   1              AMX0SL = 0x00;                      // Select AIN0.1 pin as ADC mux input
2376   1              AD0INT = 0;
2377   1              AD0BUSY = 1;//AD0BUSY写入1
2378   1      #endif
2379   1              adcSelect = 0;
2380   1              for(i = 0;i <= CONFIG_SPLC_ADC_CHANNLE;i ++){
2381   2                      initAdcData(&adcTempDat[i]);
2382   2              }
2383   1      }
2384          static void refreshDac(void){//刷新DAC
2385   1              //LD板0
2386   1              if(NVRAM0[EM_DAC_0] != NVRAM1[EM_DAC_0]){//CH0
2387   2                      setLedDac(true);
2388   2                      dac8568_0_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_0]);
2389   2                      setLedDac(false);
2390   2              }
2391   1              if(NVRAM0[EM_DAC_1] != NVRAM1[EM_DAC_1]){//CH1
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 96  

2392   2                      setLedDac(true);
2393   2                      dac8568_0_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_1]);
2394   2                      setLedDac(false);
2395   2              }
2396   1              if(NVRAM0[EM_DAC_2] != NVRAM1[EM_DAC_2]){//CH2
2397   2                      setLedDac(true);
2398   2                      dac8568_0_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_2]);
2399   2                      setLedDac(false);
2400   2              }
2401   1              if(NVRAM0[EM_DAC_3] != NVRAM1[EM_DAC_3]){//CH3
2402   2                      setLedDac(true);
2403   2                      dac8568_0_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_3]);
2404   2                      setLedDac(false);
2405   2              }
2406   1              if(NVRAM0[EM_DAC_4] != NVRAM1[EM_DAC_4]){//CH4
2407   2                      setLedDac(true);
2408   2                      dac8568_0_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_4]);
2409   2                      setLedDac(false);
2410   2              }
2411   1              if(NVRAM0[EM_DAC_5] != NVRAM1[EM_DAC_5]){//CH5
2412   2                      setLedDac(true);
2413   2                      dac8568_0_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_5]);
2414   2                      setLedDac(false);
2415   2              }
2416   1              if(NVRAM0[EM_DAC_6] != NVRAM1[EM_DAC_6]){//CH6
2417   2                      setLedDac(true);
2418   2                      dac8568_0_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_6]);
2419   2                      setLedDac(false);
2420   2              }
2421   1              if(NVRAM0[EM_DAC_7] != NVRAM1[EM_DAC_7]){//CH7
2422   2                      setLedDac(true);
2423   2                      dac8568_0_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_7]);
2424   2                      setLedDac(false);
2425   2              }
2426   1              //LD板1
2427   1              if(NVRAM0[EM_DAC_8] != NVRAM1[EM_DAC_8]){//CH8
2428   2                      setLedDac(true);
2429   2                      dac8568_1_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_8]);
2430   2                      setLedDac(false);
2431   2              }
2432   1              if(NVRAM0[EM_DAC_9] != NVRAM1[EM_DAC_9]){//CH9
2433   2                      setLedDac(true);
2434   2                      dac8568_1_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_9]);
2435   2                      setLedDac(false);
2436   2              }
2437   1              if(NVRAM0[EM_DAC_10] != NVRAM1[EM_DAC_10]){//CH10
2438   2                      setLedDac(true);
2439   2                      dac8568_1_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_10]);
2440   2                      setLedDac(false);
2441   2              }
2442   1              if(NVRAM0[EM_DAC_11] != NVRAM1[EM_DAC_11]){//CH11
2443   2                      setLedDac(true);
2444   2                      dac8568_1_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_11]);
2445   2                      setLedDac(false);
2446   2              }
2447   1              if(NVRAM0[EM_DAC_12] != NVRAM1[EM_DAC_12]){//CH12
2448   2                      setLedDac(true);
2449   2                      dac8568_1_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_12]);
2450   2                      setLedDac(false);
2451   2              }
2452   1              if(NVRAM0[EM_DAC_13] != NVRAM1[EM_DAC_13]){//CH13
2453   2                      setLedDac(true);
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 97  

2454   2                      dac8568_1_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_13]);
2455   2                      setLedDac(false);
2456   2              }
2457   1              if(NVRAM0[EM_DAC_14] != NVRAM1[EM_DAC_14]){//CH14
2458   2                      setLedDac(true);
2459   2                      dac8568_1_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_14]);
2460   2                      setLedDac(false);
2461   2              }
2462   1              if(NVRAM0[EM_DAC_15] != NVRAM1[EM_DAC_15]){//CH15
2463   2                      setLedDac(true);
2464   2                      dac8568_1_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_15]);
2465   2                      setLedDac(false);
2466   2              }
2467   1              //LD板2
2468   1              if(NVRAM0[EM_DAC_16] != NVRAM1[EM_DAC_16]){//CH16
2469   2                      setLedDac(true);
2470   2                      dac8568_2_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_16]);
2471   2                      setLedDac(false);
2472   2              }
2473   1              if(NVRAM0[EM_DAC_17] != NVRAM1[EM_DAC_17]){//CH17
2474   2                      setLedDac(true);
2475   2                      dac8568_2_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_17]);
2476   2                      setLedDac(false);
2477   2              }
2478   1              if(NVRAM0[EM_DAC_18] != NVRAM1[EM_DAC_18]){//CH18
2479   2                      setLedDac(true);
2480   2                      dac8568_2_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_18]);
2481   2                      setLedDac(false);
2482   2              }
2483   1              if(NVRAM0[EM_DAC_19] != NVRAM1[EM_DAC_19]){//CH19
2484   2                      setLedDac(true);
2485   2                      dac8568_2_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_19]);
2486   2                      setLedDac(false);
2487   2              }
2488   1              if(NVRAM0[EM_DAC_20] != NVRAM1[EM_DAC_20]){//CH20
2489   2                      setLedDac(true);
2490   2                      dac8568_2_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_20]);
2491   2                      setLedDac(false);
2492   2              }
2493   1              if(NVRAM0[EM_DAC_21] != NVRAM1[EM_DAC_21]){//CH21
2494   2                      setLedDac(true);
2495   2                      dac8568_2_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_21]);
2496   2                      setLedDac(false);
2497   2              }
2498   1              if(NVRAM0[EM_DAC_22] != NVRAM1[EM_DAC_22]){//CH22
2499   2                      setLedDac(true);
2500   2                      dac8568_2_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_22]);
2501   2                      setLedDac(false);
2502   2              }
2503   1              if(NVRAM0[EM_DAC_23] != NVRAM1[EM_DAC_23]){//CH23
2504   2                      setLedDac(true);
2505   2                      dac8568_2_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_23]);
2506   2                      setLedDac(false);
2507   2              }
2508   1              //板4
2509   1              if(NVRAM0[EM_DAC_24] != NVRAM1[EM_DAC_24]){//CH24
2510   2                      setLedDac(true);
2511   2                      dac8568_3_WriteDacRegister(0x7, (uint16_t)NVRAM0[EM_DAC_24]);
2512   2                      setLedDac(false);
2513   2              }
2514   1              if(NVRAM0[EM_DAC_25] != NVRAM1[EM_DAC_25]){//CH25
2515   2                      setLedDac(true);
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 98  

2516   2                      dac8568_3_WriteDacRegister(0x5, (uint16_t)NVRAM0[EM_DAC_26]);
2517   2                      setLedDac(false);
2518   2              }
2519   1              if(NVRAM0[EM_DAC_26] != NVRAM1[EM_DAC_26]){//CH26
2520   2                      setLedDac(true);
2521   2                      dac8568_3_WriteDacRegister(0x3, (uint16_t)NVRAM0[EM_DAC_26]);
2522   2                      setLedDac(false);
2523   2              }
2524   1              if(NVRAM0[EM_DAC_27] != NVRAM1[EM_DAC_27]){//CH27
2525   2                      setLedDac(true);
2526   2                      dac8568_3_WriteDacRegister(0x1, (uint16_t)NVRAM0[EM_DAC_27]);
2527   2                      setLedDac(false);
2528   2              }
2529   1              if(NVRAM0[EM_DAC_28] != NVRAM1[EM_DAC_28]){//CH28
2530   2                      setLedDac(true);
2531   2                      dac8568_3_WriteDacRegister(0x6, (uint16_t)NVRAM0[EM_DAC_28]);
2532   2                      setLedDac(false);
2533   2              }
2534   1              if(NVRAM0[EM_DAC_29] != NVRAM1[EM_DAC_29]){//CH29
2535   2                      setLedDac(true);
2536   2                      dac8568_3_WriteDacRegister(0x4, (uint16_t)NVRAM0[EM_DAC_29]);
2537   2                      setLedDac(false);
2538   2              }
2539   1              if(NVRAM0[EM_DAC_30] != NVRAM1[EM_DAC_30]){//CH30
2540   2                      setLedDac(true);
2541   2                      dac8568_3_WriteDacRegister(0x2, (uint16_t)NVRAM0[EM_DAC_30]);
2542   2                      setLedDac(false);
2543   2              }
2544   1              if(NVRAM0[EM_DAC_31] != NVRAM1[EM_DAC_31]){//CH31
2545   2                      setLedDac(true);
2546   2                      dac8568_3_WriteDacRegister(0x0, (uint16_t)NVRAM0[EM_DAC_31]);
2547   2                      setLedDac(false);
2548   2              }
2549   1      }
2550          static void chipDacInit(void){//初始化DAC
2551   1              dac8568_0_Init();
2552   1              dac8568_1_Init();
2553   1              dac8568_2_Init();
2554   1              dac8568_3_Init();
2555   1      }
2556          void sPlcInit(void){//软逻辑初始化
2557   1              setLedError(true);
2558   1              setLedRun(false);
2559   1              wdtInit();//看门狗使能
2560   1              wdtDisable();//屏蔽看门狗       
2561   1      #if CONFIG_SPLC_USING_EPROM == 1
2562   1              nvramLoad();//上电恢复NVRAM
2563   1      #endif
2564   1              
2565   1      #if CONFIG_SPLC_USING_ADC == 1
2566   1              chipAdcInit();//初始化ADC模块
2567   1      #endif
2568   1              
2569   1      #if CONFIG_SPLC_USING_DAC == 1
2570   1              chipDacInit();//初始化DAC模块
2571   1      #endif
2572   1              
2573   1      #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
2574   1              initModbus(CONFIG_MB_RTU_SLAVE_ADDRESS, CONFIG_UART0_BAUDRATE);
2575   1      #endif
2576   1              timer0Init();//初始化硬件计时器模块
2577   1              NVRAM0[(SPCOIL_START + (SPCOIL_ON / 16))] |= (uint16_t)(1 << (SPCOIL_ON % 16));
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 99  

2578   1              setLedError(false);
2579   1      }
2580          void sPlcProcessStart(void){//sPLC轮询起始
2581   1      #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
2582   1              modbusPorcess();//处理MODBUS
2583   1      #endif
2584   1      #if CONFIG_SPLC_USING_IO_INPUT == 1
2585   1              inputRefresh();//读取X口输入
2586   1      #endif
2587   1      #if CONFIG_SPLC_USING_WDT == 1
                      wdtFeed();
              #endif
2590   1      }
2591          void sPlcProcessEnd(void){//sPLC轮询结束
2592   1      #if CONFIG_SPLC_USING_WDT == 1
                      wdtFeed();//喂狗
              #endif
2595   1      #if CONFIG_SPLC_USING_IO_OUTPUT == 1
2596   1              outputRefresh();//更新Y口输出
2597   1      #endif
2598   1      #if CONFIG_SPLC_USING_DAC
2599   1              refreshDac();//更新DAC输出
2600   1      #endif
2601   1      #if CONFIG_SPLC_USING_EPROM == 1
2602   1              nvramUpdata();//更新NVRAM
2603   1      #endif
2604   1      }
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 100 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com01B0 (BEGIN)
0000         L?0433:
0000         L?0434:
0000 ED                MOV     A,R5
0001 25E0              ADD     A,ACC
0003 FF                MOV     R7,A
0004 EC                MOV     A,R4
0005 33                RLC     A
0006 FE                MOV     R6,A
0007 7400        R     MOV     A,#LOW NVRAM0
0009 2F                ADD     A,R7
000A F582              MOV     DPL,A
000C 7400        R     MOV     A,#HIGH NVRAM0
000E 3E                ADDC    A,R6
000F F583              MOV     DPH,A
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 F0                MOVX    @DPTR,A
0015 7400        R     MOV     A,#LOW NVRAM1
0017 2F                ADD     A,R7
0018 F582              MOV     DPL,A
001A 7400        R     MOV     A,#HIGH NVRAM1
001C         L?0435:
001C 3E                ADDC    A,R6
001D F583              MOV     DPH,A
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
0023 22                RET     
0024         L?0436:
0024         L?0437:
0024 75BB06            MOV     AMX0SL,#06H
0027         L?0438:
0027 D296              SETB    ADCMUX_0_3_OE1
0029 D295              SETB    ADCMUX_0_3_OE2
002B         L?0439:
002B D290              SETB    ADCMUC_4_7_OE1
002D D293              SETB    ADCMUC_4_7_OE2
002F         L?0440:
002F D2A7              SETB    ADCMUX_8_11_OE1
0031 D2A5              SETB    ADCMUX_8_11_OE2
0033         L?0441:
0033 D2A3              SETB    ADCMUX_12_15_OE1
0035 D2A1              SETB    ADCMUX_12_15_OE2
0037 D2B6              SETB    ADCMUX_16_19_OE1
0039 D2B4              SETB    ADCMUX_16_19_OE2
003B 22                RET     
003C         L?0442:
003C         L?0443:
003C AD07              MOV     R5,AR7
003E AC06              MOV     R4,AR6
0040 120000      R     LCALL   _assertCoilAddress
0043 ED                MOV     A,R5
0044 540F              ANL     A,#0FH
0046 25E0              ADD     A,ACC
0048 FF                MOV     R7,A
0049 E4                CLR     A
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 101 

004A 33                RLC     A
004B FE                MOV     R6,A
004C 7400        R     MOV     A,#LOW NVRAM0
004E 2F                ADD     A,R7
004F F582              MOV     DPL,A
0051 7400        R     MOV     A,#HIGH NVRAM0
0053 3E                ADDC    A,R6
0054 F583              MOV     DPH,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FB                MOV     R3,A
0059         L?0444:
0059 EC                MOV     A,R4
005A C4                SWAP    A
005B F8                MOV     R0,A
005C 54F0              ANL     A,#0F0H
005E C8                XCH     A,R0
005F 68                XRL     A,R0
0060 FE                MOV     R6,A
0061 ED                MOV     A,R5
0062         L?0445:
0062 C4                SWAP    A
0063 540F              ANL     A,#0FH
0065 48                ORL     A,R0
0066 25E0              ADD     A,ACC
0068 FF                MOV     R7,A
0069 EE                MOV     A,R6
006A         L?0446:
006A 33                RLC     A
006B FE                MOV     R6,A
006C         L?0447:
006C 7400        R     MOV     A,#LOW NVRAM0
006E 2F                ADD     A,R7
006F F582              MOV     DPL,A
0071 7400        R     MOV     A,#HIGH NVRAM0
0073 3E                ADDC    A,R6
0074 F583              MOV     DPH,A
0076 22                RET     
0077         L?0448:
0077         L?0449:
0077 75BB02            MOV     AMX0SL,#02H
007A         L?0450:
007A D296              SETB    ADCMUX_0_3_OE1
007C D295              SETB    ADCMUX_0_3_OE2
007E D290              SETB    ADCMUC_4_7_OE1
0080 D293              SETB    ADCMUC_4_7_OE2
0082 D2A7              SETB    ADCMUX_8_11_OE1
0084 D2A5              SETB    ADCMUX_8_11_OE2
0086 22                RET     
0087         L?0451:
0087 7F01              MOV     R7,#01H
0089 120000      R     LCALL   _setLedDac
008C 900000      R     MOV     DPTR,#NVRAM0+0D4H
008F         L?0452:
008F E0                MOVX    A,@DPTR
0090 FE                MOV     R6,A
0091 A3                INC     DPTR
0092 E0                MOVX    A,@DPTR
0093 FD                MOV     R5,A
0094 AC06              MOV     R4,AR6
0096 22                RET     
0097         L?0453:
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 102 

0097 D2B6              SETB    ADCMUX_16_19_OE1
0099 D2B4              SETB    ADCMUX_16_19_OE2
009B         L?0454:
009B D2B2              SETB    ADCMUX_20_23_OE1
009D D2B0              SETB    ADCMUX_20_23_OE2
009F D286              SETB    ADCMUX_24_27_OE1
00A1 D284              SETB    ADCMUX_24_27_OE2
00A3 22                RET     
00A4         L?0455:
00A4         L?0456:
00A4 E500        R     MOV     A,A
00A6         L?0457:
00A6 540F              ANL     A,#0FH
00A8 FF                MOV     R7,A
00A9 7E00              MOV     R6,#00H
00AB 7401              MOV     A,#01H
00AD A807              MOV     R0,AR7
00AF 08                INC     R0
00B0 22                RET     
00B1         L?0458:
00B1         L?0459:
00B1 E500        R     MOV     A,A
00B3         L?0460:
00B3 C4                SWAP    A
00B4         L?0461:
00B4 540F              ANL     A,#0FH
00B6         L?0462:
00B6 25E0              ADD     A,ACC
00B8 FF                MOV     R7,A
00B9 E4                CLR     A
00BA 33                RLC     A
00BB FE                MOV     R6,A
00BC 22                RET     
00BD         L?0463:
00BD 7400        R     MOV     A,#LOW NVRAM1
00BF 2F                ADD     A,R7
00C0 F582              MOV     DPL,A
00C2 7400        R     MOV     A,#HIGH NVRAM1
00C4 3E                ADDC    A,R6
00C5 F583              MOV     DPH,A
00C7 A3                INC     DPTR
00C8 E0                MOVX    A,@DPTR
00C9 FA                MOV     R2,A
00CA EC                MOV     A,R4
00CB C4                SWAP    A
00CC F8                MOV     R0,A
00CD 54F0              ANL     A,#0F0H
00CF C8                XCH     A,R0
00D0 68                XRL     A,R0
00D1 FE                MOV     R6,A
00D2 ED                MOV     A,R5
00D3 C4                SWAP    A
00D4 540F              ANL     A,#0FH
00D6 48                ORL     A,R0
00D7 25E0              ADD     A,ACC
00D9 FF                MOV     R7,A
00DA EE                MOV     A,R6
00DB 33                RLC     A
00DC FE                MOV     R6,A
00DD 7400        R     MOV     A,#LOW NVRAM1
00DF 2F                ADD     A,R7
00E0 F582              MOV     DPL,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 103 

00E2 7400        R     MOV     A,#HIGH NVRAM1
00E4         L?0464:
00E4 3E                ADDC    A,R6
00E5 F583              MOV     DPH,A
00E7 E0                MOVX    A,@DPTR
00E8 FE                MOV     R6,A
00E9 A3                INC     DPTR
00EA E0                MOVX    A,@DPTR
00EB 22                RET     
00EC         L?0465:
00EC         L?0466:
00EC 75BB01            MOV     AMX0SL,#01H
00EF D296              SETB    ADCMUX_0_3_OE1
00F1 D295              SETB    ADCMUX_0_3_OE2
00F3 D290              SETB    ADCMUC_4_7_OE1
00F5 D293              SETB    ADCMUC_4_7_OE2
00F7 22                RET     
00F8         L?0467:
00F8 AB00        R     MOV     R3,sp1
00FA AA00        R     MOV     R2,sp1+01H
00FC A900        R     MOV     R1,sp1+02H
00FE 850082      R     MOV     DPL,i+01H
0101 850083      R     MOV     DPH,i
0104 120000      E     LCALL   ?C?CLDOPTR
0107 FF                MOV     R7,A
0108 AB00        R     MOV     R3,sp0
010A AA00        R     MOV     R2,sp0+01H
010C A900        R     MOV     R1,sp0+02H
010E 850082      R     MOV     DPL,i+01H
0111 850083      R     MOV     DPH,i
0114 020000      E     LJMP    ?C?CLDOPTR
0117         L?0468:
0117         L?0469:
0117 F4                CPL     A
0118 FF                MOV     R7,A
0119 EE                MOV     A,R6
011A F4                CPL     A
011B FE                MOV     R6,A
011C E0                MOVX    A,@DPTR
011D 5E                ANL     A,R6
011E FE                MOV     R6,A
011F A3                INC     DPTR
0120 E0                MOVX    A,@DPTR
0121 5F                ANL     A,R7
0122 22                RET     
0123         L?0474:
0123         L?0475:
0123 E4                CLR     A
0124 F5BB              MOV     AMX0SL,A
0126 D296              SETB    ADCMUX_0_3_OE1
0128 D295              SETB    ADCMUX_0_3_OE2
012A 22                RET     
012B         L?0480:
012B         L?0481:
012B EF                MOV     A,R7
012C         L?0482:
012C 75F002            MOV     B,#02H
012F A4                MUL     AB
0130 F582              MOV     DPL,A
0132 85F083            MOV     DPH,B
0135 22                RET     
0136         L?0483:
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 104 

0136 E4                CLR     A
0137 FF                MOV     R7,A
0138 FE                MOV     R6,A
0139 7DC8              MOV     R5,#0C8H
013B         L?0484:
013B AB00        R     MOV     R3,ftemp+03H
013D AA00        R     MOV     R2,ftemp+02H
013F A900        R     MOV     R1,ftemp+01H
0141 A800        R     MOV     R0,ftemp
0143 22                RET     
0144         L?0485:
0144 EE                MOV     A,R6
0145 33                RLC     A
0146 95E0              SUBB    A,ACC
0148 FD                MOV     R5,A
0149 FC                MOV     R4,A
014A E4                CLR     A
014B 7B98              MOV     R3,#098H
014D 7A08              MOV     R2,#08H
014F F9                MOV     R1,A
0150 F8                MOV     R0,A
0151 120000      E     LCALL   ?C?LMUL
0154 E4                CLR     A
0155 FB                MOV     R3,A
0156 7A10              MOV     R2,#010H
0158 F9                MOV     R1,A
0159 F8                MOV     R0,A
015A 020000      E     LJMP    ?C?SLDIV
015D         L?0486:
015D 7800        R     MOV     R0,#LOW NVRAM1
015F 7C00        R     MOV     R4,#HIGH NVRAM1
0161 7D01              MOV     R5,#01H
0163         L?0487:
0163 7B01              MOV     R3,#01H
0165 7A00        R     MOV     R2,#HIGH NVRAM0
0167 7900        R     MOV     R1,#LOW NVRAM0
0169 22                RET     
016A         L?0488:
016A         L?0489:
016A CE                XCH     A,R6
016B A2E7              MOV     C,ACC.7
016D 13                RRC     A
016E CE                XCH     A,R6
016F 13                RRC     A
0170 22                RET     
0171         L?0490:
0171         L?0491:
0171 E0                MOVX    A,@DPTR
0172 FA                MOV     R2,A
0173 A3                INC     DPTR
0174 E0                MOVX    A,@DPTR
0175 C3                CLR     C
0176 94FF              SUBB    A,#0FFH
0178 EA                MOV     A,R2
0179 6480              XRL     A,#080H
017B 94FF              SUBB    A,#0FFH
017D 22                RET     
017E         L?0496:
017E         L?0497:
017E 7400        R     MOV     A,#LOW NVRAM0+0120H
0180 2F                ADD     A,R7
0181 F582              MOV     DPL,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 105 

0183 7400        R     MOV     A,#HIGH NVRAM0+0120H
0185 3E                ADDC    A,R6
0186 F583              MOV     DPH,A
0188 22                RET     
0189         L?0498:
0189         L?0499:
0189 7400        R     MOV     A,#LOW NVRAM0+0122H
018B 2F                ADD     A,R7
018C F582              MOV     DPL,A
018E 7400        R     MOV     A,#HIGH NVRAM0+0122H
0190 3E                ADDC    A,R6
0191 F583              MOV     DPH,A
0193 22                RET     
0194         L?0500:
0194         L?0501:
0194 7400        R     MOV     A,#LOW NVRAM0+0124H
0196 2F                ADD     A,R7
0197 F582              MOV     DPL,A
0199 7400        R     MOV     A,#HIGH NVRAM0+0124H
019B 3E                ADDC    A,R6
019C F583              MOV     DPH,A
019E 22                RET     
019F         L?0502:
019F E2                MOVX    A,@R0
01A0 FF                MOV     R7,A
01A1 33                RLC     A
01A2 95E0              SUBB    A,ACC
01A4 FE                MOV     R6,A
01A5 D3                SETB    C
01A6 EF                MOV     A,R7
01A7 94FD              SUBB    A,#0FDH
01A9 EE                MOV     A,R6
01AA 6480              XRL     A,#080H
01AC 947F              SUBB    A,#07FH
01AE 22                RET     
01AF         L?0503:
01AF 75F01F            MOV     B,#01FH
01B2 A4                MUL     AB
01B3 2400        R     ADD     A,#LOW adcTempDat
01B5 F9                MOV     R1,A
01B6 7400        R     MOV     A,#HIGH adcTempDat
01B8 35F0              ADDC    A,B
01BA FA                MOV     R2,A
01BB 7B01              MOV     R3,#01H
01BD 22                RET     
01BE         L?0504:
01BE         L?0505:
01BE D2A3              SETB    ADCMUX_12_15_OE1
01C0 D2A1              SETB    ADCMUX_12_15_OE2
01C2 C2A2              CLR     ADCMUX_12_15_S1
01C4 22                RET     
01C5         L?0506:
01C5         L?0507:
01C5 D2A3              SETB    ADCMUX_12_15_OE1
01C7 D2A1              SETB    ADCMUX_12_15_OE2
01C9 D2A2              SETB    ADCMUX_12_15_S1
01CB 22                RET     
01CC         L?0508:
01CC         L?0509:
01CC D2B2              SETB    ADCMUX_20_23_OE1
01CE D2B0              SETB    ADCMUX_20_23_OE2
01D0 C2B3              CLR     ADCMUX_20_23_S1
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 106 

01D2 22                RET     
01D3         L?0510:
01D3         L?0511:
01D3 AB00        R     MOV     R3,s
01D5 AA00        R     MOV     R2,s+01H
01D7 A900        R     MOV     R1,s+02H
01D9 22                RET     
01DA         L?0512:
01DA         L?0513:
01DA E0                MOVX    A,@DPTR
01DB FE                MOV     R6,A
01DC A3                INC     DPTR
01DD E0                MOVX    A,@DPTR
01DE A803              MOV     R0,AR3
01E0 08                INC     R0
01E1 22                RET     
01E2         L?0514:
01E2         L?0515:
01E2 FF                MOV     R7,A
01E3 E0                MOVX    A,@DPTR
01E4 4E                ORL     A,R6
01E5 FE                MOV     R6,A
01E6 A3                INC     DPTR
01E7 E0                MOVX    A,@DPTR
01E8 4F                ORL     A,R7
01E9 22                RET     
01EA         L?0516:
01EA 120000      E     LCALL   ?C?FPADD
01ED 8F00        R     MOV     ftemp+03H,R7
01EF 8E00        R     MOV     ftemp+02H,R6
01F1 8D00        R     MOV     ftemp+01H,R5
01F3 8C00        R     MOV     ftemp,R4
01F5 22                RET     
01F6         L?0517:
01F6         L?0518:
01F6 E4                CLR     A
01F7 75F001            MOV     B,#01H
01FA 020000      E     LJMP    ?C?IILDX
01FD         L?0519:
01FD C3                CLR     C
01FE         L?0520:
01FE 940E              SUBB    A,#0EH
0200 7480              MOV     A,#080H
0202 9480              SUBB    A,#080H
0204 22                RET     
0205         L?0521:
0205         L?0522:
0205 D2B2              SETB    ADCMUX_20_23_OE1
0207 D2B0              SETB    ADCMUX_20_23_OE2
0209 D2B3              SETB    ADCMUX_20_23_S1
020B 22                RET     
020C         L?0523:
020C AAF0              MOV     R2,B
020E 6480              XRL     A,#080H
0210 F8                MOV     R0,A
0211 EA                MOV     A,R2
0212 6480              XRL     A,#080H
0214 98                SUBB    A,R0
0215 22                RET     
             ; FUNCTION Com01B0 (END)

             ; FUNCTION getGlobalInterrupt (BEGIN)
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 107 

                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0000 A2AF              MOV     C,EA
0002 E4                CLR     A
0003 33                RLC     A
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 56
0005 22                RET     
             ; FUNCTION getGlobalInterrupt (END)

             ; FUNCTION _setLedRun (BEGIN)
                                           ; SOURCE LINE # 57
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 58
0000 EF                MOV     A,R7
0001 6004              JZ      ?C0002
                                           ; SOURCE LINE # 59
0003 439601            ORL     P7,#01H
                                           ; SOURCE LINE # 60
0006 22                RET     
0007         ?C0002:
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
0007 5396FE            ANL     P7,#0FEH
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
000A         ?C0004:
000A 22                RET     
             ; FUNCTION _setLedRun (END)

             ; FUNCTION getLedRun (BEGIN)
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
0000 E596              MOV     A,P7
0002 5401              ANL     A,#01H
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 67
0005 22                RET     
             ; FUNCTION getLedRun (END)

             ; FUNCTION _setLedEprom (BEGIN)
                                           ; SOURCE LINE # 68
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 69
0000 EF                MOV     A,R7
0001 6004              JZ      ?C0006
                                           ; SOURCE LINE # 70
0003 439602            ORL     P7,#02H
                                           ; SOURCE LINE # 71
0006 22                RET     
0007         ?C0006:
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
0007 5396FD            ANL     P7,#0FDH
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
000A         ?C0008:
000A 22                RET     
             ; FUNCTION _setLedEprom (END)

             ; FUNCTION getLedEprom (BEGIN)
                                           ; SOURCE LINE # 76
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 108 

                                           ; SOURCE LINE # 77
0000 E596              MOV     A,P7
0002 C3                CLR     C
0003 13                RRC     A
0004 5401              ANL     A,#01H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 78
0007 22                RET     
             ; FUNCTION getLedEprom (END)

             ; FUNCTION _setLedDac (BEGIN)
                                           ; SOURCE LINE # 79
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 80
0000 EF                MOV     A,R7
0001 6004              JZ      ?C0010
                                           ; SOURCE LINE # 81
0003 439604            ORL     P7,#04H
                                           ; SOURCE LINE # 82
0006 22                RET     
0007         ?C0010:
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0007 5396FB            ANL     P7,#0FBH
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
000A         ?C0012:
000A 22                RET     
             ; FUNCTION _setLedDac (END)

             ; FUNCTION getLedDac (BEGIN)
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000 E596              MOV     A,P7
0002 13                RRC     A
0003 13                RRC     A
0004 5401              ANL     A,#01H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 89
0007 22                RET     
             ; FUNCTION getLedDac (END)

             ; FUNCTION _setLedError (BEGIN)
                                           ; SOURCE LINE # 90
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 91
0000 EF                MOV     A,R7
0001 6004              JZ      ?C0014
                                           ; SOURCE LINE # 92
0003 439608            ORL     P7,#08H
                                           ; SOURCE LINE # 93
0006 22                RET     
0007         ?C0014:
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
0007 5396F7            ANL     P7,#0F7H
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
000A         ?C0016:
000A 22                RET     
             ; FUNCTION _setLedError (END)

C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 109 

             ; FUNCTION _?getLedError (BEGIN)
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0000 E596              MOV     A,P7
0002 13                RRC     A
0003 13                RRC     A
0004 13                RRC     A
0005 5401              ANL     A,#01H
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 100
0008 22                RET     
             ; FUNCTION _?getLedError (END)

             ; FUNCTION adcProcess (BEGIN)
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
;---- Variable 'result' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 106
0000 E5BF              MOV     A,ADC0+01H
0002 540F              ANL     A,#0FH
0004 FC                MOV     R4,A
0005 ADBE              MOV     R5,ADC0
                                           ; SOURCE LINE # 107
0007 E500        R     MOV     A,adcSelect
0009 120000      R     LCALL   L?0503
000C 120000      R     LCALL   _refreshAdcData
                                           ; SOURCE LINE # 108
000F 75F01F            MOV     B,#01FH
0012 E500        R     MOV     A,adcSelect
0014 A4                MUL     AB
0015 2400        R     ADD     A,#LOW adcTempDat+01CH
0017 F582              MOV     DPL,A
0019 E5F0              MOV     A,B
001B 3400        R     ADDC    A,#HIGH adcTempDat+01CH
001D F583              MOV     DPH,A
001F E0                MOVX    A,@DPTR
0020 FC                MOV     R4,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 FD                MOV     R5,A
0024 E500        R     MOV     A,adcSelect
0026 FB                MOV     R3,A
0027 7A00              MOV     R2,#00H
0029 25E0              ADD     A,ACC
002B FF                MOV     R7,A
002C EA                MOV     A,R2
002D 33                RLC     A
002E FE                MOV     R6,A
002F 7400        R     MOV     A,#LOW NVRAM0+020H
0031 2F                ADD     A,R7
0032 F582              MOV     DPL,A
0034 7400        R     MOV     A,#HIGH NVRAM0+020H
0036 3E                ADDC    A,R6
0037 F583              MOV     DPH,A
0039 EC                MOV     A,R4
003A F0                MOVX    @DPTR,A
003B A3                INC     DPTR
003C ED                MOV     A,R5
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
003E C3                CLR     C
003F EB                MOV     A,R3
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 110 

0040 943F              SUBB    A,#03FH
0042 7480              MOV     A,#080H
0044 9480              SUBB    A,#080H
0046 5004              JNC     ?C0018
                                           ; SOURCE LINE # 110
0048 0500        R     INC     adcSelect
                                           ; SOURCE LINE # 111
004A 8003              SJMP    ?C0019
004C         ?C0018:
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
004C E4                CLR     A
004D F500        R     MOV     adcSelect,A
                                           ; SOURCE LINE # 114
004F         ?C0019:
                                           ; SOURCE LINE # 115
004F E500        R     MOV     A,adcSelect
0051 B43C00            CJNE    A,#03CH,?C0296
0054         ?C0296:
0054 4003              JC      $ + 5H
0056 020000      R     LJMP    ?C0020
0059 900000      R     MOV     DPTR,#?C0297
005C F8                MOV     R0,A
005D 28                ADD     A,R0
005E 28                ADD     A,R0
005F 73                JMP     @A+DPTR
0060         ?C0297:
0060 020000      R     LJMP    ?C0021
0063 020000      R     LJMP    ?C0022
0066 020000      R     LJMP    ?C0023
0069 020000      R     LJMP    ?C0024
006C 020000      R     LJMP    ?C0025
006F 020000      R     LJMP    ?C0026
0072 020000      R     LJMP    ?C0027
0075 020000      R     LJMP    ?C0028
0078 020000      R     LJMP    ?C0029
007B 020000      R     LJMP    ?C0030
007E 020000      R     LJMP    ?C0031
0081 020000      R     LJMP    ?C0032
0084 020000      R     LJMP    ?C0033
0087 020000      R     LJMP    ?C0034
008A 020000      R     LJMP    ?C0035
008D 020000      R     LJMP    ?C0036
0090 020000      R     LJMP    ?C0037
0093 020000      R     LJMP    ?C0038
0096 020000      R     LJMP    ?C0039
0099 020000      R     LJMP    ?C0040
009C 020000      R     LJMP    ?C0041
009F 020000      R     LJMP    ?C0042
00A2 020000      R     LJMP    ?C0043
00A5 020000      R     LJMP    ?C0044
00A8 020000      R     LJMP    ?C0045
00AB 020000      R     LJMP    ?C0046
00AE 020000      R     LJMP    ?C0047
00B1 020000      R     LJMP    ?C0048
00B4 020000      R     LJMP    ?C0020
00B7 020000      R     LJMP    ?C0020
00BA 020000      R     LJMP    ?C0020
00BD 020000      R     LJMP    ?C0020
00C0 020000      R     LJMP    ?C0049
00C3 020000      R     LJMP    ?C0050
00C6 020000      R     LJMP    ?C0051
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 111 

00C9 020000      R     LJMP    ?C0052
00CC 020000      R     LJMP    ?C0053
00CF 020000      R     LJMP    ?C0054
00D2 020000      R     LJMP    ?C0055
00D5 020000      R     LJMP    ?C0056
00D8 020000      R     LJMP    ?C0057
00DB 020000      R     LJMP    ?C0058
00DE 020000      R     LJMP    ?C0059
00E1 020000      R     LJMP    ?C0060
00E4 020000      R     LJMP    ?C0061
00E7 020000      R     LJMP    ?C0062
00EA 020000      R     LJMP    ?C0063
00ED 020000      R     LJMP    ?C0064
00F0 020000      R     LJMP    ?C0065
00F3 020000      R     LJMP    ?C0066
00F6 020000      R     LJMP    ?C0067
00F9 020000      R     LJMP    ?C0067
00FC 020000      R     LJMP    ?C0069
00FF 020000      R     LJMP    ?C0070
0102 020000      R     LJMP    ?C0071
0105 020000      R     LJMP    ?C0072
0108 020000      R     LJMP    ?C0073
010B 020000      R     LJMP    ?C0074
010E 020000      R     LJMP    ?C0075
0111 020000      R     LJMP    ?C0076
                                           ; SOURCE LINE # 116
0114         ?C0021:
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
0114 120000      R     LCALL   L?0474
                                           ; SOURCE LINE # 122
0117 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
0119 8005              SJMP    ?C0386
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
011B         ?C0022:
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
011B 120000      R     LCALL   L?0474
                                           ; SOURCE LINE # 153
011E D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 154
0120         ?C0386:
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 112 

0120 D294              SETB    ADCMUX_0_3_S0
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0122 020000      R     LJMP    ?C0414
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
0125         ?C0023:
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
0125 120000      R     LCALL   L?0475
                                           ; SOURCE LINE # 184
0128 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
012A 8005              SJMP    ?C0388
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
012C         ?C0024:
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
012C 120000      R     LCALL   L?0475
                                           ; SOURCE LINE # 215
012F D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 216
0131         ?C0388:
0131 D294              SETB    ADCMUX_0_3_S0
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 224
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 113 

                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0133 020000      R     LJMP    ?C0415
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
0136         ?C0025:
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
0136 120000      R     LCALL   L?0465
                                           ; SOURCE LINE # 249
0139 C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 250
013B D292              SETB    ADCMUX_4_7_S0
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
013D 020000      R     LJMP    ?C0416
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
0140         ?C0026:
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0140 120000      R     LCALL   L?0465
                                           ; SOURCE LINE # 280
0143 D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 281
0145 D294              SETB    ADCMUX_0_3_S0
                                           ; SOURCE LINE # 283
0147         ?C0390:
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 114 

                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
0147 020000      R     LJMP    ?C0416
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
014A         ?C0027:
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
014A 8000              SJMP    ?C0392
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
014C         ?C0028:
                                           ; SOURCE LINE # 335
014C         ?C0392:
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
014C 120000      R     LCALL   L?0466
                                           ; SOURCE LINE # 342
014F D291              SETB    ADCMUX_4_7_S1
                                           ; SOURCE LINE # 343
0151 D292              SETB    ADCMUX_4_7_S0
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
0153 020000      R     LJMP    ?C0417
                                           ; SOURCE LINE # 363
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 115 

                                           ; SOURCE LINE # 364
0156         ?C0029:
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
0156 120000      R     LCALL   L?0448
                                           ; SOURCE LINE # 376
0159 C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
015B 8005              SJMP    ?C0394
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
015D         ?C0030:
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
015D 120000      R     LCALL   L?0448
                                           ; SOURCE LINE # 407
0160 D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 408
0162         ?C0394:
0162 D2A4              SETB    ADCMUX_8_11_S0
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
0164 020000      R     LJMP    ?C0419
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
0167         ?C0031:
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 433
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 116 

                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
0167 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 438
016A C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
016C 8005              SJMP    ?C0396
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
016E         ?C0032:
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
016E 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 469
0171 D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 470
0173         ?C0396:
0173 D2A4              SETB    ADCMUX_8_11_S0
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
0175 020000      R     LJMP    ?C0397
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
0178         ?C0033:
                                           ; SOURCE LINE # 490
0178 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
017B 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 501
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 117 

                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
017E 120000      R     LCALL   L?0504
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
0181 8009              SJMP    ?C0398
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
0183         ?C0034:
                                           ; SOURCE LINE # 521
0183 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
0186 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0189 120000      R     LCALL   L?0506
                                           ; SOURCE LINE # 535
018C         ?C0398:
018C D2A0              SETB    ADCMUX_12_15_S0
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
018E 020000      R     LJMP    ?C0420
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 550
0191         ?C0035:
                                           ; SOURCE LINE # 552
0191 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 560
                                           ; SOURCE LINE # 561
0194 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
0197 120000      R     LCALL   L?0504
                                           ; SOURCE LINE # 566
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 118 

                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
019A 8009              SJMP    ?C0400
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
019C         ?C0036:
                                           ; SOURCE LINE # 583
019C 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
019F 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
01A2 120000      R     LCALL   L?0506
                                           ; SOURCE LINE # 597
01A5         ?C0400:
01A5 D2A0              SETB    ADCMUX_12_15_S0
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
                                           ; SOURCE LINE # 610
01A7 020000      R     LJMP    ?C0421
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
01AA         ?C0037:
                                           ; SOURCE LINE # 614
01AA 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
01AD 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 630
01B0 C2B7              CLR     ADCMUX_16_19_S1
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 119 

                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 640
                                           ; SOURCE LINE # 641
01B2 8008              SJMP    ?C0402
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 643
01B4         ?C0038:
                                           ; SOURCE LINE # 645
01B4 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
01B7 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 661
01BA D2B7              SETB    ADCMUX_16_19_S1
                                           ; SOURCE LINE # 662
01BC         ?C0402:
01BC D2B5              SETB    ADCMUX_16_19_S0
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 672
01BE 020000      R     LJMP    ?C0422
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
01C1         ?C0039:
                                           ; SOURCE LINE # 676
01C1 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 690
                                           ; SOURCE LINE # 691
01C4 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 692
01C7 C2B7              CLR     ADCMUX_16_19_S1
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 120 

                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 703
01C9 8008              SJMP    ?C0404
                                           ; SOURCE LINE # 704
                                           ; SOURCE LINE # 705
01CB         ?C0040:
                                           ; SOURCE LINE # 707
01CB 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 710
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 718
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
01CE 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 723
01D1 D2B7              SETB    ADCMUX_16_19_S1
                                           ; SOURCE LINE # 724
01D3         ?C0404:
01D3 D2B5              SETB    ADCMUX_16_19_S0
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 729
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
01D5 020000      R     LJMP    ?C0423
                                           ; SOURCE LINE # 735
                                           ; SOURCE LINE # 736
01D8         ?C0041:
                                           ; SOURCE LINE # 738
01D8 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
01DB 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
01DE 120000      R     LCALL   L?0508
                                           ; SOURCE LINE # 758
01E1 D2B1              SETB    ADCMUX_20_23_S0
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
01E3 020000      R     LJMP    ?C0424
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 121 

                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
01E6         ?C0042:
                                           ; SOURCE LINE # 769
01E6 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 784
01E9 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 786
01EC C2B2              CLR     ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 787
01EE D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 788
01F0 D2B3              SETB    ADCMUX_20_23_S1
                                           ; SOURCE LINE # 789
01F2 D2B1              SETB    ADCMUX_20_23_S0
                                           ; SOURCE LINE # 791
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
01F4 8020              SJMP    ?C0407
                                           ; SOURCE LINE # 799
                                           ; SOURCE LINE # 800
01F6         ?C0043:
                                           ; SOURCE LINE # 802
01F6 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
01F9 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 819
                                           ; SOURCE LINE # 820
                                           ; SOURCE LINE # 821
01FC 120000      R     LCALL   L?0508
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
                                           ; SOURCE LINE # 828
                                           ; SOURCE LINE # 829
01FF 8009              SJMP    ?C0408
                                           ; SOURCE LINE # 830
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 122 

                                           ; SOURCE LINE # 831
0201         ?C0044:
                                           ; SOURCE LINE # 833
0201 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 836
                                           ; SOURCE LINE # 838
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 845
                                           ; SOURCE LINE # 847
                                           ; SOURCE LINE # 848
0204 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
0207 120000      R     LCALL   L?0521
                                           ; SOURCE LINE # 853
020A         ?C0408:
020A D2B1              SETB    ADCMUX_20_23_S0
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
                                           ; SOURCE LINE # 860
020C 020000      R     LJMP    ?C0425
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 862
020F         ?C0045:
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
020F 120000      R     LCALL   L?0436
                                           ; SOURCE LINE # 881
0212 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 882
0214 D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 884
0216         ?C0407:
0216 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 885
0218 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 886
021A C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
021C 8008              SJMP    ?C0410
                                           ; SOURCE LINE # 892
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 123 

                                           ; SOURCE LINE # 893
021E         ?C0046:
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 898
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
                                           ; SOURCE LINE # 903
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
021E 120000      R     LCALL   L?0436
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 915
                                           ; SOURCE LINE # 916
0221 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 917
0224 D287              SETB    ADCMUX_24_27_S1
                                           ; SOURCE LINE # 918
0226         ?C0410:
0226 D285              SETB    ADCMUX_24_27_S0
                                           ; SOURCE LINE # 919
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
                                           ; SOURCE LINE # 922
0228 020000      R     LJMP    ?C0426
                                           ; SOURCE LINE # 923
                                           ; SOURCE LINE # 924
022B         ?C0047:
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 932
                                           ; SOURCE LINE # 934
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 937
                                           ; SOURCE LINE # 938
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 941
022B 120000      R     LCALL   L?0437
                                           ; SOURCE LINE # 943
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 946
                                           ; SOURCE LINE # 947
022E 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 948
0231 C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 951
                                           ; SOURCE LINE # 952
                                           ; SOURCE LINE # 953
0233 8008              SJMP    ?C0412
                                           ; SOURCE LINE # 954
                                           ; SOURCE LINE # 955
0235         ?C0048:
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 959
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 124 

                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 962
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 969
                                           ; SOURCE LINE # 971
                                           ; SOURCE LINE # 972
0235 120000      R     LCALL   L?0437
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 978
0238 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 979
023B D287              SETB    ADCMUX_24_27_S1
                                           ; SOURCE LINE # 980
023D         ?C0412:
023D D285              SETB    ADCMUX_24_27_S0
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 983
                                           ; SOURCE LINE # 984
023F 020000      R     LJMP    ?C0427
                                           ; SOURCE LINE # 985
                                           ; SOURCE LINE # 986
0242         ?C0049:
                                           ; SOURCE LINE # 988
                                           ; SOURCE LINE # 990
                                           ; SOURCE LINE # 991
0242 120000      R     LCALL   L?0475
                                           ; SOURCE LINE # 992
0245 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 993
0247 C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 995
0249         ?C0387:
                                           ; SOURCE LINE # 996
                                           ; SOURCE LINE # 998
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1008
                                           ; SOURCE LINE # 1010
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
0249 8007              SJMP    ?C0414
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
024B         ?C0050:
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
024B 120000      R     LCALL   L?0475
                                           ; SOURCE LINE # 1023
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 125 

024E D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 1024
0250 C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 1026
0252         ?C0414:
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
0252 120000      R     LCALL   L?0439
                                           ; SOURCE LINE # 1038
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
0255 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1043
0258 00                NOP     
0259 00                NOP     
025A 00                NOP     
025B 00                NOP     
025C 00                NOP     
                                           ; SOURCE LINE # 1044
025D C296              CLR     ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1045
025F D295              SETB    ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1046
0261 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1047
                                           ; SOURCE LINE # 1048
0264         ?C0051:
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1052
                                           ; SOURCE LINE # 1053
0264 120000      R     LCALL   L?0475
                                           ; SOURCE LINE # 1054
0267 C297              CLR     ADCMUX_0_3_S1
                                           ; SOURCE LINE # 1055
0269 C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 1057
026B         ?C0389:
                                           ; SOURCE LINE # 1058
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1061
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1069
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1072
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1075
                                           ; SOURCE LINE # 1076
                                           ; SOURCE LINE # 1077
026B 8007              SJMP    ?C0415
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
026D         ?C0052:
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 126 

                                           ; SOURCE LINE # 1081
                                           ; SOURCE LINE # 1083
                                           ; SOURCE LINE # 1084
026D 120000      R     LCALL   L?0475
                                           ; SOURCE LINE # 1085
0270 D297              SETB    ADCMUX_0_3_S1
                                           ; SOURCE LINE # 1086
0272 C294              CLR     ADCMUX_0_3_S0
                                           ; SOURCE LINE # 1088
0274         ?C0415:
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1094
                                           ; SOURCE LINE # 1095
                                           ; SOURCE LINE # 1097
                                           ; SOURCE LINE # 1098
0274 120000      R     LCALL   L?0439
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
0277 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1105
027A 00                NOP     
027B 00                NOP     
027C 00                NOP     
027D 00                NOP     
027E 00                NOP     
                                           ; SOURCE LINE # 1106
027F D296              SETB    ADCMUX_0_3_OE1
                                           ; SOURCE LINE # 1107
0281 C295              CLR     ADCMUX_0_3_OE2
                                           ; SOURCE LINE # 1108
0283 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
0286         ?C0053:
                                           ; SOURCE LINE # 1112
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1117
                                           ; SOURCE LINE # 1118
0286 120000      R     LCALL   L?0466
                                           ; SOURCE LINE # 1119
0289 C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1120
028B C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1122
028D         ?C0391:
                                           ; SOURCE LINE # 1123
                                           ; SOURCE LINE # 1125
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1128
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1131
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1134
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1136
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1138
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 127 

                                           ; SOURCE LINE # 1139
028D 8007              SJMP    ?C0416
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
028F         ?C0054:
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1145
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
028F 120000      R     LCALL   L?0466
                                           ; SOURCE LINE # 1150
0292 D291              SETB    ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1151
0294 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1153
0296         ?C0416:
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1156
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1159
                                           ; SOURCE LINE # 1160
0296 120000      R     LCALL   L?0440
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1165
                                           ; SOURCE LINE # 1166
0299 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1167
029C 00                NOP     
029D 00                NOP     
029E 00                NOP     
029F 00                NOP     
02A0 00                NOP     
                                           ; SOURCE LINE # 1168
02A1 C290              CLR     ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1169
02A3 D293              SETB    ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1170
02A5 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1171
                                           ; SOURCE LINE # 1172
02A8         ?C0055:
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1176
                                           ; SOURCE LINE # 1177
                                           ; SOURCE LINE # 1179
                                           ; SOURCE LINE # 1180
02A8 120000      R     LCALL   L?0466
                                           ; SOURCE LINE # 1181
02AB C291              CLR     ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1182
02AD C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1184
02AF         ?C0393:
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1190
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 128 

                                           ; SOURCE LINE # 1196
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1199
                                           ; SOURCE LINE # 1200
                                           ; SOURCE LINE # 1201
02AF 8007              SJMP    ?C0417
                                           ; SOURCE LINE # 1202
                                           ; SOURCE LINE # 1203
02B1         ?C0056:
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1207
                                           ; SOURCE LINE # 1208
                                           ; SOURCE LINE # 1210
                                           ; SOURCE LINE # 1211
02B1 120000      R     LCALL   L?0466
                                           ; SOURCE LINE # 1212
02B4 D291              SETB    ADCMUX_4_7_S1
                                           ; SOURCE LINE # 1213
02B6 C292              CLR     ADCMUX_4_7_S0
                                           ; SOURCE LINE # 1215
02B8         ?C0417:
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
02B8 120000      R     LCALL   L?0440
                                           ; SOURCE LINE # 1224
                                           ; SOURCE LINE # 1225
                                           ; SOURCE LINE # 1227
                                           ; SOURCE LINE # 1228
02BB 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1229
02BE 00                NOP     
02BF 00                NOP     
02C0 00                NOP     
02C1 00                NOP     
02C2 00                NOP     
                                           ; SOURCE LINE # 1230
02C3 D290              SETB    ADCMUC_4_7_OE1
                                           ; SOURCE LINE # 1231
02C5 C293              CLR     ADCMUC_4_7_OE2
                                           ; SOURCE LINE # 1232
02C7 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1233
                                           ; SOURCE LINE # 1234
02CA         ?C0057:
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1239
                                           ; SOURCE LINE # 1241
                                           ; SOURCE LINE # 1242
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
02CA 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1246
02CD C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1247
02CF C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1249
02D1         ?C0395:
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 129 

                                           ; SOURCE LINE # 1250
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1255
                                           ; SOURCE LINE # 1256
                                           ; SOURCE LINE # 1258
                                           ; SOURCE LINE # 1259
                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1261
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1263
02D1 8010              SJMP    ?C0419
                                           ; SOURCE LINE # 1264
                                           ; SOURCE LINE # 1265
02D3         ?C0058:
                                           ; SOURCE LINE # 1267
                                           ; SOURCE LINE # 1269
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1272
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1275
                                           ; SOURCE LINE # 1276
02D3 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1277
02D6 D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1278
02D8 C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1280
02DA         ?C0418:
                                           ; SOURCE LINE # 1281
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1290
                                           ; SOURCE LINE # 1291
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1294
02DA 8007              SJMP    ?C0419
                                           ; SOURCE LINE # 1295
                                           ; SOURCE LINE # 1296
02DC         ?C0059:
                                           ; SOURCE LINE # 1298
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
                                           ; SOURCE LINE # 1303
                                           ; SOURCE LINE # 1304
                                           ; SOURCE LINE # 1306
                                           ; SOURCE LINE # 1307
02DC 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1308
02DF C2A6              CLR     ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1309
02E1 C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1311
02E3         ?C0419:
                                           ; SOURCE LINE # 1312
                                           ; SOURCE LINE # 1314
                                           ; SOURCE LINE # 1315
02E3 120000      R     LCALL   L?0441
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 130 

                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1321
02E6 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1322
02E9 00                NOP     
02EA 00                NOP     
02EB 00                NOP     
02EC 00                NOP     
02ED 00                NOP     
                                           ; SOURCE LINE # 1323
02EE C2A7              CLR     ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1324
02F0 D2A5              SETB    ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1325
02F2 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1327
02F5         ?C0060:
                                           ; SOURCE LINE # 1329
                                           ; SOURCE LINE # 1331
                                           ; SOURCE LINE # 1332
                                           ; SOURCE LINE # 1334
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1337
                                           ; SOURCE LINE # 1338
02F5 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1339
02F8 D2A6              SETB    ADCMUX_8_11_S1
                                           ; SOURCE LINE # 1340
02FA C2A4              CLR     ADCMUX_8_11_S0
                                           ; SOURCE LINE # 1342
02FC         ?C0397:
                                           ; SOURCE LINE # 1343
                                           ; SOURCE LINE # 1345
                                           ; SOURCE LINE # 1346
02FC 120000      R     LCALL   L?0441
                                           ; SOURCE LINE # 1348
                                           ; SOURCE LINE # 1349
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1352
02FF 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1353
0302 00                NOP     
0303 00                NOP     
0304 00                NOP     
0305 00                NOP     
0306 00                NOP     
                                           ; SOURCE LINE # 1354
0307 D2A7              SETB    ADCMUX_8_11_OE1
                                           ; SOURCE LINE # 1355
0309 C2A5              CLR     ADCMUX_8_11_OE2
                                           ; SOURCE LINE # 1356
030B 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1357
                                           ; SOURCE LINE # 1358
030E         ?C0061:
                                           ; SOURCE LINE # 1360
030E 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 1362
                                           ; SOURCE LINE # 1363
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 131 

                                           ; SOURCE LINE # 1365
                                           ; SOURCE LINE # 1366
                                           ; SOURCE LINE # 1368
                                           ; SOURCE LINE # 1369
0311 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 1371
                                           ; SOURCE LINE # 1372
                                           ; SOURCE LINE # 1373
0314 120000      R     LCALL   L?0505
                                           ; SOURCE LINE # 1374
0317 C2A0              CLR     ADCMUX_12_15_S0
                                           ; SOURCE LINE # 1376
0319         ?C0399:
                                           ; SOURCE LINE # 1377
                                           ; SOURCE LINE # 1379
                                           ; SOURCE LINE # 1380
                                           ; SOURCE LINE # 1382
                                           ; SOURCE LINE # 1383
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1386
                                           ; SOURCE LINE # 1387
0319 800B              SJMP    ?C0420
                                           ; SOURCE LINE # 1388
                                           ; SOURCE LINE # 1389
031B         ?C0062:
                                           ; SOURCE LINE # 1391
031B 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 1393
                                           ; SOURCE LINE # 1394
                                           ; SOURCE LINE # 1396
                                           ; SOURCE LINE # 1397
                                           ; SOURCE LINE # 1399
                                           ; SOURCE LINE # 1400
031E 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 1402
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1404
0321 120000      R     LCALL   L?0507
                                           ; SOURCE LINE # 1405
0324 C2A0              CLR     ADCMUX_12_15_S0
                                           ; SOURCE LINE # 1407
0326         ?C0420:
                                           ; SOURCE LINE # 1408
                                           ; SOURCE LINE # 1410
                                           ; SOURCE LINE # 1411
                                           ; SOURCE LINE # 1413
                                           ; SOURCE LINE # 1414
0326 120000      R     LCALL   L?0453
                                           ; SOURCE LINE # 1415
0329 00                NOP     
032A 00                NOP     
032B 00                NOP     
032C 00                NOP     
032D 00                NOP     
                                           ; SOURCE LINE # 1416
032E C2A3              CLR     ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1417
0330 D2A1              SETB    ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1418
0332 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1419
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 132 

                                           ; SOURCE LINE # 1420
0335         ?C0063:
                                           ; SOURCE LINE # 1422
0335 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 1424
                                           ; SOURCE LINE # 1425
                                           ; SOURCE LINE # 1427
                                           ; SOURCE LINE # 1428
                                           ; SOURCE LINE # 1430
                                           ; SOURCE LINE # 1431
0338 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 1433
                                           ; SOURCE LINE # 1434
                                           ; SOURCE LINE # 1435
033B 120000      R     LCALL   L?0505
                                           ; SOURCE LINE # 1436
033E C2A0              CLR     ADCMUX_12_15_S0
                                           ; SOURCE LINE # 1438
0340         ?C0401:
                                           ; SOURCE LINE # 1439
                                           ; SOURCE LINE # 1441
                                           ; SOURCE LINE # 1442
                                           ; SOURCE LINE # 1444
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1446
                                           ; SOURCE LINE # 1447
                                           ; SOURCE LINE # 1448
                                           ; SOURCE LINE # 1449
0340 800B              SJMP    ?C0421
                                           ; SOURCE LINE # 1450
                                           ; SOURCE LINE # 1451
0342         ?C0064:
                                           ; SOURCE LINE # 1453
0342 75BB03            MOV     AMX0SL,#03H
                                           ; SOURCE LINE # 1455
                                           ; SOURCE LINE # 1456
                                           ; SOURCE LINE # 1458
                                           ; SOURCE LINE # 1459
                                           ; SOURCE LINE # 1461
                                           ; SOURCE LINE # 1462
0345 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 1464
                                           ; SOURCE LINE # 1465
                                           ; SOURCE LINE # 1466
0348 120000      R     LCALL   L?0507
                                           ; SOURCE LINE # 1467
034B C2A0              CLR     ADCMUX_12_15_S0
                                           ; SOURCE LINE # 1469
034D         ?C0421:
                                           ; SOURCE LINE # 1470
                                           ; SOURCE LINE # 1472
                                           ; SOURCE LINE # 1473
                                           ; SOURCE LINE # 1475
                                           ; SOURCE LINE # 1476
034D 120000      R     LCALL   L?0453
                                           ; SOURCE LINE # 1477
0350 00                NOP     
0351 00                NOP     
0352 00                NOP     
0353 00                NOP     
0354 00                NOP     
                                           ; SOURCE LINE # 1478
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 133 

0355 D2A3              SETB    ADCMUX_12_15_OE1
                                           ; SOURCE LINE # 1479
0357 C2A1              CLR     ADCMUX_12_15_OE2
                                           ; SOURCE LINE # 1480
0359 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1481
                                           ; SOURCE LINE # 1482
035C         ?C0065:
                                           ; SOURCE LINE # 1484
035C 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1486
                                           ; SOURCE LINE # 1487
                                           ; SOURCE LINE # 1489
                                           ; SOURCE LINE # 1490
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1493
                                           ; SOURCE LINE # 1495
                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1498
                                           ; SOURCE LINE # 1499
035F 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 1500
0362 C2B7              CLR     ADCMUX_16_19_S1
                                           ; SOURCE LINE # 1501
0364 C2B5              CLR     ADCMUX_16_19_S0
                                           ; SOURCE LINE # 1503
0366         ?C0403:
                                           ; SOURCE LINE # 1504
                                           ; SOURCE LINE # 1506
                                           ; SOURCE LINE # 1507
                                           ; SOURCE LINE # 1508
                                           ; SOURCE LINE # 1509
                                           ; SOURCE LINE # 1510
                                           ; SOURCE LINE # 1511
0366 800A              SJMP    ?C0422
                                           ; SOURCE LINE # 1512
                                           ; SOURCE LINE # 1513
0368         ?C0066:
                                           ; SOURCE LINE # 1515
0368 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1517
                                           ; SOURCE LINE # 1518
                                           ; SOURCE LINE # 1520
                                           ; SOURCE LINE # 1521
                                           ; SOURCE LINE # 1523
                                           ; SOURCE LINE # 1524
                                           ; SOURCE LINE # 1526
                                           ; SOURCE LINE # 1527
                                           ; SOURCE LINE # 1529
                                           ; SOURCE LINE # 1530
036B 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 1531
036E D2B7              SETB    ADCMUX_16_19_S1
                                           ; SOURCE LINE # 1532
0370 C2B5              CLR     ADCMUX_16_19_S0
                                           ; SOURCE LINE # 1534
0372         ?C0422:
                                           ; SOURCE LINE # 1535
                                           ; SOURCE LINE # 1537
                                           ; SOURCE LINE # 1538
0372 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1539
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 134 

0375 00                NOP     
0376 00                NOP     
0377 00                NOP     
0378 00                NOP     
0379 00                NOP     
                                           ; SOURCE LINE # 1540
037A C2B6              CLR     ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1541
037C D2B4              SETB    ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1542
037E 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1543
                                           ; SOURCE LINE # 1544
0381         ?C0067:
                                           ; SOURCE LINE # 1546
0381 75BB04            MOV     AMX0SL,#04H
                                           ; SOURCE LINE # 1548
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1551
                                           ; SOURCE LINE # 1552
                                           ; SOURCE LINE # 1554
                                           ; SOURCE LINE # 1555
                                           ; SOURCE LINE # 1557
                                           ; SOURCE LINE # 1558
                                           ; SOURCE LINE # 1560
                                           ; SOURCE LINE # 1561
0384 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 1562
0387 D2B7              SETB    ADCMUX_16_19_S1
                                           ; SOURCE LINE # 1563
0389 C2B5              CLR     ADCMUX_16_19_S0
                                           ; SOURCE LINE # 1565
038B         ?C0405:
                                           ; SOURCE LINE # 1566
                                           ; SOURCE LINE # 1568
                                           ; SOURCE LINE # 1569
                                           ; SOURCE LINE # 1570
                                           ; SOURCE LINE # 1571
                                           ; SOURCE LINE # 1572
                                           ; SOURCE LINE # 1573
                                           ; SOURCE LINE # 1574
                                           ; SOURCE LINE # 1575
038B         ?C0423:
                                           ; SOURCE LINE # 1597
                                           ; SOURCE LINE # 1599
                                           ; SOURCE LINE # 1600
038B 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1601
038E 00                NOP     
038F 00                NOP     
0390 00                NOP     
0391 00                NOP     
0392 00                NOP     
                                           ; SOURCE LINE # 1602
0393 D2B6              SETB    ADCMUX_16_19_OE1
                                           ; SOURCE LINE # 1603
0395 C2B4              CLR     ADCMUX_16_19_OE2
                                           ; SOURCE LINE # 1604
0397 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1605
                                           ; SOURCE LINE # 1606
039A         ?C0069:
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 135 

                                           ; SOURCE LINE # 1608
039A 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1610
                                           ; SOURCE LINE # 1611
                                           ; SOURCE LINE # 1613
                                           ; SOURCE LINE # 1614
                                           ; SOURCE LINE # 1616
                                           ; SOURCE LINE # 1617
                                           ; SOURCE LINE # 1619
                                           ; SOURCE LINE # 1620
                                           ; SOURCE LINE # 1622
                                           ; SOURCE LINE # 1623
039D 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 1625
                                           ; SOURCE LINE # 1626
                                           ; SOURCE LINE # 1627
03A0 120000      R     LCALL   L?0509
                                           ; SOURCE LINE # 1628
03A3 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1630
03A5         ?C0406:
                                           ; SOURCE LINE # 1631
                                           ; SOURCE LINE # 1632
                                           ; SOURCE LINE # 1633
                                           ; SOURCE LINE # 1634
                                           ; SOURCE LINE # 1635
03A5 800B              SJMP    ?C0424
                                           ; SOURCE LINE # 1636
                                           ; SOURCE LINE # 1637
03A7         ?C0070:
                                           ; SOURCE LINE # 1639
03A7 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1641
                                           ; SOURCE LINE # 1642
                                           ; SOURCE LINE # 1644
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1647
                                           ; SOURCE LINE # 1648
                                           ; SOURCE LINE # 1650
                                           ; SOURCE LINE # 1651
                                           ; SOURCE LINE # 1653
                                           ; SOURCE LINE # 1654
03AA 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 1656
                                           ; SOURCE LINE # 1657
                                           ; SOURCE LINE # 1658
03AD 120000      R     LCALL   L?0521
                                           ; SOURCE LINE # 1659
03B0 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1661
03B2         ?C0424:
03B2 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1662
03B4 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1663
03B6 00                NOP     
03B7 00                NOP     
03B8 00                NOP     
03B9 00                NOP     
03BA 00                NOP     
                                           ; SOURCE LINE # 1664
03BB C2B2              CLR     ADCMUX_20_23_OE1
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 136 

                                           ; SOURCE LINE # 1665
03BD D2B0              SETB    ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1666
03BF 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1667
                                           ; SOURCE LINE # 1668
03C2         ?C0071:
                                           ; SOURCE LINE # 1670
03C2 75BB05            MOV     AMX0SL,#05H
                                           ; SOURCE LINE # 1672
                                           ; SOURCE LINE # 1673
                                           ; SOURCE LINE # 1675
                                           ; SOURCE LINE # 1676
                                           ; SOURCE LINE # 1678
                                           ; SOURCE LINE # 1679
                                           ; SOURCE LINE # 1681
                                           ; SOURCE LINE # 1682
                                           ; SOURCE LINE # 1684
                                           ; SOURCE LINE # 1685
03C5 120000      R     LCALL   L?0438
                                           ; SOURCE LINE # 1687
                                           ; SOURCE LINE # 1688
                                           ; SOURCE LINE # 1689
03C8 120000      R     LCALL   L?0509
                                           ; SOURCE LINE # 1690
03CB C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1692
03CD         ?C0409:
                                           ; SOURCE LINE # 1693
                                           ; SOURCE LINE # 1694
                                           ; SOURCE LINE # 1695
                                           ; SOURCE LINE # 1696
                                           ; SOURCE LINE # 1697
03CD 8008              SJMP    ?C0425
                                           ; SOURCE LINE # 1698
                                           ; SOURCE LINE # 1699
03CF         ?C0072:
                                           ; SOURCE LINE # 1701
                                           ; SOURCE LINE # 1703
                                           ; SOURCE LINE # 1704
                                           ; SOURCE LINE # 1706
                                           ; SOURCE LINE # 1707
                                           ; SOURCE LINE # 1709
                                           ; SOURCE LINE # 1710
                                           ; SOURCE LINE # 1712
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1715
                                           ; SOURCE LINE # 1716
03CF 120000      R     LCALL   L?0437
                                           ; SOURCE LINE # 1718
                                           ; SOURCE LINE # 1719
                                           ; SOURCE LINE # 1720
03D2 120000      R     LCALL   L?0522
                                           ; SOURCE LINE # 1721
03D5 C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1723
03D7         ?C0425:
03D7 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1724
03D9 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1725
03DB 00                NOP     
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 137 

03DC 00                NOP     
03DD 00                NOP     
03DE 00                NOP     
03DF 00                NOP     
                                           ; SOURCE LINE # 1726
03E0 D2B2              SETB    ADCMUX_20_23_OE1
                                           ; SOURCE LINE # 1727
03E2 C2B0              CLR     ADCMUX_20_23_OE2
                                           ; SOURCE LINE # 1728
03E4 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 1729
                                           ; SOURCE LINE # 1730
03E7         ?C0073:
                                           ; SOURCE LINE # 1732
                                           ; SOURCE LINE # 1734
                                           ; SOURCE LINE # 1735
                                           ; SOURCE LINE # 1737
                                           ; SOURCE LINE # 1738
                                           ; SOURCE LINE # 1740
                                           ; SOURCE LINE # 1741
                                           ; SOURCE LINE # 1743
                                           ; SOURCE LINE # 1744
                                           ; SOURCE LINE # 1746
                                           ; SOURCE LINE # 1747
03E7 120000      R     LCALL   L?0437
                                           ; SOURCE LINE # 1749
                                           ; SOURCE LINE # 1750
                                           ; SOURCE LINE # 1752
                                           ; SOURCE LINE # 1753
03EA 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1754
03ED C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 1755
03EF C285              CLR     ADCMUX_24_27_S0
                                           ; SOURCE LINE # 1756
03F1         ?C0411:
                                           ; SOURCE LINE # 1757
                                           ; SOURCE LINE # 1758
                                           ; SOURCE LINE # 1759
03F1 800A              SJMP    ?C0426
                                           ; SOURCE LINE # 1760
                                           ; SOURCE LINE # 1761
03F3         ?C0074:
                                           ; SOURCE LINE # 1763
                                           ; SOURCE LINE # 1765
                                           ; SOURCE LINE # 1766
                                           ; SOURCE LINE # 1768
                                           ; SOURCE LINE # 1769
                                           ; SOURCE LINE # 1771
                                           ; SOURCE LINE # 1772
                                           ; SOURCE LINE # 1774
                                           ; SOURCE LINE # 1775
                                           ; SOURCE LINE # 1777
                                           ; SOURCE LINE # 1778
03F3 120000      R     LCALL   L?0437
                                           ; SOURCE LINE # 1780
                                           ; SOURCE LINE # 1781
                                           ; SOURCE LINE # 1783
                                           ; SOURCE LINE # 1784
03F6 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1785
03F9 D2B3              SETB    ADCMUX_20_23_S1
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 138 

                                           ; SOURCE LINE # 1786
03FB C2B1              CLR     ADCMUX_20_23_S0
                                           ; SOURCE LINE # 1787
03FD         ?C0426:
03FD 00                NOP     
03FE 00                NOP     
03FF 00                NOP     
0400 00                NOP     
0401 00                NOP     
                                           ; SOURCE LINE # 1788
0402 C286              CLR     ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1789
0404 D284              SETB    ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1790
0406 801F              SJMP    ?C0020
                                           ; SOURCE LINE # 1791
                                           ; SOURCE LINE # 1792
0408         ?C0075:
                                           ; SOURCE LINE # 1794
                                           ; SOURCE LINE # 1796
                                           ; SOURCE LINE # 1797
                                           ; SOURCE LINE # 1799
                                           ; SOURCE LINE # 1800
                                           ; SOURCE LINE # 1802
                                           ; SOURCE LINE # 1803
                                           ; SOURCE LINE # 1805
                                           ; SOURCE LINE # 1806
                                           ; SOURCE LINE # 1808
                                           ; SOURCE LINE # 1809
0408 120000      R     LCALL   L?0437
                                           ; SOURCE LINE # 1811
                                           ; SOURCE LINE # 1812
                                           ; SOURCE LINE # 1814
                                           ; SOURCE LINE # 1815
040B 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1816
040E C287              CLR     ADCMUX_24_27_S1
                                           ; SOURCE LINE # 1817
0410 C285              CLR     ADCMUX_24_27_S0
                                           ; SOURCE LINE # 1818
0412         ?C0413:
                                           ; SOURCE LINE # 1819
                                           ; SOURCE LINE # 1820
                                           ; SOURCE LINE # 1821
0412 800A              SJMP    ?C0427
                                           ; SOURCE LINE # 1822
                                           ; SOURCE LINE # 1823
0414         ?C0076:
                                           ; SOURCE LINE # 1825
                                           ; SOURCE LINE # 1827
                                           ; SOURCE LINE # 1828
                                           ; SOURCE LINE # 1830
                                           ; SOURCE LINE # 1831
                                           ; SOURCE LINE # 1833
                                           ; SOURCE LINE # 1834
                                           ; SOURCE LINE # 1836
                                           ; SOURCE LINE # 1837
                                           ; SOURCE LINE # 1839
                                           ; SOURCE LINE # 1840
0414 120000      R     LCALL   L?0437
                                           ; SOURCE LINE # 1842
                                           ; SOURCE LINE # 1843
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 139 

                                           ; SOURCE LINE # 1845
                                           ; SOURCE LINE # 1846
0417 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 1847
041A D287              SETB    ADCMUX_24_27_S1
                                           ; SOURCE LINE # 1848
041C C285              CLR     ADCMUX_24_27_S0
                                           ; SOURCE LINE # 1849
041E         ?C0427:
041E 00                NOP     
041F 00                NOP     
0420 00                NOP     
0421 00                NOP     
0422 00                NOP     
                                           ; SOURCE LINE # 1850
0423 D286              SETB    ADCMUX_24_27_OE1
                                           ; SOURCE LINE # 1851
0425 C284              CLR     ADCMUX_24_27_OE2
                                           ; SOURCE LINE # 1852
                                           ; SOURCE LINE # 1853
                                           ; SOURCE LINE # 1854
                                           ; SOURCE LINE # 1855
                                           ; SOURCE LINE # 1856
                                           ; SOURCE LINE # 1857
0427         ?C0020:
                                           ; SOURCE LINE # 1858
0427 C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 1859
0429 D2EC              SETB    AD0BUSY
                                           ; SOURCE LINE # 1860
042B 22                RET     
             ; FUNCTION adcProcess (END)

             ; FUNCTION _initAdcData (BEGIN)
                                           ; SOURCE LINE # 1861
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 1863
;---- Variable 'i' assigned to Register 'R7' ----
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008         ?C0079:
0008 EF                MOV     A,R7
0009 120000      R     LCALL   L?0519
000C 5012              JNC     ?C0080
                                           ; SOURCE LINE # 1864
000E AB00        R     MOV     R3,s
0010 AA00        R     MOV     R2,s+01H
0012 A900        R     MOV     R1,s+02H
0014 120000      R     LCALL   L?0480
0017 E4                CLR     A
0018 F5F0              MOV     B,A
001A 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1865
001D 0F                INC     R7
001E 80E8              SJMP    ?C0079
0020         ?C0080:
                                           ; SOURCE LINE # 1866
0020 AB00        R     MOV     R3,s
0022 AA00        R     MOV     R2,s+01H
0024 A900        R     MOV     R1,s+02H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 140 

0026 90001C            MOV     DPTR,#01CH
0029 E4                CLR     A
002A F5F0              MOV     B,A
002C 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1867
002F 90001E            MOV     DPTR,#01EH
0032 E4                CLR     A
0033 020000      E     LJMP    ?C?CSTOPTR
             ; FUNCTION _initAdcData (END)

             ; FUNCTION _refreshAdcData (BEGIN)
                                           ; SOURCE LINE # 1869
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
;---- Variable 'dat' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 1873
0006 90001E            MOV     DPTR,#01EH
0009 120000      E     LCALL   ?C?CLDOPTR
000C 120000      R     LCALL   L?0482
000F EC                MOV     A,R4
0010 8DF0              MOV     B,R5
0012 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 1874
0015 120000      R     LCALL   L?0510
0018 90001E            MOV     DPTR,#01EH
001B 7401              MOV     A,#01H
001D 120000      E     LCALL   ?C?CILDOPTR
                                           ; SOURCE LINE # 1875
0020 90001E            MOV     DPTR,#01EH
0023 120000      E     LCALL   ?C?CLDOPTR
0026 120000      R     LCALL   L?0519
0029 400A              JC      ?C0083
                                           ; SOURCE LINE # 1876
002B 120000      R     LCALL   L?0510
002E 90001E            MOV     DPTR,#01EH
0031 E4                CLR     A
0032 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 1877
0035         ?C0083:
                                           ; SOURCE LINE # 1879
0035 E4                CLR     A
0036 F500        R     MOV     sum+03H,A
0038 F500        R     MOV     sum+02H,A
003A F500        R     MOV     sum+01H,A
003C F500        R     MOV     sum,A
                                           ; SOURCE LINE # 1880
003E F500        R     MOV     i,A
0040         ?C0084:
0040 C3                CLR     C
0041 E500        R     MOV     A,i
0043 120000      R     LCALL   L?0520
0046 5029              JNC     ?C0085
                                           ; SOURCE LINE # 1881
0048 120000      R     LCALL   L?0511
004B E500        R     MOV     A,i
004D 120000      R     LCALL   L?0482
0050 120000      E     LCALL   ?C?ILDOPTR
0053 FF                MOV     R7,A
0054 AEF0              MOV     R6,B
0056 E4                CLR     A
0057 FC                MOV     R4,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 141 

0058 FD                MOV     R5,A
0059 E500        R     MOV     A,sum+03H
005B 2F                ADD     A,R7
005C F500        R     MOV     sum+03H,A
005E E500        R     MOV     A,sum+02H
0060 3E                ADDC    A,R6
0061 F500        R     MOV     sum+02H,A
0063 ED                MOV     A,R5
0064 3500        R     ADDC    A,sum+01H
0066 F500        R     MOV     sum+01H,A
0068 EC                MOV     A,R4
0069 3500        R     ADDC    A,sum
006B F500        R     MOV     sum,A
                                           ; SOURCE LINE # 1882
006D 0500        R     INC     i
006F 80CF              SJMP    ?C0084
0071         ?C0085:
                                           ; SOURCE LINE # 1885
0071 E4                CLR     A
0072 7B0E              MOV     R3,#0EH
0074 FA                MOV     R2,A
0075 F9                MOV     R1,A
0076 F8                MOV     R0,A
0077 AF00        R     MOV     R7,sum+03H
0079 AE00        R     MOV     R6,sum+02H
007B AD00        R     MOV     R5,sum+01H
007D AC00        R     MOV     R4,sum
007F 120000      E     LCALL   ?C?ULDIV
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1886
0082 120000      R     LCALL   L?0511
0085 90001C            MOV     DPTR,#01CH
0088 EE                MOV     A,R6
0089 8FF0              MOV     B,R7
008B 020000      E     LJMP    ?C?ISTOPTR
             ; FUNCTION _refreshAdcData (END)

             ; FUNCTION _assertCoilAddress (BEGIN)
                                           ; SOURCE LINE # 1888
;---- Variable 'adr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1889
0000 D3                SETB    C
0001 EF                MOV     A,R7
0002 9490              SUBB    A,#090H
0004 EE                MOV     A,R6
0005 940C              SUBB    A,#0CH
0007 4002              JC      ?C0091
0009         ?C0089:
                                           ; SOURCE LINE # 1890
0009 80FE              SJMP    ?C0089
                                           ; SOURCE LINE # 1891
000B         ?C0091:
000B 22                RET     
             ; FUNCTION _assertCoilAddress (END)

             ; FUNCTION _assertRegisterAddress (BEGIN)
                                           ; SOURCE LINE # 1892
;---- Variable 'adr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1893
0000 C3                CLR     C
0001 EF                MOV     A,R7
0002 94C9              SUBB    A,#0C9H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 142 

0004 EE                MOV     A,R6
0005 9400              SUBB    A,#00H
0007 4002              JC      ?C0095
0009         ?C0093:
                                           ; SOURCE LINE # 1894
0009 80FE              SJMP    ?C0093
                                           ; SOURCE LINE # 1895
000B         ?C0095:
000B 22                RET     
             ; FUNCTION _assertRegisterAddress (END)

             ; FUNCTION clearDM (BEGIN)
                                           ; SOURCE LINE # 1896
                                           ; SOURCE LINE # 1898
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0096:
                                           ; SOURCE LINE # 1899
                                           ; SOURCE LINE # 1900
                                           ; SOURCE LINE # 1901
0003 120000      R     LCALL   L?0433
                                           ; SOURCE LINE # 1902
0006 0D                INC     R5
0007 BD0001            CJNE    R5,#00H,?C0298
000A 0C                INC     R4
000B         ?C0298:
000B ED                MOV     A,R5
000C 6410              XRL     A,#010H
000E 4C                ORL     A,R4
000F 70F2              JNZ     ?C0096
                                           ; SOURCE LINE # 1903
0011         ?C0099:
0011 22                RET     
             ; FUNCTION clearDM (END)

             ; FUNCTION clearMR (BEGIN)
                                           ; SOURCE LINE # 1904
                                           ; SOURCE LINE # 1906
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0100:
                                           ; SOURCE LINE # 1907
                                           ; SOURCE LINE # 1908
                                           ; SOURCE LINE # 1909
0003 120000      R     LCALL   L?0433
                                           ; SOURCE LINE # 1910
0006 0D                INC     R5
0007 BD0001            CJNE    R5,#00H,?C0299
000A 0C                INC     R4
000B         ?C0299:
000B ED                MOV     A,R5
000C 6404              XRL     A,#04H
000E 4C                ORL     A,R4
000F 70F2              JNZ     ?C0100
                                           ; SOURCE LINE # 1911
0011         ?C0103:
0011 22                RET     
             ; FUNCTION clearMR (END)
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 143 


             ; FUNCTION clearEM (BEGIN)
                                           ; SOURCE LINE # 1912
                                           ; SOURCE LINE # 1914
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D10              MOV     R5,#010H
0002 7C00              MOV     R4,#00H
0004         ?C0104:
                                           ; SOURCE LINE # 1915
                                           ; SOURCE LINE # 1916
                                           ; SOURCE LINE # 1917
0004 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1918
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0300
000B 0C                INC     R4
000C         ?C0300:
000C ED                MOV     A,R5
000D 6490              XRL     A,#090H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0104
                                           ; SOURCE LINE # 1919
0012         ?C0107:
0012 22                RET     
             ; FUNCTION clearEM (END)

             ; FUNCTION clearR (BEGIN)
                                           ; SOURCE LINE # 1920
                                           ; SOURCE LINE # 1922
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D04              MOV     R5,#04H
0002 7C00              MOV     R4,#00H
0004         ?C0108:
                                           ; SOURCE LINE # 1923
                                           ; SOURCE LINE # 1924
                                           ; SOURCE LINE # 1925
0004 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1926
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0301
000B 0C                INC     R4
000C         ?C0301:
000C ED                MOV     A,R5
000D 6408              XRL     A,#08H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0108
                                           ; SOURCE LINE # 1927
0012         ?C0111:
0012 22                RET     
             ; FUNCTION clearR (END)

             ; FUNCTION clearT (BEGIN)
                                           ; SOURCE LINE # 1928
                                           ; SOURCE LINE # 1930
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D90              MOV     R5,#090H
0002 7C00              MOV     R4,#00H
0004         ?C0112:
                                           ; SOURCE LINE # 1931
                                           ; SOURCE LINE # 1932
                                           ; SOURCE LINE # 1933
0004 120000      R     LCALL   L?0434
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 144 

                                           ; SOURCE LINE # 1934
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0302
000B 0C                INC     R4
000C         ?C0302:
000C ED                MOV     A,R5
000D 6491              XRL     A,#091H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0112
0012         ?C0113:
                                           ; SOURCE LINE # 1935
0012 7C00              MOV     R4,#00H
0014 7D91              MOV     R5,#091H
0016         ?C0115:
                                           ; SOURCE LINE # 1936
                                           ; SOURCE LINE # 1937
                                           ; SOURCE LINE # 1938
0016 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1939
0019 0D                INC     R5
001A BD0001            CJNE    R5,#00H,?C0303
001D 0C                INC     R4
001E         ?C0303:
001E ED                MOV     A,R5
001F 6492              XRL     A,#092H
0021 4C                ORL     A,R4
0022 70F2              JNZ     ?C0115
0024         ?C0116:
                                           ; SOURCE LINE # 1940
0024 7C00              MOV     R4,#00H
0026 7D92              MOV     R5,#092H
0028         ?C0118:
                                           ; SOURCE LINE # 1941
                                           ; SOURCE LINE # 1942
                                           ; SOURCE LINE # 1943
0028 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1944
002B 0D                INC     R5
002C BD0001            CJNE    R5,#00H,?C0304
002F 0C                INC     R4
0030         ?C0304:
0030 ED                MOV     A,R5
0031 6493              XRL     A,#093H
0033 4C                ORL     A,R4
0034 70F2              JNZ     ?C0118
                                           ; SOURCE LINE # 1945
0036         ?C0121:
0036 22                RET     
             ; FUNCTION clearT (END)

             ; FUNCTION clearTD (BEGIN)
                                           ; SOURCE LINE # 1946
                                           ; SOURCE LINE # 1948
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7D93              MOV     R5,#093H
0002 7C00              MOV     R4,#00H
0004         ?C0122:
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
                                           ; SOURCE LINE # 1951
0004 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1952
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 145 

0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0305
000B 0C                INC     R4
000C         ?C0305:
000C ED                MOV     A,R5
000D 64A3              XRL     A,#0A3H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0122
0012         ?C0123:
                                           ; SOURCE LINE # 1953
0012 7C00              MOV     R4,#00H
0014 7DA3              MOV     R5,#0A3H
0016         ?C0125:
                                           ; SOURCE LINE # 1954
                                           ; SOURCE LINE # 1955
                                           ; SOURCE LINE # 1956
0016 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1957
0019 0D                INC     R5
001A BD0001            CJNE    R5,#00H,?C0306
001D 0C                INC     R4
001E         ?C0306:
001E ED                MOV     A,R5
001F 64B3              XRL     A,#0B3H
0021 4C                ORL     A,R4
0022 70F2              JNZ     ?C0125
0024         ?C0126:
                                           ; SOURCE LINE # 1958
0024 7C00              MOV     R4,#00H
0026 7DB3              MOV     R5,#0B3H
0028         ?C0128:
                                           ; SOURCE LINE # 1959
                                           ; SOURCE LINE # 1960
                                           ; SOURCE LINE # 1961
0028 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1962
002B 0D                INC     R5
002C BD0001            CJNE    R5,#00H,?C0307
002F 0C                INC     R4
0030         ?C0307:
0030 ED                MOV     A,R5
0031 64C3              XRL     A,#0C3H
0033 4C                ORL     A,R4
0034 70F2              JNZ     ?C0128
                                           ; SOURCE LINE # 1963
0036         ?C0131:
0036 22                RET     
             ; FUNCTION clearTD (END)

             ; FUNCTION clearC (BEGIN)
                                           ; SOURCE LINE # 1964
                                           ; SOURCE LINE # 1966
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DC3              MOV     R5,#0C3H
0002 7C00              MOV     R4,#00H
0004         ?C0132:
                                           ; SOURCE LINE # 1967
                                           ; SOURCE LINE # 1968
0004 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1969
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0308
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 146 

000B 0C                INC     R4
000C         ?C0308:
000C ED                MOV     A,R5
000D 64C4              XRL     A,#0C4H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0132
                                           ; SOURCE LINE # 1970
0012         ?C0135:
0012 22                RET     
             ; FUNCTION clearC (END)

             ; FUNCTION clearX (BEGIN)
                                           ; SOURCE LINE # 1971
                                           ; SOURCE LINE # 1973
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DC4              MOV     R5,#0C4H
0002 7C00              MOV     R4,#00H
0004         ?C0136:
                                           ; SOURCE LINE # 1974
                                           ; SOURCE LINE # 1975
0004 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1976
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0309
000B 0C                INC     R4
000C         ?C0309:
000C ED                MOV     A,R5
000D 64C5              XRL     A,#0C5H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0136
                                           ; SOURCE LINE # 1977
0012         ?C0139:
0012 22                RET     
             ; FUNCTION clearX (END)

             ; FUNCTION clearY (BEGIN)
                                           ; SOURCE LINE # 1978
                                           ; SOURCE LINE # 1980
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DC5              MOV     R5,#0C5H
0002 7C00              MOV     R4,#00H
0004         ?C0140:
                                           ; SOURCE LINE # 1981
                                           ; SOURCE LINE # 1982
0004 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1983
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0310
000B 0C                INC     R4
000C         ?C0310:
000C ED                MOV     A,R5
000D 64C6              XRL     A,#0C6H
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0140
                                           ; SOURCE LINE # 1984
0012         ?C0143:
0012 22                RET     
             ; FUNCTION clearY (END)

             ; FUNCTION clearSPREG (BEGIN)
                                           ; SOURCE LINE # 1985
                                           ; SOURCE LINE # 1987
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 147 

;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DC6              MOV     R5,#0C6H
0002 7C00              MOV     R4,#00H
0004         ?C0144:
                                           ; SOURCE LINE # 1988
                                           ; SOURCE LINE # 1989
0004 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1990
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0311
000B 0C                INC     R4
000C         ?C0311:
000C ED                MOV     A,R5
000D 64CA              XRL     A,#0CAH
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0144
                                           ; SOURCE LINE # 1991
0012         ?C0147:
0012 22                RET     
             ; FUNCTION clearSPREG (END)

             ; FUNCTION clearSPCOIL (BEGIN)
                                           ; SOURCE LINE # 1992
                                           ; SOURCE LINE # 1994
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 7DCA              MOV     R5,#0CAH
0002 7C00              MOV     R4,#00H
0004         ?C0148:
                                           ; SOURCE LINE # 1995
                                           ; SOURCE LINE # 1996
0004 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 1997
0007 0D                INC     R5
0008 BD0001            CJNE    R5,#00H,?C0312
000B 0C                INC     R4
000C         ?C0312:
000C ED                MOV     A,R5
000D 64CE              XRL     A,#0CEH
000F 4C                ORL     A,R4
0010 70F2              JNZ     ?C0148
                                           ; SOURCE LINE # 1998
0012         ?C0151:
0012 22                RET     
             ; FUNCTION clearSPCOIL (END)

             ; FUNCTION nvramLoad (BEGIN)
                                           ; SOURCE LINE # 1999
                                           ; SOURCE LINE # 2000
0000 7E01              MOV     R6,#01H
0002 7F9C              MOV     R7,#09CH
0004 7D00              MOV     R5,#00H
0006 120000      R     LCALL   L?0487
0009 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 2001
000C 120000      R     LCALL   L?0487
000F 750001      E     MOV     ?_epromRead?BYTE+05H,#01H
0012 75009C      E     MOV     ?_epromRead?BYTE+06H,#09CH
0015 E4                CLR     A
0016 FF                MOV     R7,A
0017 FE                MOV     R6,A
0018 120000      E     LCALL   _epromRead
                                           ; SOURCE LINE # 2002
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 148 

001B 120000      R     LCALL   clearEM
                                           ; SOURCE LINE # 2003
001E 120000      R     LCALL   clearR
                                           ; SOURCE LINE # 2004
0021 120000      R     LCALL   clearT
                                           ; SOURCE LINE # 2005
0024 120000      R     LCALL   clearTD
                                           ; SOURCE LINE # 2006
0027 120000      R     LCALL   clearC
                                           ; SOURCE LINE # 2007
002A 120000      R     LCALL   clearX
                                           ; SOURCE LINE # 2008
002D 120000      R     LCALL   clearY
                                           ; SOURCE LINE # 2009
0030 120000      R     LCALL   clearSPREG
                                           ; SOURCE LINE # 2010
0033 120000      R     LCALL   clearSPCOIL
                                           ; SOURCE LINE # 2011
0036 120000      R     LCALL   L?0486
0039 7E00              MOV     R6,#00H
003B 7FCE              MOV     R7,#0CEH
003D 020000      E     LJMP    ?C?COPY
             ; FUNCTION nvramLoad (END)

             ; FUNCTION nvramSave (BEGIN)
                                           ; SOURCE LINE # 2013
                                           ; SOURCE LINE # 2014
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 2015
0002 120000      R     LCALL   L?0487
0005 750000      E     MOV     ?_epromWrite?BYTE+05H,#00H
0008 750008      E     MOV     ?_epromWrite?BYTE+06H,#08H
000B E4                CLR     A
000C FF                MOV     R7,A
000D FE                MOV     R6,A
000E 120000      E     LCALL   _epromWrite
                                           ; SOURCE LINE # 2016
0011 D2AF              SETB    EA
                                           ; SOURCE LINE # 2017
0013 22                RET     
             ; FUNCTION nvramSave (END)

             ; FUNCTION nvramUpdata (BEGIN)
                                           ; SOURCE LINE # 2018
                                           ; SOURCE LINE # 2021
0000 750001      R     MOV     sp0,#01H
0003 750000      R     MOV     sp0+01H,#HIGH NVRAM0
0006 750000      R     MOV     sp0+02H,#LOW NVRAM0
                                           ; SOURCE LINE # 2022
0009 750001      R     MOV     sp1,#01H
000C 750000      R     MOV     sp1+01H,#HIGH NVRAM1
000F 750000      R     MOV     sp1+02H,#LOW NVRAM1
                                           ; SOURCE LINE # 2023
0012 E4                CLR     A
0013 F500        R     MOV     i,A
0015 F500        R     MOV     i+01H,A
0017         ?C0154:
                                           ; SOURCE LINE # 2024
0017 120000      R     LCALL   L?0467
001A FD                MOV     R5,A
001B 6F                XRL     A,R7
001C 6007              JZ      ?C0156
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 149 

                                           ; SOURCE LINE # 2025
001E AF00        R     MOV     R7,i+01H
0020 AE00        R     MOV     R6,i
0022 120000      E     LCALL   _epromWriteOneByte
                                           ; SOURCE LINE # 2026
                                           ; SOURCE LINE # 2027
0025         ?C0156:
0025 0500        R     INC     i+01H
0027 E500        R     MOV     A,i+01H
0029 7002              JNZ     ?C0313
002B 0500        R     INC     i
002D         ?C0313:
002D C3                CLR     C
002E 9408              SUBB    A,#08H
0030 E500        R     MOV     A,i
0032 9400              SUBB    A,#00H
0034 40E1              JC      ?C0154
0036         ?C0155:
                                           ; SOURCE LINE # 2028
0036 750001      R     MOV     sp0,#01H
0039 750000      R     MOV     sp0+01H,#HIGH NVRAM0+020H
003C 750000      R     MOV     sp0+02H,#LOW NVRAM0+020H
                                           ; SOURCE LINE # 2029
003F 750001      R     MOV     sp1,#01H
0042 750000      R     MOV     sp1+01H,#HIGH NVRAM1+020H
0045 750000      R     MOV     sp1+02H,#LOW NVRAM1+020H
                                           ; SOURCE LINE # 2030
0048 750000      R     MOV     i,#00H
004B 750008      R     MOV     i+01H,#08H
004E         ?C0158:
                                           ; SOURCE LINE # 2031
004E 120000      R     LCALL   L?0467
0051 FD                MOV     R5,A
0052 6F                XRL     A,R7
0053 6007              JZ      ?C0160
                                           ; SOURCE LINE # 2032
0055 AF00        R     MOV     R7,i+01H
0057 AE00        R     MOV     R6,i
0059 120000      E     LCALL   _epromWriteOneByte
                                           ; SOURCE LINE # 2033
                                           ; SOURCE LINE # 2034
005C         ?C0160:
005C 0500        R     INC     i+01H
005E E500        R     MOV     A,i+01H
0060 7002              JNZ     ?C0314
0062 0500        R     INC     i
0064         ?C0314:
0064 C3                CLR     C
0065 9420              SUBB    A,#020H
0067 E500        R     MOV     A,i
0069 9400              SUBB    A,#00H
006B 40E1              JC      ?C0158
006D         ?C0159:
                                           ; SOURCE LINE # 2035
006D 120000      R     LCALL   L?0486
0070 7E01              MOV     R6,#01H
0072 7F9C              MOV     R7,#09CH
0074 020000      E     LJMP    ?C?COPY
             ; FUNCTION nvramUpdata (END)

             ; FUNCTION _SET (BEGIN)
                                           ; SOURCE LINE # 2039
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 150 

0000 8E00        R     MOV     A,R6
0002 8F00        R     MOV     A+01H,R7
                                           ; SOURCE LINE # 2040
0004 120000      R     LCALL   _assertCoilAddress
                                           ; SOURCE LINE # 2041
0007 E500        R     MOV     A,A
0009 C4                SWAP    A
000A F8                MOV     R0,A
000B 54F0              ANL     A,#0F0H
000D C8                XCH     A,R0
000E 68                XRL     A,R0
000F FE                MOV     R6,A
0010 E500        R     MOV     A,A+01H
0012 120000      R     LCALL   L?0445
0015 C083              PUSH    DPH
0017 C082              PUSH    DPL
0019 E0                MOVX    A,@DPTR
001A FC                MOV     R4,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FD                MOV     R5,A
001E E500        R     MOV     A,A+01H
0020 120000      R     LCALL   L?0457
0023 8005              SJMP    ?C0316
0025         ?C0315:
0025 C3                CLR     C
0026 33                RLC     A
0027 CE                XCH     A,R6
0028 33                RLC     A
0029 CE                XCH     A,R6
002A         ?C0316:
002A D8F9              DJNZ    R0,?C0315
002C FF                MOV     R7,A
002D EC                MOV     A,R4
002E 4E                ORL     A,R6
002F FE                MOV     R6,A
0030 ED                MOV     A,R5
0031 4F                ORL     A,R7
0032 FF                MOV     R7,A
0033 D082              POP     DPL
0035 D083              POP     DPH
0037 EE                MOV     A,R6
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2042
003C 22                RET     
             ; FUNCTION _SET (END)

             ; FUNCTION _RESET (BEGIN)
                                           ; SOURCE LINE # 2043
0000 8E00        R     MOV     A,R6
0002 8F00        R     MOV     A+01H,R7
                                           ; SOURCE LINE # 2044
0004 120000      R     LCALL   _assertCoilAddress
                                           ; SOURCE LINE # 2045
0007 E500        R     MOV     A,A
0009 C4                SWAP    A
000A F8                MOV     R0,A
000B 54F0              ANL     A,#0F0H
000D C8                XCH     A,R0
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 151 

000E 68                XRL     A,R0
000F FE                MOV     R6,A
0010 E500        R     MOV     A,A+01H
0012 120000      R     LCALL   L?0445
0015 C083              PUSH    DPH
0017 C082              PUSH    DPL
0019 E0                MOVX    A,@DPTR
001A FC                MOV     R4,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FD                MOV     R5,A
001E E500        R     MOV     A,A+01H
0020 120000      R     LCALL   L?0457
0023 8005              SJMP    ?C0318
0025         ?C0317:
0025 C3                CLR     C
0026 33                RLC     A
0027 CE                XCH     A,R6
0028 33                RLC     A
0029 CE                XCH     A,R6
002A         ?C0318:
002A D8F9              DJNZ    R0,?C0317
002C F4                CPL     A
002D FF                MOV     R7,A
002E EE                MOV     A,R6
002F F4                CPL     A
0030 5C                ANL     A,R4
0031 FE                MOV     R6,A
0032 ED                MOV     A,R5
0033 5F                ANL     A,R7
0034 FF                MOV     R7,A
0035 D082              POP     DPL
0037 D083              POP     DPH
0039 EE                MOV     A,R6
003A F0                MOVX    @DPTR,A
003B A3                INC     DPTR
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2046
003E 22                RET     
             ; FUNCTION _RESET (END)

             ; FUNCTION _FLIP (BEGIN)
                                           ; SOURCE LINE # 2047
;---- Variable 'A' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 2049
0004 120000      R     LCALL   _assertCoilAddress
                                           ; SOURCE LINE # 2050
0007 120000      R     LCALL   L?0444
000A E0                MOVX    A,@DPTR
000B FA                MOV     R2,A
000C A3                INC     DPTR
000D E0                MOVX    A,@DPTR
000E FB                MOV     R3,A
000F ED                MOV     A,R5
0010 120000      R     LCALL   L?0457
0013 8005              SJMP    ?C0320
0015         ?C0319:
0015 C3                CLR     C
0016 33                RLC     A
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 152 

0017 CE                XCH     A,R6
0018 33                RLC     A
0019 CE                XCH     A,R6
001A         ?C0320:
001A D8F9              DJNZ    R0,?C0319
001C FF                MOV     R7,A
001D EA                MOV     A,R2
001E 5E                ANL     A,R6
001F FE                MOV     R6,A
0020 EB                MOV     A,R3
0021 5F                ANL     A,R7
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2051
0022 4E                ORL     A,R6
0023 AF05              MOV     R7,AR5
0025 AE04              MOV     R6,AR4
0027 6003              JZ      ?C0165
                                           ; SOURCE LINE # 2052
0029 020000      R     LJMP    _RESET
002C         ?C0165:
                                           ; SOURCE LINE # 2054
002C 120000      R     LCALL   _SET
                                           ; SOURCE LINE # 2055
002F         ?C0167:
002F 22                RET     
             ; FUNCTION _FLIP (END)

             ; FUNCTION _LD (BEGIN)
                                           ; SOURCE LINE # 2056
;---- Variable 'A' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 2057
                                           ; SOURCE LINE # 2058
0000 120000      R     LCALL   L?0442
0003 120000      R     LCALL   L?0512
0006 8003              SJMP    ?C0322
0008         ?C0321:
0008 120000      R     LCALL   L?0488
000B         ?C0322:
000B D8FB              DJNZ    R0,?C0321
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 2059
000E 22                RET     
             ; FUNCTION _LD (END)

             ; FUNCTION _LDP (BEGIN)
                                           ; SOURCE LINE # 2060
;---- Variable 'A' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 2062
                                           ; SOURCE LINE # 2063
0000 120000      R     LCALL   L?0442
0003 120000      R     LCALL   L?0512
0006 8003              SJMP    ?C0324
0008         ?C0323:
0008 120000      R     LCALL   L?0488
000B         ?C0324:
000B D8FB              DJNZ    R0,?C0323
;---- Variable 'temp0' assigned to Register 'R3' ----
000D FB                MOV     R3,A
                                           ; SOURCE LINE # 2064
000E ED                MOV     A,R5
000F 120000      R     LCALL   L?0461
0012 120000      R     LCALL   L?0463
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 153 

0015 A802              MOV     R0,AR2
0017 08                INC     R0
0018 8003              SJMP    ?C0326
001A         ?C0325:
001A 120000      R     LCALL   L?0489
001D         ?C0326:
001D D8FB              DJNZ    R0,?C0325
001F FF                MOV     R7,A
;---- Variable 'temp1' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2065
0020 EB                MOV     A,R3
0021 6006              JZ      ?C0169
0023 EF                MOV     A,R7
0024 7003              JNZ     ?C0169
                                           ; SOURCE LINE # 2066
0026 7F01              MOV     R7,#01H
0028 22                RET     
0029         ?C0169:
                                           ; SOURCE LINE # 2068
0029 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2069
002B         ?C0170:
002B 22                RET     
             ; FUNCTION _LDP (END)

             ; FUNCTION _LDN (BEGIN)
                                           ; SOURCE LINE # 2070
;---- Variable 'A' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 2072
                                           ; SOURCE LINE # 2073
0000 120000      R     LCALL   L?0443
0003 120000      R     LCALL   L?0513
0006 8003              SJMP    ?C0328
0008         ?C0327:
0008 120000      R     LCALL   L?0489
000B         ?C0328:
000B D8FB              DJNZ    R0,?C0327
;---- Variable 'temp0' assigned to Register 'R3' ----
000D FB                MOV     R3,A
                                           ; SOURCE LINE # 2074
000E ED                MOV     A,R5
000F 120000      R     LCALL   L?0461
0012 120000      R     LCALL   L?0463
0015 A802              MOV     R0,AR2
0017 08                INC     R0
0018 8003              SJMP    ?C0330
001A         ?C0329:
001A 120000      R     LCALL   L?0489
001D         ?C0330:
001D D8FB              DJNZ    R0,?C0329
001F FF                MOV     R7,A
;---- Variable 'temp1' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2075
0020 EB                MOV     A,R3
0021 7006              JNZ     ?C0172
0023 EF                MOV     A,R7
0024 6003              JZ      ?C0172
                                           ; SOURCE LINE # 2076
0026 7F01              MOV     R7,#01H
0028 22                RET     
0029         ?C0172:
                                           ; SOURCE LINE # 2078
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 154 

0029 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2079
002B         ?C0173:
002B 22                RET     
             ; FUNCTION _LDN (END)

             ; FUNCTION _T1MS (BEGIN)
                                           ; SOURCE LINE # 2080
0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2085
0002 ED                MOV     A,R5
0003 6053              JZ      ?C0175
                                           ; SOURCE LINE # 2086
0005 EF                MOV     A,R7
0006 120000      R     LCALL   L?0462
0009 7400        R     MOV     A,#LOW NVRAM0+0126H
000B 2F                ADD     A,R7
000C F582              MOV     DPL,A
000E 7400        R     MOV     A,#HIGH NVRAM0+0126H
0010 120000      R     LCALL   L?0464
0013 C3                CLR     C
0014 9B                SUBB    A,R3
0015 EE                MOV     A,R6
0016 9A                SUBB    A,R2
0017 401B              JC      ?C0176
                                           ; SOURCE LINE # 2087
0019 120000      R     LCALL   L?0458
001C 120000      R     LCALL   L?0496
001F C083              PUSH    DPH
0021 C082              PUSH    DPL
0023 120000      R     LCALL   L?0455
0026 8005              SJMP    ?C0332
0028         ?C0331:
0028 C3                CLR     C
0029 33                RLC     A
002A CE                XCH     A,R6
002B 33                RLC     A
002C CE                XCH     A,R6
002D         ?C0332:
002D D8F9              DJNZ    R0,?C0331
002F 120000      R     LCALL   L?0514
                                           ; SOURCE LINE # 2088
0032 8019              SJMP    ?C0428
0034         ?C0176:
                                           ; SOURCE LINE # 2089
                                           ; SOURCE LINE # 2090
0034 120000      R     LCALL   L?0458
0037 120000      R     LCALL   L?0496
003A C083              PUSH    DPH
003C C082              PUSH    DPL
003E 120000      R     LCALL   L?0455
0041 8005              SJMP    ?C0334
0043         ?C0333:
0043 C3                CLR     C
0044 33                RLC     A
0045 CE                XCH     A,R6
0046 33                RLC     A
0047 CE                XCH     A,R6
0048         ?C0334:
0048 D8F9              DJNZ    R0,?C0333
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 155 

004A 120000      R     LCALL   L?0468
004D         ?C0428:
004D FF                MOV     R7,A
004E D082              POP     DPL
0050 D083              POP     DPH
0052 EE                MOV     A,R6
0053 F0                MOVX    @DPTR,A
0054 A3                INC     DPTR
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2091
                                           ; SOURCE LINE # 2093
0057 22                RET     
0058         ?C0175:
                                           ; SOURCE LINE # 2094
                                           ; SOURCE LINE # 2095
0058 120000      R     LCALL   L?0459
005B 120000      R     LCALL   L?0497
005E C083              PUSH    DPH
0060 C082              PUSH    DPL
0062 120000      R     LCALL   L?0456
0065 8005              SJMP    ?C0336
0067         ?C0335:
0067 C3                CLR     C
0068 33                RLC     A
0069 CE                XCH     A,R6
006A 33                RLC     A
006B CE                XCH     A,R6
006C         ?C0336:
006C D8F9              DJNZ    R0,?C0335
006E 120000      R     LCALL   L?0468
0071 FF                MOV     R7,A
0072 D082              POP     DPL
0074 D083              POP     DPH
0076 EE                MOV     A,R6
0077 F0                MOVX    @DPTR,A
0078 A3                INC     DPTR
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2096
007B E500        R     MOV     A,A
007D 120000      R     LCALL   L?0462
0080 7400        R     MOV     A,#LOW NVRAM0+0126H
0082 2F                ADD     A,R7
0083 F582              MOV     DPL,A
0085 7400        R     MOV     A,#HIGH NVRAM0+0126H
0087 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 2097
                                           ; SOURCE LINE # 2098
008A         ?C0179:
008A 22                RET     
             ; FUNCTION _T1MS (END)

             ; FUNCTION _T10MS (BEGIN)
                                           ; SOURCE LINE # 2099
0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2104
0002 ED                MOV     A,R5
0003 605B              JZ      ?C0180
                                           ; SOURCE LINE # 2105
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 156 

0005 EF                MOV     A,R7
0006 120000      R     LCALL   L?0462
0009 7400        R     MOV     A,#LOW NVRAM0+0146H
000B 2F                ADD     A,R7
000C F582              MOV     DPL,A
000E 7400        R     MOV     A,#HIGH NVRAM0+0146H
0010 120000      R     LCALL   L?0464
0013 C3                CLR     C
0014 9B                SUBB    A,R3
0015 EE                MOV     A,R6
0016 9A                SUBB    A,R2
0017 401F              JC      ?C0181
                                           ; SOURCE LINE # 2106
0019 E500        R     MOV     A,A
001B 120000      R     LCALL   L?0460
001E 120000      R     LCALL   L?0498
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 E500        R     MOV     A,A
0027 120000      R     LCALL   L?0457
002A 8005              SJMP    ?C0338
002C         ?C0337:
002C C3                CLR     C
002D 33                RLC     A
002E CE                XCH     A,R6
002F 33                RLC     A
0030 CE                XCH     A,R6
0031         ?C0338:
0031 D8F9              DJNZ    R0,?C0337
0033 120000      R     LCALL   L?0514
                                           ; SOURCE LINE # 2107
0036 801D              SJMP    ?C0429
0038         ?C0181:
                                           ; SOURCE LINE # 2108
                                           ; SOURCE LINE # 2109
0038 E500        R     MOV     A,A
003A 120000      R     LCALL   L?0460
003D 120000      R     LCALL   L?0498
0040 C083              PUSH    DPH
0042 C082              PUSH    DPL
0044 E500        R     MOV     A,A
0046 120000      R     LCALL   L?0457
0049 8005              SJMP    ?C0340
004B         ?C0339:
004B C3                CLR     C
004C 33                RLC     A
004D CE                XCH     A,R6
004E 33                RLC     A
004F CE                XCH     A,R6
0050         ?C0340:
0050 D8F9              DJNZ    R0,?C0339
0052 120000      R     LCALL   L?0469
0055         ?C0429:
0055 FF                MOV     R7,A
0056 D082              POP     DPL
0058 D083              POP     DPH
005A EE                MOV     A,R6
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2110
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 157 

                                           ; SOURCE LINE # 2111
005F 22                RET     
0060         ?C0180:
                                           ; SOURCE LINE # 2112
                                           ; SOURCE LINE # 2113
0060 E500        R     MOV     A,A
0062 120000      R     LCALL   L?0460
0065 120000      R     LCALL   L?0499
0068 C083              PUSH    DPH
006A C082              PUSH    DPL
006C E500        R     MOV     A,A
006E 120000      R     LCALL   L?0457
0071 8005              SJMP    ?C0342
0073         ?C0341:
0073 C3                CLR     C
0074 33                RLC     A
0075 CE                XCH     A,R6
0076 33                RLC     A
0077 CE                XCH     A,R6
0078         ?C0342:
0078 D8F9              DJNZ    R0,?C0341
007A 120000      R     LCALL   L?0469
007D FF                MOV     R7,A
007E D082              POP     DPL
0080 D083              POP     DPH
0082 EE                MOV     A,R6
0083 F0                MOVX    @DPTR,A
0084 A3                INC     DPTR
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2114
0087 E500        R     MOV     A,A
0089 120000      R     LCALL   L?0462
008C 7400        R     MOV     A,#LOW NVRAM0+0146H
008E 2F                ADD     A,R7
008F F582              MOV     DPL,A
0091 7400        R     MOV     A,#HIGH NVRAM0+0146H
0093 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 2115
                                           ; SOURCE LINE # 2116
0096         ?C0184:
0096 22                RET     
             ; FUNCTION _T10MS (END)

             ; FUNCTION _T100MS (BEGIN)
                                           ; SOURCE LINE # 2117
0000 8F00        R     MOV     A,R7
;---- Variable 'value' assigned to Register 'R2/R3' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2122
0002 ED                MOV     A,R5
0003 605B              JZ      ?C0185
                                           ; SOURCE LINE # 2123
0005 EF                MOV     A,R7
0006 120000      R     LCALL   L?0462
0009 7400        R     MOV     A,#LOW NVRAM0+0166H
000B 2F                ADD     A,R7
000C F582              MOV     DPL,A
000E 7400        R     MOV     A,#HIGH NVRAM0+0166H
0010 120000      R     LCALL   L?0464
0013 C3                CLR     C
0014 9B                SUBB    A,R3
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 158 

0015 EE                MOV     A,R6
0016 9A                SUBB    A,R2
0017 401F              JC      ?C0186
                                           ; SOURCE LINE # 2124
0019 E500        R     MOV     A,A
001B 120000      R     LCALL   L?0460
001E 120000      R     LCALL   L?0500
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 E500        R     MOV     A,A
0027 120000      R     LCALL   L?0457
002A 8005              SJMP    ?C0344
002C         ?C0343:
002C C3                CLR     C
002D 33                RLC     A
002E CE                XCH     A,R6
002F 33                RLC     A
0030 CE                XCH     A,R6
0031         ?C0344:
0031 D8F9              DJNZ    R0,?C0343
0033 120000      R     LCALL   L?0515
                                           ; SOURCE LINE # 2125
0036 801D              SJMP    ?C0430
0038         ?C0186:
                                           ; SOURCE LINE # 2126
                                           ; SOURCE LINE # 2127
0038 E500        R     MOV     A,A
003A 120000      R     LCALL   L?0460
003D 120000      R     LCALL   L?0500
0040 C083              PUSH    DPH
0042 C082              PUSH    DPL
0044 E500        R     MOV     A,A
0046 120000      R     LCALL   L?0457
0049 8005              SJMP    ?C0346
004B         ?C0345:
004B C3                CLR     C
004C 33                RLC     A
004D CE                XCH     A,R6
004E 33                RLC     A
004F CE                XCH     A,R6
0050         ?C0346:
0050 D8F9              DJNZ    R0,?C0345
0052 120000      R     LCALL   L?0469
0055         ?C0430:
0055 FF                MOV     R7,A
0056 D082              POP     DPL
0058 D083              POP     DPH
005A EE                MOV     A,R6
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2128
                                           ; SOURCE LINE # 2129
005F 22                RET     
0060         ?C0185:
                                           ; SOURCE LINE # 2130
                                           ; SOURCE LINE # 2131
0060 E500        R     MOV     A,A
0062 120000      R     LCALL   L?0460
0065 120000      R     LCALL   L?0501
0068 C083              PUSH    DPH
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 159 

006A C082              PUSH    DPL
006C E500        R     MOV     A,A
006E 120000      R     LCALL   L?0457
0071 8005              SJMP    ?C0348
0073         ?C0347:
0073 C3                CLR     C
0074 33                RLC     A
0075 CE                XCH     A,R6
0076 33                RLC     A
0077 CE                XCH     A,R6
0078         ?C0348:
0078 D8F9              DJNZ    R0,?C0347
007A 120000      R     LCALL   L?0469
007D FF                MOV     R7,A
007E D082              POP     DPL
0080 D083              POP     DPH
0082 EE                MOV     A,R6
0083 F0                MOVX    @DPTR,A
0084 A3                INC     DPTR
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2132
0087 E500        R     MOV     A,A
0089 120000      R     LCALL   L?0462
008C 7400        R     MOV     A,#LOW NVRAM0+0166H
008E 2F                ADD     A,R7
008F F582              MOV     DPL,A
0091 7400        R     MOV     A,#HIGH NVRAM0+0166H
0093 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 2133
                                           ; SOURCE LINE # 2134
0096         ?C0189:
0096 22                RET     
             ; FUNCTION _T100MS (END)

             ; FUNCTION _TNTC (BEGIN)
                                           ; SOURCE LINE # 2135
;---- Variable 'dat' assigned to Register 'DPTR' ----
0000 8F82              MOV     DPL,R7
0002 8E83              MOV     DPH,R6
                                           ; SOURCE LINE # 2138
0004 EE                MOV     A,R6
0005 33                RLC     A
0006 95E0              SUBB    A,ACC
0008 FD                MOV     R5,A
0009 FC                MOV     R4,A
000A E4                CLR     A
000B 7B98              MOV     R3,#098H
000D 7A08              MOV     R2,#08H
000F F9                MOV     R1,A
0010 F8                MOV     R0,A
0011 D3                SETB    C
0012 120000      E     LCALL   ?C?SLCMP
0015 5003              JNC     ?C0190
0017 900898            MOV     DPTR,#0898H
001A         ?C0190:
                                           ; SOURCE LINE # 2139
001A C3                CLR     C
001B E583              MOV     A,DPH
001D 6480              XRL     A,#080H
001F 9480              SUBB    A,#080H
0021 5005              JNC     ?C0191
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 160 

0023 E4                CLR     A
0024 F583              MOV     DPH,A
0026 F582              MOV     DPL,A
0028         ?C0191:
                                           ; SOURCE LINE # 2141
0028 AE83              MOV     R6,DPH
002A AF82              MOV     R7,DPL
002C 120000      R     LCALL   L?0485
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2142
002F C3                CLR     C
0030 7488              MOV     A,#088H
0032 9F                SUBB    A,R7
0033 FD                MOV     R5,A
0034 7413              MOV     A,#013H
0036 9E                SUBB    A,R6
0037 FC                MOV     R4,A
0038 7EF0              MOV     R6,#0F0H
003A 7F80              MOV     R7,#080H
003C 120000      E     LCALL   ?C?UIDIV
                                           ; SOURCE LINE # 2144
003F AD07              MOV     R5,AR7
0041 AC06              MOV     R4,AR6
0043 E4                CLR     A
0044 120000      E     LCALL   ?C?FCASTI
0047 7B00              MOV     R3,#00H
0049 7A40              MOV     R2,#040H
004B 791C              MOV     R1,#01CH
004D 7846              MOV     R0,#046H
004F 120000      E     LCALL   ?C?FPDIV
0052 120000      E     LCALL   _log
0055 7B97              MOV     R3,#097H
0057 7AC9              MOV     R2,#0C9H
0059 7996              MOV     R1,#096H
005B 7839              MOV     R0,#039H
005D 120000      E     LCALL   ?C?FPMUL
0060 7B62              MOV     R3,#062H
0062 7AEB              MOV     R2,#0EBH
0064 795B              MOV     R1,#05BH
0066 783B              MOV     R0,#03BH
0068 120000      R     LCALL   L?0516
                                           ; SOURCE LINE # 2145
006B 120000      R     LCALL   L?0484
006E E4                CLR     A
006F FF                MOV     R7,A
0070 FE                MOV     R6,A
0071 7D80              MOV     R5,#080H
0073 7C3F              MOV     R4,#03FH
0075 120000      E     LCALL   ?C?FPDIV
0078 7B00              MOV     R3,#00H
007A 7A80              MOV     R2,#080H
007C 7988              MOV     R1,#088H
007E 78C3              MOV     R0,#0C3H
0080 120000      R     LCALL   L?0516
                                           ; SOURCE LINE # 2146
0083 7C42              MOV     R4,#042H
0085 120000      R     LCALL   L?0483
0088 120000      E     LCALL   ?C?FPCMP3
008B 400B              JC      ?C0192
008D E4                CLR     A
008E F500        R     MOV     ftemp+03H,A
0090 F500        R     MOV     ftemp+02H,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 161 

0092 7500C8      R     MOV     ftemp+01H,#0C8H
0095 750042      R     MOV     ftemp,#042H
0098         ?C0192:
                                           ; SOURCE LINE # 2147
0098 7CC2              MOV     R4,#0C2H
009A 120000      R     LCALL   L?0483
009D 120000      E     LCALL   ?C?FPCMP3
00A0 6002              JZ      $ + 4H
00A2 500B              JNC     ?C0193
00A4 E4                CLR     A
00A5 F500        R     MOV     ftemp+03H,A
00A7 F500        R     MOV     ftemp+02H,A
00A9 7500C8      R     MOV     ftemp+01H,#0C8H
00AC 7500C2      R     MOV     ftemp,#0C2H
00AF         ?C0193:
                                           ; SOURCE LINE # 2148
00AF E4                CLR     A
00B0 FF                MOV     R7,A
00B1 FE                MOV     R6,A
00B2 7D20              MOV     R5,#020H
00B4 7C41              MOV     R4,#041H
00B6 120000      R     LCALL   L?0484
00B9 120000      E     LCALL   ?C?FPMUL
00BC 020000      E     LJMP    ?C?CASTF
             ; FUNCTION _TNTC (END)

             ; FUNCTION _TENV (BEGIN)
                                           ; SOURCE LINE # 2150
;---- Variable 'dat' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2152
0000 120000      R     LCALL   L?0485
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2153
0003 EF                MOV     A,R7
0004 24A8              ADD     A,#0A8H
0006 FF                MOV     R7,A
0007 EE                MOV     A,R6
0008 34FC              ADDC    A,#0FCH
000A FE                MOV     R6,A
000B E4                CLR     A
000C 34FF              ADDC    A,#0FFH
000E FD                MOV     R5,A
000F E4                CLR     A
0010 34FF              ADDC    A,#0FFH
0012 FC                MOV     R4,A
0013 E4                CLR     A
0014 7BE8              MOV     R3,#0E8H
0016 7A03              MOV     R2,#03H
0018 F9                MOV     R1,A
0019 F8                MOV     R0,A
001A 120000      E     LCALL   ?C?LMUL
001D E4                CLR     A
001E 7B02              MOV     R3,#02H
0020 7A0D              MOV     R2,#0DH
0022 F9                MOV     R1,A
0023 F8                MOV     R0,A
0024 020000      E     LJMP    ?C?SLDIV
             ; FUNCTION _TENV (END)

             ; FUNCTION _MAX (BEGIN)
                                           ; SOURCE LINE # 2156
;---- Variable 'len' assigned to Register 'R5' ----
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 162 

0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 2159
0006 120000      E     LCALL   ?C?ILDPTR
0009 F500        R     MOV     max+01H,A
000B 85F000      R     MOV     max,B
                                           ; SOURCE LINE # 2160
;---- Variable 'i' assigned to Register 'R7' ----
000E E4                CLR     A
000F FF                MOV     R7,A
0010         ?C0196:
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9D                SUBB    A,R5
0013 501E              JNC     ?C0197
                                           ; SOURCE LINE # 2161
0015 AB00        R     MOV     R3,s
0017 AA00        R     MOV     R2,s+01H
0019 A900        R     MOV     R1,s+02H
001B 120000      R     LCALL   L?0480
001E 120000      E     LCALL   ?C?ILDOPTR
0021 FB                MOV     R3,A
0022 D3                SETB    C
0023 9500        R     SUBB    A,max+01H
0025 E500        R     MOV     A,max
0027 120000      R     LCALL   L?0523
002A 4004              JC      ?C0198
                                           ; SOURCE LINE # 2162
002C 8A00        R     MOV     max,R2
002E 8B00        R     MOV     max+01H,R3
                                           ; SOURCE LINE # 2163
                                           ; SOURCE LINE # 2164
0030         ?C0198:
0030 0F                INC     R7
0031 80DD              SJMP    ?C0196
0033         ?C0197:
                                           ; SOURCE LINE # 2165
0033 AE00        R     MOV     R6,max
0035 AF00        R     MOV     R7,max+01H
                                           ; SOURCE LINE # 2166
0037 22                RET     
             ; FUNCTION _MAX (END)

             ; FUNCTION _MIN (BEGIN)
                                           ; SOURCE LINE # 2167
;---- Variable 'len' assigned to Register 'R5' ----
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 2170
0006 120000      E     LCALL   ?C?ILDPTR
0009 F500        R     MOV     min+01H,A
000B 85F000      R     MOV     min,B
                                           ; SOURCE LINE # 2171
;---- Variable 'i' assigned to Register 'R7' ----
000E E4                CLR     A
000F FF                MOV     R7,A
0010         ?C0201:
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9D                SUBB    A,R5
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 163 

0013 501E              JNC     ?C0202
                                           ; SOURCE LINE # 2172
0015 AB00        R     MOV     R3,s
0017 AA00        R     MOV     R2,s+01H
0019 A900        R     MOV     R1,s+02H
001B 120000      R     LCALL   L?0481
001E 120000      E     LCALL   ?C?ILDOPTR
0021 FB                MOV     R3,A
0022 C3                CLR     C
0023 9500        R     SUBB    A,min+01H
0025 E500        R     MOV     A,min
0027 120000      R     LCALL   L?0523
002A 5004              JNC     ?C0203
                                           ; SOURCE LINE # 2173
002C 8A00        R     MOV     min,R2
002E 8B00        R     MOV     min+01H,R3
                                           ; SOURCE LINE # 2174
                                           ; SOURCE LINE # 2175
0030         ?C0203:
0030 0F                INC     R7
0031 80DD              SJMP    ?C0201
0033         ?C0202:
                                           ; SOURCE LINE # 2176
0033 AE00        R     MOV     R6,min
0035 AF00        R     MOV     R7,min+01H
                                           ; SOURCE LINE # 2177
0037 22                RET     
             ; FUNCTION _MIN (END)

             ; FUNCTION wdtInit (BEGIN)
                                           ; SOURCE LINE # 2179
                                           ; SOURCE LINE # 2181
0000 E4                CLR     A
0001 F5FF              MOV     WDTCN,A
                                           ; SOURCE LINE # 2183
0003 22                RET     
             ; FUNCTION wdtInit (END)

             ; FUNCTION wdtEnable (BEGIN)
                                           ; SOURCE LINE # 2184
                                           ; SOURCE LINE # 2186
0000 75FFA5            MOV     WDTCN,#0A5H
                                           ; SOURCE LINE # 2188
0003 22                RET     
             ; FUNCTION wdtEnable (END)

             ; FUNCTION wdtDisable (BEGIN)
                                           ; SOURCE LINE # 2189
                                           ; SOURCE LINE # 2191
0000 A2AF              MOV     C,EA
0002 E4                CLR     A
0003 33                RLC     A
;---- Variable 'flagEA' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2192
0004 C2AF              CLR     EA
                                           ; SOURCE LINE # 2194
0006 75FFDE            MOV     WDTCN,#0DEH
                                           ; SOURCE LINE # 2195
0009 75FFAD            MOV     WDTCN,#0ADH
                                           ; SOURCE LINE # 2199
000C 24FF              ADD     A,#0FFH
000E 92AF              MOV     EA,C
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 164 

                                           ; SOURCE LINE # 2200
0010 22                RET     
             ; FUNCTION wdtDisable (END)

             ; FUNCTION wdtFeed (BEGIN)
                                           ; SOURCE LINE # 2201
                                           ; SOURCE LINE # 2203
0000 75FFA5            MOV     WDTCN,#0A5H
                                           ; SOURCE LINE # 2205
0003 22                RET     
             ; FUNCTION wdtFeed (END)

             ; FUNCTION pcaInit (BEGIN)
                                           ; SOURCE LINE # 2207
                                           ; SOURCE LINE # 2208
0000 22                RET     
             ; FUNCTION pcaInit (END)

             ; FUNCTION timer0Init (BEGIN)
                                           ; SOURCE LINE # 2209
                                           ; SOURCE LINE # 2211
0000 E4                CLR     A
0001 F500        R     MOV     TimerCounter_1mS,A
                                           ; SOURCE LINE # 2212
0003 F500        R     MOV     TimerCounter_10mS,A
                                           ; SOURCE LINE # 2214
;---- Variable 'temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2215
0005 74CD              MOV     A,#0CDH
0007 F500        R     MOV     Timer0_L,A
                                           ; SOURCE LINE # 2216
0009 74F8              MOV     A,#0F8H
000B F500        R     MOV     Timer0_H,A
                                           ; SOURCE LINE # 2217
000D 85008C      R     MOV     TH0,Timer0_H
                                           ; SOURCE LINE # 2218
0010 85008A      R     MOV     TL0,Timer0_L
                                           ; SOURCE LINE # 2219
0013 538EF7            ANL     CKCON,#0F7H
                                           ; SOURCE LINE # 2220
0016 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 2221
0019 438901            ORL     TMOD,#01H
                                           ; SOURCE LINE # 2222
001C D2A9              SETB    ET0
                                           ; SOURCE LINE # 2223
001E D28C              SETB    TR0
                                           ; SOURCE LINE # 2225
0020 22                RET     
             ; FUNCTION timer0Init (END)

             ; FUNCTION timer0Isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 165 

0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 2226
                                           ; SOURCE LINE # 2228
001D C28D              CLR     TF0
                                           ; SOURCE LINE # 2229
001F C28C              CLR     TR0
                                           ; SOURCE LINE # 2230
0021 85008C      R     MOV     TH0,Timer0_H
                                           ; SOURCE LINE # 2231
0024 85008A      R     MOV     TL0,Timer0_L
                                           ; SOURCE LINE # 2232
0027 D28C              SETB    TR0
                                           ; SOURCE LINE # 2233
0029 900000      R     MOV     DPTR,#NVRAM0+0194H
002C E0                MOVX    A,@DPTR
002D A2E7              MOV     C,ACC.7
002F 13                RRC     A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 13                RRC     A
0033 30E006            JNB     ACC.0,?C0212
                                           ; SOURCE LINE # 2234
0036 E0                MOVX    A,@DPTR
0037 54FD              ANL     A,#0FDH
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2235
003A 8007              SJMP    ?C0213
003C         ?C0212:
                                           ; SOURCE LINE # 2236
                                           ; SOURCE LINE # 2237
003C 900000      R     MOV     DPTR,#NVRAM0+0195H
003F E0                MOVX    A,@DPTR
0040 4402              ORL     A,#02H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2238
0043         ?C0213:
                                           ; SOURCE LINE # 2240
;---- Variable 'i' assigned to Register 'R4/R5' ----
0043 7D93              MOV     R5,#093H
0045 7C00              MOV     R4,#00H
0047         ?C0214:
                                           ; SOURCE LINE # 2241
0047 ED                MOV     A,R5
0048 25E0              ADD     A,ACC
004A FF                MOV     R7,A
004B EC                MOV     A,R4
004C 120000      R     LCALL   L?0446
004F 120000      R     LCALL   L?0490
0052 5006              JNC     ?C0216
                                           ; SOURCE LINE # 2242
0054 120000      R     LCALL   L?0447
0057 120000      R     LCALL   L?0517
                                           ; SOURCE LINE # 2243
                                           ; SOURCE LINE # 2244
005A         ?C0216:
005A 0D                INC     R5
005B BD0001            CJNE    R5,#00H,?C0349
005E 0C                INC     R4
005F         ?C0349:
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 166 

005F ED                MOV     A,R5
0060 64A3              XRL     A,#0A3H
0062 4C                ORL     A,R4
0063 70E2              JNZ     ?C0214
0065         ?C0215:
                                           ; SOURCE LINE # 2245
0065 C3                CLR     C
0066 E500        R     MOV     A,TimerCounter_1mS
0068 940A              SUBB    A,#0AH
006A 7480              MOV     A,#080H
006C 9480              SUBB    A,#080H
006E 4045              JC      ?C0218
                                           ; SOURCE LINE # 2246
0070 900000      R     MOV     DPTR,#NVRAM0+0194H
0073 E0                MOVX    A,@DPTR
0074 FE                MOV     R6,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 7802              MOV     R0,#02H
0079         ?C0350:
0079 120000      R     LCALL   L?0489
007C D8FB              DJNZ    R0,?C0350
007E 900000      R     MOV     DPTR,#NVRAM0+0195H
0081 30E006            JNB     ACC.0,?C0219
                                           ; SOURCE LINE # 2247
0084 E0                MOVX    A,@DPTR
0085 54FB              ANL     A,#0FBH
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2248
0088 8004              SJMP    ?C0220
008A         ?C0219:
                                           ; SOURCE LINE # 2249
                                           ; SOURCE LINE # 2250
008A E0                MOVX    A,@DPTR
008B 4404              ORL     A,#04H
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2251
008E         ?C0220:
                                           ; SOURCE LINE # 2252
008E 7C00              MOV     R4,#00H
0090 7DA3              MOV     R5,#0A3H
0092         ?C0221:
                                           ; SOURCE LINE # 2253
0092 ED                MOV     A,R5
0093 25E0              ADD     A,ACC
0095 FF                MOV     R7,A
0096 EC                MOV     A,R4
0097 120000      R     LCALL   L?0446
009A 120000      R     LCALL   L?0490
009D 5006              JNC     ?C0223
                                           ; SOURCE LINE # 2254
009F 120000      R     LCALL   L?0447
00A2 120000      R     LCALL   L?0517
                                           ; SOURCE LINE # 2255
                                           ; SOURCE LINE # 2256
00A5         ?C0223:
00A5 0D                INC     R5
00A6 BD0001            CJNE    R5,#00H,?C0351
00A9 0C                INC     R4
00AA         ?C0351:
00AA ED                MOV     A,R5
00AB 64B3              XRL     A,#0B3H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 167 

00AD 4C                ORL     A,R4
00AE 70E2              JNZ     ?C0221
00B0         ?C0222:
                                           ; SOURCE LINE # 2257
00B0 0500        R     INC     TimerCounter_10mS
                                           ; SOURCE LINE # 2258
00B2 750000      R     MOV     TimerCounter_1mS,#00H
                                           ; SOURCE LINE # 2259
00B5         ?C0218:
                                           ; SOURCE LINE # 2260
00B5 C3                CLR     C
00B6 E500        R     MOV     A,TimerCounter_10mS
00B8 940A              SUBB    A,#0AH
00BA 7480              MOV     A,#080H
00BC 9480              SUBB    A,#080H
00BE 4052              JC      ?C0225
                                           ; SOURCE LINE # 2261
00C0 900000      R     MOV     DPTR,#NVRAM0+0194H
00C3 E0                MOVX    A,@DPTR
00C4 FE                MOV     R6,A
00C5 A3                INC     DPTR
00C6 E0                MOVX    A,@DPTR
00C7 7803              MOV     R0,#03H
00C9         ?C0352:
00C9 120000      R     LCALL   L?0489
00CC D8FB              DJNZ    R0,?C0352
00CE 900000      R     MOV     DPTR,#NVRAM0+0195H
00D1 30E006            JNB     ACC.0,?C0226
                                           ; SOURCE LINE # 2262
00D4 E0                MOVX    A,@DPTR
00D5 54F7              ANL     A,#0F7H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2263
00D8 8004              SJMP    ?C0227
00DA         ?C0226:
                                           ; SOURCE LINE # 2264
                                           ; SOURCE LINE # 2265
00DA E0                MOVX    A,@DPTR
00DB 4408              ORL     A,#08H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2266
00DE         ?C0227:
                                           ; SOURCE LINE # 2267
00DE 7C00              MOV     R4,#00H
00E0 7DB3              MOV     R5,#0B3H
00E2         ?C0228:
                                           ; SOURCE LINE # 2268
00E2 ED                MOV     A,R5
00E3 25E0              ADD     A,ACC
00E5 FF                MOV     R7,A
00E6 EC                MOV     A,R4
00E7 120000      R     LCALL   L?0446
00EA 120000      R     LCALL   L?0491
00ED 5006              JNC     ?C0230
                                           ; SOURCE LINE # 2269
00EF 120000      R     LCALL   L?0447
00F2 120000      R     LCALL   L?0518
                                           ; SOURCE LINE # 2270
                                           ; SOURCE LINE # 2271
00F5         ?C0230:
00F5 0D                INC     R5
00F6 BD0001            CJNE    R5,#00H,?C0353
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 168 

00F9 0C                INC     R4
00FA         ?C0353:
00FA ED                MOV     A,R5
00FB 64C2              XRL     A,#0C2H
00FD 4C                ORL     A,R4
00FE 70E2              JNZ     ?C0228
0100         ?C0229:
                                           ; SOURCE LINE # 2272
0100 750000      R     MOV     TimerCounter_10mS,#00H
                                           ; SOURCE LINE # 2273
0103 120000      R     LCALL   getLedRun
0106 EF                MOV     A,R7
0107 6004              JZ      ?C0232
                                           ; SOURCE LINE # 2274
0109 E4                CLR     A
010A FF                MOV     R7,A
                                           ; SOURCE LINE # 2275
010B 8002              SJMP    ?C0431
010D         ?C0232:
                                           ; SOURCE LINE # 2276
                                           ; SOURCE LINE # 2277
010D 7F01              MOV     R7,#01H
010F         ?C0431:
010F 120000      R     LCALL   _setLedRun
                                           ; SOURCE LINE # 2278
                                           ; SOURCE LINE # 2279
0112         ?C0225:
                                           ; SOURCE LINE # 2281
0112 120000      R     LCALL   adcProcess
                                           ; SOURCE LINE # 2283
0115 0500        R     INC     TimerCounter_1mS
                                           ; SOURCE LINE # 2284
0117 D007              POP     AR7
0119 D006              POP     AR6
011B D005              POP     AR5
011D D004              POP     AR4
011F D003              POP     AR3
0121 D002              POP     AR2
0123 D001              POP     AR1
0125 D000              POP     AR0
0127 D0D0              POP     PSW
0129 D082              POP     DPL
012B D083              POP     DPH
012D D0F0              POP     B
012F D0E0              POP     ACC
0131 32                RETI    
             ; FUNCTION timer0Isr (END)

             ; FUNCTION inputInit (BEGIN)
                                           ; SOURCE LINE # 2286
                                           ; SOURCE LINE # 2287
0000 7E00              MOV     R6,#00H
0002 7F10              MOV     R7,#010H
0004 7D00              MOV     R5,#00H
0006 7BFE              MOV     R3,#0FEH
0008 7A00        R     MOV     R2,#HIGH inputFilter
000A 7900        R     MOV     R1,#LOW inputFilter
000C 020000      E     LJMP    ?C?MEMSET
             ; FUNCTION inputInit (END)

             ; FUNCTION outputInit (BEGIN)
                                           ; SOURCE LINE # 2289
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 169 

                                           ; SOURCE LINE # 2293
0000 22                RET     
             ; FUNCTION outputInit (END)

             ; FUNCTION inputRefresh (BEGIN)
                                           ; SOURCE LINE # 2294
                                           ; SOURCE LINE # 2296
0000 E586              MOV     A,P6
0002 C4                SWAP    A
0003 13                RRC     A
0004 13                RRC     A
0005 13                RRC     A
0006 5401              ANL     A,#01H
;---- Variable 'ctemp0' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 2297
0008 6021              JZ      ?C0237
                                           ; SOURCE LINE # 2298
000A 7800        R     MOV     R0,#LOW inputFilter
000C E2                MOVX    A,@R0
000D FD                MOV     R5,A
000E 33                RLC     A
000F 95E0              SUBB    A,ACC
0011 FC                MOV     R4,A
0012 C3                CLR     C
0013 ED                MOV     A,R5
0014 9403              SUBB    A,#03H
0016 EC                MOV     A,R4
0017 6480              XRL     A,#080H
0019 9480              SUBB    A,#080H
001B 5005              JNC     ?C0238
                                           ; SOURCE LINE # 2299
001D E2                MOVX    A,@R0
001E 04                INC     A
001F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2300
0020 801C              SJMP    ?C0240
0022         ?C0238:
                                           ; SOURCE LINE # 2301
                                           ; SOURCE LINE # 2302
0022 900000      R     MOV     DPTR,#NVRAM0+0189H
0025 E0                MOVX    A,@DPTR
0026 4401              ORL     A,#01H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2303
                                           ; SOURCE LINE # 2304
0029 8013              SJMP    ?C0240
002B         ?C0237:
                                           ; SOURCE LINE # 2305
                                           ; SOURCE LINE # 2306
002B 7800        R     MOV     R0,#LOW inputFilter
002D 120000      R     LCALL   L?0502
0030 4005              JC      ?C0241
                                           ; SOURCE LINE # 2307
0032 E2                MOVX    A,@R0
0033 14                DEC     A
0034 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2308
0035 8007              SJMP    ?C0240
0037         ?C0241:
                                           ; SOURCE LINE # 2309
                                           ; SOURCE LINE # 2310
0037 900000      R     MOV     DPTR,#NVRAM0+0189H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 170 

003A E0                MOVX    A,@DPTR
003B 54FE              ANL     A,#0FEH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2311
                                           ; SOURCE LINE # 2312
003E         ?C0240:
                                           ; SOURCE LINE # 2313
003E E586              MOV     A,P6
0040 C4                SWAP    A
0041 13                RRC     A
0042 13                RRC     A
0043 5401              ANL     A,#01H
                                           ; SOURCE LINE # 2314
0045 601F              JZ      ?C0243
                                           ; SOURCE LINE # 2315
0047 7800        R     MOV     R0,#LOW inputFilter+01H
0049 E2                MOVX    A,@R0
004A FF                MOV     R7,A
004B 33                RLC     A
004C 95E0              SUBB    A,ACC
004E FE                MOV     R6,A
004F C3                CLR     C
0050 EF                MOV     A,R7
0051 9403              SUBB    A,#03H
0053 EE                MOV     A,R6
0054 6480              XRL     A,#080H
0056 9480              SUBB    A,#080H
0058 5004              JNC     ?C0244
                                           ; SOURCE LINE # 2316
005A E2                MOVX    A,@R0
005B 04                INC     A
005C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2317
005D 22                RET     
005E         ?C0244:
                                           ; SOURCE LINE # 2318
                                           ; SOURCE LINE # 2319
005E 900000      R     MOV     DPTR,#NVRAM0+0189H
0061 E0                MOVX    A,@DPTR
0062 4402              ORL     A,#02H
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2320
                                           ; SOURCE LINE # 2321
0065 22                RET     
0066         ?C0243:
                                           ; SOURCE LINE # 2322
                                           ; SOURCE LINE # 2323
0066 7800        R     MOV     R0,#LOW inputFilter+01H
0068 120000      R     LCALL   L?0502
006B 4004              JC      ?C0247
                                           ; SOURCE LINE # 2324
006D E2                MOVX    A,@R0
006E 14                DEC     A
006F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2325
0070 22                RET     
0071         ?C0247:
                                           ; SOURCE LINE # 2326
                                           ; SOURCE LINE # 2327
0071 900000      R     MOV     DPTR,#NVRAM0+0189H
0074 E0                MOVX    A,@DPTR
0075 54FD              ANL     A,#0FDH
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 171 

0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2328
                                           ; SOURCE LINE # 2329
                                           ; SOURCE LINE # 2330
0078         ?C0249:
0078 22                RET     
             ; FUNCTION inputRefresh (END)

             ; FUNCTION outputRefresh (BEGIN)
                                           ; SOURCE LINE # 2331
                                           ; SOURCE LINE # 2332
0000 900000      R     MOV     DPTR,#NVRAM0+018AH
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 30E005            JNB     ACC.0,?C0250
                                           ; SOURCE LINE # 2333
000B 438620            ORL     P6,#020H
                                           ; SOURCE LINE # 2334
000E 8003              SJMP    ?C0251
0010         ?C0250:
                                           ; SOURCE LINE # 2335
                                           ; SOURCE LINE # 2336
0010 5386DF            ANL     P6,#0DFH
                                           ; SOURCE LINE # 2337
0013         ?C0251:
                                           ; SOURCE LINE # 2338
0013 EE                MOV     A,R6
0014 A2E7              MOV     C,ACC.7
0016 13                RRC     A
0017 EF                MOV     A,R7
0018 13                RRC     A
0019 30E004            JNB     ACC.0,?C0252
                                           ; SOURCE LINE # 2339
001C 438610            ORL     P6,#010H
                                           ; SOURCE LINE # 2340
001F 22                RET     
0020         ?C0252:
                                           ; SOURCE LINE # 2341
                                           ; SOURCE LINE # 2342
0020 5386EF            ANL     P6,#0EFH
                                           ; SOURCE LINE # 2343
                                           ; SOURCE LINE # 2344
0023         ?C0254:
0023 22                RET     
             ; FUNCTION outputRefresh (END)

             ; FUNCTION chipAdcInit (BEGIN)
                                           ; SOURCE LINE # 2345
                                           ; SOURCE LINE # 2348
                                           ; SOURCE LINE # 2349
                                           ; SOURCE LINE # 2351
                                           ; SOURCE LINE # 2352
                                           ; SOURCE LINE # 2354
                                           ; SOURCE LINE # 2355
                                           ; SOURCE LINE # 2357
                                           ; SOURCE LINE # 2358
                                           ; SOURCE LINE # 2360
                                           ; SOURCE LINE # 2361
0000 120000      R     LCALL   L?0438
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 172 

                                           ; SOURCE LINE # 2363
                                           ; SOURCE LINE # 2364
                                           ; SOURCE LINE # 2366
                                           ; SOURCE LINE # 2367
0003 120000      R     LCALL   L?0454
                                           ; SOURCE LINE # 2369
0006 E4                CLR     A
0007 F5E8              MOV     ADC0CN,A
                                           ; SOURCE LINE # 2370
0009 43E840            ORL     ADC0CN,#040H
                                           ; SOURCE LINE # 2371
000C 43E880            ORL     ADC0CN,#080H
                                           ; SOURCE LINE # 2372
000F F5BC              MOV     ADC0CF,A
                                           ; SOURCE LINE # 2373
0011 43BC58            ORL     ADC0CF,#058H
                                           ; SOURCE LINE # 2374
0014 F5BA              MOV     AMX0CF,A
                                           ; SOURCE LINE # 2375
0016 F5BB              MOV     AMX0SL,A
                                           ; SOURCE LINE # 2376
0018 C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 2377
001A D2EC              SETB    AD0BUSY
                                           ; SOURCE LINE # 2379
001C F500        R     MOV     adcSelect,A
                                           ; SOURCE LINE # 2380
001E F500        R     MOV     i,A
0020         ?C0255:
0020 D3                SETB    C
0021 E500        R     MOV     A,i
0023 9440              SUBB    A,#040H
0025 7480              MOV     A,#080H
0027 9480              SUBB    A,#080H
0029 500C              JNC     ?C0258
                                           ; SOURCE LINE # 2381
002B E500        R     MOV     A,i
002D 120000      R     LCALL   L?0503
0030 120000      R     LCALL   _initAdcData
                                           ; SOURCE LINE # 2382
0033 0500        R     INC     i
0035 80E9              SJMP    ?C0255
                                           ; SOURCE LINE # 2383
0037         ?C0258:
0037 22                RET     
             ; FUNCTION chipAdcInit (END)

             ; FUNCTION refreshDac (BEGIN)
                                           ; SOURCE LINE # 2384
                                           ; SOURCE LINE # 2386
0000 900000      R     MOV     DPTR,#NVRAM1+0A0H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#NVRAM0+0A0H
000B E0                MOVX    A,@DPTR
000C 6E                XRL     A,R6
000D 7003              JNZ     ?C0354
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 173 

0011 6F                XRL     A,R7
0012         ?C0354:
0012 6010              JZ      ?C0259
                                           ; SOURCE LINE # 2387
0014 7F01              MOV     R7,#01H
0016 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2388
0019 900000      R     MOV     DPTR,#NVRAM0+0A0H
001C 120000      R     LCALL   L?0452
001F 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2389
0021 120000      R     LCALL   L?0476
                                           ; SOURCE LINE # 2390
0024         ?C0259:
                                           ; SOURCE LINE # 2391
0024 900000      R     MOV     DPTR,#NVRAM1+0A2H
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#NVRAM0+0A2H
002F E0                MOVX    A,@DPTR
0030 6E                XRL     A,R6
0031 7003              JNZ     ?C0355
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 6F                XRL     A,R7
0036         ?C0355:
0036 6010              JZ      ?C0260
                                           ; SOURCE LINE # 2392
0038 7F01              MOV     R7,#01H
003A 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2393
003D 900000      R     MOV     DPTR,#NVRAM0+0A2H
0040 120000      R     LCALL   L?0452
0043 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2394
0045 120000      R     LCALL   L?0476
                                           ; SOURCE LINE # 2395
0048         ?C0260:
                                           ; SOURCE LINE # 2396
0048 900000      R     MOV     DPTR,#NVRAM1+0A4H
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 900000      R     MOV     DPTR,#NVRAM0+0A4H
0053 E0                MOVX    A,@DPTR
0054 6E                XRL     A,R6
0055 7003              JNZ     ?C0356
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 6F                XRL     A,R7
005A         ?C0356:
005A 6010              JZ      ?C0261
                                           ; SOURCE LINE # 2397
005C 7F01              MOV     R7,#01H
005E 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2398
0061 900000      R     MOV     DPTR,#NVRAM0+0A4H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 174 

0064 120000      R     LCALL   L?0452
0067 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2399
0069 120000      R     LCALL   L?0492
                                           ; SOURCE LINE # 2400
006C         ?C0261:
                                           ; SOURCE LINE # 2401
006C 900000      R     MOV     DPTR,#NVRAM1+0A6H
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 900000      R     MOV     DPTR,#NVRAM0+0A6H
0077 E0                MOVX    A,@DPTR
0078 6E                XRL     A,R6
0079 7003              JNZ     ?C0357
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D 6F                XRL     A,R7
007E         ?C0357:
007E 6010              JZ      ?C0262
                                           ; SOURCE LINE # 2402
0080 7F01              MOV     R7,#01H
0082 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2403
0085 900000      R     MOV     DPTR,#NVRAM0+0A6H
0088 120000      R     LCALL   L?0452
008B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2404
008D 120000      R     LCALL   L?0492
                                           ; SOURCE LINE # 2405
0090         ?C0262:
                                           ; SOURCE LINE # 2406
0090 900000      R     MOV     DPTR,#NVRAM1+0A8H
0093 E0                MOVX    A,@DPTR
0094 FE                MOV     R6,A
0095 A3                INC     DPTR
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 900000      R     MOV     DPTR,#NVRAM0+0A8H
009B E0                MOVX    A,@DPTR
009C 6E                XRL     A,R6
009D 7003              JNZ     ?C0358
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 6F                XRL     A,R7
00A2         ?C0358:
00A2 6015              JZ      ?C0263
                                           ; SOURCE LINE # 2407
00A4 7F01              MOV     R7,#01H
00A6 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2408
00A9 900000      R     MOV     DPTR,#NVRAM0+0A8H
00AC 120000      R     LCALL   L?0452
00AF 7F06              MOV     R7,#06H
00B1 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2409
00B4 E4                CLR     A
00B5 FF                MOV     R7,A
00B6 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2410
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 175 

00B9         ?C0263:
                                           ; SOURCE LINE # 2411
00B9 900000      R     MOV     DPTR,#NVRAM1+0AAH
00BC E0                MOVX    A,@DPTR
00BD FE                MOV     R6,A
00BE A3                INC     DPTR
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
00C1 900000      R     MOV     DPTR,#NVRAM0+0AAH
00C4 E0                MOVX    A,@DPTR
00C5 6E                XRL     A,R6
00C6 7003              JNZ     ?C0359
00C8 A3                INC     DPTR
00C9 E0                MOVX    A,@DPTR
00CA 6F                XRL     A,R7
00CB         ?C0359:
00CB 600E              JZ      ?C0264
                                           ; SOURCE LINE # 2412
00CD 7F01              MOV     R7,#01H
00CF 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2413
00D2 900000      R     MOV     DPTR,#NVRAM0+0AAH
00D5 120000      R     LCALL   L?0452
                                           ; SOURCE LINE # 2414
00D8 120000      R     LCALL   L?0470
                                           ; SOURCE LINE # 2415
00DB         ?C0264:
                                           ; SOURCE LINE # 2416
00DB 900000      R     MOV     DPTR,#NVRAM1+0ACH
00DE E0                MOVX    A,@DPTR
00DF FE                MOV     R6,A
00E0 A3                INC     DPTR
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 900000      R     MOV     DPTR,#NVRAM0+0ACH
00E6 E0                MOVX    A,@DPTR
00E7 6E                XRL     A,R6
00E8 7003              JNZ     ?C0360
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC 6F                XRL     A,R7
00ED         ?C0360:
00ED 600E              JZ      ?C0265
                                           ; SOURCE LINE # 2417
00EF 7F01              MOV     R7,#01H
00F1 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2418
00F4 900000      R     MOV     DPTR,#NVRAM0+0ACH
00F7 120000      R     LCALL   L?0452
                                           ; SOURCE LINE # 2419
00FA 120000      R     LCALL   L?0470
                                           ; SOURCE LINE # 2420
00FD         ?C0265:
                                           ; SOURCE LINE # 2421
00FD 900000      R     MOV     DPTR,#NVRAM1+0AEH
0100 E0                MOVX    A,@DPTR
0101 FE                MOV     R6,A
0102 A3                INC     DPTR
0103 E0                MOVX    A,@DPTR
0104 FF                MOV     R7,A
0105 900000      R     MOV     DPTR,#NVRAM0+0AEH
0108 E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 176 

0109 6E                XRL     A,R6
010A 7003              JNZ     ?C0361
010C A3                INC     DPTR
010D E0                MOVX    A,@DPTR
010E 6F                XRL     A,R7
010F         ?C0361:
010F 6015              JZ      ?C0266
                                           ; SOURCE LINE # 2422
0111 7F01              MOV     R7,#01H
0113 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2423
0116 900000      R     MOV     DPTR,#NVRAM0+0AEH
0119 120000      R     LCALL   L?0452
011C E4                CLR     A
011D FF                MOV     R7,A
011E 120000      E     LCALL   _dac8568_0_WriteDacRegister
                                           ; SOURCE LINE # 2424
0121 E4                CLR     A
0122 FF                MOV     R7,A
0123 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2425
0126         ?C0266:
                                           ; SOURCE LINE # 2427
0126 900000      R     MOV     DPTR,#NVRAM1+0B0H
0129 E0                MOVX    A,@DPTR
012A FE                MOV     R6,A
012B A3                INC     DPTR
012C E0                MOVX    A,@DPTR
012D FF                MOV     R7,A
012E 900000      R     MOV     DPTR,#NVRAM0+0B0H
0131 E0                MOVX    A,@DPTR
0132 6E                XRL     A,R6
0133 7003              JNZ     ?C0362
0135 A3                INC     DPTR
0136 E0                MOVX    A,@DPTR
0137 6F                XRL     A,R7
0138         ?C0362:
0138 6010              JZ      ?C0267
                                           ; SOURCE LINE # 2428
013A 7F01              MOV     R7,#01H
013C 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2429
013F 900000      R     MOV     DPTR,#NVRAM0+0B0H
0142 120000      R     LCALL   L?0452
0145 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2430
0147 120000      R     LCALL   L?0471
                                           ; SOURCE LINE # 2431
014A         ?C0267:
                                           ; SOURCE LINE # 2432
014A 900000      R     MOV     DPTR,#NVRAM1+0B2H
014D E0                MOVX    A,@DPTR
014E FE                MOV     R6,A
014F A3                INC     DPTR
0150 E0                MOVX    A,@DPTR
0151 FF                MOV     R7,A
0152 900000      R     MOV     DPTR,#NVRAM0+0B2H
0155 E0                MOVX    A,@DPTR
0156 6E                XRL     A,R6
0157 7003              JNZ     ?C0363
0159 A3                INC     DPTR
015A E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 177 

015B 6F                XRL     A,R7
015C         ?C0363:
015C 6010              JZ      ?C0268
                                           ; SOURCE LINE # 2433
015E 7F01              MOV     R7,#01H
0160 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2434
0163 900000      R     MOV     DPTR,#NVRAM0+0B2H
0166 120000      R     LCALL   L?0452
0169 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2435
016B 120000      R     LCALL   L?0471
                                           ; SOURCE LINE # 2436
016E         ?C0268:
                                           ; SOURCE LINE # 2437
016E 900000      R     MOV     DPTR,#NVRAM1+0B4H
0171 E0                MOVX    A,@DPTR
0172 FE                MOV     R6,A
0173 A3                INC     DPTR
0174 E0                MOVX    A,@DPTR
0175 FF                MOV     R7,A
0176 900000      R     MOV     DPTR,#NVRAM0+0B4H
0179 E0                MOVX    A,@DPTR
017A 6E                XRL     A,R6
017B 7003              JNZ     ?C0364
017D A3                INC     DPTR
017E E0                MOVX    A,@DPTR
017F 6F                XRL     A,R7
0180         ?C0364:
0180 6010              JZ      ?C0269
                                           ; SOURCE LINE # 2438
0182 7F01              MOV     R7,#01H
0184 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2439
0187 900000      R     MOV     DPTR,#NVRAM0+0B4H
018A 120000      R     LCALL   L?0452
018D 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2440
018F 120000      R     LCALL   L?0477
                                           ; SOURCE LINE # 2441
0192         ?C0269:
                                           ; SOURCE LINE # 2442
0192 900000      R     MOV     DPTR,#NVRAM1+0B6H
0195 E0                MOVX    A,@DPTR
0196 FE                MOV     R6,A
0197 A3                INC     DPTR
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A 900000      R     MOV     DPTR,#NVRAM0+0B6H
019D E0                MOVX    A,@DPTR
019E 6E                XRL     A,R6
019F 7003              JNZ     ?C0365
01A1 A3                INC     DPTR
01A2 E0                MOVX    A,@DPTR
01A3 6F                XRL     A,R7
01A4         ?C0365:
01A4 6010              JZ      ?C0270
                                           ; SOURCE LINE # 2443
01A6 7F01              MOV     R7,#01H
01A8 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2444
01AB 900000      R     MOV     DPTR,#NVRAM0+0B6H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 178 

01AE 120000      R     LCALL   L?0452
01B1 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2445
01B3 120000      R     LCALL   L?0477
                                           ; SOURCE LINE # 2446
01B6         ?C0270:
                                           ; SOURCE LINE # 2447
01B6 900000      R     MOV     DPTR,#NVRAM1+0B8H
01B9 E0                MOVX    A,@DPTR
01BA FE                MOV     R6,A
01BB A3                INC     DPTR
01BC E0                MOVX    A,@DPTR
01BD FF                MOV     R7,A
01BE 900000      R     MOV     DPTR,#NVRAM0+0B8H
01C1 E0                MOVX    A,@DPTR
01C2 6E                XRL     A,R6
01C3 7003              JNZ     ?C0366
01C5 A3                INC     DPTR
01C6 E0                MOVX    A,@DPTR
01C7 6F                XRL     A,R7
01C8         ?C0366:
01C8 6010              JZ      ?C0271
                                           ; SOURCE LINE # 2448
01CA 7F01              MOV     R7,#01H
01CC 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2449
01CF 900000      R     MOV     DPTR,#NVRAM0+0B8H
01D2 120000      R     LCALL   L?0452
01D5 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2450
01D7 120000      R     LCALL   L?0493
                                           ; SOURCE LINE # 2451
01DA         ?C0271:
                                           ; SOURCE LINE # 2452
01DA 900000      R     MOV     DPTR,#NVRAM1+0BAH
01DD E0                MOVX    A,@DPTR
01DE FE                MOV     R6,A
01DF A3                INC     DPTR
01E0 E0                MOVX    A,@DPTR
01E1 FF                MOV     R7,A
01E2 900000      R     MOV     DPTR,#NVRAM0+0BAH
01E5 E0                MOVX    A,@DPTR
01E6 6E                XRL     A,R6
01E7 7003              JNZ     ?C0367
01E9 A3                INC     DPTR
01EA E0                MOVX    A,@DPTR
01EB 6F                XRL     A,R7
01EC         ?C0367:
01EC 6010              JZ      ?C0272
                                           ; SOURCE LINE # 2453
01EE 7F01              MOV     R7,#01H
01F0 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2454
01F3 900000      R     MOV     DPTR,#NVRAM0+0BAH
01F6 120000      R     LCALL   L?0452
01F9 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 2455
01FB 120000      R     LCALL   L?0493
                                           ; SOURCE LINE # 2456
01FE         ?C0272:
                                           ; SOURCE LINE # 2457
01FE 900000      R     MOV     DPTR,#NVRAM1+0BCH
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 179 

0201 E0                MOVX    A,@DPTR
0202 FE                MOV     R6,A
0203 A3                INC     DPTR
0204 E0                MOVX    A,@DPTR
0205 FF                MOV     R7,A
0206 900000      R     MOV     DPTR,#NVRAM0+0BCH
0209 E0                MOVX    A,@DPTR
020A 6E                XRL     A,R6
020B 7003              JNZ     ?C0368
020D A3                INC     DPTR
020E E0                MOVX    A,@DPTR
020F 6F                XRL     A,R7
0210         ?C0368:
0210 6015              JZ      ?C0273
                                           ; SOURCE LINE # 2458
0212 7F01              MOV     R7,#01H
0214 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2459
0217 900000      R     MOV     DPTR,#NVRAM0+0BCH
021A 120000      R     LCALL   L?0452
021D 7F02              MOV     R7,#02H
021F 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2460
0222 E4                CLR     A
0223 FF                MOV     R7,A
0224 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2461
0227         ?C0273:
                                           ; SOURCE LINE # 2462
0227 900000      R     MOV     DPTR,#NVRAM1+0BEH
022A E0                MOVX    A,@DPTR
022B FE                MOV     R6,A
022C A3                INC     DPTR
022D E0                MOVX    A,@DPTR
022E FF                MOV     R7,A
022F 900000      R     MOV     DPTR,#NVRAM0+0BEH
0232 E0                MOVX    A,@DPTR
0233 6E                XRL     A,R6
0234 7003              JNZ     ?C0369
0236 A3                INC     DPTR
0237 E0                MOVX    A,@DPTR
0238 6F                XRL     A,R7
0239         ?C0369:
0239 6015              JZ      ?C0274
                                           ; SOURCE LINE # 2463
023B 7F01              MOV     R7,#01H
023D 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2464
0240 900000      R     MOV     DPTR,#NVRAM0+0BEH
0243 120000      R     LCALL   L?0452
0246 E4                CLR     A
0247 FF                MOV     R7,A
0248 120000      E     LCALL   _dac8568_1_WriteDacRegister
                                           ; SOURCE LINE # 2465
024B E4                CLR     A
024C FF                MOV     R7,A
024D 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2466
0250         ?C0274:
                                           ; SOURCE LINE # 2468
0250 900000      R     MOV     DPTR,#NVRAM1+0C0H
0253 E0                MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 180 

0254 FE                MOV     R6,A
0255 A3                INC     DPTR
0256 E0                MOVX    A,@DPTR
0257 FF                MOV     R7,A
0258 900000      R     MOV     DPTR,#NVRAM0+0C0H
025B E0                MOVX    A,@DPTR
025C 6E                XRL     A,R6
025D 7003              JNZ     ?C0370
025F A3                INC     DPTR
0260 E0                MOVX    A,@DPTR
0261 6F                XRL     A,R7
0262         ?C0370:
0262 6010              JZ      ?C0275
                                           ; SOURCE LINE # 2469
0264 7F01              MOV     R7,#01H
0266 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2470
0269 900000      R     MOV     DPTR,#NVRAM0+0C0H
026C 120000      R     LCALL   L?0452
026F 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2471
0271 120000      R     LCALL   L?0472
                                           ; SOURCE LINE # 2472
0274         ?C0275:
                                           ; SOURCE LINE # 2473
0274 900000      R     MOV     DPTR,#NVRAM1+0C2H
0277 E0                MOVX    A,@DPTR
0278 FE                MOV     R6,A
0279 A3                INC     DPTR
027A E0                MOVX    A,@DPTR
027B FF                MOV     R7,A
027C 900000      R     MOV     DPTR,#NVRAM0+0C2H
027F E0                MOVX    A,@DPTR
0280 6E                XRL     A,R6
0281 7003              JNZ     ?C0371
0283 A3                INC     DPTR
0284 E0                MOVX    A,@DPTR
0285 6F                XRL     A,R7
0286         ?C0371:
0286 6010              JZ      ?C0276
                                           ; SOURCE LINE # 2474
0288 7F01              MOV     R7,#01H
028A 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2475
028D 900000      R     MOV     DPTR,#NVRAM0+0C2H
0290 120000      R     LCALL   L?0452
0293 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2476
0295 120000      R     LCALL   L?0472
                                           ; SOURCE LINE # 2477
0298         ?C0276:
                                           ; SOURCE LINE # 2478
0298 900000      R     MOV     DPTR,#NVRAM1+0C4H
029B E0                MOVX    A,@DPTR
029C FE                MOV     R6,A
029D A3                INC     DPTR
029E E0                MOVX    A,@DPTR
029F FF                MOV     R7,A
02A0 900000      R     MOV     DPTR,#NVRAM0+0C4H
02A3 E0                MOVX    A,@DPTR
02A4 6E                XRL     A,R6
02A5 7003              JNZ     ?C0372
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 181 

02A7 A3                INC     DPTR
02A8 E0                MOVX    A,@DPTR
02A9 6F                XRL     A,R7
02AA         ?C0372:
02AA 6010              JZ      ?C0277
                                           ; SOURCE LINE # 2479
02AC 7F01              MOV     R7,#01H
02AE 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2480
02B1 900000      R     MOV     DPTR,#NVRAM0+0C4H
02B4 120000      R     LCALL   L?0452
02B7 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2481
02B9 120000      R     LCALL   L?0478
                                           ; SOURCE LINE # 2482
02BC         ?C0277:
                                           ; SOURCE LINE # 2483
02BC 900000      R     MOV     DPTR,#NVRAM1+0C6H
02BF E0                MOVX    A,@DPTR
02C0 FE                MOV     R6,A
02C1 A3                INC     DPTR
02C2 E0                MOVX    A,@DPTR
02C3 FF                MOV     R7,A
02C4 900000      R     MOV     DPTR,#NVRAM0+0C6H
02C7 E0                MOVX    A,@DPTR
02C8 6E                XRL     A,R6
02C9 7003              JNZ     ?C0373
02CB A3                INC     DPTR
02CC E0                MOVX    A,@DPTR
02CD 6F                XRL     A,R7
02CE         ?C0373:
02CE 6010              JZ      ?C0278
                                           ; SOURCE LINE # 2484
02D0 7F01              MOV     R7,#01H
02D2 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2485
02D5 900000      R     MOV     DPTR,#NVRAM0+0C6H
02D8 120000      R     LCALL   L?0452
02DB 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2486
02DD 120000      R     LCALL   L?0478
                                           ; SOURCE LINE # 2487
02E0         ?C0278:
                                           ; SOURCE LINE # 2488
02E0 900000      R     MOV     DPTR,#NVRAM1+0C8H
02E3 E0                MOVX    A,@DPTR
02E4 FE                MOV     R6,A
02E5 A3                INC     DPTR
02E6 E0                MOVX    A,@DPTR
02E7 FF                MOV     R7,A
02E8 900000      R     MOV     DPTR,#NVRAM0+0C8H
02EB E0                MOVX    A,@DPTR
02EC 6E                XRL     A,R6
02ED 7003              JNZ     ?C0374
02EF A3                INC     DPTR
02F0 E0                MOVX    A,@DPTR
02F1 6F                XRL     A,R7
02F2         ?C0374:
02F2 6010              JZ      ?C0279
                                           ; SOURCE LINE # 2489
02F4 7F01              MOV     R7,#01H
02F6 120000      R     LCALL   _setLedDac
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 182 

                                           ; SOURCE LINE # 2490
02F9 900000      R     MOV     DPTR,#NVRAM0+0C8H
02FC 120000      R     LCALL   L?0452
02FF 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2491
0301 120000      R     LCALL   L?0494
                                           ; SOURCE LINE # 2492
0304         ?C0279:
                                           ; SOURCE LINE # 2493
0304 900000      R     MOV     DPTR,#NVRAM1+0CAH
0307 E0                MOVX    A,@DPTR
0308 FE                MOV     R6,A
0309 A3                INC     DPTR
030A E0                MOVX    A,@DPTR
030B FF                MOV     R7,A
030C 900000      R     MOV     DPTR,#NVRAM0+0CAH
030F E0                MOVX    A,@DPTR
0310 6E                XRL     A,R6
0311 7003              JNZ     ?C0375
0313 A3                INC     DPTR
0314 E0                MOVX    A,@DPTR
0315 6F                XRL     A,R7
0316         ?C0375:
0316 6010              JZ      ?C0280
                                           ; SOURCE LINE # 2494
0318 7F01              MOV     R7,#01H
031A 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2495
031D 900000      R     MOV     DPTR,#NVRAM0+0CAH
0320 120000      R     LCALL   L?0452
0323 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 2496
0325 120000      R     LCALL   L?0494
                                           ; SOURCE LINE # 2497
0328         ?C0280:
                                           ; SOURCE LINE # 2498
0328 900000      R     MOV     DPTR,#NVRAM1+0CCH
032B E0                MOVX    A,@DPTR
032C FE                MOV     R6,A
032D A3                INC     DPTR
032E E0                MOVX    A,@DPTR
032F FF                MOV     R7,A
0330 900000      R     MOV     DPTR,#NVRAM0+0CCH
0333 E0                MOVX    A,@DPTR
0334 6E                XRL     A,R6
0335 7003              JNZ     ?C0376
0337 A3                INC     DPTR
0338 E0                MOVX    A,@DPTR
0339 6F                XRL     A,R7
033A         ?C0376:
033A 6015              JZ      ?C0281
                                           ; SOURCE LINE # 2499
033C 7F01              MOV     R7,#01H
033E 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2500
0341 900000      R     MOV     DPTR,#NVRAM0+0CCH
0344 120000      R     LCALL   L?0452
0347 7F02              MOV     R7,#02H
0349 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2501
034C E4                CLR     A
034D FF                MOV     R7,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 183 

034E 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2502
0351         ?C0281:
                                           ; SOURCE LINE # 2503
0351 900000      R     MOV     DPTR,#NVRAM1+0CEH
0354 E0                MOVX    A,@DPTR
0355 FE                MOV     R6,A
0356 A3                INC     DPTR
0357 E0                MOVX    A,@DPTR
0358 FF                MOV     R7,A
0359 900000      R     MOV     DPTR,#NVRAM0+0CEH
035C E0                MOVX    A,@DPTR
035D 6E                XRL     A,R6
035E 7003              JNZ     ?C0377
0360 A3                INC     DPTR
0361 E0                MOVX    A,@DPTR
0362 6F                XRL     A,R7
0363         ?C0377:
0363 6015              JZ      ?C0282
                                           ; SOURCE LINE # 2504
0365 7F01              MOV     R7,#01H
0367 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2505
036A 900000      R     MOV     DPTR,#NVRAM0+0CEH
036D 120000      R     LCALL   L?0452
0370 E4                CLR     A
0371 FF                MOV     R7,A
0372 120000      E     LCALL   _dac8568_2_WriteDacRegister
                                           ; SOURCE LINE # 2506
0375 E4                CLR     A
0376 FF                MOV     R7,A
0377 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2507
037A         ?C0282:
                                           ; SOURCE LINE # 2509
037A 900000      R     MOV     DPTR,#NVRAM1+0D0H
037D E0                MOVX    A,@DPTR
037E FE                MOV     R6,A
037F A3                INC     DPTR
0380 E0                MOVX    A,@DPTR
0381 FF                MOV     R7,A
0382 900000      R     MOV     DPTR,#NVRAM0+0D0H
0385 E0                MOVX    A,@DPTR
0386 6E                XRL     A,R6
0387 7003              JNZ     ?C0378
0389 A3                INC     DPTR
038A E0                MOVX    A,@DPTR
038B 6F                XRL     A,R7
038C         ?C0378:
038C 6010              JZ      ?C0283
                                           ; SOURCE LINE # 2510
038E 7F01              MOV     R7,#01H
0390 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2511
0393 900000      R     MOV     DPTR,#NVRAM0+0D0H
0396 120000      R     LCALL   L?0452
0399 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 2512
039B 120000      R     LCALL   L?0473
                                           ; SOURCE LINE # 2513
039E         ?C0283:
                                           ; SOURCE LINE # 2514
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 184 

039E 900000      R     MOV     DPTR,#NVRAM1+0D2H
03A1 E0                MOVX    A,@DPTR
03A2 FE                MOV     R6,A
03A3 A3                INC     DPTR
03A4 E0                MOVX    A,@DPTR
03A5 FF                MOV     R7,A
03A6 900000      R     MOV     DPTR,#NVRAM0+0D2H
03A9 E0                MOVX    A,@DPTR
03AA 6E                XRL     A,R6
03AB 7003              JNZ     ?C0379
03AD A3                INC     DPTR
03AE E0                MOVX    A,@DPTR
03AF 6F                XRL     A,R7
03B0         ?C0379:
03B0 6008              JZ      ?C0284
                                           ; SOURCE LINE # 2515
                                           ; SOURCE LINE # 2516
03B2 120000      R     LCALL   L?0451
03B5 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 2517
03B7 120000      R     LCALL   L?0473
                                           ; SOURCE LINE # 2518
03BA         ?C0284:
                                           ; SOURCE LINE # 2519
03BA 900000      R     MOV     DPTR,#NVRAM1+0D4H
03BD E0                MOVX    A,@DPTR
03BE FE                MOV     R6,A
03BF A3                INC     DPTR
03C0 E0                MOVX    A,@DPTR
03C1 FF                MOV     R7,A
03C2 900000      R     MOV     DPTR,#NVRAM0+0D4H
03C5 E0                MOVX    A,@DPTR
03C6 6E                XRL     A,R6
03C7 7003              JNZ     ?C0380
03C9 A3                INC     DPTR
03CA E0                MOVX    A,@DPTR
03CB 6F                XRL     A,R7
03CC         ?C0380:
03CC 6008              JZ      ?C0285
                                           ; SOURCE LINE # 2520
                                           ; SOURCE LINE # 2521
03CE 120000      R     LCALL   L?0451
03D1 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2522
03D3 120000      R     LCALL   L?0479
                                           ; SOURCE LINE # 2523
03D6         ?C0285:
                                           ; SOURCE LINE # 2524
03D6 900000      R     MOV     DPTR,#NVRAM1+0D6H
03D9 E0                MOVX    A,@DPTR
03DA FE                MOV     R6,A
03DB A3                INC     DPTR
03DC E0                MOVX    A,@DPTR
03DD FF                MOV     R7,A
03DE 900000      R     MOV     DPTR,#NVRAM0+0D6H
03E1 E0                MOVX    A,@DPTR
03E2 6E                XRL     A,R6
03E3 7003              JNZ     ?C0381
03E5 A3                INC     DPTR
03E6 E0                MOVX    A,@DPTR
03E7 6F                XRL     A,R7
03E8         ?C0381:
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 185 

03E8 6010              JZ      ?C0286
                                           ; SOURCE LINE # 2525
03EA 7F01              MOV     R7,#01H
03EC 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2526
03EF 900000      R     MOV     DPTR,#NVRAM0+0D6H
03F2 120000      R     LCALL   L?0452
03F5 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2527
03F7 120000      R     LCALL   L?0479
                                           ; SOURCE LINE # 2528
03FA         ?C0286:
                                           ; SOURCE LINE # 2529
03FA 900000      R     MOV     DPTR,#NVRAM1+0D8H
03FD E0                MOVX    A,@DPTR
03FE FE                MOV     R6,A
03FF A3                INC     DPTR
0400 E0                MOVX    A,@DPTR
0401 FF                MOV     R7,A
0402 900000      R     MOV     DPTR,#NVRAM0+0D8H
0405 E0                MOVX    A,@DPTR
0406 6E                XRL     A,R6
0407 7003              JNZ     ?C0382
0409 A3                INC     DPTR
040A E0                MOVX    A,@DPTR
040B 6F                XRL     A,R7
040C         ?C0382:
040C 6010              JZ      ?C0287
                                           ; SOURCE LINE # 2530
040E 7F01              MOV     R7,#01H
0410 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2531
0413 900000      R     MOV     DPTR,#NVRAM0+0D8H
0416 120000      R     LCALL   L?0452
0419 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2532
041B 120000      R     LCALL   L?0495
                                           ; SOURCE LINE # 2533
041E         ?C0287:
                                           ; SOURCE LINE # 2534
041E 900000      R     MOV     DPTR,#NVRAM1+0DAH
0421 E0                MOVX    A,@DPTR
0422 FE                MOV     R6,A
0423 A3                INC     DPTR
0424 E0                MOVX    A,@DPTR
0425 FF                MOV     R7,A
0426 900000      R     MOV     DPTR,#NVRAM0+0DAH
0429 E0                MOVX    A,@DPTR
042A 6E                XRL     A,R6
042B 7003              JNZ     ?C0383
042D A3                INC     DPTR
042E E0                MOVX    A,@DPTR
042F 6F                XRL     A,R7
0430         ?C0383:
0430 6010              JZ      ?C0288
                                           ; SOURCE LINE # 2535
0432 7F01              MOV     R7,#01H
0434 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2536
0437 900000      R     MOV     DPTR,#NVRAM0+0DAH
043A 120000      R     LCALL   L?0452
043D 7F04              MOV     R7,#04H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 186 

                                           ; SOURCE LINE # 2537
043F 120000      R     LCALL   L?0495
                                           ; SOURCE LINE # 2538
0442         ?C0288:
                                           ; SOURCE LINE # 2539
0442 900000      R     MOV     DPTR,#NVRAM1+0DCH
0445 E0                MOVX    A,@DPTR
0446 FE                MOV     R6,A
0447 A3                INC     DPTR
0448 E0                MOVX    A,@DPTR
0449 FF                MOV     R7,A
044A 900000      R     MOV     DPTR,#NVRAM0+0DCH
044D E0                MOVX    A,@DPTR
044E 6E                XRL     A,R6
044F 7003              JNZ     ?C0384
0451 A3                INC     DPTR
0452 E0                MOVX    A,@DPTR
0453 6F                XRL     A,R7
0454         ?C0384:
0454 6015              JZ      ?C0289
                                           ; SOURCE LINE # 2540
0456 7F01              MOV     R7,#01H
0458 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2541
045B 900000      R     MOV     DPTR,#NVRAM0+0DCH
045E 120000      R     LCALL   L?0452
0461 7F02              MOV     R7,#02H
0463 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2542
0466 E4                CLR     A
0467 FF                MOV     R7,A
0468 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2543
046B         ?C0289:
                                           ; SOURCE LINE # 2544
046B 900000      R     MOV     DPTR,#NVRAM1+0DEH
046E E0                MOVX    A,@DPTR
046F FE                MOV     R6,A
0470 A3                INC     DPTR
0471 E0                MOVX    A,@DPTR
0472 FF                MOV     R7,A
0473 900000      R     MOV     DPTR,#NVRAM0+0DEH
0476 E0                MOVX    A,@DPTR
0477 6E                XRL     A,R6
0478 7003              JNZ     ?C0385
047A A3                INC     DPTR
047B E0                MOVX    A,@DPTR
047C 6F                XRL     A,R7
047D         ?C0385:
047D 6015              JZ      ?C0291
                                           ; SOURCE LINE # 2545
047F 7F01              MOV     R7,#01H
0481 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2546
0484 900000      R     MOV     DPTR,#NVRAM0+0DEH
0487 120000      R     LCALL   L?0452
048A E4                CLR     A
048B FF                MOV     R7,A
048C 120000      E     LCALL   _dac8568_3_WriteDacRegister
                                           ; SOURCE LINE # 2547
048F E4                CLR     A
0490 FF                MOV     R7,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 187 

0491 120000      R     LCALL   _setLedDac
                                           ; SOURCE LINE # 2548
                                           ; SOURCE LINE # 2549
0494         ?C0291:
0494 22                RET     
0495         L?0470:
0495 7F04              MOV     R7,#04H
0497 120000      E     LCALL   _dac8568_0_WriteDacRegister
049A E4                CLR     A
049B FF                MOV     R7,A
049C 120000      R     LCALL   _setLedDac
049F 22                RET     
04A0         L?0471:
04A0 120000      E     LCALL   _dac8568_1_WriteDacRegister
04A3 E4                CLR     A
04A4 FF                MOV     R7,A
04A5 120000      R     LCALL   _setLedDac
04A8 22                RET     
04A9         L?0472:
04A9 120000      E     LCALL   _dac8568_2_WriteDacRegister
04AC E4                CLR     A
04AD FF                MOV     R7,A
04AE 120000      R     LCALL   _setLedDac
04B1 22                RET     
04B2         L?0473:
04B2 120000      E     LCALL   _dac8568_3_WriteDacRegister
04B5 E4                CLR     A
04B6 FF                MOV     R7,A
04B7 120000      R     LCALL   _setLedDac
04BA 22                RET     
04BB         L?0476:
04BB 120000      E     LCALL   _dac8568_0_WriteDacRegister
04BE E4                CLR     A
04BF FF                MOV     R7,A
04C0 120000      R     LCALL   _setLedDac
04C3 22                RET     
04C4         L?0477:
04C4 120000      E     LCALL   _dac8568_1_WriteDacRegister
04C7 E4                CLR     A
04C8 FF                MOV     R7,A
04C9 120000      R     LCALL   _setLedDac
04CC 22                RET     
04CD         L?0478:
04CD 120000      E     LCALL   _dac8568_2_WriteDacRegister
04D0 E4                CLR     A
04D1 FF                MOV     R7,A
04D2 120000      R     LCALL   _setLedDac
04D5 22                RET     
04D6         L?0479:
04D6 120000      E     LCALL   _dac8568_3_WriteDacRegister
04D9 E4                CLR     A
04DA FF                MOV     R7,A
04DB 120000      R     LCALL   _setLedDac
04DE 22                RET     
04DF         L?0492:
04DF 120000      E     LCALL   _dac8568_0_WriteDacRegister
04E2 E4                CLR     A
04E3 FF                MOV     R7,A
04E4 120000      R     LCALL   _setLedDac
04E7 22                RET     
04E8         L?0493:
04E8 120000      E     LCALL   _dac8568_1_WriteDacRegister
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 188 

04EB E4                CLR     A
04EC FF                MOV     R7,A
04ED 120000      R     LCALL   _setLedDac
04F0 22                RET     
04F1         L?0494:
04F1 120000      E     LCALL   _dac8568_2_WriteDacRegister
04F4 E4                CLR     A
04F5 FF                MOV     R7,A
04F6 120000      R     LCALL   _setLedDac
04F9 22                RET     
04FA         L?0495:
04FA 120000      E     LCALL   _dac8568_3_WriteDacRegister
04FD E4                CLR     A
04FE FF                MOV     R7,A
04FF 120000      R     LCALL   _setLedDac
0502 22                RET     
             ; FUNCTION refreshDac (END)

             ; FUNCTION chipDacInit (BEGIN)
                                           ; SOURCE LINE # 2550
                                           ; SOURCE LINE # 2551
0000 120000      E     LCALL   dac8568_0_Init
                                           ; SOURCE LINE # 2552
0003 120000      E     LCALL   dac8568_1_Init
                                           ; SOURCE LINE # 2553
0006 120000      E     LCALL   dac8568_2_Init
                                           ; SOURCE LINE # 2554
0009 020000      E     LJMP    dac8568_3_Init
             ; FUNCTION chipDacInit (END)

             ; FUNCTION sPlcInit (BEGIN)
                                           ; SOURCE LINE # 2556
                                           ; SOURCE LINE # 2557
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _setLedError
                                           ; SOURCE LINE # 2558
0005 1F                DEC     R7
0006 120000      R     LCALL   _setLedRun
                                           ; SOURCE LINE # 2559
0009 120000      R     LCALL   wdtInit
                                           ; SOURCE LINE # 2560
000C 120000      R     LCALL   wdtDisable
                                           ; SOURCE LINE # 2562
000F 120000      R     LCALL   nvramLoad
                                           ; SOURCE LINE # 2566
0012 120000      R     LCALL   chipAdcInit
                                           ; SOURCE LINE # 2570
0015 120000      R     LCALL   chipDacInit
                                           ; SOURCE LINE # 2574
0018 E4                CLR     A
0019 F500        E     MOV     ?_initModbus?BYTE+04H,A
001B 7500E1      E     MOV     ?_initModbus?BYTE+03H,#0E1H
001E F500        E     MOV     ?_initModbus?BYTE+02H,A
0020 F500        E     MOV     ?_initModbus?BYTE+01H,A
0022 7F01              MOV     R7,#01H
0024 120000      E     LCALL   _initModbus
                                           ; SOURCE LINE # 2576
0027 120000      R     LCALL   timer0Init
                                           ; SOURCE LINE # 2577
002A 900000      R     MOV     DPTR,#NVRAM0+0195H
002D E0                MOVX    A,@DPTR
002E 4401              ORL     A,#01H
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 189 

0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2578
0031 E4                CLR     A
0032 FF                MOV     R7,A
0033 020000      R     LJMP    _setLedError
             ; FUNCTION sPlcInit (END)

             ; FUNCTION sPlcProcessStart (BEGIN)
                                           ; SOURCE LINE # 2580
                                           ; SOURCE LINE # 2582
0000 120000      E     LCALL   modbusPorcess
                                           ; SOURCE LINE # 2585
0003 020000      R     LJMP    inputRefresh
             ; FUNCTION sPlcProcessStart (END)

             ; FUNCTION sPlcProcessEnd (BEGIN)
                                           ; SOURCE LINE # 2591
                                           ; SOURCE LINE # 2596
0000 120000      R     LCALL   outputRefresh
                                           ; SOURCE LINE # 2599
0003 120000      R     LCALL   refreshDac
                                           ; SOURCE LINE # 2602
0006 020000      R     LJMP    nvramUpdata
             ; FUNCTION sPlcProcessEnd (END)

C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 190 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
fp32_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
fp64_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
bool . . . . . . . . . . . . . . . . .  TYPEDEF  -----  BIT      -----  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
U8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
U16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
U32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
S8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
S16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
S32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
UU16 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 191 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU16 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU32 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
UU32 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_GENERIC_PTR . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GENERIC_PTR . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P6 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
CKCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P7 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
AMX0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
AMX0SL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
ADC0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
ADC0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
WDTCN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
ADC0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BEH  2
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
AD0INT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
AD0BUSY. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_log . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromWriteOneByte . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromRead . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromWrite. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 192 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


dac8568_0_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_0_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_1_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_1_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_2_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_2_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
dac8568_3_Init . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dac8568_3_WriteDacRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
_initModbus. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
modbusPorcess. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
adcTempDat_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  31
  dat. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  28
  out. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001CH  2
  wIndex . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   001EH  1
NVRAM0 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  412
NVRAM1 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    019CH  412
wdtDisable . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  flagEA . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
sPlcInit . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcProcessStart . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcProcessEnd . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_assertCoilAddress . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  adr. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_assertRegisterAddress . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  adr. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
nvramUpdata. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  sp0. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  sp1. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0006H  2
clearDM. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearEM. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearR . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearT . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearTD. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearC . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
nvramLoad. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
nvramSave. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_SET . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
_RESET . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
_FLIP. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_LD. . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_LDP . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  temp0. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  temp1. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_LDN . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 193 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  A. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  temp0. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  temp1. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_T1MS. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_T10MS . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_T100MS. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  A. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
chipDacInit. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
chipAdcInit. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
refreshDac . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
ADCMUX_0_3_S0. . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
ADCMUX_0_3_S1. . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
ADCMUX_0_3_OE1 . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
ADCMUX_0_3_OE2 . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
ADCMUX_4_7_S0. . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
ADCMUX_4_7_S1. . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
ADCMUC_4_7_OE1 . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
ADCMUC_4_7_OE2 . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
ADCMUX_8_11_S0 . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
ADCMUX_8_11_S1 . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
ADCMUX_8_11_OE1. . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
ADCMUX_8_11_OE2. . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
ADCMUX_12_15_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
ADCMUX_12_15_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
ADCMUX_12_15_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
ADCMUX_12_15_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
ADCMUX_16_19_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
ADCMUX_16_19_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
ADCMUX_16_19_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
ADCMUX_16_19_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
ADCMUX_20_23_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
ADCMUX_20_23_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
ADCMUX_20_23_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
ADCMUX_20_23_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
ADCMUX_24_27_S0. . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
ADCMUX_24_27_S1. . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
ADCMUX_24_27_OE1 . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
ADCMUX_24_27_OE2 . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
TimerCounter_1mS . . . . . . . . . . .  STATIC   DATA   U_CHAR   0000H  1
TimerCounter_10mS. . . . . . . . . . .  STATIC   DATA   U_CHAR   0001H  1
Timer0_L . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0002H  1
Timer0_H . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0003H  1
inputFilter. . . . . . . . . . . . . .  STATIC   PDATA  ARRAY    0000H  16
adcTempDat . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    0338H  1984
adcSelect. . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0004H  1
_refreshAdcData. . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 194 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  sum. . . . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0004H  4
adcProcess . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  result . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_initAdcData . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getGlobalInterrupt . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_setLedRun . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedRun. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_setLedEprom . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedEprom. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_setLedDac . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedDac. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_setLedError . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_?getLedError. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
clearMR. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearX . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearY . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearSPREG . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearSPCOIL. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_TNTC. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0082H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  ftemp. . . . . . . . . . . . . . . .  AUTO     DATA   FLOAT    0000H  4
_TENV. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_MAX . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  max. . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0003H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_MIN . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  min. . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0003H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
wdtInit. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
wdtEnable. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
wdtFeed. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
pcaInit. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
timer0Init . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
timer0Isr. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
inputInit. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
C51 COMPILER V9.59.0.0   SPLC                                                              01/12/2019 16:09:37 PAGE 195 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


outputInit . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
inputRefresh . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  ctemp0 . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
outputRefresh. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5405    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   2808    ----
   PDATA SIZE       =     16    ----
   DATA SIZE        =      5      41
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
