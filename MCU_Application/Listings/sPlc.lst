C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SPLC
OBJECT MODULE PLACED IN .\Objects\sPlc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MainApp\sPlc.c OBJECTADVANCED OPTIMIZE(8,SPEED) REGFILE(.\Objects\dwLase
                    -r_F020.ORC) BROWSE ORDER INCDIR(.\Lib;.\Driver;.\MainApp;.\Modbus) DEBUG CODE LISTINCLUDE SYMBOLS PRINT(.\Listings\sPlc.
                    -lst) PREPRINT(.\Listings\sPlc.i) OBJECT(.\Objects\sPlc.obj)

line level    source

   1          #include "sPlc.h"
   1      =1  #ifndef __SPLC_H__
   2      =1  #define __SPLC_H__
   3      =1  /*****************************************************************************/
   4      =1  #include "appConfig.h"
   1      =2  #ifndef __APPCONFIG_H__
   2      =2  #define __APPCONFIG_H__
   3      =2  /*****************************************************************************/
   4      =2  #define DEBUG_LED_ON                                            0
   5      =2  #define DEBUG_LED_OFF                                           1
   6      =2  #define CONFIG_SYSCLK                       (48000000L)//F580内部48M
   7      =2  #define SAR_CLK                                                 2000000L//ADC0时钟 <2.5MHz
   8      =2  #define CONFIG_DEBUG                        0//调试功能
   9      =2  #define CONFIG_USING_WDT                                        0//使能看门狗
  10      =2  #define CONFIG_USING_RESET                                      0//使能PLC复位MCU功能
  11      =2  #define CONFIG_LADDER_SECTORS_START                     64//指令起始地址
  12      =2  #define CONFIG_LADDER_SECTORS_END                       128//指令结束地址
  13      =2  #define CONFIG_LASERTIMER_OVERFLOW_US           1000L//定时器周期 1mS
  14      =2  #define CONFIG_VERSION                                          0x0001
  15      =2  #define CONFIG_CHECK_CODE                                       0x5A7E
  16      =2  
  17      =2  /*****************************************************************************/
  18      =2  #define CONFIG_UART0_BAUDRATE                           115200//串口波特率
  19      =2  #define CONFIG_UART0_PARITY                                     NONE
  20      =2  #define CONFIG_UART0_STOPBIT                            1
  21      =2  #define CONFIG_UART0_DATABIT                            8
  22      =2  
  23      =2  #define CONFIG_UART1_BAUDRATE                           115200//串口波特率
  24      =2  #define CONFIG_UART1_PARITY                                     NONE
  25      =2  #define CONFIG_UART1_STOPBIT                            1
  26      =2  #define CONFIG_UART1_DATABIT                            8
  27      =2  /*****************************************************************************/
  28      =2  #define CONFIG_I2C0_FREQ                                        1            
  29      =2  #define CONFIG_I2C1_FREQ                                        1
  30      =2  #define CONFIG_I2C2_FREQ                                        1
  31      =2  #define CONFIG_I2C3_FREQ                                        1
  32      =2  #define CONFIG_I2C4_FREQ                                        1
  33      =2  #define CONFIG_I2C_WAITACT_TIME                         250
  34      =2  /*****************************************************************************/
  35      =2  #define CONFIG_EPROM_SIZE                                       CONFIG_AT24C64_SIZE
  36      =2  #define CONFIG_AT24C02_SIZE                             256
  37      =2  #define CONFIG_AT24C04_SIZE                             512
  38      =2  #define CONFIG_AT24C08_SIZE                             1024
  39      =2  #define CONFIG_AT24C16_SIZE                             2048
  40      =2  #define CONFIG_AT24C32_SIZE                             4096
  41      =2  #define CONFIG_AT24C64_SIZE                                     8192
  42      =2  #define CONFIG_AT24C128_SIZE                            16384
  43      =2  #define CONFIG_AT24C256_SIZE                            32768
  44      =2  #define CONFIG_EPROM_ADDRESS                            0x50
  45      =2  #define CONFIG_EPROM_FRAM                                       0//铁电存储体无写入等待
  46      =2  #define CONFIG_EPROM_FREQ                                       1//
  47      =2  #define CONFIG_EPROM_PAGEWRITE                          0//页写入
  48      =2  /*****************************************************************************/
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 2   

  49      =2  #define CONFIG_USE_IPID                                         1//使能IPID温度控制
  50      =2  /*****************************************************************************/
  51      =2  #define CONFIG_USE_HWVER_SHOW                           1//使能固件版本显示
  52      =2  #define CONFIG_USE_MPD1_SHOW                            1//使能MPD1测量显示
  53      =2  #define CONFIG_USE_MPD2_SHOW                            1//使能MPD2测量显示
  54      =2  #define CONFIG_USE_FBS1                                         1//使能FBS1检测
  55      =2  #define CONFIG_USE_FBS2                                         1//使能FBS2检测
  56      =2  #define CONFIG_USE_LASER_TEMP                           1//使能激光器温度显示
  57      =2  #define CONFIG_USE_RADIATOR_TEMP                        1//使能散热器温度显示
  58      =2  #define CONFIG_USE_ENVI_TEMP                            1//使能环境温度显示
  59      =2  #define CONFIG_USE_IPID_UPDATE                          1//使能IPID参数更新功能
  60      =2  #define CONFIG_USE_IPID_OUTSHOW                         1//使能IPID输出显示
  61      =2  /*****************************************************************************/
  62      =2  //SPLC设置
  63      =2  #define CONFIG_SPLC_ASSERT                                      1//检查地址范围
  64      =2  #define CONFIG_SPLC_DEV                                         0x0A01//设备号
  65      =2  #define CONFIG_SPLC_CLEAR_CODE                          0xA58E
  66      =2  #define CONFIG_SOFTPLC_HWTIME                           1000L//1mS
  67      =2  #define CONFIG_INPUT_FILTER_TIME                        3//输入数字滤波扫描周期 1mS * N
  68      =2  /*****************************************************************************/
  69      =2  #define CONFIG_SPLC_USING_CLEAR_NVRAM           1//启用清除NVRAM功能
  70      =2  /*****************************************************************************/
  71      =2  #define CONFIG_SPLC_USING_WDT                           1//看门狗启用
  72      =2  /*****************************************************************************/
  73      =2  #define CONFIG_SPLC_USING_IO_INPUT                      1//输入IO刷新启用
  74      =2  /*****************************************************************************/
  75      =2  #define CONFIG_SPLC_USING_IO_OUTPUT                     1//输出IO刷新启用
  76      =2  /*****************************************************************************/
  77      =2  #define CONFIG_SPLC_USING_EPROM                         1//EPROM掉电存储启用
  78      =2  /*****************************************************************************/
  79      =2  #define CONFIG_SPLC_USING_UART1                         1//UART1串口启用
  80      =2  #if CONFIG_SPLC_USING_UART1 == 1
  81      =2  #define SPLC_UART1                                                      1
  82      =2  #endif
  83      =2  /*****************************************************************************/
  84      =2  #define CONFIG_SPLC_USING_CADC                          1//使能ADC模块
  85      =2  #define CONFIG_SPLC_ADC_FILTER_TAP                      14//ADC位移滤波次数
  86      =2  #define CONFIG_SPLC_ADC_CHANNLE                         64//ADC通道数
  87      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_GAIN    3330L// Temp Sensor Gain in (uV / degC)
  88      =2  #define CONFIG_SPLC_ADC_TEMP_SENSOR_OFFSET  856L// Temp Sensor Offset in mV
  89      =2  #define CONFIG_SPLC_ADC_INTERNAL_VREF           2400L// ADC Voltage Reference (mV)
  90      =2  #define CONFIG_SPLC_ADC_AMBIENT             25L// Ambient temp in deg C
  91      =2  /*****************************************************************************/
  92      =2  #define CONFIG_SPLC_USING_DAC                           1//是能DAC模块
  93      =2  /*****************************************************************************/
  94      =2  #define CONFIG_SPLC_USING_MB_RTU_SLAVE          1//是能MODBUS RTU从站
  95      =2  #define CONFIG_MB_RTU_SLAVE_TIMER                       1000L//1000uS
  96      =2  #define CONFIG_MB_RTU_SLAVE_ADDRESS                     0x01//从设备地址
  97      =2  #define CONFIG_MB_RTU_SLAVE_BUFFER_SIZE         256//发送接收缓冲区
  98      =2  #define CONFIG_MB_RTU_SLAVE_TIMEOUT                     100//接收通讯超时 10mS
  99      =2  #define CONFIG_MB_RTU_SLAVE_IO_DELAY            1//RX TX切换延时
 100      =2  /*****************************************************************************/
 101      =2  /*****************************************************************************/
 102      =2  #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
 103      =2  #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
 104      =2  #define DISABLE_INTERRUPT                                       EA = 0;
 105      =2  #define ENABLE_INTERRUPT                                        EA = 1;
 106      =2  /*****************************************************************************/
 107      =2  
 108      =2  /*****************************************************************************/
 109      =2  #define ID_ONLY_1_CHANNEL                                       4321
 110      =2  #define ID_ONLY_2_CHANNEL                                       8765
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 3   

 111      =2  #define ID_BOTH_CHANNEL                                         9431
 112      =2  #define ID_LASER_MODE_CW                                        7631
 113      =2  #define ID_LASER_MODE_SP                                        8934
 114      =2  #define ID_LASER_MODE_MP                                        2453
 115      =2  #define ID_LASER_MODE_GP                                        3876
 116      =2  /*****************************************************************************/
 117      =2  #define FBS1_IN_PORT                                            3
 118      =2  #define FBS2_IN_PORT                                            2
 119      =2  #define COOLON_OUT_PORT                                         (1 * 8 + 3)
 120      =2  /*****************************************************************************/
 121      =2  //PID FUZZY 模糊PID配置
 122      =2  #define CONFIG_TECOUT_CYCLE                                     4000//PID输出转PWM周期
 123      =2  /*****************************************************************************/
 124      =2  /*****************************************************************************/
 125      =2  #define DISABLE_MODBUS_SERIAL_INTERRUPT         ES0 = 0;
 126      =2  #define ENABLE_MODBUS_SERIAL_INTERRUPT          ES0 = 1;
 127      =2  #define DISABLE_INTERRUPT                                       EA = 0;
 128      =2  #define ENABLE_INTERRUPT                                        EA = 1;
 129      =2  /*****************************************************************************/
 130      =2  #include "stdint.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDINT_H
   8      =3  #define STDINT_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef unsigned char uint8_t;
  13      =3  typedef unsigned short uint16_t;
  14      =3  typedef unsigned long uint32_t;
  15      =3  typedef uint32_t uint64_t[2];
  16      =3  
  17      =3  typedef signed char int8_t;
  18      =3  typedef short int16_t;
  19      =3  typedef long int32_t;
  20      =3  typedef int32_t int64_t[2];
  21      =3  typedef float fp32_t;
  22      =3  typedef double fp64_t;
  23      =3  
  24      =3  #elif defined __ICC8051__
           =3 
           =3 /* Fixed size types. These are all optional. */
           =3 #ifdef __INT8_T_TYPE__
           =3   typedef __INT8_T_TYPE__   int8_t;
           =3   typedef __UINT8_T_TYPE__ uint8_t;
           =3 #endif /* __INT8_T_TYPE__ */
           =3 
           =3 #ifdef __INT16_T_TYPE__
           =3   typedef __INT16_T_TYPE__   int16_t;
           =3   typedef __UINT16_T_TYPE__ uint16_t;
           =3 #endif /* __INT16_T_TYPE__ */
           =3 
           =3 #ifdef __INT32_T_TYPE__
           =3   typedef __INT32_T_TYPE__   int32_t;
           =3   typedef __UINT32_T_TYPE__ uint32_t;
           =3 #endif /* __INT32_T_TYPE__ */
           =3 
           =3 #ifdef __INT64_T_TYPE__
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 4   

           =3   #pragma language=save
           =3   #pragma language=extended
           =3   typedef __INT64_T_TYPE__   int64_t;
           =3   typedef __UINT64_T_TYPE__ uint64_t;
           =3   #pragma language=restore
           =3 #endif /* __INT64_T_TYPE__ */
           =3 
           =3 #endif
  51      =3  
  52      =3  #endif
 131      =2  #include "stdbool.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef STDBOOL_H
   8      =3  #define STDBOOL_H
   9      =3  
  10      =3  #if defined __C51__
  11      =3  
  12      =3  typedef bit bool;
  13      =3  enum{
  14      =3    false = 0,
  15      =3    true = 1,
  16      =3  };
  17      =3  
  18      =3  #elif defined __ICC8051__
           =3 
           =3 #ifndef _SYSTEM_BUILD
           =3   #pragma system_include
           =3 #endif
           =3 
           =3 #ifndef __cplusplus
           =3 
           =3 #define bool _Bool
           =3 #define true 1
           =3 #define false 0
           =3 
           =3 #define __bool_true_false_are_defined 1
           =3 
           =3 #endif /* !__cplusplus */
           =3 
           =3 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 
           =3 typedef bit bool;
           =3 enum{
           =3   false = 0,
           =3   true = 1,
           =3 };
           =3 
           =3 #endif
  43      =3  
  44      =3  #endif //STDBOOL_H
  45      =3  
 132      =2  #include "endian.h"
   1      =3  /**************************************************************************//**
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 5   

   6      =3  
   7      =3  #ifndef __ENDIAN_H__
   8      =3  #define __ENDIAN_H__
   9      =3  
  10      =3  #define bswapu16(x) (((x) >> 8) | ((x) << 8))
  11      =3  #define bswapu32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) \
  12      =3                    | (((x) & 0x0000FF00) << 8) | ((x) << 24))
  13      =3  
  14      =3  #define bswap16(x) bswapu16((uint16_t)(x))
  15      =3  #define bswap32(x) bswapu32((uint32_t)(x))
  16      =3  
  17      =3  // Big Endian Compilers
  18      =3  #if ((defined __C51__) || (defined __RC51__) || (defined _CC51))
  19      =3  
  20      =3  #define htobe16(x) (x)
  21      =3  #define htobe32(x) (x)
  22      =3  #define be16toh(x) (x)
  23      =3  #define be32toh(x) (x)
  24      =3  
  25      =3  #define htole16(x) bswap16(x)
  26      =3  #define htole32(x) bswap32(x)
  27      =3  #define le16toh(x) bswap16(x)
  28      =3  #define le32toh(x) bswap32(x)
  29      =3  
  30      =3  #elif ((defined SDCC) || (defined HI_TECH_C) || (defined __ICC8051__))
           =3 
           =3 #define htobe16(x) bswap16(x)
           =3 #define htobe32(x) bswap32(x)
           =3 #define be16toh(x) bswap16(x)
           =3 #define be32toh(x) bswap32(x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #else
           =3 
           =3 #define htobe16(x) (x)
           =3 #define htobe32(x) (x)
           =3 #define be16toh(x) (x)
           =3 #define be32toh(x) (x)
           =3 
           =3 #define htole16(x) (x)
           =3 #define htole32(x) (x)
           =3 #define le16toh(x) (x)
           =3 #define le32toh(x) (x)
           =3 
           =3 #endif  // Compiler Definitions
  55      =3  
  56      =3  #endif  // __ENDIAN_H__
 133      =2  #include "si_toolchain.h"
   1      =3  /******************************************************************************
   2      =3   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =3   *
   4      =3   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =3   *****************************************************************************/
   6      =3  
   7      =3  #ifndef __SI_TOOLCHAIN_H__
   8      =3  #define __SI_TOOLCHAIN_H__
   9      =3  
  10      =3  #include <stdint.h>
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 6   

   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
  11      =3  #include <stdbool.h>
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 7   

           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
  12      =3  
  13      =3  /**************************************************************************//**
  14      =3   *
  15      =3   * @addtogroup toolchain_group Toolchain Abstraction
  16      =3   *
  17      =3   * @brief Macros for toolchain abstraction.
  18      =3   *
  19      =3   * # Introduction #
  20      =3   *
  21      =3   * This header file contains macros that are used to provide an abstraction
  22      =3   * for toolchain use in source code.  The 8051 compiler requires C-language
  23      =3   * extensions in order to fully use features of the 8051 architecture.  All
  24      =3   * compilers for 8051 implement a set of extensions but use different names
  25      =3   * and ways of implementing those extensions.  This header file provides
  26      =3   * macros that are defined for each supported toolchain and can be used in
  27      =3   * the source code.  This allows the source code to use 8051 extensions and
  28      =3   * remain independent of which toolchain is used for compilation.
  29      =3   *
  30      =3   * ## Variable and Pointer Declarations ##
  31      =3   *
  32      =3   * It is often useful to specify the memory area (or segment) of a variable,
  33      =3   * pointer, or pointer target.  For example, you may wish to place all
  34      =3   * variables in XDATA by default, but for variables used in time-sensitive
  35      =3   * code you use DATA for efficient access.  In this case you declare the
  36      =3   * XDATA variable in the normal C way, but declare the variables to be located
  37      =3   * in the DATA segment using @ref SI_SEGMENT_VARIABLE.
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 8   

  38      =3   *
  39      =3   * Pointers are more complicated because there are two memory spaces
  40      =3   * associated with a pointer, the pointer target, and the pointer variable
  41      =3   * itself.  When using default memory segment for the pointer location and
  42      =3   * target, then no special macro is needed.  But if you wish to specify the
  43      =3   * pointer variable location, or target memory segment, then you can use one
  44      =3   * of the following macros to do this in a toolchain-independent way.
  45      =3   *
  46      =3   * |Pointer segment|Target segment|Macro                                   |
  47      =3   * |---------------|--------------|----------------------------------------|
  48      =3   * |default        |generic       |None                                    |
  49      =3   * |default        |specific      |@ref SI_VARIABLE_SEGMENT_POINTER        |
  50      =3   * |specific       |generic       |@ref SI_SEGMENT_POINTER                 |
  51      =3   * |specific       |specific      |@ref SI_SEGMENT_VARIABLE_SEGMENT_POINTER|
  52      =3   *
  53      =3   * ## Prior Toolchain Abstraction Header File ##
  54      =3   *
  55      =3   * This file supercedes an earlier header file named `compiler_defs.h`.  We
  56      =3   * are deprecating the use of compiler_defs.h, however it will remain for
  57      =3   * backwards compatibility.  This file was created to normalize macro names,
  58      =3   * remove unused macros, and to provide documentation.
  59      =3   *
  60      =3   * ## Supported Toolchains ##
  61      =3   *
  62      =3   * - Keil/ARM C51
  63      =3   *
  64      =3   * @{
  65      =3   *
  66      =3   *****************************************************************************/
  67      =3  
  68      =3  // Make sure there is a NULL defined if the toolchain does not provide it.
  69      =3  #ifndef NULL
  70      =3  #define NULL ((void *)0)
  71      =3  #endif
  72      =3  
  73      =3  // -------------------------------
  74      =3  // Keil/ARM C51
  75      =3  //
  76      =3  #if defined(__C51__)
  77      =3  
  78      =3  /// Used with pointers, declares a generic pointer.  Generic pointers
  79      =3  /// work with any memory space but are inefficient.
  80      =3  #define SI_SEG_GENERIC
  81      =3  
  82      =3  /// Declares a variable to be located in 8051 DATA space.
  83      =3  #define SI_SEG_DATA data
  84      =3  
  85      =3  /// Declares a variable to be located in 8051 IDATA space.
  86      =3  #define SI_SEG_IDATA idata
  87      =3  
  88      =3  /// Declares a variable to be located in 8051 XDATA space.
  89      =3  #define SI_SEG_XDATA xdata
  90      =3  
  91      =3  /// Declares a variable to be located in 8051 PDATA space.
  92      =3  #define SI_SEG_PDATA pdata
  93      =3  
  94      =3  /// Declares a variable to be located in 8051 BDATA (bit-addressable) space.
  95      =3  #define SI_SEG_BDATA bdata
  96      =3  
  97      =3  /// Declares a variable to be located in 8051 CODE space.
  98      =3  #define SI_SEG_CODE code
  99      =3  
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 9   

 100      =3  /**************************************************************************//**
 101      =3   * Declares a bit variable in a bit-addressable memory space.
 102      =3   *
 103      =3   * @param name The name of the bit variable.
 104      =3   *****************************************************************************/
 105      =3  #define SI_BIT(name) bit name
 106      =3  
 107      =3  /**************************************************************************//**
 108      =3   * Declares a bit variable in a bit-addressable SFR or memory space.
 109      =3   *
 110      =3   * @param name The name of the bit variable.
 111      =3   * @param address The address of the byte containing the bit.
 112      =3   * @param bitnum The bit number (0-7) within the byte.
 113      =3   *
 114      =3   * This cannot be used to make any arbitrary SFR or variable into
 115      =3   * a bit variable.  The underlying memory must support bit-addressability.
 116      =3   *****************************************************************************/
 117      =3  #define SI_SBIT(name, address, bitnum) sbit name = address^bitnum
 118      =3  
 119      =3  /**************************************************************************//**
 120      =3   * Declares an 8-bit special function register (SFR) variable.
 121      =3   *
 122      =3   * @param name The name of the SFR variable.
 123      =3   * @param address The address of the SFR.
 124      =3   *
 125      =3   * This creates a C variable (8-bit) that maps to a physical special function
 126      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 127      =3   * location into an SFR.  The _address_ must map to a real SFR in the memory
 128      =3   * map.
 129      =3   *****************************************************************************/
 130      =3  #define SI_SFR(name, address) sfr name = address
 131      =3  
 132      =3  /**************************************************************************//**
 133      =3   * Declares a 16-bit special function register (SFR) variable.
 134      =3   *
 135      =3   * @param name The name of the SFR variable.
 136      =3   * @param address The address of the 16-bit SFR.
 137      =3   *
 138      =3   * This creates a C variable (16-bit) that maps to a physical special function
 139      =3   * register of the 8051.  This cannot be used to make any arbitrary memory
 140      =3   * location into an SFR.  The _address_ must map to a real 16-bit SFR in the
 141      =3   * memory map.
 142      =3   *****************************************************************************/
 143      =3  #define SI_SFR16(name, address) sfr16 name = address
 144      =3  
 145      =3  #ifndef __SLS_IDE__
 146      =3  /**************************************************************************//**
 147      =3   * Define an interrupt handler function for an interrupt vector.
 148      =3   *
 149      =3   * @param name The name of the interrupt handler function.
 150      =3   * @param vector The interrupt vector number.
 151      =3   *
 152      =3   * This macro defines a function to be an interrupt handler.  The _vector_
 153      =3   * parameter is the 8051 interrupt vector number, not the address.  This
 154      =3   * will cause the compiler to treat the function as the interrupt handler
 155      =3   * and generate the appropriate prolog/epilog code.
 156      =3   *
 157      =3   * @note This macro is used to define the function implementation.  To declare
 158      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO.
 159      =3   *****************************************************************************/
 160      =3  #define SI_INTERRUPT(name, vector) void name (void) interrupt vector
 161      =3  
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 10  

 162      =3  /**************************************************************************//**
 163      =3   * Define an interrupt handler function using a specific register bank.
 164      =3   *
 165      =3   * @param name The name of the interrupt handler function.
 166      =3   * @param vector The interrupt vector number.
 167      =3   * @param regnum The register bank number (0-3).
 168      =3   *
 169      =3   * This macro defines a function to be an interrupt handler, using a specific
 170      =3   * register bank for the interrupt code.  The _vector_ parameter is the 8051
 171      =3   * interrupt vector number, not the address.  The _regnum_ parameter is the
 172      =3   * register bank number (0-3) that will be used as general purpose registers
 173      =3   * for the instructions in the compiled code.  Using dedicated register banks
 174      =3   * for interrupt handlers allows the prolog code to just switch banks instead
 175      =3   * of saving and restoring all the general purpose registers.  This can make
 176      =3   * interrupt entry/exit faster but requires dedicating a register bank for
 177      =3   * the interrupt handler.
 178      =3   *
 179      =3   * @note This macro is used to define the function implementation.  To declare
 180      =3   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO_USING.
 181      =3   *****************************************************************************/
 182      =3  #define SI_INTERRUPT_USING(name, vector, regnum)                             \
 183      =3               void name (void) interrupt vector using regnum
 184      =3  
 185      =3  /**************************************************************************//**
 186      =3   * Declare an interrupt handler prototype for an interrupt vector.
 187      =3   *
 188      =3   * @param name The name of the interrupt handler function.
 189      =3   * @param vector The interrupt vector number.
 190      =3   *
 191      =3   * This macro declares a function prototype for an interrupt handler.  The
 192      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 193      =3   * Declaring the function prototype this way will cause the compiler to
 194      =3   * recognize that the function is an interrupt handler and not a normal C
 195      =3   * function.
 196      =3   *
 197      =3   * @note This macro is used to declare a prototype for the interrupt function.
 198      =3   * To define the interrupt function implementation, use @ref SI_INTERRUPT.
 199      =3   *****************************************************************************/
 200      =3  #define SI_INTERRUPT_PROTO(name, vector) void name (void)
 201      =3  
 202      =3  /**************************************************************************//**
 203      =3   * Declare an interrupt handler prototype using a specific register bank.
 204      =3   *
 205      =3   * @param name The name of the interrupt handler function.
 206      =3   * @param vector The interrupt vector number.
 207      =3   * @param regnum The register bank number (0-3).
 208      =3   *
 209      =3   * This macro declares a function prototype for an interrupt handler, for a
 210      =3   * function that uses a specific register bank for the interrupt code.  The
 211      =3   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 212      =3   * The _regnum_ parameter is the register bank number (0-3) that will be used
 213      =3   * as general purpose registers in the function.  Declaring the function
 214      =3   * prototype this way will cause the compiler to recognize that the function
 215      =3   * is an interrupt handler and is not a normal C function.
 216      =3   *
 217      =3   * @note This macro is used to declare a prototype for the interrupt function.
 218      =3   * To define the interrupt function implementation,
 219      =3   * use @ref SI_INTERRUPT_USING.
 220      =3   *****************************************************************************/
 221      =3  #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 222      =3  
 223      =3  /**************************************************************************//**
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 11  

 224      =3   * Define a function to be reentrant (store local variables on the stack).
 225      =3   *
 226      =3   * @param name The name of the function.
 227      =3   * @param return_type The data type of the function return value
 228      =3   * (void, int, etc).
 229      =3   * @param parameter One C function parameter (or "void") (type and name).
 230      =3   *
 231      =3   * This macro defines a function to be reentrant.
 232      =3   *
 233      =3   * You must specify the _return_type_ which is the type of the function.  It
 234      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 235      =3   * is the list of function parameters.  It can be `void` or else it must be
 236      =3   * a parameter data type and name.  It can also be multiple parameters but
 237      =3   * they must be enclosed in parentheses and separated by commas.
 238      =3   *
 239      =3   * __Example__
 240      =3   *
 241      =3   * ~~~~~~~~.c
 242      =3   * // The following is used to implement a function with the following
 243      =3   * // signature...
 244      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 245      =3   *
 246      =3   * SI_REENTRANT_FUNCTION(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2))
 247      =3   * {
 248      =3   *   // Function implementation body
 249      =3   * }
 250      =3   * ~~~~~~~~
 251      =3   *
 252      =3   * @note This macro is used to define the function implementation.  To declare
 253      =3   * the function prototype, use @ref SI_REENTRANT_FUNCTION_PROTO.
 254      =3   *****************************************************************************/
 255      =3  #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
 256      =3    return_type name parameter reentrant
 257      =3  
 258      =3  /**************************************************************************//**
 259      =3   * Declare a function to be reentrant (store local variables on the stack).
 260      =3   *
 261      =3   * @param name The name of the function.
 262      =3   * @param return_type The data type of the function return value
 263      =3   * (void, int, etc).
 264      =3   * @param parameter One C function parameter (or "void") (type and name).
 265      =3   *
 266      =3   * This macro declares a function prototype for a C function that is reentrant.
 267      =3   * See the documentation for @ref SI_REENTRANT_FUNCTION for an explanation of
 268      =3   * the macro arguments.  This is an advanced feature.
 269      =3   *
 270      =3   * @note This macro is used to declare a prototype for the function.  To
 271      =3   * define the function implementation, use @ref SI_REENTRANT_FUNCTION.
 272      =3   *****************************************************************************/
 273      =3  #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
 274      =3    return_type name parameter reentrant
 275      =3                 
 276      =3  /**************************************************************************//**
 277      =3   * Define a function to use a specific register bank.
 278      =3   *
 279      =3   * @param name The name of the function.
 280      =3   * @param return_value The data type of the function return value
 281      =3   * (void, int, etc).
 282      =3   * @param parameter One C function parameter (or "void") (type and name).
 283      =3   * @param regnum The register bank number (0-3).
 284      =3   *
 285      =3   * This macro defines a function that uses a specific register bank.  The
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 12  

 286      =3   * _regnum_ parameter is the register bank number (0-3) that will be used as
 287      =3   * general purpose registers for the instructions in the compiled function
 288      =3   * code.  Using dedicated register banks for a function can reduce the amount
 289      =3   * of registers saving and restoring needed on entry and exit to the
 290      =3   * function.  However, this is an advanced feature and you should not use it
 291      =3   * unless you fully understand how and when to use register banking.
 292      =3   *
 293      =3   * You must specify the _return_value_ which is the type of the function.  It
 294      =3   * can be `void` or any other C type or typedef.  The _parameters_ argument
 295      =3   * is the list of function parameters.  It can be `void` or else it must be
 296      =3   * a parameter data type and name.  It can also be multiple parameters but
 297      =3   * they must be enclosed in parentheses and separated by commas.
 298      =3   *
 299      =3   * __Example__
 300      =3   *
 301      =3   * ~~~~~~~~.c
 302      =3   * // The following is used to implement a function with the following
 303      =3   * // signature, and that uses register bank 3 ...
 304      =3   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 305      =3   *
 306      =3   * SI_FUNCTION_USING(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2), 3)
 307      =3   * {
 308      =3   *   // Function implementation body
 309      =3   * }
 310      =3   * ~~~~~~~~
 311      =3   *
 312      =3   * @note This macro is used to define the function implementation.  To declare
 313      =3   * the function prototype, use @ref SI_FUNCTION_PROTO_USING.
 314      =3   *****************************************************************************/
 315      =3  #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
 316      =3               return_value name parameter using regnum
 317      =3  
 318      =3  /**************************************************************************//**
 319      =3   * Declare a function that uses a specific register bank.
 320      =3   *
 321      =3   * @param name The name of the function.
 322      =3   * @param return_value The data type of the function return value
 323      =3   * (void, int, etc).
 324      =3   * @param parameter One C function parameter (or "void") (type and name).
 325      =3   * @param regnum The register bank number (0-3).
 326      =3   *
 327      =3   * This macro declares a function prototype for a C function that uses a
 328      =3   * specific register its working registers.  See the documentation for
 329      =3   * @ref SI_FUNCTION_USING for an explanation of the macro arguments.  This is
 330      =3   * an advanced feature.
 331      =3   *
 332      =3   * @note This macro is used to declare a prototype for the function.  To
 333      =3   * define the function implementation, use @ref SI_FUNCTION_USING.
 334      =3   *****************************************************************************/
 335      =3  #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
 336      =3               return_value name parameter
 337      =3  
 338      =3  /**************************************************************************//**
 339      =3   * Declare a variable to be located in a specific memory segment.
 340      =3   *
 341      =3   * @param name The variable name.
 342      =3   * @param vartype The variable data type.* @param memseg The memory segment to use for the variable.
 343      =3   *
 344      =3   * This macro declares a variable to be located in a specific memory area
 345      =3   * (or segment) of the 8051 memory space.  It is only necessary to use this
 346      =3   * macro if you want to force the variable into a specific memory space instead
 347      =3   * of the default memory space used by the compiler.  The segment can be
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 13  

 348      =3   * one of the following:
 349      =3   *
 350      =3   * - @ref SI_SEG_DATA
 351      =3   * - @ref SI_SEG_IDATA
 352      =3   * - @ref SI_SEG_BDATA
 353      =3   * - @ref SI_SEG_PDATA
 354      =3   * - @ref SI_SEG_XDATA
 355      =3   * - @ref SI_SEG_CODE
 356      =3   *
 357      =3   * __Example__
 358      =3   *
 359      =3   * ~~~~~~~~.c
 360      =3   * // The following macro can be used to create a variable located in
 361      =3   * // XDATA with the following signature:
 362      =3   * uint8_t myVar;
 363      =3   *
 364      =3   * SI_SEGMENT_VARIABLE(myVar, uint8_t, SEG_XDATA);
 365      =3   * ~~~~~~~~
 366      =3   *****************************************************************************/
 367      =3  #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype memseg name
 368      =3  
 369      =3  /**************************************************************************//**
 370      =3   * Declare a memory segment specific pointer variable.
 371      =3   *
 372      =3   * @param name The pointer variable name.
 373      =3   * @param vartype The pointer data type.
 374      =3   * @param targseg The target memory segment for the pointer.
 375      =3   *
 376      =3   * This macro declares a pointer that points at a specific memory area
 377      =3   * (or segment).  The memory segment of the pointer variable itself is not
 378      =3   * specified and the default is used.  The segment can be one of the following:
 379      =3   *
 380      =3   * - @ref SI_SEG_DATA
 381      =3   * - @ref SI_SEG_IDATA
 382      =3   * - @ref SI_SEG_BDATA
 383      =3   * - @ref SI_SEG_PDATA
 384      =3   * - @ref SI_SEG_XDATA
 385      =3   * - @ref SI_SEG_CODE
 386      =3   *
 387      =3   * __Example__
 388      =3   *
 389      =3   * ~~~~~~~~.c
 390      =3   * // The following macro can be used to create a pointer that points to
 391      =3   * // a location in XDATA with the following signature:
 392      =3   * uint8_t *pVar; // where pVar is pointing at XDATA
 393      =3   *
 394      =3   * SI_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA);
 395      =3   * ~~~~~~~~
 396      =3   *****************************************************************************/
 397      =3  #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
 398      =3               vartype targseg * name
 399      =3  
 400      =3  /**************************************************************************//**
 401      =3   * Declare a memory segment specific pointer variable, in a specific segment.
 402      =3   *
 403      =3   * @param name The pointer variable name.
 404      =3   * @param vartype The pointer data type.
 405      =3   * @param targseg The target memory segment for the pointer.
 406      =3   * @param memseg The memory segment to use for the pointer variable.
 407      =3   *
 408      =3   * This macro declares a pointer that points at a specific memory area
 409      =3   * (or segment).  The pointer variable itself is also located in a specified
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 14  

 410      =3   * memory segment by _memseg_.  The arguments _targseg_ and _memseg_ can be
 411      =3   * one of the following:
 412      =3   *
 413      =3   * - @ref SI_SEG_DATA
 414      =3   * - @ref SI_SEG_IDATA
 415      =3   * - @ref SI_SEG_BDATA
 416      =3   * - @ref SI_SEG_PDATA
 417      =3   * - @ref SI_SEG_XDATA
 418      =3   * - @ref SI_SEG_CODE
 419      =3   *
 420      =3   * __Example__
 421      =3   *
 422      =3   * ~~~~~~~~.c
 423      =3   * // The following macro can be used to create a pointer that points to
 424      =3   * // a location in XDATA while the pointer itself is located in DATA, with
 425      =3   * // the following signature:
 426      =3   * uint8_t *pVar; // where pVar is located in DATA and is pointing at XDATA
 427      =3   *
 428      =3   * SI_SEGMENT_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA, SEG_DATA);
 429      =3   * ~~~~~~~~
 430      =3   *****************************************************************************/
 431      =3  #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
 432      =3               vartype targseg * memseg name
 433      =3  
 434      =3  /**************************************************************************//**
 435      =3   * Declare a generic pointer variable that is located in a specific segment.
 436      =3   *
 437      =3   * @param name The pointer variable name.
 438      =3   * @param vartype The pointer data type.
 439      =3   * @param memseg The memory segment to use for the pointer variable.
 440      =3   *
 441      =3   * This macro declares a pointer that is a generic pointer.  This means it can
 442      =3   * point at any kind of memory location.  However the pointer variable itself
 443      =3   * is located in a specific memory segment by _memseg_, which can be one of
 444      =3   * the following:
 445      =3   *
 446      =3   * - @ref SI_SEG_DATA
 447      =3   * - @ref SI_SEG_IDATA
 448      =3   * - @ref SI_SEG_BDATA
 449      =3   * - @ref SI_SEG_PDATA
 450      =3   * - @ref SI_SEG_XDATA
 451      =3   * - @ref SI_SEG_CODE
 452      =3   *
 453      =3   * __Example__
 454      =3   *
 455      =3   * ~~~~~~~~.c
 456      =3   * // The following macro can be used to create a generic pointer that
 457      =3   * // is located in DATA and points at any memory type, with the
 458      =3   * // following signature:
 459      =3   * uint8_t *pVar; // where pVar is located in DATA and is a generic pointer
 460      =3   *
 461      =3   * SI_SEGMENT_POINTER(pVar, uint8_t, SEG_DATA);
 462      =3   * ~~~~~~~~
 463      =3   *****************************************************************************/
 464      =3  #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * memseg name
 465      =3  
 466      =3  /**************************************************************************//**
 467      =3   * Declare an uninitialized variable that is located at a specific address.
 468      =3   *
 469      =3   * @param name The variable name.
 470      =3   * @param vartype The variable data type.
 471      =3   * @param memseg The memory segment to use for the variable.
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 15  

 472      =3   * @param address The memory address of the variable.
 473      =3   *
 474      =3   * This macro allows declaring a variable that can be placed at a specific
 475      =3   * location in memory.  This can only be used for variables that do not need
 476      =3   * initializers.  The _address_ is the memory address within the specified
 477      =3   * segment.  The memory segment, _memseg_, can be one of the following:
 478      =3   *
 479      =3   * - @ref SI_SEG_DATA
 480      =3   * - @ref SI_SEG_IDATA
 481      =3   * - @ref SI_SEG_BDATA
 482      =3   * - @ref SI_SEG_PDATA
 483      =3   * - @ref SI_SEG_XDATA
 484      =3   * - @ref SI_SEG_CODE
 485      =3   *
 486      =3   * __Example__
 487      =3   *
 488      =3   * ~~~~~~~~.c
 489      =3   * // The following declares a variable located at 0x4000 in XDATA with
 490      =3   * // the following signature:
 491      =3   * uint8_t myMemVar;
 492      =3   *
 493      =3   * SI_LOCATED_VARIABLE_NO_INIT(myMemVar, uint8_t, SEG_DATA, 0x4000);
 494      =3   * ~~~~~~~~
 495      =3   *****************************************************************************/
 496      =3  #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
 497      =3               vartype memseg name _at_ address
 498      =3  
 499      =3  
 500      =3  #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 #define SI_REENTRANT_FUNCTION(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_value, parameter, regnum) return_value name (parameter)
           =3 
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 #endif // __SLS_IDE__
 519      =3  
 520      =3  // The following are used for byte ordering when referring to individual
 521      =3  // bytes within a SI_UU32_t.  B0 is the least significant byte.
 522      =3  #define B0 3 ///< Least significant byte of a 4 byte word
 523      =3  #define B1 2 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
 524      =3  #define B2 1 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
 525      =3  #define B3 0 ///< Most significant byte of a 4-byte word
 526      =3  
 527      =3  #define LSB 1 ///< Index to least significant bit of a 2 byte word
 528      =3  #define MSB 0 ///< Index to most significant bit of a 2 byte word
 529      =3  
 530      =3  /// A union type to make it easier to access individual bytes of a 16-bit
 531      =3  /// word, and to use as signed or unsigned type.
 532      =3  typedef union SI_UU16
 533      =3  {
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 16  

 534      =3    uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
 535      =3    int16_t s16;    ///< The two byte value as a 16-bit signed integer.
 536      =3    uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
 537      =3    int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
 538      =3  } SI_UU16_t;
 539      =3  
 540      =3  /// A union type to make it easier to access individual bytes within a
 541      =3  /// 32-bit word, or to access it as variations of 16-bit words, or to
 542      =3  /// use as signed or unsigned type.
 543      =3  typedef union SI_UU32
 544      =3  {
 545      =3    uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
 546      =3    int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
 547      =3    SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
 548      =3    uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
 549      =3    int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
 550      =3    uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
 551      =3    int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
 552      =3  } SI_UU32_t;
 553      =3  
 554      =3  // Generic pointer memory segment constants.
 555      =3  #define SI_GPTR                   ///< Generic pointer indeterminate type.
 556      =3  #define SI_GPTR_MTYPE_DATA  0x00  ///< Generic pointer for DATA segment.
 557      =3  #define SI_GPTR_MTYPE_IDATA 0x00  ///< Generic pointer for IDATA segment.
 558      =3  #define SI_GPTR_MTYPE_BDATA 0x00  ///< Generic pointer for BDATA segment.
 559      =3  #define SI_GPTR_MTYPE_PDATA 0xFE  ///< Generic pointer for PDATA segment.
 560      =3  #define SI_GPTR_MTYPE_XDATA 0x01  ///< Generic pointer for XDATA segment.
 561      =3  #define SI_GPTR_MTYPE_CODE  0xFF  ///< Generic pointer for CODE segment.
 562      =3  
 563      =3  /// Generic pointer structure containing the type and address.
 564      =3  typedef struct
 565      =3  {
 566      =3    uint8_t memtype;    ///< The type of memory of the generic pointer.
 567      =3    SI_UU16_t address;  ///< The address of the generic pointer.
 568      =3  } GPTR_t;
 569      =3  
 570      =3  /// A union type to allow access to the fields of a generic pointer.
 571      =3  /// A generic pointer has a field indicating the type of memory and an
 572      =3  /// address within the memory.
 573      =3  typedef union SI_GEN_PTR
 574      =3  {
 575      =3    uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
 576      =3    GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
 577      =3  } SI_GEN_PTR_t;
 578      =3  
 579      =3  // Declaration of Keil intrinisc
 580      =3  extern void _nop_(void);
 581      =3  /// Macro to insert a no-operation (NOP) instruction.
 582      =3  #define NOP() _nop_()
 583      =3  
 584      =3  // -------------------------------
 585      =3  // GCC for ARM Cortex-M
 586      =3  // Provides support for code that can be compiled for 8 or 32-bit
 587      =3  //
 588      =3  #elif defined (__GNUC__)
           =3 #if defined(__ARMEL__) && ((__ARMEL__ == 1) && ((__ARM_ARCH == 6) || (__ARM_ARCH == 7)))
           =3 
           =3 // these ignore any memory segment directives
           =3 #define SI_SEG_GENERIC
           =3 #define SI_SEG_DATA
           =3 #define SI_SEG_IDATA
           =3 #define SI_SEG_XDATA
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 17  

           =3 #define SI_SEG_PDATA
           =3 #define SI_SEG_BDATA
           =3 #define SI_SEG_CODE
           =3 
           =3 // the following create a variable of the specified name but ignore the
           =3 // address and bit number.  If the using-code cares about the actual
           =3 // address or bit number, this probably will break it
           =3 #define SI_SBIT(name, address, bitnum) uint8_t name
           =3 #define SI_SFR(name, address) uint8_t name
           =3 #define SI_SFR16(name, address) uint16_t name
           =3 
           =3 // the following create function and variable names of the specified types
           =3 // but the 8051-specific aspects (like memory segment) are ignored
           =3 #define SI_INTERRUPT(name, vector) void name (void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name (parameter)
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name (parameter)
           =3 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =3              vartype * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =3              vartype * name
           =3 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * name
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =3              vartype name
           =3 
           =3 #define B0 0
           =3 #define B1 1
           =3 #define B2 2
           =3 #define B3 3
           =3 #define LSB 0
           =3 #define MSB 1
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;
           =3   int16_t s16;
           =3   uint8_t u8[2];
           =3   int8_t s8[2];
           =3 } SI_UU16_t;
           =3 
           =3 typedef union SI_UU32
           =3 {
           =3   uint32_t u32;
           =3   int32_t s32;
           =3   SI_UU16_t uu16[2];
           =3   uint16_t u16[2];
           =3   int16_t s16[2];
           =3   uint8_t u8[4];
           =3   int8_t s8[4];
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer stuff is left out because if you are accessing
           =3 // generic pointer fields then it will need to be rewritten for 32-bit
           =3 
           =3 // __NOP should be declared in cmsis header core_cmInstr.h
           =3 extern void __NOP(void);
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __NOP()
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 18  

           =3 
           =3 #else // ARM_ARCH 6 | 7
           =3 #error unsupported ARM arch
           =3 #endif
           =3 
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <intrinsics.h>
           =3 
           =3 #define SI_BIT(name)              __no_init bool __bit name
           =3 #define SI_SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 #define SI_SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 #define SI_SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 
           =3 #define SI_SEG_GENERIC __generic
           =3 #define SI_SEG_FAR  __xdata
           =3 #define SI_SEG_DATA __data
           =3 #define SI_SEG_NEAR __data
           =3 #define SI_SEG_IDATA __idata
           =3 #define SI_SEG_XDATA __xdata
           =3 #define SI_SEG_PDATA __pdata
           =3 #define SI_SEG_CODE  __code
           =3 #define SI_SEG_BDATA __bdata
           =3 
           =3 #define _PPTOSTR_(x) #x
           =3 #define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 #define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
           =3 #define SI_INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 #define SI_INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __in
             -terrupt void name(void)
           =3 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 #if (__DATA_MODEL__ == 0) /* TINY */ || \
           =3     (__DATA_MODEL__ == 1) /* SMALL */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __idata_reentrant return_type name parameter
           =3 #elif (__DATA_MODEL__ == 2) /* LARGE */ || \
           =3       (__DATA_MODEL__ == 3) /* GENERIC */ || \
           =3       (__DATA_MODEL__ == 4) /* FAR */
           =3 #define SI_REENTRANT_FUNCTION(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name parameter
           =3 #define SI_REENTRANT_FUNCTION_PROTO(name, return_type, parameter) \
           =3   __xdata_reentrant return_type name (parameter)
           =3 #else
           =3 #error "Illegal memory model setting."
           =3 #endif
           =3 
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =3              return_value name parameter
           =3 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =3              return_value name parameter
           =3 
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 19  

           =3 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment)  vartype locsegment name
           =3 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * 
             -locsegment name
           =3                
           =3 #define SI_SEGMENT_POINTER(name, vartype, ptrseg) vartype __generic * ptrseg name
           =3 
           =3 #define SI_LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ add
             -r
           =3 
           =3 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment __no_init vartype name @ a
             -ddr
           =3 
           =3 // The following are used for byte ordering when referring to individual
           =3 // bytes within a SI_UU32_t.  B0 is the least significant byte.
           =3 #define B0 0 ///< Least significant byte of a 4 byte word
           =3 #define B1 1 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
           =3 #define B2 2 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
           =3 #define B3 3 ///< Most significant byte of a 4-byte word
           =3 
           =3 #define LSB 0 ///< Index to least significant bit of a 2 byte word
           =3 #define MSB 1 ///< Index to most significant bit of a 2 byte word
           =3 
           =3 /// A union type to make it easier to access individual bytes of a 16-bit
           =3 /// word, and to use as signed or unsigned type.
           =3 typedef union SI_UU16
           =3 {
           =3   uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
           =3   int16_t s16;    ///< The two byte value as a 16-bit signed integer.
           =3   uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
           =3   int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
           =3 } SI_UU16_t;
           =3 
           =3 /// A union type to make it easier to access individual bytes within a
           =3 /// 32-bit word, or to access it as variations of 16-bit words, or to
           =3 /// use as signed or unsigned type.
           =3 typedef union SI_UU32
           =3 {
           =3   uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
           =3   int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
           =3   SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
           =3   uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
           =3   int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
           =3   uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
           =3   int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
           =3 } SI_UU32_t;
           =3 
           =3 // Generic pointer memory segment constants.
           =3 #define SI_GPTR                   ///< Generic pointer indeterminate type.
           =3 #define SI_GPTR_MTYPE_DATA  0x01  ///< Generic pointer for DATA segment.
           =3 #define SI_GPTR_MTYPE_IDATA 0x01  ///< Generic pointer for IDATA segment.
           =3 #define SI_GPTR_MTYPE_BDATA 0x01  ///< Generic pointer for BDATA segment.
           =3 #define SI_GPTR_MTYPE_PDATA 0x00  ///< Generic pointer for PDATA segment.
           =3 #define SI_GPTR_MTYPE_XDATA 0x00  ///< Generic pointer for XDATA segment.
           =3 #define SI_GPTR_MTYPE_CODE  0x80  ///< Generic pointer for CODE segment.
           =3 
           =3 /// Generic pointer structure containing the type and address.
           =3 typedef struct
           =3 {
           =3   SI_UU16_t address;  ///< The address of the generic pointer.
           =3   uint8_t memtype;    ///< The type of memory of the generic pointer.  
           =3 } GPTR_t;
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 20  

           =3 
           =3 /// A union type to allow access to the fields of a generic pointer.
           =3 /// A generic pointer has a field indicating the type of memory and an
           =3 /// address within the memory.
           =3 typedef union SI_GEN_PTR
           =3 {
           =3   uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
           =3   GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
           =3 } SI_GEN_PTR_t;
           =3 
           =3 /// Macro to insert a no-operation (NOP) instruction.
           =3 #define NOP() __no_operation()
           =3 
           =3 #else // unknown toolchain
           =3 #error Unrecognized toolchain in si_toolchain.h
           =3 #endif
 794      =3  
 795      =3  /** @} */
 796      =3  
 797      =3  #endif
 134      =2  #include "compiler_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // compiler_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Portions of this file are copyright Maarten Brock
   5      =3  // http://sdcc.sourceforge.net
   6      =3  // Portions of this file are Copyright 2014 Silicon Laboratories, Inc.
   7      =3  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   8      =3  //
   9      =3  // GNU LGPL boilerplate:
  10      =3  /** This library is free software; you can redistribute it and/or
  11      =3    * modify it under the terms of the GNU Lesser General Public
  12      =3    * License as published by the Free Software Foundation; either
  13      =3    * version 2.1 of the License, or (at your option) any later version.
  14      =3    *
  15      =3    * This library is distributed in the hope that it will be useful,
  16      =3    * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17      =3    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  18      =3    * Lesser General Public License for more details.
  19      =3    *
  20      =3    * You should have received a copy of the GNU Lesser General Public
  21      =3    * License along with this library; if not, write to the Free Software
  22      =3    * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  23      =3    *
  24      =3    * In other words, you are welcome to use, share and improve this program.
  25      =3    * You are forbidden to forbid anyone else to use, share and improve
  26      =3    * what you give them. Help stamp out software-hoarding!
  27      =3  **/
  28      =3  // Program Description:
  29      =3  //
  30      =3  // **Important Note**: This header file should be included before including
  31      =3  // a device-specific header file such as C8051F300_defs.h.
  32      =3  //
  33      =3  // Macro definitions to accomodate 8051 compiler differences in specifying
  34      =3  // special function registers and other 8051-specific features such as NOP
  35      =3  // generation, and locating variables in memory-specific segments.  The
  36      =3  // compilers are identified by their unique predefined macros. See also:
  37      =3  // http://predef.sourceforge.net/precomp.html
  38      =3  //
  39      =3  // SBIT and SFR define special bit and special function registers at the given
  40      =3  // address. SFR16 and SFR32 define sfr combinations at adjacent addresses in
  41      =3  // little-endian format. SFR16E and SFR32E define sfr combinations without
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 21  

  42      =3  // prerequisite byte order or adjacency. None of these multi-byte sfr
  43      =3  // combinations will guarantee the order in which they are accessed when read
  44      =3  // or written.
  45      =3  //
  46      =3  // SFR16X and SFR32X for 16 bit and 32 bit xdata registers are not defined
  47      =3  // to avoid portability issues because of compiler endianness.
  48      =3  //
  49      =3  // Example:
  50      =3  // // my_mcu.c: main 'c' file for my mcu
  51      =3  // #include <compiler_defs.h>  // this file
  52      =3  // #include <C8051xxxx_defs.h> // SFR definitions for specific MCU target
  53      =3  //
  54      =3  // SBIT  (P0_1, 0x80, 1);      // Port 0 pin 1
  55      =3  // SFR   (P0, 0x80);           // Port 0
  56      =3  // SFRX  (CPUCS, 0xE600);      // Cypress FX2 Control and Status register in
  57      =3  //                             // xdata memory at 0xE600
  58      =3  // SFR16 (TMR2, 0xCC);         // Timer 2, lsb at 0xCC, msb at 0xCD
  59      =3  // SFR16E(TMR0, 0x8C8A);       // Timer 0, lsb at 0x8A, msb at 0x8C
  60      =3  // SFR32 (MAC0ACC, 0x93);      // SiLabs C8051F120 32 bits MAC0 Accumulator,
  61      =3  //                             // lsb at 0x93, msb at 0x96
  62      =3  // SFR32E(SUMR, 0xE5E4E3E2);   // TI MSC1210 SUMR 32 bits Summation register,
  63      =3  //                             // lsb at 0xE2, msb at 0xE5
  64      =3  //
  65      =3  // Target:         C8051xxxx
  66      =3  // Tool chain:     Generic
  67      =3  // Command Line:   None
  68      =3  // 
  69      =3  // Release 2.7 - 25 JUN 2014 (JM)
  70      =3  //    -Added SI_GENERIC_PTR struct for accessing generic pointers
  71      =3  //    -Added SI_GPTR_MTYPE_XXXX definitions for determining the memory type
  72      =3  //     pointed at by a generic poitner
  73      =3  // Release 2.6 - 14 DEC 2012 (GO)
  74      =3  //        -Added define for deprecated SDCC keyword 'at'
  75      =3  // Release 2.5 - 12 SEP 2012 (TP)
  76      =3  //    -Added defines for deprecated SDCC keywords bit and code
  77      =3  // Release 2.4 - 27 AUG 2012 (TP)
  78      =3  //    -Added defines for deprecated SDCC keywords interrupt, _asm, and _endasm
  79      =3  // Release 2.3 - 27 MAY 2010 (DM)
  80      =3  //    -Removed 'LOCATED_VARIABLE' pragma from Keil because it is not supported
  81      =3  // Release 2.2 - 06 APR 2010 (ES)
  82      =3  //    -Removed 'PATHINCLUDE' pragma from Raisonance section
  83      =3  // Release 2.1 - 16 JUL 2009 (ES)
  84      =3  //    -Added SEGMENT_POINTER macro definitions for SDCC, Keil, and Raisonance
  85      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for Raisonance
  86      =3  // Release 2.0 - 19 MAY 2009 (ES)
  87      =3  //    -Added LOCATED_VARIABLE_NO_INIT macro definitions for SDCC and Keil
  88      =3  // Release 1.9 - 23 OCT 2008 (ES)
  89      =3  //    -Updated Hi-Tech INTERRUPT and INTERRUPT_USING macro definitions
  90      =3  //    -Added SFR16 macro defintion for Hi-Tech
  91      =3  // Release 1.8 - 31 JUL 2008 (ES)
  92      =3  //    -Added INTERRUPT_USING and FUNCTION_USING macro's
  93      =3  //    -Added macro's for IAR
  94      =3  //    -Corrected Union definitions for Hi-Tech and added SFR16 macro defintion
  95      =3  // Release 1.7 - 11 SEP 2007 (BW)
  96      =3  //    -Added support for Raisonance EVAL 03.03.42 and Tasking Eval 7.2r1
  97      =3  // Release 1.6 - 27 AUG 2007 (BW)
  98      =3  //    -Updated copyright notice per agreement with Maartin Brock
  99      =3  //    -Added SDCC 2.7.0 "compiler.h" bug fixes
 100      =3  //    -Added memory segment defines (SEG_XDATA, for example)
 101      =3  // Release 1.5 - 24 AUG 2007 (BW)
 102      =3  //    -Added support for NOP () macro
 103      =3  //    -Added support for Hi-Tech ver 9.01
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 22  

 104      =3  // Release 1.4 - 07 AUG 2007 (PKC)
 105      =3  //    -Removed FID and fixed formatting.
 106      =3  // Release 1.3 - 30 SEP 2007 (TP)
 107      =3  //    -Added INTERRUPT_PROTO_USING to properly support ISR context switching
 108      =3  //     under SDCC.
 109      =3  // Release 1.2 - (BW)
 110      =3  //    -Added support for U8,U16,U32,S8,S16,S32,UU16,UU32 data types
 111      =3  // Release 1.1 - (BW)
 112      =3  //    -Added support for INTERRUPT, INTERRUPT_USING, INTERRUPT_PROTO,
 113      =3  //     SEGMENT_VARIABLE, VARIABLE_SEGMENT_POINTER,
 114      =3  //     SEGMENT_VARIABLE_SEGMENT_POINTER, and LOCATED_VARIABLE
 115      =3  // Release 1.0 - 29 SEP 2006 (PKC)
 116      =3  //    -Initial revision
 117      =3  
 118      =3  //-----------------------------------------------------------------------------
 119      =3  // Header File Preprocessor Directive
 120      =3  //-----------------------------------------------------------------------------
 121      =3  
 122      =3  #ifndef COMPILER_DEFS_H
 123      =3  #define COMPILER_DEFS_H
 124      =3  
 125      =3  #include "stdbool.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDBOOL_H
           =4 #define STDBOOL_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 #ifndef _SYSTEM_BUILD
           =4   #pragma system_include
           =4 #endif
           =4 
           =4 #ifndef __cplusplus
           =4 
           =4 #define bool _Bool
           =4 #define true 1
           =4 #define false 0
           =4 
           =4 #define __bool_true_false_are_defined 1
           =4 
           =4 #endif /* !__cplusplus */
           =4 
           =4 #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 
           =4 typedef bit bool;
           =4 enum{
           =4   false = 0,
           =4   true = 1,
           =4 };
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 23  

           =4 
           =4 #endif
           =4 
           =4 #endif //STDBOOL_H
  45      =4  
 126      =3  #include "stdint.h"
   1      =4  /**************************************************************************//**
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef STDINT_H
           =4 #define STDINT_H
           =4 
           =4 #if defined __C51__
           =4 
           =4 typedef unsigned char uint8_t;
           =4 typedef unsigned short uint16_t;
           =4 typedef unsigned long uint32_t;
           =4 typedef uint32_t uint64_t[2];
           =4 
           =4 typedef signed char int8_t;
           =4 typedef short int16_t;
           =4 typedef long int32_t;
           =4 typedef int32_t int64_t[2];
           =4 typedef float fp32_t;
           =4 typedef double fp64_t;
           =4 
           =4 #elif defined __ICC8051__
           =4 
           =4 /* Fixed size types. These are all optional. */
           =4 #ifdef __INT8_T_TYPE__
           =4   typedef __INT8_T_TYPE__   int8_t;
           =4   typedef __UINT8_T_TYPE__ uint8_t;
           =4 #endif /* __INT8_T_TYPE__ */
           =4 
           =4 #ifdef __INT16_T_TYPE__
           =4   typedef __INT16_T_TYPE__   int16_t;
           =4   typedef __UINT16_T_TYPE__ uint16_t;
           =4 #endif /* __INT16_T_TYPE__ */
           =4 
           =4 #ifdef __INT32_T_TYPE__
           =4   typedef __INT32_T_TYPE__   int32_t;
           =4   typedef __UINT32_T_TYPE__ uint32_t;
           =4 #endif /* __INT32_T_TYPE__ */
           =4 
           =4 #ifdef __INT64_T_TYPE__
           =4   #pragma language=save
           =4   #pragma language=extended
           =4   typedef __INT64_T_TYPE__   int64_t;
           =4   typedef __UINT64_T_TYPE__ uint64_t;
           =4   #pragma language=restore
           =4 #endif /* __INT64_T_TYPE__ */
           =4 
           =4 #endif
           =4 
           =4 #endif
 127      =3  
 128      =3  //-----------------------------------------------------------------------------
 129      =3  // Macro definitions
 130      =3  //-----------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 24  

 131      =3  
 132      =3  //SDK Version
 133      =3  #define SDK_VERSION   2
 134      =3  
 135      =3  #ifndef NULL
           =3 #define NULL ((void*) 0)
           =3 #endif
 138      =3  
 139      =3  
 140      =3  // SDCC - Small Device C Compiler
 141      =3  // http://sdcc.sourceforge.net
 142      =3  
 143      =3  #if defined SDCC
           =3 
           =3 #if (SDCC >= 300)
           =3 
           =3 #define interrupt __interrupt
           =3 #define _asm __asm
           =3 #define _endasm __endasm
           =3 #define bit __bit
           =3 #define code __code
           =3 #define at __at
           =3 
           =3 #endif
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   __xdata
           =3 # define SEG_DATA  __data
           =3 # define SEG_NEAR  __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 # define SBIT(name, addr, bit)  __sbit  __at(addr+bit)                  name
           =3 # define SFR(name, addr)        __sfr   __at(addr)                      name
           =3 # define SFRX(name, addr)       xdata volatile unsigned char __at(addr) name
           =3 # define SFR16(name, addr)      __sfr16 __at(((addr+1U)<<8) | addr)     name
           =3 # define SFR16E(name, fulladdr) __sfr16 __at(fulladdr)                  name
           =3 # define SFR32(name, addr)      __sfr32 __at(((addr+3UL)<<24) | ((addr+2UL)<<16) | ((addr+1UL)<<8) | addr)
             - name
           =3 # define SFR32E(name, fulladdr) __sfr32 __at(fulladdr)                  name
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void) interrupt (vector)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void) interrupt (vector) using (regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using (regnum
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter) using (
             -regnum)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment at (addr) vartype name = init
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) locsegment at (addr) vartype name
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 25  

           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() _asm NOP _endasm
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x40
           =3 #define SI_GPTR_MTYPE_IDATA      0x40
           =3 #define SI_GPTR_MTYPE_BDATA      0x40
           =3 #define SI_GPTR_MTYPE_PDATA      0x60
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 26  

           =3 
           =3 // Raisonance (must be placed before Keil C51)
           =3 // http://www.raisonance.com
           =3 
           =3 #elif defined __RC51__
           =3 
           =3 //#error Raisonance C51 detected.
           =3 
           =3 # define SEG_GENERIC generic     //SEG_GENERIC only applies to pointers in Raisonance, not variables.
           =3 # define SEG_FAR   xdata
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  data
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 # define SBIT(name, addr, bit)  at (addr+bit) sbit         name
           =3 # define SFR(name, addr)        sfr at addr                name
           =3 # define SFR16(name, addr)      sfr16 at addr              name
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) void name (void) interrupt vector
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) at addr locsegment vartype name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) at addr locsegment vartype name
           =3 
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 27  

           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support -- NOP is opcode 0x00
           =3 #define NOP() asm { 0x00 }
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x04
           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x04
           =3 #define SI_GPTR_MTYPE_PDATA      0x03
           =3 #define SI_GPTR_MTYPE_XDATA      0x02
           =3 #define SI_GPTR_MTYPE_CODE       0x05
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         U8 MTYPE;
           =3         UU16 ADDR;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // Keil C51
           =3 // http://www.keil.com
           =3 
           =3 #elif defined __C51__
 360      =3  
 361      =3  //#error Keil C51 detected.
 362      =3  
 363      =3  # define SEG_GENERIC
 364      =3  # define SEG_FAR   xdata
 365      =3  # define SEG_DATA  data
 366      =3  # define SEG_NEAR  data
 367      =3  # define SEG_IDATA idata
 368      =3  # define SEG_XDATA xdata
 369      =3  # define SEG_PDATA pdata
 370      =3  # define SEG_CODE  code
 371      =3  # define SEG_BDATA bdata
 372      =3  
 373      =3  # define SBIT(name, addr, bit)  sbit  name = addr^bit
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 28  

 374      =3  # define SFR(name, addr)        sfr   name = addr
 375      =3  # define SFR16(name, addr)      sfr16 name = addr
 376      =3  # define SFR16E(name, fulladdr) /* not supported */
 377      =3  # define SFR32(name, fulladdr)  /* not supported */
 378      =3  # define SFR32E(name, fulladdr) /* not supported */
 379      =3  
 380      =3  # ifndef __SLS_IDE__
 381      =3  
 382      =3  # define INTERRUPT(name, vector) void name (void) interrupt vector
 383      =3  # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
 384      =3  # define INTERRUPT_PROTO(name, vector) void name (void)
 385      =3  # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 386      =3  
 387      =3  # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter) using regnum
 388      =3  # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
 389      =3  // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
 390      =3  
 391      =3  # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
 392      =3  # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
 393      =3  # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
 394      =3  # define SEGMENT_POINTER(name, vartype, locsegment) vartype * locsegment name
 395      =3  # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype locsegment name _at_ addr
 396      =3  
 397      =3  # else  // __SLS_IDE__
           =3 
           =3 # define INTERRUPT(name, vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =3 # define SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =3 # define LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =3 
           =3 # endif // __SLS_IDE__
 415      =3  
 416      =3  // used with UU16
 417      =3  # define LSB 1
 418      =3  # define MSB 0
 419      =3  
 420      =3  // used with UU32 (b0 is least-significant byte)
 421      =3  # define b0 3
 422      =3  # define b1 2
 423      =3  # define b2 1
 424      =3  # define b3 0
 425      =3  
 426      =3  typedef unsigned char U8;
 427      =3  typedef unsigned int U16;
 428      =3  typedef unsigned long U32;
 429      =3  
 430      =3  typedef signed char S8;
 431      =3  typedef signed int S16;
 432      =3  typedef signed long S32;
 433      =3  
 434      =3  typedef union UU16
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 29  

 435      =3  {
 436      =3     U16 U16;
 437      =3     S16 S16;
 438      =3     U8 U8[2];
 439      =3     S8 S8[2];
 440      =3  } UU16;
 441      =3  
 442      =3  typedef union UU32
 443      =3  {
 444      =3     U32 U32;
 445      =3     S32 S32;
 446      =3     UU16 UU16[2];
 447      =3     U16 U16[2];
 448      =3     S16 S16[2];
 449      =3     U8 U8[4];
 450      =3     S8 S8[4];
 451      =3  } UU32;
 452      =3  
 453      =3  // NOP () macro support
 454      =3  extern void _nop_ (void);
 455      =3  #define NOP() _nop_()
 456      =3  
 457      =3  // generic pointer memory type specifiers
 458      =3  #define SI_GPTR
 459      =3  #define SI_GPTR_MTYPE_DATA      0x00
 460      =3  #define SI_GPTR_MTYPE_IDATA     0x00
 461      =3  #define SI_GPTR_MTYPE_BDATA     0x00
 462      =3  #define SI_GPTR_MTYPE_PDATA     0xFE
 463      =3  #define SI_GPTR_MTYPE_XDATA     0x01
 464      =3  #define SI_GPTR_MTYPE_CODE      0xFF
 465      =3  
 466      =3  // generic pointer access struct
 467      =3  typedef union SI_GENERIC_PTR
 468      =3  {
 469      =3      U8 U8[3];
 470      =3      struct
 471      =3      {
 472      =3          U8 MTYPE;
 473      =3          UU16 ADDR;
 474      =3      } GPTR;
 475      =3  } SI_GENERIC_PTR;
 476      =3  
 477      =3  //-----------------------------------------------------------------------------
 478      =3  
 479      =3  // Hi-Tech 8051
 480      =3  // http://www.htsoft.com
 481      =3  
 482      =3  #elif defined HI_TECH_C
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   far
           =3 # define SEG_DATA  data
           =3 # define SEG_NEAR  near
           =3 # define SEG_IDATA idata
           =3 # define SEG_XDATA xdata
           =3 # define SEG_PDATA pdata
           =3 # define SEG_CODE  code
           =3 # define SEG_BDATA bdata
           =3 
           =3 
           =3 # define SBIT(name, addr, thebit) static volatile bit name @ (addr + thebit)
           =3 # define SFR(name, addr)          static volatile unsigned char name @ addr
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 30  

           =3 # define SFR16(name, addr)        static volatile unsigned int name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector)       void name (void) interrupt vector
           =3 # define INTERRUPT_PROTO(name, vector)
           =3 # define INTERRUPT_USING(name, vector, regnum) void name (void) interrupt vector using regnum
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: Hi-Tech does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) targsegment vartype * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) targsegment vartype * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 #define NOP() asm(" nop ")
           =3 
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 31  

           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Tasking / Altium
           =3 // http://www.altium.com/tasking
           =3 
           =3 
           =3 #elif defined _CC51
           =3 
           =3 # define SEG_GENERIC
           =3 # define SEG_FAR   _xdat
           =3 # define SEG_DATA  _data
           =3 # define SEG_NEAR  _data
           =3 # define SEG_IDATA _idat
           =3 # define SEG_XDATA _xdat
           =3 # define SEG_PDATA _pdat
           =3 # define SEG_CODE  _rom
           =3 # define SEG_BDATA _bdat
           =3 
           =3 # define SBIT(name, addr, bit)  _sfrbit  name _at(addr+bit)
           =3 # define SFR(name, addr)        _sfrbyte name _at(addr)
           =3 # define SFRX(name, addr)       _xdat volatile unsigned char name _at(addr)
           =3 #if _CC51 > 71
           =3 # define SFR16(name, addr)      _sfrword _little name _at(addr)
           =3 #else
           =3 # define SFR16(name, addr)      /* not supported */
           =3 #endif
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define INTERRUPT(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 # define INTERRUPT_PROTO(name, vector) _interrupt (vector) void name (void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) _interrupt (vector) _using(regnum) void name (void)
           =3 
           =3 // When calling FUNCTION_USING in Tasking, the function must be called from an interrupt or Main which
           =3 // is also using the same register bank. If not, the compiler will generate an error.
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (parameter
             -)
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) _using(regnum) return_value name (par
             -ameter)
           =3 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment) vartype locsegment name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) vartype locsegment name _at( addr )
           =3 
           =3 // used with UU16
           =3 # define LSB 1
           =3 # define MSB 0
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 3
           =3 # define b1 2
           =3 # define b2 1
           =3 # define b3 0
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 32  

           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 // NOP () macro support
           =3 extern void _nop (void);
           =3 #define NOP() _nop()
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 
           =3 // IAR 8051
           =3 // http://www.iar.com
           =3 
           =3 #elif defined __ICC8051__
           =3 
           =3 #include <stdbool.h>
           =3 #include <intrinsics.h>
           =3 
           =3 # define SBIT(name, addr, bit)  __bit __no_init volatile bool name @ (addr+bit)
           =3 # define SFR(name, addr)        __sfr __no_init volatile unsigned char name @ addr
           =3 # define SFRX(name, addr)       __xdata __no_init volatile unsigned char name @ addr
           =3 # define SFR16(name, addr)      __sfr __no_init volatile unsigned int  name @ addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr) /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 # define SEG_GENERIC __generic
           =3 # define SEG_FAR  __xdata
           =3 # define SEG_DATA __data
           =3 # define SEG_NEAR __data
           =3 # define SEG_IDATA __idata
           =3 # define SEG_XDATA __xdata
           =3 # define SEG_PDATA __pdata
           =3 # define SEG_CODE  __code
           =3 # define SEG_BDATA __bdata
           =3 
           =3 #define bit bool
           =3 
           =3 # define _PPTOSTR_(x) #x
           =3 # define _PPARAM_(address) _PPTOSTR_(vector=address * 8 + 3)
           =3 # define _PPARAM2_(regbank) _PPTOSTR_(register_bank=regbank)
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 33  

           =3 # define INTERRUPT(name, vector) _Pragma(_PPARAM_(vector)) __interrupt void name(void)
           =3 # define INTERRUPT_PROTO(name, vector)  __interrupt void name(void)
           =3 # define INTERRUPT_USING(name, vector, regnum) _Pragma(_PPARAM2_(regnum)) _Pragma(_PPARAM_(vector)) __inte
             -rrupt void name(void)
           =3 # define INTERRUPT_PROTO_USING(name, vector, regnum) __interrupt void name(void)
           =3 
           =3 # define FUNCTION_USING(name, return_value, parameter, regnum) /* not supported */
           =3 # define FUNCTION_PROTO_USING(name, return_value, parameter, regnum) /* not supported */
           =3 // Note: IAR does not support functions using different register banks. Register
           =3 //       banks can only be specified in interrupts. If a function is called from
           =3 //       inside an interrupt, it will use the same register bank as the interrupt.
           =3 
           =3 # define SEGMENT_VARIABLE(name, vartype, locsegment)  locsegment vartype name
           =3 # define VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype targsegment  * name
           =3 # define SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype targsegment * lo
             -csegment name
           =3 
           =3 # define LOCATED_VARIABLE(name, vartype, locsegment, addr, init) locsegment __no_init vartype name @ addr
           =3 
           =3 // used with UU16
           =3 # define LSB 0
           =3 # define MSB 1
           =3 
           =3 // used with UU32 (b0 is least-significant byte)
           =3 # define b0 0
           =3 # define b1 1
           =3 # define b2 2
           =3 # define b3 3
           =3 
           =3 typedef unsigned char U8;
           =3 typedef unsigned int U16;
           =3 typedef unsigned long U32;
           =3 
           =3 typedef signed char S8;
           =3 typedef signed int S16;
           =3 typedef signed long S32;
           =3 
           =3 typedef union UU16
           =3 {
           =3    U16 U16;
           =3    S16 S16;
           =3    U8 U8[2];
           =3    S8 S8[2];
           =3 } UU16;
           =3 
           =3 typedef union UU32
           =3 {
           =3    U32 U32;
           =3    S32 S32;
           =3    UU16 UU16[2];
           =3    U16 U16[2];
           =3    S16 S16[2];
           =3    U8 U8[4];
           =3    S8 S8[4];
           =3 } UU32;
           =3 
           =3 
           =3 #define NOP() __no_operation();
           =3 
           =3 // generic pointer memory type specifiers
           =3 #define SI_GPTR
           =3 #define SI_GPTR_MTYPE_DATA       0x01
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 34  

           =3 #define SI_GPTR_MTYPE_IDATA      0x01
           =3 #define SI_GPTR_MTYPE_BDATA      0x01
           =3 #define SI_GPTR_MTYPE_PDATA      0x00
           =3 #define SI_GPTR_MTYPE_XDATA      0x00
           =3 #define SI_GPTR_MTYPE_CODE       0x80
           =3 
           =3 // generic pointer access struct
           =3 typedef union SI_GENERIC_PTR
           =3 {
           =3     U8 U8[3];
           =3     struct
           =3     {
           =3         UU16 ADDR;
           =3         U8 MTYPE;
           =3     } GPTR;
           =3 } SI_GENERIC_PTR;
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Crossware
           =3 // http://www.crossware.com
           =3 
           =3 #elif defined _XC51_VER
           =3 # define SBIT(name, addr, bit)  _sfrbit  name = (addr+bit)
           =3 # define SFR(name, addr)        _sfr     name = addr
           =3 # define SFR16(name, addr)      _sfrword name = addr
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Wickenh盲user
           =3 // http://www.wickenhaeuser.de
           =3 
           =3 #elif defined __UC__
           =3 # define SBIT(name, addr, bit)  unsigned char bit  name @ (addr+bit)
           =3 # define SFR(name, addr)        near unsigned char name @ addr
           =3 # define SFR16(name, addr)      /* not supported */
           =3 # define SFR16E(name, fulladdr) /* not supported */
           =3 # define SFR32(name, fulladdr)  /* not supported */
           =3 # define SFR32E(name, fulladdr) /* not supported */
           =3 
           =3 //-----------------------------------------------------------------------------
           =3 
           =3 // Default
           =3 // Unknown compiler
           =3 
           =3 #else
           =3 # warning unrecognized compiler
           =3 # define SBIT(name, addr, bit)  volatile bool           name
           =3 # define SFR(name, addr)        volatile unsigned char  name
           =3 # define SFRX(name, addr)       volatile unsigned char  name
           =3 # define SFR16(name, addr)      volatile unsigned short name
           =3 # define SFR16E(name, fulladdr) volatile unsigned short name
           =3 # define SFR32(name, fulladdr)  volatile unsigned long  name
           =3 # define SFR32E(name, fulladdr) volatile unsigned long  name
           =3 
           =3 #endif
 798      =3  
 799      =3  //-----------------------------------------------------------------------------
 800      =3  // Header File PreProcessor Directive
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 35  

 801      =3  //-----------------------------------------------------------------------------
 802      =3  
 803      =3  #endif                                 // #define COMPILER_DEFS_H
 804      =3  
 805      =3  //-----------------------------------------------------------------------------
 806      =3  // End Of File
 807      =3  //-----------------------------------------------------------------------------
 135      =2  #include "C8051F580_defs.h"
   1      =3  //-----------------------------------------------------------------------------
   2      =3  // C8051F580_defs.h
   3      =3  //-----------------------------------------------------------------------------
   4      =3  // Copyright 2008, Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Register/bit definitions for the C8051F58x family.
  10      =3  // **Important Note**: The compiler_defs.h header file should be included
  11      =3  // before including this header file.
  12      =3  //
  13      =3  // Target:         C8051F580/1/2/3/4/5/6/7,8/9-F590/1
  14      =3  // Tool chain:     Generic
  15      =3  // Command Line:   None
  16      =3  //
  17      =3  // Release 0.6 - 20 AUG 2012 (TP)
  18      =3  //    -Added #define for _XPAGE to provide support for SDCC memory paging
  19      =3  //     (pdata)
  20      =3  //
  21      =3  // Release 0.5 - 10 SEP 2011 (GP)
  22      =3  //    - Fixed SFR16 definition for CAN0IF2MC
  23      =3  //
  24      =3  // Release 0.4 - 08 OCT 2010 (TP)
  25      =3  //    - Fixed bit definitions for SCON0
  26      =3  //
  27      =3  // Release 0.3 - 01 APR 2009 (GP)
  28      =3  //    - Added SN0-SN3
  29      =3  //
  30      =3  // Release 0.2 - 29 JUL 2008 (ADT)
  31      =3  //    - Added Timer 4 bit definitions
  32      =3  //
  33      =3  // Release 0.1 - 09 JUL 2008 (GP)
  34      =3  //    - Initial Revision
  35      =3  //
  36      =3  //-----------------------------------------------------------------------------
  37      =3  // Header File Preprocessor Directive
  38      =3  //-----------------------------------------------------------------------------
  39      =3  
  40      =3  #ifndef C8051F580_DEFS_H
  41      =3  #define C8051F580_DEFS_H
  42      =3  
  43      =3  //-----------------------------------------------------------------------------
  44      =3  // Page 0, Page 1 and Page F Registers
  45      =3  //-----------------------------------------------------------------------------
  46      =3  
  47      =3  SFR (P0, 0x80);                        // Port 0 Latch
  48      =3  SFR (SP, 0x81);                        // Stack Pointer
  49      =3  SFR (DPL, 0x82);                       // Data Pointer Low
  50      =3  SFR (DPH, 0x83);                       // Data Pointer High
  51      =3  SFR (SFR0CN, 0x84);                    // SFR Page Control
  52      =3  SFR (SFRNEXT, 0x85);                   // SFR stack next page
  53      =3  SFR (SFRLAST, 0x86);                   // SFR stack last page
  54      =3  SFR (PCON, 0x87);                      // Power Control
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 36  

  55      =3  SFR (TCON, 0x88);                      // Timer/Counter Control
  56      =3  SFR (TMOD, 0x89);                      // Timer/Counter Mode
  57      =3  SFR (TL0, 0x8A);                       // Timer/Counter 0 Low
  58      =3  SFR (TL1, 0x8B);                       // Timer/Counter 1 Low
  59      =3  SFR (TH0, 0x8C);                       // Timer/Counter 0 High
  60      =3  SFR (TH1, 0x8D);                       // Timer/Counter 1 High
  61      =3  SFR (CKCON, 0x8E);                     // Clock Control
  62      =3  SFR (PSCTL, 0x8F);                     // Program Store R/W Control
  63      =3  SFR (CLKSEL, 0x8F);                    // System clock select
  64      =3  SFR (P1, 0x90);                        // Port 1 Latch
  65      =3  SFR (TMR3CN, 0x91);                    // Timer/Counter 3 Control
  66      =3  SFR (TMR5CN, 0x91);                    // Timer/Counter 5 Control
  67      =3  SFR (TMR3RLL, 0x92);                   // Timer/Counter 3 Reload Low
  68      =3  SFR (TMR5CAPL, 0x92);                  // Timer/Counter 5 Capture Low
  69      =3  SFR (TMR3RLH, 0x93);                   // Timer/Counter 3 Reload High
  70      =3  SFR (TMR5CAPH, 0x93);                  // Timer/Counter 5 Capture High
  71      =3  SFR (TMR3L, 0x94);                     // Timer/Counter 3 Low
  72      =3  SFR (TMR5L, 0x94);                     // Timer/Counter 5 Low
  73      =3  SFR (TMR3H, 0x95);                     // Timer/Counter 3 High
  74      =3  SFR (TMR5H, 0x95);                     // Timer/Counter 5 High
  75      =3  SFR (TMR5CF, 0x96);                    // Timer/Counter 5 Configuration
  76      =3  SFR (CLKMUL, 0x97);                    // Clock Multiplier
  77      =3  SFR (SCON0, 0x98);                     // UART0 Control
  78      =3  SFR (SCON1, 0x98);                     // UART1 Control
  79      =3  SFR (SBUF0, 0x99);                     // UART0 Data Buffer
  80      =3  SFR (SBUF1, 0x99);                     // UART1 Data Buffer
  81      =3  SFR (CPT0CN, 0x9A);                    // Comparator 0 Control
  82      =3  SFR (CPT2CN, 0x9A);                    // Comparator 2 Control
  83      =3  SFR (CPT0MD, 0x9B);                    // Comparator 0 Mode
  84      =3  SFR (CPT2MD, 0x9B);                    // Comparator 2 Mode
  85      =3  SFR (CPT0MX, 0x9C);                    // Comparator 0 Mux
  86      =3  SFR (CPT2MX, 0x9C);                    // Comparator 2 Mux
  87      =3  SFR (CPT1CN, 0x9D);                    // Comparator 1 Control
  88      =3  SFR (CPT1MD, 0x9E);                    // Comparator 0 Mode
  89      =3  SFR (OSCIFIN, 0x9E);                   // Internal Oscillator Fine Control
  90      =3  SFR (CPT1MX, 0x9F);                    // Comparator 1 Mux
  91      =3  SFR (OSCXCN, 0x9F);                    // External Oscillator Control
  92      =3  SFR (P2, 0xA0);                        // Port 2 Latch
  93      =3  SFR (SPI0CFG, 0xA1);                   // SPI0 Configuration
  94      =3  SFR (OSCICN, 0xA1);                    // Internal Oscillator Control
  95      =3  SFR (SPI0CKR, 0xA2);                   // SPI0 Clock rate control
  96      =3  SFR (OSCICRS, 0xA2);                   // Internal Oscillator Coarse Control
  97      =3  SFR (SPI0DAT, 0xA3);                   // SPI0 Data Buffer
  98      =3  SFR (P0MDOUT, 0xA4);                   // Port 0 Output Mode
  99      =3  SFR (P1MDOUT, 0xA5);                   // Port 1 Output Mode
 100      =3  SFR (P2MDOUT, 0xA6);                   // Port 2 Output Mode
 101      =3  SFR (SFRPAGE, 0xA7);                   // SFR Page Select
 102      =3  SFR (IE, 0xA8);                        // Interrupt Enable
 103      =3  SFR (SMOD0, 0xA9);                     // Serial Port 0 Control
 104      =3  SFR (EMI0CN, 0xAA);                    // EMIF Control
 105      =3  SFR (EMI0TC, 0xAA);                    // EMIF Timing control
 106      =3  SFR (SBCON0, 0xAB);                    // UART0 Baud Rate Generator Control
 107      =3  SFR (SBRLL0, 0xAC);                    // UART0 Baud Rate Generator Low
 108      =3  SFR (SBRLH0, 0xAD);                    // UART0 Baud Rate Generator High
 109      =3  SFR (P3MAT, 0xAE);                     // Port 3 Match
 110      =3  SFR (P3MDOUT, 0xAE);                   // Port 3 Mode
 111      =3  SFR (P3MASK, 0xAF);                    // Port 3 Mask
 112      =3  SFR (P4MDOUT, 0xAF);                   // Port 4 Mode
 113      =3  SFR (P3, 0xB0);                        // Port 3 Latch
 114      =3  SFR (P2MAT, 0xB1);                     // Port 2 Match
 115      =3  SFR (P2MASK, 0xB2);                    // Port 2 Mask
 116      =3  SFR (EMI0CF, 0xB2);                    // EMIF Configuration
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 37  

 117      =3  SFR (P4, 0xB5);                        // Port 4 Latch
 118      =3  SFR (FLSCL, 0xB6);                     // Flash Scale
 119      =3  SFR (FLKEY, 0xB7);                     // Flash access limit
 120      =3  SFR (IP, 0xB8);                        // Interrupt Priority
 121      =3  SFR (SMB0ADR, 0xB9);                   // SMBus0 Slave address
 122      =3  SFR (ADC0TK, 0xBA);                    // ADC0 Tracking Mode Select
 123      =3  SFR (SMB0ADM, 0xBA);                   // SMBus0 Address Mask
 124      =3  SFR (ADC0MX, 0xBB);                    // AMUX0 Channel select
 125      =3  SFR (ADC0CF, 0xBC);                    // AMUX0 Channel configuration
 126      =3  SFR (ADC0L, 0xBD);                     // ADC0 Data Low
 127      =3  SFR (ADC0H, 0xBE);                     // ADC0 Data High
 128      =3  SFR (SMB0CN, 0xC0);                    // SMBus0 Control
 129      =3  SFR (SMB0CF, 0xC1);                    // SMBus0 Configuration
 130      =3  SFR (SMB0DAT, 0xC2);                   // SMBus0 Data
 131      =3  SFR (ADC0GTL, 0xC3);                   // ADC0 Greater-Than Compare Low
 132      =3  SFR (ADC0GTH, 0xC4);                   // ADC0 Greater-Than Compare High
 133      =3  SFR (ADC0LTL, 0xC5);                   // ADC0 Less-Than Compare Word Low
 134      =3  SFR (ADC0LTH, 0xC6);                   // ADC0 Less-Than Compare Word High
 135      =3  SFR (XBR3, 0xC6);                      // Port I/O Crossbar Control 3
 136      =3  SFR (XBR2, 0xC7);                      // Port I/O Crossbar Control 2
 137      =3  SFR (TMR2CN, 0xC8);                    // Timer/Counter 2 Control
 138      =3  SFR (TMR4CN, 0xC8);                    // Timer/Counter 4 Control
 139      =3  SFR (REG0CN, 0xC9);                    // Regulator Control
 140      =3  SFR (LIN0CF, 0xC9);                    // LIN 0 Configuration
 141      =3  SFR (TMR4CF, 0xC9);                    // Timer/Counter 4 Configuration
 142      =3  SFR (TMR2RLL, 0xCA);                   // Timer/Counter 2 Reload Low
 143      =3  SFR (TMR4CAPL, 0xCA);                  // Timer/Counter 4 Capture Low
 144      =3  SFR (TMR2RLH, 0xCB);                   // Timer/Counter 2 Reload High
 145      =3  SFR (TMR4CAPH, 0xCB);                  // Timer/Counter 4 Capture High
 146      =3  SFR (TMR2L, 0xCC);                     // Timer/Counter 2 Low
 147      =3  SFR (TMR4L, 0xCC);                     // Timer/Counter 4 Low
 148      =3  SFR (TMR2H, 0xCD);                     // Timer/Counter 2 High
 149      =3  SFR (TMR4H, 0xCD);                     // Timer/Counter 4 High
 150      =3  SFR (PCA0CPL5, 0xCE);                  // PCA0 Capture 5 Low
 151      =3  SFR (PCA1CPL11, 0xCE);                 // PCA1 Capture 11 Low
 152      =3  SFR (PCA0CPH5, 0xCF);                  // PCA0 Capture 5 High
 153      =3  SFR (PCA1CPH11, 0xCF);                 // PCA1 Capture 11 High
 154      =3  SFR (PSW, 0xD0);                       // Program Status Word
 155      =3  SFR (REF0CN, 0xD1);                    // Voltage Reference Control
 156      =3  SFR (LIN0DAT, 0xD2);                   // LIN0 Data
 157      =3  SFR (LIN0ADR, 0xD3);                   // LIN0 Address
 158      =3  SFR (P0SKIP, 0xD4);                    // Port 0 Skip
 159      =3  SFR (P1SKIP, 0xD5);                    // Port 1 Skip
 160      =3  SFR (P2SKIP, 0xD6);                    // Port 2 Skip
 161      =3  SFR (P3SKIP, 0xD7);                    // Port 3 Skip
 162      =3  SFR (PCA0CN, 0xD8);                    // PCA0 Control
 163      =3  SFR (PCA1CN, 0xD8);                    // PCA1 Control
 164      =3  SFR (PCA0MD, 0xD9);                    // PCA0 Mode
 165      =3  SFR (PCA1MD, 0xD9);                    // PCA1 Mode
 166      =3  SFR (PCA0PWM, 0xD9);                   // PCA0 PWM Control
 167      =3  SFR (PCA0CPM0, 0xDA);                  // PCA0 Module 0 Mode
 168      =3  SFR (PCA1CPM6, 0xDA);                  // PCA1 Module 6 Mode
 169      =3  SFR (PCA1PWM, 0xDA);                   // PCA1 PWM Control
 170      =3  SFR (PCA0CPM1, 0xDB);                  // PCA0 Module 1  Mode
 171      =3  SFR (PCA1CPM7, 0xDB);                  // PCA1 Module 7  Mode
 172      =3  SFR (PCA0CPM2, 0xDC);                  // PCA0 Module 2  Mode
 173      =3  SFR (PCA1CPM8, 0xDC);                  // PCA1 Module 8  Mode
 174      =3  SFR (PCA0CPM3, 0xDD);                  // PCA0 Module 3  Mode
 175      =3  SFR (PCA1CPM9, 0xDD);                  // PCA1 Module 9  Mode
 176      =3  SFR (PCA0CPM4, 0xDE);                  // PCA0 Module 4  Mode
 177      =3  SFR (PCA1CPM10, 0xDE);                  // PCA1 Module 10 Mode
 178      =3  SFR (PCA0CPM5, 0xDF);                  // PCA0 Module 5  Mode
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 38  

 179      =3  SFR (PCA1CPM11, 0xDF);                  // PCA1 Module 11 Mode
 180      =3  SFR (ACC, 0xE0);                       // Accumulator
 181      =3  SFR (XBR0, 0xE1);                      // Port I/O Crossbar Control 0
 182      =3  SFR (XBR1, 0xE2);                      // Port I/O Crossbar Control 1
 183      =3  SFR (CCH0CN, 0xE3);                    // Cache control
 184      =3  SFR (IT01CF, 0xE4);                    // INT0/INT1 Configuration
 185      =3  SFR (EIE1, 0xE6);                      // Extended Interrupt Enable 2
 186      =3  SFR (EIE2, 0xE7);                      // Extended Interrupt Enable 2
 187      =3  SFR (ADC0CN, 0xE8);                    // ADC0 Control
 188      =3  SFR (PCA0CPL1, 0xE9);                  // PCA0 Capture 1 Low
 189      =3  SFR (PCA1CPL1, 0xE9);                  // PCA1 Capture 7 Low
 190      =3  SFR (PCA0CPH1, 0xEA);                  // PCA0 Capture 1 High
 191      =3  SFR (PCA1CPH1, 0xEA);                  // PCA1 Capture 7 High
 192      =3  SFR (PCA0CPL2, 0xEB);                  // PCA0 Capture 2 Low
 193      =3  SFR (PCA1CPL2, 0xEB);                  // PCA1 Capture 8 Low
 194      =3  SFR (PCA0CPH2, 0xEC);                  // PCA0 Capture 2 High
 195      =3  SFR (PCA1CPH2, 0xEC);                  // PCA1 Capture 8 High
 196      =3  SFR (PCA0CPL3, 0xED);                  // PCA0 Capture 3 Low
 197      =3  SFR (PCA1CPL3, 0xED);                  // PCA1 Capture 9 Low
 198      =3  SFR (PCA0CPH3, 0xEE);                  // PCA0 Capture 3 High
 199      =3  SFR (PCA1CPH3, 0xEE);                  // PCA1 Capture 9 High
 200      =3  SFR (RSTSRC, 0xEF);                    // Reset Source Configuration/Status
 201      =3  SFR (B, 0xF0);                         // B Register
 202      =3  SFR (P0MAT, 0xF1);                     // Port 0 Match
 203      =3  SFR (P0MDIN, 0xF1);                    // Port 0 Input Mode
 204      =3  SFR (P0MASK, 0xF2);                    // Port 0 Mask
 205      =3  SFR (P1MDIN, 0xF2);                    // Port 1 Input Mode
 206      =3  SFR (P1MAT, 0xF3);                     // Port 1 Match
 207      =3  SFR (P2MDIN, 0xF3);                    // Port 2 Input Mode
 208      =3  SFR (P1MASK, 0xF4);                    // Port 1 Mask
 209      =3  SFR (P3MDIN, 0xF4);                    // Port 3 Input Mode
 210      =3  SFR (PSBANK, 0xF5);                    // Program Space Bank Select
 211      =3  SFR (EIP1, 0xF6);                      // External Interrupt Priority 1
 212      =3  SFR (EIP2, 0xF7);                      // External Interrupt Priority 2
 213      =3  SFR (SPI0CN, 0xF8);                    // SPI0 Control
 214      =3  SFR (PCA0L, 0xF9);                     // PCA0 Counter Low
 215      =3  SFR (PCA1L, 0xF9);                     // PCA1 Counter Low
 216      =3  SFR (SN0, 0xF9);                       // Serial Number 0
 217      =3  SFR (PCA0H, 0xFA);                     // PCA0 Counter High
 218      =3  SFR (PCA1H, 0xFA);                     // PCA1 Counter High
 219      =3  SFR (SN1, 0xFA);                       // Serial Number 1
 220      =3  SFR (PCA0CPL0, 0xFB);                  // PCA0 Capture 0 Low
 221      =3  SFR (PCA1CPL6, 0xFB);                  // PCA1 Capture 6 Low
 222      =3  SFR (SN2, 0xFB);                       // Serial Number 2
 223      =3  SFR (PCA0CPH0, 0xFC);                  // PCA0 Capture 0 High
 224      =3  SFR (PCA1CPH6, 0xFC);                  // PCA1 Capture 6 High
 225      =3  SFR (SN3, 0xFC);                       // Serial Number 3
 226      =3  SFR (PCA0CPL4, 0xFD);                  // PCA0 Capture 4 Low
 227      =3  SFR (PCA1CPL10, 0xFD);                 // PCA1 Capture 10 Low
 228      =3  SFR (PCA0CPH4, 0xFE);                  // PCA0 Capture 4 High
 229      =3  SFR (PCA1CPH10, 0xFE);                 // PCA1 Capture 10 High
 230      =3  SFR (VDM0CN, 0xFF);                    // VDD Monitor Control
 231      =3  
 232      =3  //-----------------------------------------------------------------------------
 233      =3  // Page C (CAN0) Registers
 234      =3  //-----------------------------------------------------------------------------
 235      =3  
 236      =3  SFR (CAN0CFG, 0x92);                   // CAN0 Clock Configuration
 237      =3  SFR (CAN0STAT, 0x94);                  // Status Register Low Byte
 238      =3  SFR (CAN0ERRL, 0x96);                  // Error Counter Low Byte
 239      =3  SFR (CAN0ERRH, 0x97);                  // Error Counter High Byte
 240      =3  SFR (CAN0BTL, 0x9A);                   // Bit Timing Register Low Byte
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 39  

 241      =3  SFR (CAN0BTH, 0x9B);                   // Bit Timing Register High Byte
 242      =3  SFR (CAN0IIDL, 0x9C);                  // Interrupt Register Low Byte
 243      =3  SFR (CAN0IIDH, 0x9D);                  // Interrupt Register High Byte
 244      =3  SFR (CAN0TST, 0x9E);                   // Test Register Low Byte
 245      =3  SFR (CAN0BRPE, 0xA1);                  // BRP Extension Register Low Byte
 246      =3  SFR (CAN0TR1L, 0xA2);                  // Transmission Request 1 Low Byte
 247      =3  SFR (CAN0TR1H, 0xA3);                  // Transmission Request 1 High Byte
 248      =3  SFR (CAN0TR2L, 0xA4);                  // Transmission Request 2 Low Byte
 249      =3  SFR (CAN0TR2H, 0xA5);                  // Transmission Request 2 High Byte
 250      =3  SFR (CAN0ND1L, 0xAA);                  // New Data 1 Low Byte
 251      =3  SFR (CAN0ND1H, 0xAB);                  // New Data 1 High Byte
 252      =3  SFR (CAN0ND2L, 0xAC);                  // New Data 2 Low Byte
 253      =3  SFR (CAN0ND2H, 0xAD);                  // New Data 2 High Byte
 254      =3  SFR (CAN0IP1L, 0xAE);                  // Interrupt Pending 1 Low Byte
 255      =3  SFR (CAN0IP1H, 0xAF);                  // Interrupt Pending 1 High Byte
 256      =3  SFR (CAN0IP2L, 0xB2);                  // Interrupt Pending 2 Low Byte
 257      =3  SFR (CAN0IP2H, 0xB3);                  // Interrupt Pending 2 High Byte
 258      =3  SFR (CAN0MV1L, 0xBA);                  // Message Valid 1 Low Byte
 259      =3  SFR (CAN0MV1H, 0xBB);                  // Message Valid 1 High Byte
 260      =3  SFR (CAN0MV2L, 0xBC);                  // Message Valid 2 Low Byte
 261      =3  SFR (CAN0MV2H, 0xBD);                  // Message Valid 2 High Byte
 262      =3  SFR (CAN0IF1CRL, 0xBE);                // IF1 Command Request Low Byte
 263      =3  SFR (CAN0IF1CRH, 0xBF);                // IF1 Command Request High Byte
 264      =3  SFR (CAN0CN, 0xC0);                    // CAN Control Register Low Byte
 265      =3  SFR (CAN0IF1CML, 0xC2);                // IF1 Command Mask Low Byte
 266      =3  SFR (CAN0IF1CMH, 0xC3);                // IF1 Command Mask High Byte
 267      =3  SFR (CAN0IF1M1L, 0xC4);                // IF1 Mask 1 Low Byte
 268      =3  SFR (CAN0IF1M1H, 0xC5);                // IF1 Mask 1 High Byte
 269      =3  SFR (CAN0IF1M2L, 0xC6);                // IF1 Mask 2 Low Byte
 270      =3  SFR (CAN0IF1M2H, 0xC7);                // IF1 Mask 2 High Byte
 271      =3  SFR (CAN0IF1A1L, 0xCA);                // IF1 Arbitration 1 Low Byte
 272      =3  SFR (CAN0IF1A1H, 0xCB);                // IF1 Arbitration 1 High Byte
 273      =3  SFR (CAN0IF1A2L, 0xCC);                // IF1 Arbitration 2 Low Byte
 274      =3  SFR (CAN0IF1A2H, 0xCD);                // IF1 Arbitration 2 High Byte
 275      =3  SFR (CAN0IF2MCL, 0xCE);                // IF2 Message Control Low Byte
 276      =3  SFR (CAN0IF2MCH, 0xCF);                // IF2 Message Control High Byte
 277      =3  SFR (CAN0IF1MCL, 0xD2);                // IF1 Message Control Low Byte
 278      =3  SFR (CAN0IF1MCH, 0xD3);                // IF1 Message Control High Byte
 279      =3  SFR (CAN0IF1DA1L, 0xD4);               // IF1 Data A 1 Low Byte
 280      =3  SFR (CAN0IF1DA1H, 0xD5);               // IF1 Data A 1 High Byte
 281      =3  SFR (CAN0IF1DA2L, 0xD6);               // IF1 Data A 2 Low Byte
 282      =3  SFR (CAN0IF1DA2H, 0xD7);               // IF1 Data A 2 High Byte
 283      =3  SFR (CAN0IF1DB1L, 0xDA);               // IF1 Data B 1 Low Byte
 284      =3  SFR (CAN0IF1DB1H, 0xDB);               // IF1 Data B 1 High Byte
 285      =3  SFR (CAN0IF1DB2L, 0xDC);               // IF1 Data B 2 Low Byte
 286      =3  SFR (CAN0IF1DB2H, 0xDD);               // IF1 Data B 2 High Byte
 287      =3  SFR (CAN0IF2CRL, 0xDE);                // IF2 Command Request Low Byte
 288      =3  SFR (CAN0IF2CRH, 0xDF);                // IF2 Command Request High Byte
 289      =3  SFR (CAN0IF2CML, 0xE2);                // IF2 Command Mask Low Byte
 290      =3  SFR (CAN0IF2CMH, 0xE3);                // IF2 Command Mask High Byte
 291      =3  SFR (CAN0IF2M1L, 0xEA);                // IF2 Mask 1 Low Byte
 292      =3  SFR (CAN0IF2M1H, 0xEB);                // IF2 Mask 1 High Byte
 293      =3  SFR (CAN0IF2M2L, 0xEC);                // IF2 Mask 2 Low Byte
 294      =3  SFR (CAN0IF2M2H, 0xED);                // IF2 Mask 2 High Byte
 295      =3  SFR (CAN0IF2A1L, 0xEE);                // IF2 Arbitration 1 Low Byte
 296      =3  SFR (CAN0IF2A1H, 0xEF);                // IF2 Arbitration 1 High Byte
 297      =3  SFR (CAN0IF2A2L, 0xF2);                // IF2 Arbitration 2 Low Byte
 298      =3  SFR (CAN0IF2A2H, 0xF3);                // IF2 Arbitration 2 High Byte
 299      =3  SFR (CAN0IF2DA1L, 0xF6);               // IF2 Data A 1 Low Byte
 300      =3  SFR (CAN0IF2DA1H, 0xF7);               // IF2 Data A 1 High Byte
 301      =3  SFR (CAN0IF2DA2L, 0xFA);               // IF2 Data A 2 Low Byte
 302      =3  SFR (CAN0IF2DA2H, 0xFB);               // IF2 Data A 2 High Byte
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 40  

 303      =3  SFR (CAN0IF2DB1L, 0xFC);               // IF2 Data B 1 Low Byte
 304      =3  SFR (CAN0IF2DB1H, 0xFD);               // IF2 Data B 1 High Byte
 305      =3  SFR (CAN0IF2DB2L, 0xFE);               // IF2 Data B 2 Low Byte
 306      =3  SFR (CAN0IF2DB2H, 0xFF);               // IF2 Data B 2 High Byte
 307      =3  
 308      =3  
 309      =3  //-----------------------------------------------------------------------------
 310      =3  // 16-bit Register Definitions (might not be supported by all compilers)
 311      =3  //-----------------------------------------------------------------------------
 312      =3  
 313      =3  SFR16 (DP, 0x82);                      // Data Pointer
 314      =3  SFR16 (TMR3RL, 0x92);                  // Timer 3 Reload
 315      =3  SFR16 (TMR5CAP, 0x92);                 // Timer 5 Capture
 316      =3  SFR16 (TMR3, 0x94);                    // Timer 3 Capture / Reload
 317      =3  SFR16 (TMR5, 0x94);                    // Timer 5
 318      =3  SFR16 (SBRL0, 0xAC);                   // UART0 Reload
 319      =3  SFR16 (ADC0, 0xBD);                    // ADC0 data
 320      =3  SFR16 (ADC0GT, 0xC3);                  // ADC0 Greater Than Window
 321      =3  SFR16 (ADC0LT, 0xC5);                  // ADC0 Less Than Window
 322      =3  SFR16 (TMR2RL, 0xCA);                  // Timer 2 Reload
 323      =3  SFR16 (TMR4CAP, 0xCA);                 // Timer 4 Capture
 324      =3  SFR16 (TMR2, 0xCC);                    // Timer 2 Capture / Reload
 325      =3  SFR16 (TMR4, 0xCC);                    // Timer 4
 326      =3  SFR16 (PCA0CP5, 0xCE);                 // PCA0 Module 5 Capture
 327      =3  SFR16 (PCA1CP11, 0xCE);                // PCA1 Module 11 Capture
 328      =3  SFR16 (PCA0CP1, 0xE9);                 // PCA0 Module 1 Capture
 329      =3  SFR16 (PCA1CP7, 0xE9);                 // PCA1 Module 7 Capture
 330      =3  SFR16 (PCA0CP2, 0xEB);                 // PCA0 Module 2 Capture
 331      =3  SFR16 (PCA1CP8, 0xEB);                 // PCA1 Module 8 Capture
 332      =3  SFR16 (PCA0CP3, 0xED);                 // PCA0 Module 3 Capture
 333      =3  SFR16 (PCA1CP9, 0xED);                 // PCA1 Module 9 Capture
 334      =3  SFR16 (PCA0, 0xF9);                    // PCA0 Counter
 335      =3  SFR16 (PCA1, 0xF9);                    // PCA1 Counter
 336      =3  SFR16 (PCA0CP0, 0xFB);                 // PCA0 Module 0 Capture
 337      =3  SFR16 (PCA1CP6, 0xFB);                 // PCA1 Module 6 Capture
 338      =3  SFR16 (PCA0CP4, 0xFD);                 // PCA0 Module 4 Capture
 339      =3  SFR16 (PCA1CP10, 0xFD);                 // PCA1 Module 10 Capture
 340      =3  
 341      =3  SFR16 (CAN0ERR, 0x96);                 // Error Counter
 342      =3  SFR16 (CAN0BT, 0x9A);                  // Bit Timing Register
 343      =3  SFR16 (CAN0IID, 0x9C);                 // Interrupt Register
 344      =3  SFR16 (CAN0TR1, 0xA2);                 // Transmission Request 1
 345      =3  SFR16 (CAN0TR2, 0xA4);                 // Transmission Request 2
 346      =3  SFR16 (CAN0ND1, 0xAA);                 // New Data 1
 347      =3  SFR16 (CAN0ND2, 0xAC);                 // New Data 2
 348      =3  SFR16 (CAN0IP1, 0xAE);                 // Interrupt Pending 1
 349      =3  SFR16 (CAN0IP2, 0xB2);                 // Interrupt Pending 2
 350      =3  SFR16 (CAN0MV1, 0xBA);                 // Message Valid 1
 351      =3  SFR16 (CAN0MV2, 0xBC);                 // Message Valid 2
 352      =3  SFR16 (CAN0IF1CR, 0xBE);               // IF1 Command Request
 353      =3  SFR16 (CAN0IF1CM, 0xC2);               // IF1 Command Mask
 354      =3  SFR16 (CAN0IF1M1, 0xC4);               // IF1 Mask 1
 355      =3  SFR16 (CAN0IF1M2, 0xC6);               // IF1 Mask 2
 356      =3  SFR16 (CAN0IF1A1, 0xCA);               // IF1 Arbitration 1
 357      =3  SFR16 (CAN0IF1A2, 0xCC);               // IF1 Arbitration 2
 358      =3  SFR16 (CAN0IF1MC, 0xD2);               // IF1 Message Control
 359      =3  SFR16 (CAN0IF1DA1, 0xD4);              // IF1 Data A 1
 360      =3  SFR16 (CAN0IF1DA2, 0xD6);              // IF1 Data A 2
 361      =3  SFR16 (CAN0IF1DB1, 0xDA);              // IF1 Data B 1
 362      =3  SFR16 (CAN0IF1DB2, 0xDC);              // IF1 Data B 2
 363      =3  SFR16 (CAN0IF2CR, 0xDE);               // IF2 Command Request
 364      =3  SFR16 (CAN0IF2CM, 0xE2);               // IF2 Command Mask
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 41  

 365      =3  SFR16 (CAN0IF2M1, 0xEA);               // IF2 Mask 1
 366      =3  SFR16 (CAN0IF2M2, 0xEC);               // IF2 Mask 2
 367      =3  SFR16 (CAN0IF2A1, 0xEE);               // IF2 Arbitration 1
 368      =3  SFR16 (CAN0IF2A2, 0xF2);               // IF2 Arbitration 2
 369      =3  SFR16 (CAN0IF2MC, 0xCE);               // IF2 Message Control
 370      =3  SFR16 (CAN0IF2DA1, 0xF6);              // IF2 Data A 1
 371      =3  SFR16 (CAN0IF2DA2, 0xFA);              // IF2 Data A 2
 372      =3  SFR16 (CAN0IF2DB1, 0xFC);              // IF2 Data B 1
 373      =3  SFR16 (CAN0IF2DB2, 0xFE);              // IF2 Data B 2
 374      =3  
 375      =3  //-----------------------------------------------------------------------------
 376      =3  // LIN0 Indirect Registers
 377      =3  //-----------------------------------------------------------------------------
 378      =3  
 379      =3  #define  LIN0DT1   0x00                // LIN0 Data Byte 1
 380      =3  #define  LIN0DT2   0x01                // LIN0 Data Byte 2
 381      =3  #define  LIN0DT3   0x02                // LIN0 Data Byte 3
 382      =3  #define  LIN0DT4   0x03                // LIN0 Data Byte 4
 383      =3  #define  LIN0DT5   0x04                // LIN0 Data Byte 5
 384      =3  #define  LIN0DT6   0x05                // LIN0 Data Byte 6
 385      =3  #define  LIN0DT7   0x06                // LIN0 Data Byte 7
 386      =3  #define  LIN0DT8   0x07                // LIN0 Data Byte 8
 387      =3  #define  LIN0CTRL  0x08                // LIN0 Control
 388      =3  #define  LIN0ST    0x09                // LIN0 Status
 389      =3  #define  LIN0ERR   0x0A                // LIN0 Error
 390      =3  #define  LIN0SIZE  0x0B                // LIN0 Message Size
 391      =3  #define  LIN0DIV   0x0C                // LIN0 Divider
 392      =3  #define  LIN0MUL   0x0D                // LIN0 Multiplier
 393      =3  #define  LIN0ID    0x0E                // LIN0 Identifier
 394      =3  
 395      =3  //-----------------------------------------------------------------------------
 396      =3  // Address Definitions for Bit-addressable Registers
 397      =3  //-----------------------------------------------------------------------------
 398      =3  
 399      =3  #define SFR_P0       0x80
 400      =3  #define SFR_TCON     0x88
 401      =3  #define SFR_P1       0x90
 402      =3  #define SFR_SCON0    0x98
 403      =3  #define SFR_SCON1    0x98
 404      =3  #define SFR_P2       0xA0
 405      =3  #define SFR_IE       0xA8
 406      =3  #define SFR_P3       0xB0
 407      =3  #define SFR_IP       0xB8
 408      =3  #define SFR_SMB0CN   0xC0
 409      =3  #define SFR_TMR2CN   0xC8
 410      =3  #define SFR_TMR4CN   0xC8
 411      =3  #define SFR_PSW      0xD0
 412      =3  #define SFR_PCA0CN   0xD8
 413      =3  #define SFR_PCA1CN   0xD8
 414      =3  #define SFR_ACC      0xE0
 415      =3  #define SFR_ADC0CN   0xE8
 416      =3  #define SFR_B        0xF0
 417      =3  #define SFR_SPI0CN   0xF8
 418      =3  
 419      =3  //-----------------------------------------------------------------------------
 420      =3  // Bit Definitions
 421      =3  //-----------------------------------------------------------------------------
 422      =3  
 423      =3  // TCON 0x88
 424      =3  SBIT (TF1, SFR_TCON, 7);               // Timer 1 Overflow Flag
 425      =3  SBIT (TR1, SFR_TCON, 6);               // Timer 1 On/Off Control
 426      =3  SBIT (TF0, SFR_TCON, 5);               // Timer 0 Overflow Flag
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 42  

 427      =3  SBIT (TR0, SFR_TCON, 4);               // Timer 0 On/Off Control
 428      =3  SBIT (IE1, SFR_TCON, 3);               // Ext. Interrupt 1 Edge Flag
 429      =3  SBIT (IT1, SFR_TCON, 2);               // Ext. Interrupt 1 Type
 430      =3  SBIT (IE0, SFR_TCON, 1);               // Ext. Interrupt 0 Edge Flag
 431      =3  SBIT (IT0, SFR_TCON, 0);               // Ext. Interrupt 0 Type
 432      =3  
 433      =3  // SCON0 0x98
 434      =3  SBIT (OVR0, SFR_SCON0, 7);             // UART0 Receive FIFO Overrun Flag
 435      =3  SBIT (PERR0, SFR_SCON0, 6);            // UART0 Parity Error Flag
 436      =3  SBIT (THRE0, SFR_SCON0, 5);            // UART0 Transmit Register Empty Flag
 437      =3  SBIT (REN0, SFR_SCON0, 4);             // UART0 RX Enable
 438      =3  SBIT (TBX0, SFR_SCON0, 3);             // UART0 Extra Transmission Bit
 439      =3  SBIT (RBX0, SFR_SCON0, 2);             // UART0 Extra Receive Bit
 440      =3  SBIT (TI0, SFR_SCON0, 1);              // UART0 TX Interrupt Flag
 441      =3  SBIT (RI0, SFR_SCON0, 0);              // UART0 RX Interrupt Flag
 442      =3  
 443      =3  // SCON1 0x98
 444      =3  SBIT (S1MODE, SFR_SCON1, 7);           // UART1 Mode 0
 445      =3                                         // Bit 6 UNUSED
 446      =3  SBIT (MCE1, SFR_SCON1, 5);             // UART1 Multiprocessor enable
 447      =3  SBIT (REN1, SFR_SCON1, 4);             // UART1 RX Enable
 448      =3  SBIT (TB81, SFR_SCON1, 3);             // UART1 TX Bit 8
 449      =3  SBIT (RB81, SFR_SCON1, 2);             // UART1 RX Bit 8
 450      =3  SBIT (TI1, SFR_SCON1, 1);              // UART1 TX Interrupt Flag
 451      =3  SBIT (RI1, SFR_SCON1, 0);              // UART1 RX Interrupt Flag
 452      =3  
 453      =3  // IE 0xA8
 454      =3  SBIT (EA, SFR_IE, 7);                  // Global Interrupt Enable
 455      =3  SBIT (ESPI0, SFR_IE, 6);               // SPI0 Interrupt Enable
 456      =3  SBIT (ET2, SFR_IE, 5);                 // Timer 2 Interrupt Enable
 457      =3  SBIT (ES0, SFR_IE, 4);                 // UART0 Interrupt Enable
 458      =3  SBIT (ET1, SFR_IE, 3);                 // Timer 1 Interrupt Enable
 459      =3  SBIT (EX1, SFR_IE, 2);                 // External Interrupt 1 Enable
 460      =3  SBIT (ET0, SFR_IE, 1);                 // Timer 0 Interrupt Enable
 461      =3  SBIT (EX0, SFR_IE, 0);                 // External Interrupt 0 Enable
 462      =3  
 463      =3  // IP 0xB8
 464      =3                                         // Bit 7 unused
 465      =3  SBIT (PSPI0, SFR_IP, 6);               // SPI0 Interrupt Priority
 466      =3  SBIT (PT2, SFR_IP, 5);                 // Timer 2 Priority
 467      =3  SBIT (PS0, SFR_IP, 4);                 // UART0 Priority
 468      =3  SBIT (PS, SFR_IP, 4);                  // UART0 Priority
 469      =3  SBIT (PT1, SFR_IP, 3);                 // Timer 1 Priority
 470      =3  SBIT (PX1, SFR_IP, 2);                 // External Interrupt 1 Priority
 471      =3  SBIT (PT0, SFR_IP, 1);                 // Timer 0 Priority
 472      =3  SBIT (PX0, SFR_IP, 0);                 // External Interrupt 0 Priority
 473      =3  
 474      =3  // SMB0CN 0xC0
 475      =3  SBIT (MASTER, SFR_SMB0CN, 7);          // SMBus0 Master/Slave Indicator
 476      =3  SBIT (TXMODE, SFR_SMB0CN, 6);          // SMBus0 Transmit Mode Indicator
 477      =3  SBIT (STA, SFR_SMB0CN, 5);             // SMBus0 Start Flag
 478      =3  SBIT (STO, SFR_SMB0CN, 4);             // SMBus0 Stop Flag
 479      =3  SBIT (ACKRQ, SFR_SMB0CN, 3);           // SMBus0 Acknowledge Request
 480      =3  SBIT (ARBLOST, SFR_SMB0CN, 2);         // SMBus0 Arbitration Lost Indicator
 481      =3  SBIT (ACK, SFR_SMB0CN, 1);             // SMBus0 Acknowledge
 482      =3  SBIT (SI, SFR_SMB0CN, 0);              // SMBus0 Interrupt Flag
 483      =3  
 484      =3  // TMR2CN 0xC8
 485      =3  SBIT (TF2H, SFR_TMR2CN, 7);            // Timer 2 High-Byte Overflow Flag
 486      =3  SBIT (TF2L, SFR_TMR2CN, 6);            // Timer 2 Low-Byte  Overflow Flag
 487      =3  SBIT (TF2LEN, SFR_TMR2CN, 5);          // Timer 2 Low-Byte Flag Enable
 488      =3  SBIT (TF2CEN, SFR_TMR2CN, 4);          // Timer 2 Capture Enable
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 43  

 489      =3  SBIT (T2SPLIT, SFR_TMR2CN, 3);         // Timer 2 Split-Mode Enable
 490      =3  SBIT (TR2, SFR_TMR2CN, 2);             // Timer 2 Run Enable
 491      =3  SBIT (T2RCLK, SFR_TMR2CN, 1);          // Timer 2 Xclk/Rclk Select
 492      =3  SBIT (T2XCLK, SFR_TMR2CN, 0);          // Timer 2 Clk/8 Clock Source
 493      =3  
 494      =3  // TMR4CN 0xC8
 495      =3  SBIT (TF4, SFR_TMR4CN, 7);             // Timer 4 Overflow/Underflow Flag
 496      =3  SBIT (EXF4, SFR_TMR4CN, 6);            // Timer 4 External Flag
 497      =3                                         // Bit 5 unused
 498      =3                                         // Bit 4 unused
 499      =3  SBIT (EXE4, SFR_TMR4CN, 3);            // Timer 4 External Enable
 500      =3  SBIT (TR4, SFR_TMR4CN, 2);             // Timer 4 Run Enable
 501      =3  SBIT (CT4, SFR_TMR4CN, 1);             // Timer 4 Counter/Timer Select
 502      =3  SBIT (CPRL4, SFR_TMR4CN, 0);           // Timer 4 Capture/Reload Select
 503      =3  
 504      =3  // PSW 0xD0
 505      =3  SBIT (CY, SFR_PSW, 7);                 // Carry Flag
 506      =3  SBIT (AC, SFR_PSW, 6);                 // Auxiliary Carry Flag
 507      =3  SBIT (F0, SFR_PSW, 5);                 // User Flag 0
 508      =3  SBIT (RS1, SFR_PSW, 4);                // Register Bank Select 1
 509      =3  SBIT (RS0, SFR_PSW, 3);                // Register Bank Select 0
 510      =3  SBIT (OV, SFR_PSW, 2);                 // Overflow Flag
 511      =3  SBIT (F1, SFR_PSW, 1);                 // User Flag 1
 512      =3  SBIT (P, SFR_PSW, 0);                  // Accumulator Parity Flag
 513      =3  
 514      =3  // PCA0CN 0xD8
 515      =3  SBIT (CF, SFR_PCA0CN, 7);              // PCA0 Counter Overflow Flag
 516      =3  SBIT (CR, SFR_PCA0CN, 6);              // PCA0 Counter Run Control Bit
 517      =3  SBIT (CCF5, SFR_PCA0CN, 5);            // PCA0 Module 5 Interrupt Flag
 518      =3  SBIT (CCF4, SFR_PCA0CN, 4);            // PCA0 Module 4 Interrupt Flag
 519      =3  SBIT (CCF3, SFR_PCA0CN, 3);            // PCA0 Module 3 Interrupt Flag
 520      =3  SBIT (CCF2, SFR_PCA0CN, 2);            // PCA0 Module 2 Interrupt Flag
 521      =3  SBIT (CCF1, SFR_PCA0CN, 1);            // PCA0 Module 1 Interrupt Flag
 522      =3  SBIT (CCF0, SFR_PCA0CN, 0);            // PCA0 Module 0 Interrupt Flag
 523      =3  
 524      =3  // PCA1CN 0xD8
 525      =3  SBIT (CF1, SFR_PCA1CN, 7);             // PCA1 Counter Overflow Flag
 526      =3  SBIT (CR1, SFR_PCA1CN, 6);             // PCA1 Counter Run Control Bit
 527      =3  SBIT (CCF11, SFR_PCA1CN, 5);           // PCA1 Module 11 Interrupt Flag
 528      =3  SBIT (CCF10, SFR_PCA1CN, 4);           // PCA1 Module 10 Interrupt Flag
 529      =3  SBIT (CCF9, SFR_PCA1CN, 3);            // PCA1 Module 9 Interrupt Flag
 530      =3  SBIT (CCF8, SFR_PCA1CN, 2);            // PCA1 Module 8 Interrupt Flag
 531      =3  SBIT (CCF7, SFR_PCA1CN, 1);            // PCA1 Module 7 Interrupt Flag
 532      =3  SBIT (CCF6, SFR_PCA1CN, 0);            // PCA1 Module 6 Interrupt Flag
 533      =3  
 534      =3  // ADC0CN 0xE8
 535      =3  SBIT (AD0EN, SFR_ADC0CN, 7);           // ADC0 Enable
 536      =3  SBIT (BURSTEN, SFR_ADC0CN, 6);         // ADC0 Burst Enable
 537      =3  SBIT (AD0INT, SFR_ADC0CN, 5);          // ADC0 EOC Interrupt Flag
 538      =3  SBIT (AD0BUSY, SFR_ADC0CN, 4);         // ADC0 Busy Flag
 539      =3  SBIT (AD0WINT, SFR_ADC0CN, 3);         // ADC0 Window Compare Interrupt Flag
 540      =3  SBIT (AD0LJST, SFR_ADC0CN, 2);         // ADC0 Left Justified
 541      =3  SBIT (AD0CM1, SFR_ADC0CN, 1);          // ADC0 Start Of Conversion Mode Bit 1
 542      =3  SBIT (AD0CM0, SFR_ADC0CN, 0);          // ADC0 Start Of Conversion Mode Bit 0
 543      =3  
 544      =3  // SPI0CN 0xF8
 545      =3  SBIT (SPIF, SFR_SPI0CN, 7);            // SPI0 Interrupt Flag
 546      =3  SBIT (WCOL, SFR_SPI0CN, 6);            // SPI0 Write Collision Flag
 547      =3  SBIT (MODF, SFR_SPI0CN, 5);            // SPI0 Mode Fault Flag
 548      =3  SBIT (RXOVRN, SFR_SPI0CN, 4);          // SPI0 RX Overrun Flag
 549      =3  SBIT (NSSMD1, SFR_SPI0CN, 3);          // SPI0 Slave Select Mode 1
 550      =3  SBIT (NSSMD0, SFR_SPI0CN, 2);          // SPI0 Slave Select Mode 0
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 44  

 551      =3  SBIT (TXBMT, SFR_SPI0CN, 1);           // SPI0 TX Buffer Empty Flag
 552      =3  SBIT (SPIEN, SFR_SPI0CN, 0);           // SPI0 Enable
 553      =3  
 554      =3  //-----------------------------------------------------------------------------
 555      =3  // Interrupt Priorities
 556      =3  //-----------------------------------------------------------------------------
 557      =3  
 558      =3  #define INTERRUPT_INT0             0   // External Interrupt 0
 559      =3  #define INTERRUPT_TIMER0           1   // Timer 0 Overflow
 560      =3  #define INTERRUPT_INT1             2   // External Interrupt 1
 561      =3  #define INTERRUPT_TIMER1           3   // Timer 1 Overflow
 562      =3  #define INTERRUPT_UART0            4   // UART0
 563      =3  #define INTERRUPT_TIMER2           5   // Timer 2 Overflow
 564      =3  #define INTERRUPT_SPI0             6   // SPI0
 565      =3  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 566      =3  #define INTERRUPT_ADC0_WINDOW      8   // ADC0 Window Comparison
 567      =3  #define INTERRUPT_ADC0_EOC         9   // ADC0 End Of Conversion
 568      =3  #define INTERRUPT_PCA0            10   // PCA0 Peripheral
 569      =3  #define INTERRUPT_COMPARATOR0     11   // Comparator 0 Comparison
 570      =3  #define INTERRUPT_COMPARATOR1     12   // Comparator 1 Comparison
 571      =3  #define INTERRUPT_TIMER3          13   // Timer 3 Overflow
 572      =3  #define INTERRUPT_LIN0            14   // LIN Bus Interrupt
 573      =3  #define INTERRUPT_VREG            15   // Voltage Regulator
 574      =3  #define INTERRUPT_CAN0            16   // CAN Bus Interrupt
 575      =3  #define INTERRUPT_PORT_MATCH      17   // Port Match
 576      =3  #define INTERRUPT_UART1           18   // UART1
 577      =3  #define INTERRUPT_PCA1            19   // PCA1 Peripheral
 578      =3  #define INTERRUPT_COMPARATOR2     20   // Comparator 2 Comparison
 579      =3  #define INTERRUPT_TIMER4          21   // Timer 4 Overflow
 580      =3  #define INTERRUPT_TIMER5          22   // Timer 5 Overflow
 581      =3  
 582      =3  
 583      =3  //-----------------------------------------------------------------------------
 584      =3  // SFR Page Definitions
 585      =3  //-----------------------------------------------------------------------------
 586      =3  
 587      =3  #define  CONFIG_PAGE       0x0F        // System and Port Configuration Page
 588      =3  #define  ACTIVE_PAGE       0x00        // Active Use Page
 589      =3  #define  ACTIVE2_PAGE      0x10        // Active Use Page 2
 590      =3  #define  CAN0_PAGE         0x0C        // CAN0 Registers
 591      =3  
 592      =3  //-----------------------------------------------------------------------------
 593      =3  // SDCC PDATA External Memory Paging Support
 594      =3  //-----------------------------------------------------------------------------
 595      =3  
 596      =3  #if defined SDCC
           =3 
           =3 SFR(_XPAGE, 0xAA); // Point to the EMI0CN register
           =3 
           =3 #endif
 601      =3  
 602      =3  //-----------------------------------------------------------------------------
 603      =3  // Header File PreProcessor Directive
 604      =3  //-----------------------------------------------------------------------------
 605      =3  
 606      =3  #endif                                 // #define C8051F580_DEFS_H
 607      =3  
 608      =3  //-----------------------------------------------------------------------------
 609      =3  // End Of File
 610      =3  //-----------------------------------------------------------------------------
 136      =2  /*****************************************************************************/
 137      =2  #include <stdio.h>
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 45  

   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDIO.H
   3      =3  
   4      =3  Prototypes for standard I/O functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __STDIO_H__
  10      =3  #define __STDIO_H__
  11      =3  
  12      =3  #ifndef EOF
  13      =3   #define EOF -1
  14      =3  #endif
  15      =3  
  16      =3  #ifndef NULL
           =3  #define NULL ((void *) 0)
           =3 #endif
  19      =3  
  20      =3  #ifndef _SIZE_T
  21      =3   #define _SIZE_T
  22      =3   typedef unsigned int size_t;
  23      =3  #endif
  24      =3  
  25      =3  #pragma SAVE
  26      =3  #pragma REGPARMS
  27      =3  extern char _getkey (void);
  28      =3  extern char getchar (void);
  29      =3  extern char ungetchar (char);
  30      =3  extern char putchar (char);
  31      =3  extern int printf   (const char *, ...);
  32      =3  extern int sprintf  (char *, const char *, ...);
  33      =3  extern int vprintf  (const char *, char *);
  34      =3  extern int vsprintf (char *, const char *, char *);
  35      =3  extern char *gets (char *, int n);
  36      =3  extern int scanf (const char *, ...);
  37      =3  extern int sscanf (char *, const char *, ...);
  38      =3  extern int puts (const char *);
  39      =3  
  40      =3  #pragma RESTORE
  41      =3  
  42      =3  #endif
  43      =3  
 138      =2  #include <stdlib.h> 
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDLIB.H
   3      =3  
   4      =3  Standard functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STDLIB_H__
  11      =3  #define __STDLIB_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 46  

           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #ifndef _WCHAR_T_DEFINED_
  23      =3  #define _WCHAR_T_DEFINED_
  24      =3  typedef char wchar_t;
  25      =3  #endif
  26      =3  
  27      =3  #if defined (__CX2__)
           =3 #ifndef _DIV_T_DEFINED
           =3 typedef struct _div_t {
           =3         int quot;
           =3         int rem;
           =3 } div_t;
           =3 typedef struct _ldiv_t {
           =3         long quot;
           =3         long rem;
           =3 } ldiv_t;
           =3 #define _DIV_T_DEFINED
           =3 #endif // _DIV_T_DEFINED
           =3 #endif // __CX2__
  40      =3  
  41      =3  #ifndef RAND_MAX
  42      =3   #define RAND_MAX  32767u
  43      =3  #endif
  44      =3  
  45      =3  #if defined (__CX2__)
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif // __CX2__
  52      =3  
  53      =3  #pragma SAVE
  54      =3  #pragma REGPARMS
  55      =3  
  56      =3  extern char   cabs (char  val);
  57      =3  #if !defined (__CX2__)
  58      =3  extern int    abs  (int   val);
  59      =3  #endif // __CX2__
  60      =3  extern long   labs (long  val);
  61      =3  
  62      =3  extern float  atof (const char *s1);
  63      =3  extern long   atol (const char *s1);
  64      =3  extern int    atoi (const char *s1);
  65      =3  extern int    rand (void);
  66      =3  extern void   srand (unsigned int seed);
  67      =3  
  68      =3  #ifdef _DIV_T_DEFINED
           =3 extern div_t  __div (int numer, int denom);
           =3 #define div(numer,denom)  __div((numer),(denom));
           =3 extern ldiv_t ldiv (long numer, long denom);
           =3 #endif // _DIV_T_DEFINED
  73      =3  
  74      =3  extern float         strtod  (const char *nptr, char **endptr);
  75      =3  extern long          strtol  (const char *nptr, char **endptr, unsigned char base);
  76      =3  extern unsigned long strtoul (const char *nptr, char **endptr, unsigned char base);
  77      =3  
  78      =3  #define _MALLOC_MEM_    xdata
  79      =3  
  80      =3  extern void init_mempool          (void _MALLOC_MEM_ *p, size_t size);
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 47  

  81      =3  extern void _MALLOC_MEM_ *malloc  (size_t size);
  82      =3  extern void free                  (void _MALLOC_MEM_ *p);
  83      =3  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, size_t size);
  84      =3  extern void _MALLOC_MEM_ *calloc  (size_t nmemb, size_t size);
  85      =3  
  86      =3  #if defined (__CX2__)
           =3 extern void abort(void);
           =3 #endif // __CX2__
  89      =3  
  90      =3  #pragma RESTORE
  91      =3  
  92      =3  #endif // __STDLIB_H__
 139      =2  #include <string.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STRING.H
   3      =3  
   4      =3  String functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __STRING_H__
  11      =3  #define __STRING_H__
  12      =3  
  13      =3  #ifndef _SIZE_T
           =3  #define _SIZE_T
           =3  typedef unsigned int size_t;
           =3 #endif
  17      =3  
  18      =3  #ifndef NULL
           =3  #define NULL ((void *)0)
           =3 #endif
  21      =3  
  22      =3  #pragma SAVE
  23      =3  #pragma REGPARMS
  24      =3  extern char  *strcat  (char *s1, const char *s2);
  25      =3  extern char  *strncat (char *s1, const char *s2, size_t n);
  26      =3  
  27      =3  extern char   strcmp  (const char *s1, const char *s2);
  28      =3  extern char   strncmp (const char *s1, const char *s2, size_t n);
  29      =3  
  30      =3  extern char  *strcpy  (char *s1, const char *s2);
  31      =3  extern char  *strncpy (char *s1, const char *s2, size_t n);
  32      =3  
  33      =3  extern size_t strlen  (const char *);
  34      =3  
  35      =3  extern char  *strchr  (const char *s, char c);
  36      =3  extern int    strpos  (const char *s, char c);
  37      =3  extern char  *strrchr (const char *s, char c);
  38      =3  extern int    strrpos (const char *s, char c);
  39      =3  
  40      =3  extern size_t strspn  (const char *s, const char *set);
  41      =3  extern size_t strcspn (const char *s, const char *set);
  42      =3  extern char  *strpbrk (const char *s, const char *set);
  43      =3  extern char  *strrpbrk(const char *s, const char *set);
  44      =3  extern char  *strstr  (const char *s, const char *sub);
  45      =3  extern char  *strtok  (char *str, const char *set);
  46      =3  
  47      =3  extern char   memcmp  (const void *s1, const void *s2, size_t n);
  48      =3  extern void  *memcpy  (void *s1, const void *s2, size_t n);
  49      =3  extern void  *memchr  (const void *s, char val, size_t n);
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 48  

  50      =3  extern void  *memccpy (void *s1, const void *s2, char val, size_t n);
  51      =3  extern void  *memmove (void *s1, const void *s2, size_t n);
  52      =3  extern void  *memset  (void *s, char val, size_t n);
  53      =3  #pragma RESTORE
  54      =3  
  55      =3  #endif
 140      =2  #include <INTRINS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  INTRINS.H
   3      =3  
   4      =3  Intrinsic functions for C51.
   5      =3  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __INTRINS_H__
  10      =3  #define __INTRINS_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  
  14      =3  #if defined (__CX2__)
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 #endif
  18      =3  
  19      =3  extern void          _nop_     (void);
  20      =3  extern bit           _testbit_ (bit);
  21      =3  extern unsigned char _cror_    (unsigned char, unsigned char);
  22      =3  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  23      =3  extern unsigned long _lror_    (unsigned long, unsigned char);
  24      =3  extern unsigned char _crol_    (unsigned char, unsigned char);
  25      =3  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  26      =3  extern unsigned long _lrol_    (unsigned long, unsigned char);
  27      =3  extern unsigned char _chkfloat_(float);
  28      =3  #if defined (__CX2__)
           =3 extern int           abs       (int);
           =3 extern void          _illop_   (void);
           =3 #endif
  32      =3  #if !defined (__CX2__)
  33      =3  extern void          _push_    (unsigned char _sfr);
  34      =3  extern void          _pop_     (unsigned char _sfr);
  35      =3  #endif
  36      =3  
  37      =3  #pragma RESTORE
  38      =3  
  39      =3  #endif
  40      =3  
 141      =2  #include <ctype.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  CTYPE.H
   3      =3  
   4      =3  Prototypes for character functions.
   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __CTYPE_H__
  10      =3  #define __CTYPE_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  #pragma REGPARMS
  14      =3  extern bit isalpha (unsigned char);
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 49  

  15      =3  extern bit isalnum (unsigned char);
  16      =3  extern bit iscntrl (unsigned char);
  17      =3  extern bit isdigit (unsigned char);
  18      =3  extern bit isgraph (unsigned char);
  19      =3  extern bit isprint (unsigned char);
  20      =3  extern bit ispunct (unsigned char);
  21      =3  extern bit islower (unsigned char);
  22      =3  extern bit isupper (unsigned char);
  23      =3  extern bit isspace (unsigned char);
  24      =3  extern bit isxdigit (unsigned char);
  25      =3  extern unsigned char tolower (unsigned char);
  26      =3  extern unsigned char toupper (unsigned char);
  27      =3  extern unsigned char toint (unsigned char);
  28      =3  
  29      =3  #define _tolower(c) ( (c)-'A'+'a' )
  30      =3  #define _toupper(c) ( (c)-'a'+'A' )
  31      =3  #define toascii(c)  ( (c) & 0x7F )
  32      =3  #pragma RESTORE
  33      =3  
  34      =3  #endif
 142      =2  #include <LIMITS.H>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  LIMITS.H
   3      =3  
   4      =3  ANSI standard include file.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2009 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __LIMITS_H__
  11      =3  #define __LIMITS_H__
  12      =3  
  13      =3  #define CHAR_BIT         8              /* Number of bits in any "char" */
  14      =3  #define CHAR_MAX         127            /* Max             "char" value */
  15      =3  #define CHAR_MIN       (-128)           /* Min             "char" value */
  16      =3  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  17      =3  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
  18      =3  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  19      =3  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  20      =3  #define SHRT_MIN       (-32767-1)       /* Min ("signed") "short" value */
  21      =3  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  22      =3  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  23      =3  #define INT_MIN        (-32767-1)       /* Min ("signed")   "int" value */
  24      =3  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  25      =3  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  26      =3  #define LONG_MIN   (-2147483647L-1L)    /* Min ("signed")  "long" value */
  27      =3  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
  28      =3  
  29      =3  #endif
 143      =2  #include <math.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  MATH.H
   3      =3  
   4      =3  Prototypes for mathematic functions.
   5      =3  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =3  All rights reserved.
   8      =3  --------------------------------------------------------------------------*/
   9      =3  
  10      =3  #ifndef __MATH_H__
  11      =3  #define __MATH_H__
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 50  

  12      =3  
  13      =3  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
           =3 #ifndef HUGE_VAL
           =3 #define HUGE_VAL __inf__
           =3 #endif // HUGE_VAL
           =3 
           =3 #ifndef NAN
           =3 #define NAN __nan__
           =3 #endif // NAN
           =3 
           =3 #pragma SAVE
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 extern int    abs  (int   val);
           =3 #pragma RESTORE
           =3 #endif
  28      =3  
  29      =3  #pragma SAVE
  30      =3  #pragma REGPARMS
  31      =3  #if !defined (__CX2__)
  32      =3  extern char  cabs  (char  val);
  33      =3  extern int    abs  (int   val);
  34      =3  extern long  labs  (long  val);
  35      =3  #endif
  36      =3  
  37      =3  extern float fabs  (float val);
  38      =3  extern float sqrt  (float val);
  39      =3  extern float exp   (float val);
  40      =3  extern float log   (float val);
  41      =3  extern float log10 (float val);
  42      =3  extern float sin   (float val);
  43      =3  extern float cos   (float val);
  44      =3  extern float tan   (float val);
  45      =3  extern float asin  (float val);
  46      =3  extern float acos  (float val);
  47      =3  extern float atan  (float val);
  48      =3  extern float sinh  (float val);
  49      =3  extern float cosh  (float val);
  50      =3  extern float tanh  (float val);
  51      =3  extern float atan2 (float y, float x);
  52      =3  
  53      =3  extern float ceil  (float val);
  54      =3  extern float floor (float val);
  55      =3  extern float modf  (float val, float *n);
  56      =3  extern float fmod  (float x, float y);
  57      =3  extern float pow   (float x, float y);
  58      =3  
  59      =3  #if defined (__CX2__)
           =3 extern float frexp (float val, int *exp);
           =3 extern float ldexp (float val, int exp);
           =3 #endif
  63      =3  
  64      =3  #pragma RESTORE
  65      =3  
  66      =3  #endif
 144      =2  /*****************************************************************************/
 145      =2  #include "InitDeviceF580.h"
   1      =3  #ifndef __INITDEVICEF020_H__
   2      =3  #define __INITDEVICEF020_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
           =2 #include "delay.h"
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 51  

           =2 #include "i2c0.h"
           =2 #include "i2c1.h"
           =2 #include "i2c2.h"
           =2 #include "i2c3.h"
           =2 #include "i2c4.h"
           =2 #include "i2c5.h"
           =2 #include "i2c6.h"
           =2 #include "eprom.h"
           =2 #include "mcp47x6.h"
           =2 #include "inPca9554.h"
           =2 #include "outPca9554.h"
           =2 
           =2 #if CONFIG_SPLC_USING_UART1 == 1
           =2 #include "sPlcUart.h"
           =2 #endif
           =2 #if CONFIG_SPLC_USING_CADC == 1
           =2 #include "sPlcChipAdc.h"
           =2 #endif
           =2 #if CONFIG_SPLC_USING_DAC == 1
           =2 #include "sPlcDac.h"
           =2 #endif
           =2 /*****************************************************************************/
           =2 #include "Modbus.h"
           =2 #include "ModbusPort.h"
           =2 /*****************************************************************************/
           =2 #include "sPLC.h"
           =2 #include "sPlcFun.h"
           =2 /*****************************************************************************/
           =2 #endif
   4      =3  #ifndef __INITDEVICEF020_H__
   4      =3  #define __INITDEVICEF020_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void initDevice(void);
   7      =3  #endif
   1      =3  #ifndef __DELAY_H__
   2      =3  #define __DELAY_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __DELAY_H__
   4      =3  #define __DELAY_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void delayMs(uint8_t ms) reentrant;
   7      =3  void delayUs(uint8_t us) reentrant;
   8      =3  void hwDelayInit(uint8_t reload_h, uint8_t reload_l);
   9      =3  void hwDelay(uint8_t control, uint8_t reload_h, uint8_t reload_l);
  10      =3  /*****************************************************************************/
  11      =3  #endif
  12      =3  
   1      =3  #ifndef __I2C0_H__
   2      =3  #define __I2C0_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C0_H__
   4      =3  #define __I2C0_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 52  

   7      =3  /*****************************************************************************/
   8      =3  void iic0Init(void);
   9      =3  void iic0Start(void);
  10      =3  void iic0Stop(void);
  11      =3  uint8_t iic0WaitAck(void);
  12      =3  void iic0Ack(void);
  13      =3  void iic0NAck(void);
  14      =3  void iic0SendByte(uint8_t txd);
  15      =3  uint8_t iic0ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C1_H__
   2      =3  #define __I2C1_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C1_H__
   4      =3  #define __I2C1_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic1Init(void);
   9      =3  void iic1Start(void);
  10      =3  void iic1Stop(void);
  11      =3  uint8_t iic1WaitAck(void);
  12      =3  void iic1Ack(void);
  13      =3  void iic1NAck(void);
  14      =3  void iic1SendByte(uint8_t txd);
  15      =3  uint8_t iic1ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C2_H__
   2      =3  #define __I2C2_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C2_H__
   4      =3  #define __I2C2_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic2Init(void);
   9      =3  void iic2Start(void);
  10      =3  void iic2Stop(void);
  11      =3  uint8_t iic2WaitAck(void);
  12      =3  void iic2Ack(void);
  13      =3  void iic2NAck(void);
  14      =3  void iic2SendByte(uint8_t txd);
  15      =3  uint8_t iic2ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C3_H__
   2      =3  #define __I2C3_H__
   3      =3  /*****************************************************************************/
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 53  

   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C3_H__
   4      =3  #define __I2C3_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic3Init(void);
   9      =3  void iic3Start(void);
  10      =3  void iic3Stop(void);
  11      =3  uint8_t iic3WaitAck(void);
  12      =3  void iic3Ack(void);
  13      =3  void iic3NAck(void);
  14      =3  void iic3SendByte(uint8_t txd);
  15      =3  uint8_t iic3ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C4_H__
   2      =3  #define __I2C4_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C4_H__
   4      =3  #define __I2C4_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic4Init(void);
   9      =3  void iic4Start(void);
  10      =3  void iic4Stop(void);
  11      =3  uint8_t iic4WaitAck(void);
  12      =3  void iic4Ack(void);
  13      =3  void iic4NAck(void);
  14      =3  void iic4SendByte(uint8_t txd);
  15      =3  uint8_t iic4ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C5_H__
   2      =3  #define __I2C5_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C5_H__
   4      =3  #define __I2C5_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic5Init(void);
   9      =3  void iic5Start(void);
  10      =3  void iic5Stop(void);
  11      =3  uint8_t iic5WaitAck(void);
  12      =3  void iic5Ack(void);
  13      =3  void iic5NAck(void);
  14      =3  void iic5SendByte(uint8_t txd);
  15      =3  uint8_t iic5ReadByte(uint8_t ack);
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 54  

  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __I2C6_H__
   2      =3  #define __I2C6_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __I2C6_H__
   4      =3  #define __I2C6_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  
   7      =3  /*****************************************************************************/
   8      =3  void iic6Init(void);
   9      =3  void iic6Start(void);
  10      =3  void iic6Stop(void);
  11      =3  uint8_t iic6WaitAck(void);
  12      =3  void iic6Ack(void);
  13      =3  void iic6NAck(void);
  14      =3  void iic6SendByte(uint8_t txd);
  15      =3  uint8_t iic6ReadByte(uint8_t ack);
  16      =3  
  17      =3  #endif
  18      =3  
  19      =3  
   1      =3  #ifndef __EPROM_H__
   2      =3  #define __EPROM_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __EPROM_H__
   4      =3  #define __EPROM_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  /*****************************************************************************/
   7      =3  void epromInit(void);
   8      =3  uint8_t epromReadOneByte(uint16_t ReadAddr);
   9      =3  void epromWriteOneByte(uint16_t WriteAddr, uint8_t DataToWrite);
  10      =3  void epromWriteLenByte(uint16_t WriteAddr, uint32_t DataToWrite, uint8_t Len);
  11      =3  uint32_t epromReadLenByte(uint16_t ReadAddr, uint8_t Len);
  12      =3  void epromRead(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead);
  13      =3  void epromWrite(uint16_t WriteAddr, uint8_t *pBuffer, uint16_t NumToWrite);
  14      =3  uint8_t epromTest(void);
  15      =3  #endif
   1      =3  #ifndef __MCP47X6_H__
   2      =3  #define __MCP47X6_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MCP47X6_H__
   4      =3  #define __MCP47X6_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  uint8_t mcp47x6Init(void);
   7      =3  void mcp47x6Write(uint8_t channel, uint16_t dat) reentrant;
   8      =3  #endif
   9      =3          
  10      =3  
  11      =3  
  12      =3  
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 55  

  13      =3  
  14      =3  
  15      =3  
  16      =3  
  17      =3  
  18      =3  
  19      =3  
  20      =3  
   1      =3  #ifndef __INPCA9554_H__
   2      =3  #define __INPCA9554_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __INPCA9554_H__
   4      =3  #define __INPCA9554_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void inPca9554Init(void);
   7      =3  uint8_t inPca9554Read(void);
   8      =3  void inPca9554Write(uint8_t wdata);
   9      =3  
  10      =3  #endif
   1      =3  #ifndef __OUTPCA9554_H__
   2      =3  #define __OUTPCA9554_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __OUTPCA9554_H__
   4      =3  #define __OUTPCA9554_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void outPca9554Init(void);
   7      =3  uint8_t outPca9554Read(void);
   8      =3  void outPca9554Write(uint8_t wdata);
   9      =3  
  10      =3  #endif
   1      =3  #ifndef __SPLCUART_H__
   2      =3  #define __SPLCUART_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __SPLCUART_H__
   4      =3  #define __SPLCUART_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void initUart1(uint32_t baudrate);
   7      =3  void USEND(uint16_t port, uint16_t sendBufAdr, uint16_t length);//串口发送
   8      =3  void URECV(uint16_t port, uint16_t recvBufAdr, uint16_t length);//串口接收
   9      =3  #endif
   1      =3  #ifndef __SPLCCHIPADC_H__
   2      =3  #define __SPLCCHIPADC_H__
   3      =3  #include "appConfig.h"
   3      =3  #ifndef __SPLCCHIPADC_H__
   3      =3  #define __SPLCCHIPADC_H__
   3      =3  #include "appConfig.h"
   4      =3  /*****************************************************************************/
   5      =3  typedef struct{//ADC滤波器
   6      =3          uint16_t dat[CONFIG_SPLC_ADC_FILTER_TAP];
   7      =3          uint16_t out;
   8      =3          uint8_t wIndex;//写入指针
   9      =3  }adcTempDat_t;
  10      =3  /*****************************************************************************/
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 56  

  11      =3  void initChipAdc(void);
  12      =3  void chipAdcProcess(void);
  13      =3  void refreshAdcData(adcTempDat_t *s , uint16_t dat);
  14      =3  #endif
   1      =3  #ifndef __SPLCDAC_H__
   2      =3  #define __SPLCDAC_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __SPLCDAC_H__
   4      =3  #define __SPLCDAC_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void initChipDac(void);
   7      =3  void refreshDac(void);
   8      =3  void selfTestDac(void);
   9      =3  
  10      =3  #endif
   1      =3  #ifndef __MODBUS__H__
   2      =3  #define __MODBUS__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUS__H__
   4      =3  #define __MODBUS__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern volatile uint16_t modbusTimerValue;
   7      =3  extern volatile uint8_t modbusReceiveCounter;// Collected data number
   8      =3  extern xdata volatile uint8_t modbusReceiveBuffer[CONFIG_MB_RTU_SLAVE_BUFFER_SIZE];
   9      =3  /*****************************************************************************/
  10      =3  extern void initModbus(uint8_t modbusSlaveAddress, uint32_t bd);
  11      =3  extern void modbusPorcess(void);
  12      =3  #endif
   1      =3  #ifndef __MODBUSPORT__H__
   2      =3  #define __MODBUSPORT__H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __MODBUSPORT__H__
   4      =3  #define __MODBUSPORT__H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  extern void modBusUartInitialise(uint32_t baudrate);
   7      =3  extern void modBusTimerInitialise(void);
   8      =3  extern void modBusUartPutch(uint8_t c);
   9      =3  extern uint8_t modBusUartString(uint8_t *s, uint16_t Length);
  10      =3  extern void receiveInterrupt(uint8_t Data);
  11      =3  /*****************************************************************************/
  12      =3  #endif
   1      =3  #ifndef __SPLC_H__
           =3 #define __SPLC_H__
           =3 /*****************************************************************************/
           =3 #include "appConfig.h"
           =3 /*****************************************************************************/
           =3 //线圈 保持 8 * 16 = 128BIT
           =3 #define MR_START                                                0
           =3 #define MR_END                                                  3
           =3 //线圈寄存器 非保持 8 * 16 = 128BIT
           =3 #define R_START                                                 4
           =3 #define R_END                                                   11
           =3 //数据寄存器 保持 8
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 57  

           =3 #define DM_START                                                12
           =3 #define DM_END                                                  19
           =3 //数据寄存器 非保持 140个字
           =3 #define EM_START                                                20
           =3 #define EM_END                                                  159
           =3 //延时线圈
           =3 //1MS 1 * 16 = 16BIT
           =3 #define T_1MS_START                                             160
           =3 #define T_1MS_END                                               160
           =3 //10MS 1 * 16 = 16BIT
           =3 #define T_10MS_START                                    161
           =3 #define T_10MS_END                                              161
           =3 //100MS 1 * 16 = 16BIT
           =3 #define T_100MS_START                                   162
           =3 #define T_100MS_END                                             162
           =3 //延时计时器 
           =3 //1MS 16
           =3 #define TD_1MS_START                                    163
           =3 #define TD_1MS_END                                              178
           =3 //10MS 16
           =3 #define TD_10MS_START                                   179
           =3 #define TD_10MS_END                                             194
           =3 //100MS 16
           =3 #define TD_100MS_START                                  195
           =3 #define TD_100MS_END                                    210
           =3 //计数器 1
           =3 #define C_START                                                 211
           =3 #define C_END                                                   211
           =3 //输入位寄存器 1 * 16 = 16个
           =3 #define X_START                                                 212
           =3 #define X_END                                                   212             
           =3 //输出位寄存器 1 * 16 = 16个
           =3 #define Y_START                                                 213
           =3 #define Y_END                                                   213
           =3 //特殊寄存器 24个字
           =3 #define SPREG_START                                             214
           =3 #define SPREG_END                                               237
           =3 //特殊线圈      4 * 16 = 64个
           =3 #define SPCOIL_START                                    238
           =3 #define SPCOIL_END                                              241
           =3 /*****************************************************************************/
           =3 #define EM_ADC_0                                                (EM_START + 0)//ADC0->MLD0
           =3 #define EM_ADC_1                                                (EM_START + 1)//ADC1->MLD1
           =3 #define EM_ADC_2                                                (EM_START + 2)//ADC2->MLD2
           =3 #define EM_ADC_3                                                (EM_START + 3)//ADC3->MLD3
           =3 #define EM_ADC_4                                                (EM_START + 4)//ADC4->MLD4
           =3 #define EM_ADC_5                                                (EM_START + 5)//ADC5->MLD5
           =3 #define EM_ADC_6                                                (EM_START + 6)//ADC6->MLD6
           =3 #define EM_ADC_7                                                (EM_START + 7)//ADC7->MLD7
           =3 #define EM_ADC_8                                                (EM_START + 8)//ADC8->MLD8
           =3 #define EM_ADC_9                                                (EM_START + 9)//ADC9->MLD9
           =3 #define EM_ADC_10                                               (EM_START + 10)//ADC10->MLD10
           =3 #define EM_ADC_11                                               (EM_START + 11)//ADC11->MLD11
           =3 #define EM_ADC_12                                               (EM_START + 12)//ADC12->MLD12
           =3 #define EM_ADC_13                                               (EM_START + 13)//ADC13->MLD13
           =3 #define EM_ADC_14                                               (EM_START + 14)//ADC14->MLD14
           =3 #define EM_ADC_15                                               (EM_START + 15)//ADC15->MLD15
           =3 #define EM_ADC_16                                               (EM_START + 16)//ADC16->MLD16
           =3 #define EM_ADC_17                                               (EM_START + 17)//ADC17->MLD17
           =3 #define EM_ADC_18                                               (EM_START + 18)//ADC18->MLD18
           =3 #define EM_ADC_19                                               (EM_START + 19)//ADC19->MLD19
           =3 #define EM_ADC_20                                               (EM_START + 20)//ADC20->MLD20
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 58  

           =3 #define EM_ADC_21                                               (EM_START + 21)//ADC21->MLD21
           =3 #define EM_ADC_22                                               (EM_START + 22)//ADC22->MLD22
           =3 #define EM_ADC_23                                               (EM_START + 23)//ADC23->MLD23
           =3 #define EM_ADC_24                                               (EM_START + 24)//ADC24->MLD24
           =3 #define EM_ADC_25                                               (EM_START + 25)//ADC25->MLD25
           =3 #define EM_ADC_26                                               (EM_START + 26)//ADC26->MLD26
           =3 #define EM_ADC_27                                               (EM_START + 27)//ADC27->MLD27
           =3 #define EM_ADC_28                                               (EM_START + 28)//ADC28->MLD28
           =3 #define EM_ADC_29                                               (EM_START + 29)//ADC29->MLD29
           =3 #define EM_ADC_30                                               (EM_START + 30)//ADC30->MLD30
           =3 #define EM_ADC_31                                               (EM_START + 31)//ADC31->MLD31
           =3 #define EM_ADC_32                                               (EM_START + 32)//ADC32->MPD0
           =3 #define EM_ADC_33                                               (EM_START + 33)//ADC33->MPD1
           =3 #define EM_ADC_34                                               (EM_START + 34)//ADC34->MPD2
           =3 #define EM_ADC_35                                               (EM_START + 35)//ADC35->MPD3
           =3 #define EM_ADC_36                                               (EM_START + 36)//ADC36->MPD4
           =3 #define EM_ADC_37                                               (EM_START + 37)//ADC37->MPD5
           =3 #define EM_ADC_38                                               (EM_START + 38)//ADC38->MPD6
           =3 #define EM_ADC_39                                               (EM_START + 39)//ADC39->MPD7
           =3 #define EM_ADC_40                                               (EM_START + 40)//ADC40->MPD8
           =3 #define EM_ADC_41                                               (EM_START + 41)//ADC41->MPD9
           =3 #define EM_ADC_42                                               (EM_START + 42)//ADC42->MPD10
           =3 #define EM_ADC_43                                               (EM_START + 43)//ADC42->MPD11
           =3 #define EM_ADC_44                                               (EM_START + 44)//ADC42->MPD12
           =3 #define EM_ADC_45                                               (EM_START + 45)//ADC42->MPD13
           =3 #define EM_ADC_46                                               (EM_START + 46)//ADC42->MPD14
           =3 #define EM_ADC_47                                               (EM_START + 47)//ADC42->MPD15
           =3 #define EM_ADC_48                                               (EM_START + 48)//ADC42->MPD16
           =3 #define EM_ADC_49                                               (EM_START + 49)//ADC42->MPD17
           =3 #define EM_ADC_50                                               (EM_START + 50)//ADC42->MPD18
           =3 #define EM_ADC_51                                               (EM_START + 51)//ADC42->MPD19
           =3 #define EM_ADC_52                                               (EM_START + 52)//ADC42->MPD20
           =3 #define EM_ADC_53                                               (EM_START + 53)//ADC43->MPD21
           =3 #define EM_ADC_54                                               (EM_START + 54)//ADC44->MPD22
           =3 #define EM_ADC_55                                               (EM_START + 55)//ADC45->MPD23
           =3 #define EM_ADC_56                                               (EM_START + 56)//ADC46->MPD24
           =3 #define EM_ADC_57                                               (EM_START + 57)//ADC47->MPD25
           =3 #define EM_ADC_58                                               (EM_START + 58)//ADC48->MPD26
           =3 #define EM_ADC_59                                               (EM_START + 59)//ADC49->MPD27
           =3 #define EM_ADC_60                                               (EM_START + 60)//ADC50->MPD28
           =3 #define EM_ADC_61                                               (EM_START + 61)//ADC50->MPD29
           =3 #define EM_ADC_62                                               (EM_START + 62)//ADC50->MPD30
           =3 #define EM_ADC_63                                               (EM_START + 63)//ADC50->MPD31
           =3 #define EM_DAC_0                                                (EM_START + 64)//DAC0
           =3 #define EM_DAC_1                                                (EM_START + 65)//DAC1
           =3 #define EM_DAC_2                                                (EM_START + 66)//DAC2
           =3 #define EM_DAC_3                                                (EM_START + 67)//DAC3
           =3 #define EM_DAC_4                                                (EM_START + 68)//DAC4
           =3 #define EM_DAC_5                                                (EM_START + 69)//DAC5
           =3 #define EM_DAC_6                                                (EM_START + 70)//DAC6
           =3 #define EM_DAC_7                                                (EM_START + 71)//DAC7
           =3 #define EM_DAC_8                                                (EM_START + 72)//DAC8
           =3 #define EM_DAC_9                                                (EM_START + 73)//DAC9
           =3 #define EM_DAC_10                                               (EM_START + 74)//DAC10
           =3 #define EM_DAC_11                                               (EM_START + 75)//DAC11
           =3 #define EM_DAC_12                                               (EM_START + 76)//DAC12
           =3 #define EM_DAC_13                                               (EM_START + 77)//DAC13
           =3 #define EM_DAC_14                                               (EM_START + 78)//DAC14
           =3 #define EM_DAC_15                                               (EM_START + 79)//DAC15
           =3 #define EM_DAC_16                                               (EM_START + 80)//DAC16
           =3 #define EM_DAC_17                                               (EM_START + 81)//DAC17
           =3 #define EM_DAC_18                                               (EM_START + 82)//DAC18
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 59  

           =3 #define EM_DAC_19                                               (EM_START + 83)//DAC19
           =3 #define EM_DAC_20                                               (EM_START + 84)//DAC20
           =3 #define EM_DAC_21                                               (EM_START + 85)//DAC21
           =3 #define EM_DAC_22                                               (EM_START + 86)//DAC22
           =3 #define EM_DAC_23                                               (EM_START + 87)//DAC23
           =3 #define EM_DAC_24                                               (EM_START + 88)//DAC24
           =3 #define EM_DAC_25                                               (EM_START + 89)//DAC25
           =3 #define EM_DAC_26                                               (EM_START + 90)//DAC26
           =3 #define EM_DAC_27                                               (EM_START + 91)//DAC27
           =3 #define EM_DAC_28                                               (EM_START + 92)//DAC28
           =3 #define EM_DAC_29                                               (EM_START + 93)//DAC29
           =3 #define EM_DAC_30                                               (EM_START + 94)//DAC30
           =3 #define EM_DAC_31                                               (EM_START + 95)//DAC31
           =3 /*****************************************************************************/
           =3 #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
           =3 /*****************************************************************************/
           =3 #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
           =3 #define SPCOIL_START_UP                                 (SPCOIL_START * 16 + 1)//初次上电
           =3 #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 2)//1mS间隔 50%占空比脉冲
           =3 #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 3)//10mS
           =3 #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 4)//100mS  
           =3 #define SPCOIL_PS1000MS                                 (SPCOIL_START * 16 + 5)//1000mS 
           =3 #define SPCOIL_WATCHDOG                                 (SPCOIL_START * 16 + 15)//看门狗溢出
           =3 #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 16)//UART1发送忙
           =3 #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 17)//UART1接收忙
           =3 #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 18)//发送完成
           =3 #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 19)//接收完成
           =3 #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 20)//UART1发送忙
           =3 #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 21)//UART1接收忙
           =3 #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 22)//发送完成
           =3 #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 23)//接收完成
           =3 /*****************************************************************************/
           =3 #define SPREG_RUNTIME_L                                 (SPREG_START + 0)//累计运行时间秒 32BIT
           =3 #define SPREG_RUNTIME_H                                 (SPREG_START + 1)//累计运行时间秒 32BIT         
           =3 /*****************************************************************************/
           =3 #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
           =3 #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
           =3 #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
           =3 #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
           =3 #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
           =3 #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
           =3 /*****************************************************************************/
           =3 #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
           =3 #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
           =3 #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
           =3 #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
           =3 #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
           =3 #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
           =3 /*****************************************************************************/
           =3 #define SPREG_CLEAR_NVRAM0                              (SPREG_END)//清除NVRAM后重新启动
           =3 /*****************************************************************************/
           =3 extern xdata int16_t volatile NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
           =3 extern xdata int16_t volatile NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
           =3 /*****************************************************************************/
           =3 uint8_t getGlobalInterrupt(void);
           =3 void setLedRun(uint8_t st);
           =3 uint8_t getLedRun(void);
           =3 void setLedEprom(uint8_t st);
           =3 uint8_t getLedEprom(void);
           =3 void setLedDac(uint8_t st);
           =3 uint8_t getLedDac(void);
           =3 void setLedError(uint8_t st);
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 60  

           =3 uint8_t getLedError(void);
           =3 void sPlcInit(void);//软逻辑初始化
           =3 void sPlcProcessStart(void);//sPLC轮询起始
           =3 void sPlcProcessEnd(void);//sPLC轮询结束
           =3 void wdtFeed(void) reentrant;
           =3 void wdtEnable(void) reentrant;
           =3 void wdtDisable(void) reentrant;
           =3 /*****************************************************************************/
           =3 void assertCoilAddress(uint16_t adr) reentrant;
           =3 void assertRegisterAddress(uint16_t adr) reentrant;
           =3 /*****************************************************************************/
           =3 void nvramUpdata(void);
           =3 void clearDM(void);
           =3 void clearEM(void);
           =3 void clearR(void);
           =3 void clearT(void);
           =3 void clearTD(void);
           =3 void clearC(void);
           =3 void nvramLoad(void);
           =3 void nvramSave(void);
           =3 void nvramUpdata(void);
           =3 /*****************************************************************************/
           =3 void chipDacInit(void);
           =3 void chipAdcInit(void);
           =3 void sPlcInit(void);
           =3 void refreshInput(void);
           =3 void refreshOutput(void);
           =3 void refreshDac(void);
           =3 /*****************************************************************************/
           =3 #endif
   1      =3  #ifndef __SPLCFUN_H__
   2      =3  #define __SPLCFUN_H__
   3      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   4      =3  #ifndef __SPLCFUN_H__
   4      =3  #define __SPLCFUN_H__
   4      =3  /*****************************************************************************/
   4      =3  #include "appConfig.h"
   5      =3  /*****************************************************************************/
   6      =3  void REBOOT(void) reentrant;//强制复位
   7      =3  //位指令
   8      =3  void SET(uint16_t A) reentrant;//线圈置位
   9      =3  void RES(uint16_t A) reentrant;//线圈复位
  10      =3  void FLIP(uint16_t A) reentrant;//翻转
  11      =3  uint8_t LD(uint16_t A) reentrant;//载入
  12      =3  uint8_t LDB(uint16_t A) reentrant;//方向载入
  13      =3  uint8_t LDP(uint16_t A) reentrant;//脉冲上升沿
  14      =3  uint8_t LDN(uint16_t A) reentrant;//脉冲下降沿
  15      =3  //计时器指令
  16      =3  void T100US(uint8_t A, uint8_t start, uint16_t value) reentrant;//100uS计时器启动
  17      =3  void T1MS(uint8_t A, uint8_t start, uint16_t value) reentrant;//1mS计时器启动
  18      =3  void T10MS(uint8_t A, uint8_t start, uint16_t value) reentrant;//10mS计时器启动
  19      =3  void T100MS(uint8_t A, uint8_t start, uint16_t value) reentrant;//100mS计时器启动
  20      =3  //运算指令
  21      =3  void ADD(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16位非饱和加法 D = Sa + Sb
  22      =3  void ADDS(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16位饱和求和 D = Sa + Sb
  23      =3  void DADD(int32_t *Sa, int32_t *Sb, int32_t *D) reentrant;//32位非饱加法 D = Sa + Sb
  24      =3  void SUB(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16位非饱和减法
  25      =3  void SUBS(int16_t *Sa, int16_t *Sb, int16_t *D) reentrant;//16位饱和减法
  26      =3  void DSUB(int32_t *Sa, int32_t *Sb, int32_t *D) reentrant;//32位非饱和减法
  27      =3  void MULT(int16_t *Sa, int16_t *Sb, int32_t *D) reentrant;//16*16非饱和乘法 D = Sa * Sb
  28      =3  void MULTS(int16_t *Sa, int16_t *Sb, int32_t *D) reentrant;//16*16->32饱和乘法 D = Sa * Sb
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 61  

  29      =3  /*****************************************************************************/
  30      =3  #endif
   5      =1  /*****************************************************************************/
   6      =1  //线圈 保持 8 * 16 = 128BIT
   7      =1  #define MR_START                                                0
   8      =1  #define MR_END                                                  3
   9      =1  //线圈寄存器 非保持 8 * 16 = 128BIT
  10      =1  #define R_START                                                 4
  11      =1  #define R_END                                                   11
  12      =1  //数据寄存器 保持 8
  13      =1  #define DM_START                                                12
  14      =1  #define DM_END                                                  19
  15      =1  //数据寄存器 非保持 140个字
  16      =1  #define EM_START                                                20
  17      =1  #define EM_END                                                  159
  18      =1  //延时线圈
  19      =1  //1MS 1 * 16 = 16BIT
  20      =1  #define T_1MS_START                                             160
  21      =1  #define T_1MS_END                                               160
  22      =1  //10MS 1 * 16 = 16BIT
  23      =1  #define T_10MS_START                                    161
  24      =1  #define T_10MS_END                                              161
  25      =1  //100MS 1 * 16 = 16BIT
  26      =1  #define T_100MS_START                                   162
  27      =1  #define T_100MS_END                                             162
  28      =1  //延时计时器 
  29      =1  //1MS 16
  30      =1  #define TD_1MS_START                                    163
  31      =1  #define TD_1MS_END                                              178
  32      =1  //10MS 16
  33      =1  #define TD_10MS_START                                   179
  34      =1  #define TD_10MS_END                                             194
  35      =1  //100MS 16
  36      =1  #define TD_100MS_START                                  195
  37      =1  #define TD_100MS_END                                    210
  38      =1  //计数器 1
  39      =1  #define C_START                                                 211
  40      =1  #define C_END                                                   211
  41      =1  //输入位寄存器 1 * 16 = 16个
  42      =1  #define X_START                                                 212
  43      =1  #define X_END                                                   212             
  44      =1  //输出位寄存器 1 * 16 = 16个
  45      =1  #define Y_START                                                 213
  46      =1  #define Y_END                                                   213
  47      =1  //特殊寄存器 24个字
  48      =1  #define SPREG_START                                             214
  49      =1  #define SPREG_END                                               237
  50      =1  //特殊线圈      4 * 16 = 64个
  51      =1  #define SPCOIL_START                                    238
  52      =1  #define SPCOIL_END                                              241
  53      =1  /*****************************************************************************/
  54      =1  #define EM_ADC_0                                                (EM_START + 0)//ADC0->MLD0
  55      =1  #define EM_ADC_1                                                (EM_START + 1)//ADC1->MLD1
  56      =1  #define EM_ADC_2                                                (EM_START + 2)//ADC2->MLD2
  57      =1  #define EM_ADC_3                                                (EM_START + 3)//ADC3->MLD3
  58      =1  #define EM_ADC_4                                                (EM_START + 4)//ADC4->MLD4
  59      =1  #define EM_ADC_5                                                (EM_START + 5)//ADC5->MLD5
  60      =1  #define EM_ADC_6                                                (EM_START + 6)//ADC6->MLD6
  61      =1  #define EM_ADC_7                                                (EM_START + 7)//ADC7->MLD7
  62      =1  #define EM_ADC_8                                                (EM_START + 8)//ADC8->MLD8
  63      =1  #define EM_ADC_9                                                (EM_START + 9)//ADC9->MLD9
  64      =1  #define EM_ADC_10                                               (EM_START + 10)//ADC10->MLD10
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 62  

  65      =1  #define EM_ADC_11                                               (EM_START + 11)//ADC11->MLD11
  66      =1  #define EM_ADC_12                                               (EM_START + 12)//ADC12->MLD12
  67      =1  #define EM_ADC_13                                               (EM_START + 13)//ADC13->MLD13
  68      =1  #define EM_ADC_14                                               (EM_START + 14)//ADC14->MLD14
  69      =1  #define EM_ADC_15                                               (EM_START + 15)//ADC15->MLD15
  70      =1  #define EM_ADC_16                                               (EM_START + 16)//ADC16->MLD16
  71      =1  #define EM_ADC_17                                               (EM_START + 17)//ADC17->MLD17
  72      =1  #define EM_ADC_18                                               (EM_START + 18)//ADC18->MLD18
  73      =1  #define EM_ADC_19                                               (EM_START + 19)//ADC19->MLD19
  74      =1  #define EM_ADC_20                                               (EM_START + 20)//ADC20->MLD20
  75      =1  #define EM_ADC_21                                               (EM_START + 21)//ADC21->MLD21
  76      =1  #define EM_ADC_22                                               (EM_START + 22)//ADC22->MLD22
  77      =1  #define EM_ADC_23                                               (EM_START + 23)//ADC23->MLD23
  78      =1  #define EM_ADC_24                                               (EM_START + 24)//ADC24->MLD24
  79      =1  #define EM_ADC_25                                               (EM_START + 25)//ADC25->MLD25
  80      =1  #define EM_ADC_26                                               (EM_START + 26)//ADC26->MLD26
  81      =1  #define EM_ADC_27                                               (EM_START + 27)//ADC27->MLD27
  82      =1  #define EM_ADC_28                                               (EM_START + 28)//ADC28->MLD28
  83      =1  #define EM_ADC_29                                               (EM_START + 29)//ADC29->MLD29
  84      =1  #define EM_ADC_30                                               (EM_START + 30)//ADC30->MLD30
  85      =1  #define EM_ADC_31                                               (EM_START + 31)//ADC31->MLD31
  86      =1  #define EM_ADC_32                                               (EM_START + 32)//ADC32->MPD0
  87      =1  #define EM_ADC_33                                               (EM_START + 33)//ADC33->MPD1
  88      =1  #define EM_ADC_34                                               (EM_START + 34)//ADC34->MPD2
  89      =1  #define EM_ADC_35                                               (EM_START + 35)//ADC35->MPD3
  90      =1  #define EM_ADC_36                                               (EM_START + 36)//ADC36->MPD4
  91      =1  #define EM_ADC_37                                               (EM_START + 37)//ADC37->MPD5
  92      =1  #define EM_ADC_38                                               (EM_START + 38)//ADC38->MPD6
  93      =1  #define EM_ADC_39                                               (EM_START + 39)//ADC39->MPD7
  94      =1  #define EM_ADC_40                                               (EM_START + 40)//ADC40->MPD8
  95      =1  #define EM_ADC_41                                               (EM_START + 41)//ADC41->MPD9
  96      =1  #define EM_ADC_42                                               (EM_START + 42)//ADC42->MPD10
  97      =1  #define EM_ADC_43                                               (EM_START + 43)//ADC42->MPD11
  98      =1  #define EM_ADC_44                                               (EM_START + 44)//ADC42->MPD12
  99      =1  #define EM_ADC_45                                               (EM_START + 45)//ADC42->MPD13
 100      =1  #define EM_ADC_46                                               (EM_START + 46)//ADC42->MPD14
 101      =1  #define EM_ADC_47                                               (EM_START + 47)//ADC42->MPD15
 102      =1  #define EM_ADC_48                                               (EM_START + 48)//ADC42->MPD16
 103      =1  #define EM_ADC_49                                               (EM_START + 49)//ADC42->MPD17
 104      =1  #define EM_ADC_50                                               (EM_START + 50)//ADC42->MPD18
 105      =1  #define EM_ADC_51                                               (EM_START + 51)//ADC42->MPD19
 106      =1  #define EM_ADC_52                                               (EM_START + 52)//ADC42->MPD20
 107      =1  #define EM_ADC_53                                               (EM_START + 53)//ADC43->MPD21
 108      =1  #define EM_ADC_54                                               (EM_START + 54)//ADC44->MPD22
 109      =1  #define EM_ADC_55                                               (EM_START + 55)//ADC45->MPD23
 110      =1  #define EM_ADC_56                                               (EM_START + 56)//ADC46->MPD24
 111      =1  #define EM_ADC_57                                               (EM_START + 57)//ADC47->MPD25
 112      =1  #define EM_ADC_58                                               (EM_START + 58)//ADC48->MPD26
 113      =1  #define EM_ADC_59                                               (EM_START + 59)//ADC49->MPD27
 114      =1  #define EM_ADC_60                                               (EM_START + 60)//ADC50->MPD28
 115      =1  #define EM_ADC_61                                               (EM_START + 61)//ADC50->MPD29
 116      =1  #define EM_ADC_62                                               (EM_START + 62)//ADC50->MPD30
 117      =1  #define EM_ADC_63                                               (EM_START + 63)//ADC50->MPD31
 118      =1  #define EM_DAC_0                                                (EM_START + 64)//DAC0
 119      =1  #define EM_DAC_1                                                (EM_START + 65)//DAC1
 120      =1  #define EM_DAC_2                                                (EM_START + 66)//DAC2
 121      =1  #define EM_DAC_3                                                (EM_START + 67)//DAC3
 122      =1  #define EM_DAC_4                                                (EM_START + 68)//DAC4
 123      =1  #define EM_DAC_5                                                (EM_START + 69)//DAC5
 124      =1  #define EM_DAC_6                                                (EM_START + 70)//DAC6
 125      =1  #define EM_DAC_7                                                (EM_START + 71)//DAC7
 126      =1  #define EM_DAC_8                                                (EM_START + 72)//DAC8
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 63  

 127      =1  #define EM_DAC_9                                                (EM_START + 73)//DAC9
 128      =1  #define EM_DAC_10                                               (EM_START + 74)//DAC10
 129      =1  #define EM_DAC_11                                               (EM_START + 75)//DAC11
 130      =1  #define EM_DAC_12                                               (EM_START + 76)//DAC12
 131      =1  #define EM_DAC_13                                               (EM_START + 77)//DAC13
 132      =1  #define EM_DAC_14                                               (EM_START + 78)//DAC14
 133      =1  #define EM_DAC_15                                               (EM_START + 79)//DAC15
 134      =1  #define EM_DAC_16                                               (EM_START + 80)//DAC16
 135      =1  #define EM_DAC_17                                               (EM_START + 81)//DAC17
 136      =1  #define EM_DAC_18                                               (EM_START + 82)//DAC18
 137      =1  #define EM_DAC_19                                               (EM_START + 83)//DAC19
 138      =1  #define EM_DAC_20                                               (EM_START + 84)//DAC20
 139      =1  #define EM_DAC_21                                               (EM_START + 85)//DAC21
 140      =1  #define EM_DAC_22                                               (EM_START + 86)//DAC22
 141      =1  #define EM_DAC_23                                               (EM_START + 87)//DAC23
 142      =1  #define EM_DAC_24                                               (EM_START + 88)//DAC24
 143      =1  #define EM_DAC_25                                               (EM_START + 89)//DAC25
 144      =1  #define EM_DAC_26                                               (EM_START + 90)//DAC26
 145      =1  #define EM_DAC_27                                               (EM_START + 91)//DAC27
 146      =1  #define EM_DAC_28                                               (EM_START + 92)//DAC28
 147      =1  #define EM_DAC_29                                               (EM_START + 93)//DAC29
 148      =1  #define EM_DAC_30                                               (EM_START + 94)//DAC30
 149      =1  #define EM_DAC_31                                               (EM_START + 95)//DAC31
 150      =1  /*****************************************************************************/
 151      =1  #define CONFIG_NVRAM_SIZE                               (SPCOIL_END + 1)
 152      =1  /*****************************************************************************/
 153      =1  #define SPCOIL_ON                                               (SPCOIL_START * 16 + 0)//长通线圈
 154      =1  #define SPCOIL_START_UP                                 (SPCOIL_START * 16 + 1)//初次上电
 155      =1  #define SPCOIL_PS1MS                                    (SPCOIL_START * 16 + 2)//1mS间隔 50%占空比脉冲
 156      =1  #define SPCOIL_PS10MS                                   (SPCOIL_START * 16 + 3)//10mS
 157      =1  #define SPCOIL_PS100MS                                  (SPCOIL_START * 16 + 4)//100mS  
 158      =1  #define SPCOIL_PS1000MS                                 (SPCOIL_START * 16 + 5)//1000mS 
 159      =1  #define SPCOIL_WATCHDOG                                 (SPCOIL_START * 16 + 15)//看门狗溢出
 160      =1  #define SPCOIL_UART0_SEND_BUSY                  (SPCOIL_START * 16 + 16)//UART1发送忙
 161      =1  #define SPCOIL_UART0_RECV_BUSY                  (SPCOIL_START * 16 + 17)//UART1接收忙
 162      =1  #define SPCOIL_UART0_SEND_DONE                  (SPCOIL_START * 16 + 18)//发送完成
 163      =1  #define SPCOIL_UART0_RECV_DONE                  (SPCOIL_START * 16 + 19)//接收完成
 164      =1  #define SPCOIL_UART1_SEND_BUSY                  (SPCOIL_START * 16 + 20)//UART1发送忙
 165      =1  #define SPCOIL_UART1_RECV_BUSY                  (SPCOIL_START * 16 + 21)//UART1接收忙
 166      =1  #define SPCOIL_UART1_SEND_DONE                  (SPCOIL_START * 16 + 22)//发送完成
 167      =1  #define SPCOIL_UART1_RECV_DONE                  (SPCOIL_START * 16 + 23)//接收完成
 168      =1  /*****************************************************************************/
 169      =1  #define SPREG_RUNTIME_L                                 (SPREG_START + 0)//累计运行时间秒 32BIT
 170      =1  #define SPREG_RUNTIME_H                                 (SPREG_START + 1)//累计运行时间秒 32BIT         
 171      =1  /*****************************************************************************/
 172      =1  #define SPREG_UART0_SEND_BUFFER_ADR             (SPREG_START + 4)//UART0 发送缓冲NVRAM地址              
 173      =1  #define SPREG_UART0_SEND_LENGTH                 (SPREG_START + 5)//UART0 发送数据长度
 174      =1  #define SPREG_UART0_SEND_NUM                    (SPREG_START + 6)//UART0 已经发送数据长度
 175      =1  #define SPREG_UART0_RECV_BUFFER_ADR             (SPREG_START + 7)//UART0 接收缓冲NVRAM地址
 176      =1  #define SPREG_UART0_RECV_LENGTH                 (SPREG_START + 8)//UART0 接收数据长度
 177      =1  #define SPREG_UART0_RECV_NUM                    (SPREG_START + 9)//UART0 已经接收数据长度
 178      =1  /*****************************************************************************/
 179      =1  #define SPREG_UART1_SEND_BUFFER_ADR             (SPREG_START + 10)//UART1 发送缓冲NVRAM地址             
 180      =1  #define SPREG_UART1_SEND_LENGTH                 (SPREG_START + 11)//UART1 发送数据长度
 181      =1  #define SPREG_UART1_SEND_NUM                    (SPREG_START + 12)//UART1 已经发送数据长度
 182      =1  #define SPREG_UART1_RECV_BUFFER_ADR             (SPREG_START + 13)//UART1 接收缓冲NVRAM地址
 183      =1  #define SPREG_UART1_RECV_LENGTH                 (SPREG_START + 14)//UART1 接收数据长度
 184      =1  #define SPREG_UART1_RECV_NUM                    (SPREG_START + 15)//UART1 已经接收数据长度
 185      =1  /*****************************************************************************/
 186      =1  #define SPREG_CLEAR_NVRAM0                              (SPREG_END)//清除NVRAM后重新启动
 187      =1  /*****************************************************************************/
 188      =1  extern xdata int16_t volatile NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 64  

 189      =1  extern xdata int16_t volatile NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
 190      =1  /*****************************************************************************/
 191      =1  uint8_t getGlobalInterrupt(void);
 192      =1  void setLedRun(uint8_t st);
 193      =1  uint8_t getLedRun(void);
 194      =1  void setLedEprom(uint8_t st);
 195      =1  uint8_t getLedEprom(void);
 196      =1  void setLedDac(uint8_t st);
 197      =1  uint8_t getLedDac(void);
 198      =1  void setLedError(uint8_t st);
 199      =1  uint8_t getLedError(void);
 200      =1  void sPlcInit(void);//软逻辑初始化
 201      =1  void sPlcProcessStart(void);//sPLC轮询起始
 202      =1  void sPlcProcessEnd(void);//sPLC轮询结束
 203      =1  void wdtFeed(void) reentrant;
 204      =1  void wdtEnable(void) reentrant;
 205      =1  void wdtDisable(void) reentrant;
 206      =1  /*****************************************************************************/
 207      =1  void assertCoilAddress(uint16_t adr) reentrant;
 208      =1  void assertRegisterAddress(uint16_t adr) reentrant;
 209      =1  /*****************************************************************************/
 210      =1  void nvramUpdata(void);
 211      =1  void clearDM(void);
 212      =1  void clearEM(void);
 213      =1  void clearR(void);
 214      =1  void clearT(void);
 215      =1  void clearTD(void);
 216      =1  void clearC(void);
 217      =1  void nvramLoad(void);
 218      =1  void nvramSave(void);
 219      =1  void nvramUpdata(void);
 220      =1  /*****************************************************************************/
 221      =1  void chipDacInit(void);
 222      =1  void chipAdcInit(void);
 223      =1  void sPlcInit(void);
 224      =1  void refreshInput(void);
 225      =1  void refreshOutput(void);
 226      =1  void refreshDac(void);
 227      =1  /*****************************************************************************/
 228      =1  #endif
   2          /*****************************************************************************/
   3          xdata int16_t volatile NVRAM0[CONFIG_NVRAM_SIZE];//掉电保持寄存器 当前
   4          xdata int16_t volatile NVRAM1[CONFIG_NVRAM_SIZE];//掉电保持寄存器 上一次
   5          static idata volatile uint8_t TimerCounter_1mS = 0;
   6          static idata volatile uint8_t TimerCounter_10mS = 0;
   7          static idata volatile uint8_t TimerCounter_100mS = 0;
   8          static idata volatile uint8_t Timer0_L, Timer0_H;
   9          bit debugLed0, debugLed1, debugLed2, debugLed3;
  10          /*****************************************************************************/
  11          static idata volatile int8_t inputFilter[(X_END - X_START + 1) * 16];//IO输入滤波器缓冲区
  12          /******************************************************************************/
  13          uint8_t getGlobalInterrupt(void){
  14   1              return EA;
  15   1      }
  16          void setLedRun(uint8_t st){//SETLED RUN
  17   1              debugLed0 = st;
  18   1      }
  19          uint8_t getLedRun(void){//GET LED RUN P7_0
  20   1              return debugLed0;
  21   1      }
  22          void setLedEprom(uint8_t st){//SET LED EPROM
  23   1              debugLed1 = st;
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 65  

  24   1      }
  25          uint8_t getLedEprom(void){//GET LED EPROM
  26   1              return debugLed1;
  27   1      }
  28          void setLedDac(uint8_t st){//SET LED DAC
  29   1              debugLed2 = st;
  30   1      }
  31          uint8_t getLedDac(void){//GET LED DAC
  32   1              return debugLed2;
  33   1      }
  34          void setLedError(uint8_t st){//SET LED ERROR
  35   1              debugLed3 = st;
  36   1      }
  37          uint8_t getLedError(void){//GET LED ERROR
  38   1              return debugLed3;
  39   1      }
  40          void assertCoilAddress(uint16_t adr) reentrant{//检查线圈地址
  41   1      #if CONFIG_SPLC_ASSERT == 1
  42   1              if(adr > (SPCOIL_END * 16))
  43   1                      while(1);
  44   1      #endif
  45   1      }
  46          void assertRegisterAddress(uint16_t adr) reentrant{//检查寄存器地址
  47   1      #if CONFIG_SPLC_ASSERT == 1
  48   1              if(adr >= SPCOIL_END)
  49   1                      while(1);
  50   1      #endif
  51   1      }
  52          static void clearDM(void){//清除DM寄存器
  53   1              uint16_t i;
  54   1              for(i = 0;i <= DM_END;i ++){
  55   2                      NVRAM0[i] = 0x0;
  56   2                      NVRAM1[i] = 0x0;
  57   2              }
  58   1      }
  59          static void clearMR(void){//清除MR寄存器
  60   1              uint16_t i;
  61   1              for(i = MR_START;i <= MR_END;i ++){
  62   2                      NVRAM0[i] = 0x0;
  63   2                      NVRAM1[i] = 0x0;
  64   2              }
  65   1      }
  66          static void clearEM(void){//清除EM寄存器
  67   1              uint16_t i;
  68   1              for(i = EM_START;i <= EM_END;i ++){
  69   2                      NVRAM0[i] = 0x0;
  70   2                      NVRAM1[i] = 0x0;
  71   2              }
  72   1      }
  73          static void clearR(void){//清除R寄存器
  74   1              uint16_t i;
  75   1              for(i = R_START;i <= R_END;i ++){
  76   2                      NVRAM0[i] = 0x0;
  77   2                      NVRAM1[i] = 0x0;
  78   2              }
  79   1      }
  80          static void clearT(void){//清除T寄存器
  81   1              uint16_t i;
  82   1              for(i = T_1MS_START;i <= T_1MS_END;i ++){
  83   2                      NVRAM0[i] = 0x0;
  84   2                      NVRAM1[i] = 0x0;
  85   2              }
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 66  

  86   1              for(i = T_10MS_START;i <= T_10MS_END;i ++){
  87   2                      NVRAM0[i] = 0x0;
  88   2                      NVRAM1[i] = 0x0;
  89   2              }
  90   1              for(i = T_100MS_START;i <= T_100MS_END;i ++){
  91   2                      NVRAM0[i] = 0x0;
  92   2                      NVRAM1[i] = 0x0;
  93   2              }
  94   1      }
  95          static void clearTD(void){//清除TD寄存器
  96   1              uint16_t i;
  97   1              for(i = TD_1MS_START;i <= TD_1MS_END;i ++){
  98   2                      NVRAM0[i] = 0x0;
  99   2                      NVRAM1[i] = 0x0;
 100   2              }
 101   1              for(i = TD_10MS_START;i <= TD_10MS_END;i ++){
 102   2                      NVRAM0[i] = 0x0;
 103   2                      NVRAM1[i] = 0x0;
 104   2              }
 105   1              for(i = TD_100MS_START;i <= TD_100MS_END;i ++){
 106   2                      NVRAM0[i] = 0x0;
 107   2                      NVRAM1[i] = 0x0;
 108   2              }
 109   1      }
 110          static void clearC(void){//清除C寄存器
 111   1              uint16_t i;
 112   1              for(i = C_START;i <= C_END;i ++){
 113   2                      NVRAM0[i] = 0x0;
 114   2                      NVRAM1[i] = 0x0;
 115   2              }
 116   1      }
 117          static void clearX(void){//清除X寄存器
 118   1              uint16_t i;
 119   1              for(i = X_START;i <= X_END;i ++){
 120   2                      NVRAM0[i] = 0x0;
 121   2                      NVRAM1[i] = 0x0;
 122   2              }
 123   1      }
 124          static void clearY(void){//清除Y寄存器
 125   1              uint16_t i;
 126   1              for(i = Y_START;i <= Y_END;i ++){
 127   2                      NVRAM0[i] = 0x0;
 128   2                      NVRAM1[i] = 0x0;
 129   2              }
 130   1      }
 131          static void clearSPREG(void){//清除特殊寄存器
 132   1              uint16_t i;
 133   1              for(i = SPREG_START;i <= SPREG_END;i ++){
 134   2                      NVRAM0[i] = 0x0;
 135   2                      NVRAM1[i] = 0x0;
 136   2              }
 137   1      }
 138          static void clearSPCOIL(){//清除特特殊线圈
 139   1              uint16_t i;
 140   1              for(i = SPCOIL_START;i <= SPCOIL_END;i ++){
 141   2                      NVRAM0[i] = 0x0;
 142   2                      NVRAM1[i] = 0x0;
 143   2              }
 144   1      }
 145          static void loadNvram(void){//从EPROM中载入NVRAM
 146   1              memset(NVRAM0, 0x0, (CONFIG_NVRAM_SIZE * 2));//初始化NVRAM
 147   1              setLedEprom(DEBUG_LED_ON);
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 67  

 148   1              epromRead(0, (uint8_t*)NVRAM0, (CONFIG_NVRAM_SIZE * 2));//从EPROM中恢复MR
 149   1              setLedEprom(DEBUG_LED_OFF);
 150   1              clearEM();
 151   1              clearR();
 152   1              clearT();
 153   1              clearTD();
 154   1              clearC();
 155   1              clearX();
 156   1              clearY();
 157   1              clearSPREG();
 158   1              clearSPCOIL();
 159   1              memcpy(NVRAM1, NVRAM0, (CONFIG_NVRAM_SIZE * 2));
 160   1      #if CONFIG_SPLC_USING_WDT == 1
 161   1              if ((RSTSRC & 0x02) == 0x00){
 162   2                      if(RSTSRC == 0x08){//检测WDT看门狗 看门狗复位后锁定
 163   3                              SET(SPCOIL_WATCHDOG);
 164   3                              setLedError(DEBUG_LED_ON);
 165   3                              setLedRun(DEBUG_LED_ON);
 166   3                              setLedDac(DEBUG_LED_OFF);
 167   3                              setLedEprom(DEBUG_LED_OFF);
 168   3                              delayMs(100);
 169   3                      }
 170   2              }
 171   1      #endif
 172   1      }
 173          static void saveNvram(void){//强制将NVRAM存入EPROM
 174   1              DISABLE_INTERRUPT;
 175   1              setLedEprom(DEBUG_LED_ON);
 176   1              epromWrite(0x0, (uint8_t*)NVRAM0, ((MR_END + 1) * 2));
 177   1              setLedEprom(DEBUG_LED_OFF);
 178   1              ENABLE_INTERRUPT;
 179   1      }
 180          static void updataNvram(void){//更新NVRAM->EPROM
 181   1              data uint8_t *sp0, *sp1;
 182   1              data uint16_t i;
 183   1              sp0 = (uint8_t*)NVRAM0;
 184   1              sp1 = (uint8_t*)NVRAM1;
 185   1              for(i = (MR_START * 2);i < ((MR_END + 1) * 2);i ++){//储存MR
 186   2                      if(*(sp0 + i) != *(sp1 + i)){
 187   3                              setLedEprom(DEBUG_LED_ON);
 188   3                              epromWriteOneByte(i, *(sp0 + i));
 189   3                              setLedEprom(DEBUG_LED_OFF);
 190   3                      }       
 191   2              }
 192   1              sp0 = (uint8_t*)NVRAM0;
 193   1              sp1 = (uint8_t*)NVRAM1;
 194   1              for(i = (DM_START * 2);i < ((DM_END + 1) * 2);i ++){//储存DM
 195   2                      if(*(sp0 + i) != *(sp1 + i)){
 196   3                              setLedEprom(DEBUG_LED_ON);
 197   3                              epromWriteOneByte(i, *(sp0 + i));
 198   3                              setLedEprom(DEBUG_LED_OFF);
 199   3                      }
 200   2              }
 201   1              memcpy((uint8_t*)NVRAM1, (uint8_t*)NVRAM0, (CONFIG_NVRAM_SIZE * 2));
 202   1      }
 203          static void clearNvram(void){//清除NVRAM数据    
 204   1              idata uint8_t oldEA;
 205   1              idata uint16_t i;
 206   1              oldEA = EA;//关闭中断
 207   1              EA = 0;
 208   1              wdtDisable();
 209   1              for(i = 0; i<= CONFIG_EPROM_SIZE;i ++){
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 68  

 210   2                      if(getLedEprom()){
 211   3                              setLedEprom(DEBUG_LED_OFF);
 212   3                      }
 213   2                      else{
 214   3                              setLedEprom(DEBUG_LED_ON);
 215   3                      }
 216   2                      epromWriteOneByte(i, 0x0);
 217   2                      
 218   2              }
 219   1              EA = oldEA;//恢复中断
 220   1      }
 221          /*****************************************************************************/
 222          
 223          /*****************************************************************************/
 224          static void wdtInit(void){//看门狗初始化
 225   1              uint8_t SFRPAGE_save = SFRPAGE;
 226   1              SFRPAGE = ACTIVE_PAGE;
 227   1          PCA0MD    &= ~0x40;
 228   1          PCA0MD    = 0x00;
 229   1          PCA0CPL5  = 0xFF;
 230   1              SFRPAGE = SFRPAGE_save;
 231   1      }
 232          void wdtEnable(void) reentrant{//使能看门狗
 233   1              PCA0MD    |= 0x40;
 234   1      }
 235          void wdtDisable(void) reentrant{//关闭看门狗(未锁定)
 236   1              uint8_t flagEA;
 237   1              uint8_t SFRPAGE_save = SFRPAGE; 
 238   1              flagEA = EA;
 239   1              EA = 0;
 240   1              SFRPAGE = ACTIVE_PAGE;
 241   1              PCA0MD &= 0xBF;
 242   1              SFRPAGE = SFRPAGE_save;
 243   1              EA = flagEA;
 244   1      }
 245          void wdtFeed(void) reentrant{//喂狗
 246   1              PCA0CPH5 = 0x00;  
 247   1      }
 248          static void pcaInit(void){//硬件PCA初始化
 249   1      }
 250          static void timer0Init(void){//硬件sTimer计时器初始化
 251   1              idata uint16_t temp;
 252   1              TimerCounter_1mS = 0;
 253   1              TimerCounter_10mS = 0;
 254   1              TimerCounter_100mS = 0;
 255   1              temp = (uint16_t)(65536 - (CONFIG_SYSCLK / 12 /CONFIG_SOFTPLC_HWTIME));
 256   1              Timer0_L = temp & 0xFF;
 257   1              Timer0_H = (temp >> 8) & 0xFF;
 258   1              TH0 = Timer0_H;// Init T0 High register
 259   1              TL0 = Timer0_L;// Init T0 Low register
 260   1              CKCON &= ~(1 << 3);//SYSCLK / 12        
 261   1              TMOD &= 0xF0;
 262   1              TMOD |= (1 << 0);// T0 in 16-bit mode
 263   1              ET0 = 1;// T0 interrupt enabled
 264   1              TR0 = 1;// T0 ON
 265   1      }
 266          static void timer0Isr(void) interrupt INTERRUPT_TIMER0{//硬件sTimer计时器中断 1mS
 267   1              idata uint16_t i;
 268   1              idata uint32_t tmp;
 269   1              TF0 = 0;
 270   1              TR0 = 0;
 271   1              TH0 = Timer0_H;
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 69  

 272   1              TL0 = Timer0_L;
 273   1              TR0 = 1;
 274   1              if(LD(SPCOIL_PS1MS)){//ON
 275   2                      RES(SPCOIL_PS1MS);
 276   2              }
 277   1              else{//OFF
 278   2                      SET(SPCOIL_PS1MS);
 279   2              }
 280   1              for(i = TD_1MS_START;i <= TD_1MS_END;i ++){//1mS计时
 281   2                      if(NVRAM0[i] < SHRT_MAX){
 282   3                              NVRAM0[i] ++;
 283   3                      }
 284   2              }
 285   1              if(TimerCounter_1mS >= 10){//10mS计算
 286   2                      if(LD(SPCOIL_PS10MS)){//ON
 287   3                              RES(SPCOIL_PS10MS);
 288   3                      }
 289   2                      else{//OFF
 290   3                              SET(SPCOIL_PS10MS);
 291   3                      }
 292   2                      for(i = TD_10MS_START;i <= TD_10MS_END;i ++){
 293   3                              if(NVRAM0[i] < SHRT_MAX){
 294   4                                      NVRAM0[i] ++;
 295   4                              }
 296   3                      }
 297   2                      TimerCounter_10mS ++;
 298   2                      TimerCounter_1mS = 0;
 299   2              }
 300   1              if(TimerCounter_10mS >= 10){//100ms计算
 301   2                      if(LD(SPCOIL_PS100MS)){//ON
 302   3                              RES(SPCOIL_PS100MS);
 303   3                      }
 304   2                      else{//OFF
 305   3                              SET(SPCOIL_PS100MS);
 306   3                      }
 307   2                      for(i = TD_100MS_START;i < TD_100MS_END;i ++){
 308   3                              if(NVRAM0[i] < SHRT_MAX){
 309   4                                      NVRAM0[i] ++;
 310   4                              }
 311   3                      }
 312   2                      TimerCounter_100mS ++;
 313   2                      TimerCounter_10mS = 0;
 314   2                      setLedRun(LD(SPCOIL_PS100MS));
 315   2              }
 316   1              if(TimerCounter_100mS >= 10){//1000mS计算
 317   2                      if(LD(SPCOIL_PS1000MS)){//ON
 318   3                              RES(SPCOIL_PS1000MS);
 319   3                      }
 320   2                      else{
 321   3                              SET(SPCOIL_PS1000MS);
 322   3                      }
 323   2                      tmp = 0;
 324   2                      tmp = NVRAM0[SPREG_RUNTIME_L] + (uint32_t)(NVRAM0[SPREG_RUNTIME_H]) * 65536L;
 325   2                      tmp += 1;
 326   2                      NVRAM0[SPREG_RUNTIME_H] = (tmp >> 16) & 0xFFFF;
 327   2                      NVRAM0[SPREG_RUNTIME_L] = tmp & 0xFFFF;
 328   2                      TimerCounter_100mS = 0;
 329   2              }
 330   1      #if CONFIG_SPLC_USING_CADC == 1
 331   1              chipAdcProcess();//ADC扫描
 332   1      #endif
 333   1              TimerCounter_1mS ++;
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 70  

 334   1      }
 335          static void inputInit(void){//IO输入滤波器初始化
 336   1              memset(inputFilter, 0x0, (X_END - X_START + 1) * 16);
 337   1      }
 338          
 339          void sPlcInit(void){//软逻辑初始化
 340   1      #if CONFIG_SPLC_USING_WDT == 1
 341   1              if ((RSTSRC & 0x02) == 0x00){
 342   2                      if(RSTSRC == 0x08)
 343   2                      {//检测WDT看门狗 看门狗复位后锁定
 344   3                              setLedError(DEBUG_LED_ON);
 345   3                              setLedRun(DEBUG_LED_ON);
 346   3                              setLedDac(DEBUG_LED_OFF);
 347   3                              setLedEprom(DEBUG_LED_OFF);
 348   3                              while(1);
 349   3                      }
 350   2              }
 351   1      #endif
 352   1              setLedError(DEBUG_LED_OFF);
 353   1              setLedRun(DEBUG_LED_OFF);
 354   1              setLedDac(DEBUG_LED_OFF);
 355   1              setLedEprom(DEBUG_LED_OFF);
 356   1              wdtInit();//看门狗使能
 357   1              wdtDisable();//屏蔽看门狗
 358   1      #if CONFIG_SPLC_USING_UART1 == 1
 359   1              initUart1(CONFIG_UART1_BAUDRATE);//UART1初始化
 360   1      #endif  
 361   1      #if CONFIG_SPLC_USING_EPROM == 1
 362   1              loadNvram();//上电恢复NVRAM
 363   1      #endif
 364   1      #if CONFIG_SPLC_USING_CADC == 1
 365   1              initChipAdc();//初始化ADC模块
 366   1      #endif
 367   1      #if CONFIG_SPLC_USING_DAC == 1
 368   1              initChipDac();//初始化DAC模块
 369   1      #endif
 370   1      #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
 371   1              initModbus(CONFIG_MB_RTU_SLAVE_ADDRESS, CONFIG_UART0_BAUDRATE);
 372   1      #endif
 373   1              timer0Init();//初始化硬件计时器模块
 374   1              SET(SPCOIL_ON);
 375   1              setLedError(DEBUG_LED_OFF);
 376   1              SET(SPCOIL_ON);
 377   1              SET(SPCOIL_START_UP);
 378   1              NVRAM0[EM_END] = CONFIG_SPLC_DEV;
 379   1      }
 380          void sPlcProcessStart(void){//sPLC轮询起始
 381   1      #if CONFIG_SPLC_USING_CLEAR_NVRAM == 1
 382   1              if(NVRAM0[SPREG_CLEAR_NVRAM0] == CONFIG_SPLC_CLEAR_CODE){
 383   2                      DISABLE_INTERRUPT;//关闭中断
 384   2                      setLedRun(DEBUG_LED_ON);//
 385   2                      setLedEprom(DEBUG_LED_ON);
 386   2                      if(epromTest()){//EPROM测试成功
 387   3                              setLedEprom(DEBUG_LED_OFF);
 388   3                              setLedError(DEBUG_LED_ON);
 389   3                              delayMs(10);
 390   3                              setLedError(DEBUG_LED_OFF);
 391   3                      }
 392   2                      else{//EPROM测试失败
 393   3                              setLedEprom(DEBUG_LED_OFF);
 394   3                              setLedError(DEBUG_LED_ON);
 395   3                              delayMs(50);
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 71  

 396   3                              setLedError(DEBUG_LED_OFF);
 397   3                              delayMs(50);
 398   3                              setLedError(DEBUG_LED_ON);
 399   3                              delayMs(50);
 400   3                              setLedError(DEBUG_LED_OFF);
 401   3                              delayMs(50);
 402   3                              setLedError(DEBUG_LED_ON);
 403   3                              delayMs(50);
 404   3                              setLedError(DEBUG_LED_OFF);     
 405   3                      }
 406   2                      clearNvram();
 407   2                      REBOOT();       
 408   2              }
 409   1      #endif
 410   1      #if CONFIG_SPLC_USING_WDT == 1
 411   1              wdtFeed();//喂狗
 412   1      #endif
 413   1      #if CONFIG_SPLC_USING_MB_RTU_SLAVE == 1
 414   1              modbusPorcess();//处理MODBUS
 415   1      #endif
 416   1      #if CONFIG_SPLC_USING_IO_INPUT == 1
 417   1              inputRefresh();//读取X口输入
*** WARNING C206 IN LINE 417 OF MainApp\sPlc.c: 'inputRefresh': missing function-prototype
 418   1      #endif
 419   1      #if CONFIG_SPLC_USING_WDT == 1
 420   1              wdtFeed();
 421   1      #endif
 422   1      }
 423          void sPlcProcessEnd(void){//sPLC轮询结束
 424   1      #if CONFIG_SPLC_USING_WDT == 1
 425   1              wdtFeed();//喂狗
 426   1      #endif
 427   1      #if CONFIG_SPLC_USING_IO_OUTPUT == 1
 428   1              outputRefresh();//更新Y口输出
*** WARNING C206 IN LINE 428 OF MainApp\sPlc.c: 'outputRefresh': missing function-prototype
 429   1      #endif
 430   1      #if CONFIG_SPLC_USING_DAC
 431   1              refreshDac();//更新DAC输出
 432   1      #endif
 433   1      #if CONFIG_SPLC_USING_EPROM == 1
 434   1              updataNvram();//更新NVRAM
 435   1      #endif
 436   1      #if CONFIG_SPLC_USING_WDT == 1
 437   1              wdtFeed();//喂狗
 438   1      #endif
 439   1              RES(SPCOIL_START_UP);
 440   1      }
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 72  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION getGlobalInterrupt (BEGIN)
                                           ; SOURCE LINE # 13
                                           ; SOURCE LINE # 14
                       MOV     C,EA
                       CLR     A
                       RLC     A
                       MOV     R7,A
                                           ; SOURCE LINE # 15
                       RET     
             ; FUNCTION getGlobalInterrupt (END)

             ; FUNCTION _setLedRun (BEGIN)
                                           ; SOURCE LINE # 16
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 17
                       MOV     A,R7
                       ADD     A,#0FFH
                 R     MOV     debugLed0,C
                                           ; SOURCE LINE # 18
                       RET     
             ; FUNCTION _setLedRun (END)

             ; FUNCTION getLedRun (BEGIN)
                                           ; SOURCE LINE # 19
                                           ; SOURCE LINE # 20
                 R     MOV     C,debugLed0
                       CLR     A
                       RLC     A
                       MOV     R7,A
                                           ; SOURCE LINE # 21
                       RET     
             ; FUNCTION getLedRun (END)

             ; FUNCTION _setLedEprom (BEGIN)
                                           ; SOURCE LINE # 22
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 23
                       MOV     A,R7
                       ADD     A,#0FFH
                 R     MOV     debugLed1,C
                                           ; SOURCE LINE # 24
                       RET     
             ; FUNCTION _setLedEprom (END)

             ; FUNCTION getLedEprom (BEGIN)
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
                 R     MOV     C,debugLed1
                       CLR     A
                       RLC     A
                       MOV     R7,A
                                           ; SOURCE LINE # 27
                       RET     
             ; FUNCTION getLedEprom (END)

             ; FUNCTION _setLedDac (BEGIN)
                                           ; SOURCE LINE # 28
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 29
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 73  

                       MOV     A,R7
                       ADD     A,#0FFH
                 R     MOV     debugLed2,C
                                           ; SOURCE LINE # 30
                       RET     
             ; FUNCTION _setLedDac (END)

             ; FUNCTION getLedDac (BEGIN)
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
                 R     MOV     C,debugLed2
                       CLR     A
                       RLC     A
                       MOV     R7,A
                                           ; SOURCE LINE # 33
                       RET     
             ; FUNCTION getLedDac (END)

             ; FUNCTION _setLedError (BEGIN)
                                           ; SOURCE LINE # 34
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 35
                       MOV     A,R7
                       ADD     A,#0FFH
                 R     MOV     debugLed3,C
                                           ; SOURCE LINE # 36
                       RET     
             ; FUNCTION _setLedError (END)

             ; FUNCTION getLedError (BEGIN)
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
                 R     MOV     C,debugLed3
                       CLR     A
                       RLC     A
                       MOV     R7,A
                                           ; SOURCE LINE # 39
                       RET     
             ; FUNCTION getLedError (END)

             ; FUNCTION _?assertCoilAddress (BEGIN)
                                           ; SOURCE LINE # 40
                 E     DEC     ?C_IBP
                 E     DEC     ?C_IBP
                 E     MOV     R0,?C_IBP
                       MOV     @R0,AR6
                       INC     R0
                       MOV     @R0,AR7
                                           ; SOURCE LINE # 42
                 E     MOV     R1,?C_IBP
                       SETB    C
                       INC     R1
                       MOV     A,@R1
                       SUBB    A,#010H
                       DEC     R1
                       MOV     A,@R1
                       SUBB    A,#0FH
                 R     xJLT    ?C0013
             ?C0011:
                                           ; SOURCE LINE # 43
                 R     xJMP    ?C0011
                                           ; SOURCE LINE # 45
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 74  

             ?C0013:
                 E     INC     ?C_IBP
                 E     INC     ?C_IBP
                       RET     
             ; FUNCTION _?assertCoilAddress (END)

             ; FUNCTION _?assertRegisterAddress (BEGIN)
                                           ; SOURCE LINE # 46
                 E     DEC     ?C_IBP
                 E     DEC     ?C_IBP
                 E     MOV     R0,?C_IBP
                       MOV     @R0,AR6
                       INC     R0
                       MOV     @R0,AR7
                                           ; SOURCE LINE # 48
                 E     MOV     R1,?C_IBP
                       CLR     C
                       INC     R1
                       MOV     A,@R1
                       SUBB    A,#0F1H
                       DEC     R1
                       MOV     A,@R1
                       SUBB    A,#00H
                 R     xJLT    ?C0017
             ?C0015:
                                           ; SOURCE LINE # 49
                 R     xJMP    ?C0015
                                           ; SOURCE LINE # 51
             ?C0017:
                 E     INC     ?C_IBP
                 E     INC     ?C_IBP
                       RET     
             ; FUNCTION _?assertRegisterAddress (END)

             ; FUNCTION clearDM (BEGIN)
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 54
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       CLR     A
                       MOV     R5,A
                       MOV     R4,A
             ?C0018:
                                           ; SOURCE LINE # 55
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 56
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 75  

                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
                       INC     R5
                 R     CJNE    R5,#00H,?C0134
                       INC     R4
             ?C0134:
                       MOV     A,R5
                       XRL     A,#014H
                       ORL     A,R4
                 R     xJNZ    ?C0018
                                           ; SOURCE LINE # 58
             ?C0021:
                       RET     
             ; FUNCTION clearDM (END)

             ; FUNCTION clearMR (BEGIN)
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 61
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       CLR     A
                       MOV     R5,A
                       MOV     R4,A
             ?C0022:
                                           ; SOURCE LINE # 62
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
                       INC     R5
                 R     CJNE    R5,#00H,?C0135
                       INC     R4
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 76  

             ?C0135:
                       MOV     A,R5
                       XRL     A,#04H
                       ORL     A,R4
                 R     xJNZ    ?C0022
                                           ; SOURCE LINE # 65
             ?C0025:
                       RET     
             ; FUNCTION clearMR (END)

             ; FUNCTION clearEM (BEGIN)
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 68
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#014H
                       MOV     R4,#00H
             ?C0026:
                                           ; SOURCE LINE # 69
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
                       INC     R5
                 R     CJNE    R5,#00H,?C0136
                       INC     R4
             ?C0136:
                       MOV     A,R5
                       XRL     A,#0A0H
                       ORL     A,R4
                 R     xJNZ    ?C0026
                                           ; SOURCE LINE # 72
             ?C0029:
                       RET     
             ; FUNCTION clearEM (END)

             ; FUNCTION clearR (BEGIN)
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 75
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 77  

;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#04H
                       MOV     R4,#00H
             ?C0030:
                                           ; SOURCE LINE # 76
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
                       INC     R5
                 R     CJNE    R5,#00H,?C0137
                       INC     R4
             ?C0137:
                       MOV     A,R5
                       XRL     A,#0CH
                       ORL     A,R4
                 R     xJNZ    ?C0030
                                           ; SOURCE LINE # 79
             ?C0033:
                       RET     
             ; FUNCTION clearR (END)

             ; FUNCTION clearT (BEGIN)
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 82
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#0A0H
                       MOV     R4,#00H
             ?C0034:
                                           ; SOURCE LINE # 83
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 78  

                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
                       INC     R5
                 R     CJNE    R5,#00H,?C0138
                       INC     R4
             ?C0138:
                       MOV     A,R5
                       XRL     A,#0A1H
                       ORL     A,R4
                 R     xJNZ    ?C0034
             ?C0035:
                                           ; SOURCE LINE # 86
                       MOV     R4,#00H
                       MOV     R5,#0A1H
             ?C0037:
                                           ; SOURCE LINE # 87
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 79  

                       INC     R5
                 R     CJNE    R5,#00H,?C0139
                       INC     R4
             ?C0139:
                       MOV     A,R5
                       XRL     A,#0A2H
                       ORL     A,R4
                 R     xJNZ    ?C0037
             ?C0038:
                                           ; SOURCE LINE # 90
                       MOV     R4,#00H
                       MOV     R5,#0A2H
             ?C0040:
                                           ; SOURCE LINE # 91
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
                       INC     R5
                 R     CJNE    R5,#00H,?C0140
                       INC     R4
             ?C0140:
                       MOV     A,R5
                       XRL     A,#0A3H
                       ORL     A,R4
                 R     xJNZ    ?C0040
                                           ; SOURCE LINE # 94
             ?C0043:
                       RET     
             ; FUNCTION clearT (END)

             ; FUNCTION clearTD (BEGIN)
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 97
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#0A3H
                       MOV     R4,#00H
             ?C0044:
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 80  

                                           ; SOURCE LINE # 98
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
                       INC     R5
                 R     CJNE    R5,#00H,?C0141
                       INC     R4
             ?C0141:
                       MOV     A,R5
                       XRL     A,#0B3H
                       ORL     A,R4
                 R     xJNZ    ?C0044
             ?C0045:
                                           ; SOURCE LINE # 101
                       MOV     R4,#00H
                       MOV     R5,#0B3H
             ?C0047:
                                           ; SOURCE LINE # 102
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 81  

                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
                       INC     R5
                 R     CJNE    R5,#00H,?C0142
                       INC     R4
             ?C0142:
                       MOV     A,R5
                       XRL     A,#0C3H
                       ORL     A,R4
                 R     xJNZ    ?C0047
             ?C0048:
                                           ; SOURCE LINE # 105
                       MOV     R4,#00H
                       MOV     R5,#0C3H
             ?C0050:
                                           ; SOURCE LINE # 106
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
                       INC     R5
                 R     CJNE    R5,#00H,?C0143
                       INC     R4
             ?C0143:
                       MOV     A,R5
                       XRL     A,#0D3H
                       ORL     A,R4
                 R     xJNZ    ?C0050
                                           ; SOURCE LINE # 109
             ?C0053:
                       RET     
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 82  

             ; FUNCTION clearTD (END)

             ; FUNCTION clearC (BEGIN)
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 112
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#0D3H
                       MOV     R4,#00H
             ?C0054:
                                           ; SOURCE LINE # 113
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
                       INC     R5
                 R     CJNE    R5,#00H,?C0144
                       INC     R4
             ?C0144:
                       MOV     A,R5
                       XRL     A,#0D4H
                       ORL     A,R4
                 R     xJNZ    ?C0054
                                           ; SOURCE LINE # 116
             ?C0057:
                       RET     
             ; FUNCTION clearC (END)

             ; FUNCTION clearX (BEGIN)
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 119
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#0D4H
                       MOV     R4,#00H
             ?C0058:
                                           ; SOURCE LINE # 120
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 83  

                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
                       INC     R5
                 R     CJNE    R5,#00H,?C0145
                       INC     R4
             ?C0145:
                       MOV     A,R5
                       XRL     A,#0D5H
                       ORL     A,R4
                 R     xJNZ    ?C0058
                                           ; SOURCE LINE # 123
             ?C0061:
                       RET     
             ; FUNCTION clearX (END)

             ; FUNCTION clearY (BEGIN)
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#0D5H
                       MOV     R4,#00H
             ?C0062:
                                           ; SOURCE LINE # 127
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 84  

                                           ; SOURCE LINE # 128
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
                       INC     R5
                 R     CJNE    R5,#00H,?C0146
                       INC     R4
             ?C0146:
                       MOV     A,R5
                       XRL     A,#0D6H
                       ORL     A,R4
                 R     xJNZ    ?C0062
                                           ; SOURCE LINE # 130
             ?C0065:
                       RET     
             ; FUNCTION clearY (END)

             ; FUNCTION clearSPREG (BEGIN)
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 133
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#0D6H
                       MOV     R4,#00H
             ?C0066:
                                           ; SOURCE LINE # 134
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
                       INC     R5
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 85  

                 R     CJNE    R5,#00H,?C0147
                       INC     R4
             ?C0147:
                       MOV     A,R5
                       XRL     A,#0EEH
                       ORL     A,R4
                 R     xJNZ    ?C0066
                                           ; SOURCE LINE # 137
             ?C0069:
                       RET     
             ; FUNCTION clearSPREG (END)

             ; FUNCTION clearSPCOIL (BEGIN)
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 140
;---- Variable 'i' assigned to Register 'R4/R5' ----
                       MOV     R5,#0EEH
                       MOV     R4,#00H
             ?C0070:
                                           ; SOURCE LINE # 141
                       MOV     A,R5
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R4
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
                 R     MOV     A,#LOW NVRAM1
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM1
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
                       INC     R5
                 R     CJNE    R5,#00H,?C0148
                       INC     R4
             ?C0148:
                       MOV     A,R5
                       XRL     A,#0F2H
                       ORL     A,R4
                 R     xJNZ    ?C0070
                                           ; SOURCE LINE # 144
             ?C0073:
                       RET     
             ; FUNCTION clearSPCOIL (END)

             ; FUNCTION loadNvram (BEGIN)
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 86  

                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
                       MOV     R6,#01H
                       MOV     R7,#0E4H
                       MOV     R5,#00H
                       MOV     R3,#01H
                 R     MOV     R2,#HIGH NVRAM0
                 R     MOV     R1,#LOW NVRAM0
                 E     CALL    ?C?MEMSET
                                           ; SOURCE LINE # 147
                       CLR     A
                       MOV     R7,A
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 148
                       MOV     R3,#01H
                 R     MOV     R2,#HIGH NVRAM0
                 R     MOV     R1,#LOW NVRAM0
                 E     MOV     ?_epromRead?BYTE+05H,#01H
                 E     MOV     ?_epromRead?BYTE+06H,#0E4H
                       CLR     A
                       MOV     R6,A
                 E     CALL    _epromRead
                                           ; SOURCE LINE # 149
                       MOV     R7,#01H
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 150
                 R     CALL    clearEM
                                           ; SOURCE LINE # 151
                 R     CALL    clearR
                                           ; SOURCE LINE # 152
                 R     CALL    clearT
                                           ; SOURCE LINE # 153
                 R     CALL    clearTD
                                           ; SOURCE LINE # 154
                 R     CALL    clearC
                                           ; SOURCE LINE # 155
                 R     CALL    clearX
                                           ; SOURCE LINE # 156
                 R     CALL    clearY
                                           ; SOURCE LINE # 157
                 R     CALL    clearSPREG
                                           ; SOURCE LINE # 158
                 R     CALL    clearSPCOIL
                                           ; SOURCE LINE # 159
                 R     MOV     R0,#LOW NVRAM1
                 R     MOV     R4,#HIGH NVRAM1
                       MOV     R5,#01H
                       MOV     R3,#01H
                 R     MOV     R2,#HIGH NVRAM0
                 R     MOV     R1,#LOW NVRAM0
                       MOV     R6,#01H
                       MOV     R7,#0E4H
                 E     CALL    ?C?COPY
                                           ; SOURCE LINE # 161
                       MOV     A,RSTSRC
                       ANL     A,#02H
                 R     xJNZ    ?C0076
                                           ; SOURCE LINE # 162
                       MOV     R7,RSTSRC
                       MOV     A,R7
                       XRL     A,#08H
                 R     xJNZ    ?C0076
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 87  

                                           ; SOURCE LINE # 163
                       MOV     R6,#0EH
                       MOV     R7,#0EFH
                 E     CALL    _?SET
                                           ; SOURCE LINE # 164
                       CLR     A
                       MOV     R7,A
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 165
                 R     CALL    _setLedRun
                                           ; SOURCE LINE # 166
                       INC     R7
                 R     CALL    _setLedDac
                                           ; SOURCE LINE # 167
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 168
                       MOV     R7,#064H
                 E     CALL    _?delayMs
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 172
             ?C0076:
                       RET     
             ; FUNCTION loadNvram (END)

             ; FUNCTION saveNvram (BEGIN)
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                       CLR     EA
                                           ; SOURCE LINE # 175
                       CLR     A
                       MOV     R7,A
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 176
                       MOV     R3,#01H
                 R     MOV     R2,#HIGH NVRAM0
                 R     MOV     R1,#LOW NVRAM0
                 E     MOV     ?_epromWrite?BYTE+05H,#00H
                 E     MOV     ?_epromWrite?BYTE+06H,#08H
                       CLR     A
                       MOV     R6,A
                 E     CALL    _epromWrite
                                           ; SOURCE LINE # 177
                       MOV     R7,#01H
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 178
                       SETB    EA
                                           ; SOURCE LINE # 179
                       RET     
             ; FUNCTION saveNvram (END)

             ; FUNCTION updataNvram (BEGIN)
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 183
                 R     MOV     sp0,#01H
                 R     MOV     sp0+01H,#HIGH NVRAM0
                 R     MOV     sp0+02H,#LOW NVRAM0
                                           ; SOURCE LINE # 184
                 R     MOV     sp1,#01H
                 R     MOV     sp1+01H,#HIGH NVRAM1
                 R     MOV     sp1+02H,#LOW NVRAM1
                                           ; SOURCE LINE # 185
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 88  

                       CLR     A
                 R     MOV     i,A
                 R     MOV     i+01H,A
             ?C0078:
                                           ; SOURCE LINE # 186
                 R     MOV     R3,sp1
                 R     MOV     R2,sp1+01H
                 R     MOV     R1,sp1+02H
                 R     MOV     DPL,i+01H
                 R     MOV     DPH,i
                 E     CALL    ?C?CLDOPTR
                       MOV     R7,A
                 R     MOV     R3,sp0
                 R     MOV     R2,sp0+01H
                 R     MOV     R1,sp0+02H
                 R     MOV     DPL,i+01H
                 R     MOV     DPH,i
                 E     CALL    ?C?CLDOPTR
                       XRL     A,R7
                 R     xJZ     ?C0080
                                           ; SOURCE LINE # 187
                       CLR     A
                       MOV     R7,A
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 188
                 R     MOV     R3,sp0
                 R     MOV     R2,sp0+01H
                 R     MOV     R1,sp0+02H
                 R     MOV     DPL,i+01H
                 R     MOV     DPH,i
                 E     CALL    ?C?CLDOPTR
                       MOV     R5,A
                 R     MOV     R7,i+01H
                 R     MOV     R6,i
                 E     CALL    _epromWriteOneByte
                                           ; SOURCE LINE # 189
                       MOV     R7,#01H
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
             ?C0080:
                 R     INC     i+01H
                 R     MOV     A,i+01H
                 R     JNZ     ?C0149
                 R     INC     i
             ?C0149:
                       CLR     C
                       SUBB    A,#08H
                 R     MOV     A,i
                       SUBB    A,#00H
                 R     xJLT    ?C0078
             ?C0079:
                                           ; SOURCE LINE # 192
                 R     MOV     sp0,#01H
                 R     MOV     sp0+01H,#HIGH NVRAM0
                 R     MOV     sp0+02H,#LOW NVRAM0
                                           ; SOURCE LINE # 193
                 R     MOV     sp1,#01H
                 R     MOV     sp1+01H,#HIGH NVRAM1
                 R     MOV     sp1+02H,#LOW NVRAM1
                                           ; SOURCE LINE # 194
                 R     MOV     i,#00H
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 89  

                 R     MOV     i+01H,#018H
             ?C0082:
                                           ; SOURCE LINE # 195
                 R     MOV     R3,sp1
                 R     MOV     R2,sp1+01H
                 R     MOV     R1,sp1+02H
                 R     MOV     DPL,i+01H
                 R     MOV     DPH,i
                 E     CALL    ?C?CLDOPTR
                       MOV     R7,A
                 R     MOV     R3,sp0
                 R     MOV     R2,sp0+01H
                 R     MOV     R1,sp0+02H
                 R     MOV     DPL,i+01H
                 R     MOV     DPH,i
                 E     CALL    ?C?CLDOPTR
                       XRL     A,R7
                 R     xJZ     ?C0084
                                           ; SOURCE LINE # 196
                       CLR     A
                       MOV     R7,A
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 197
                 R     MOV     R3,sp0
                 R     MOV     R2,sp0+01H
                 R     MOV     R1,sp0+02H
                 R     MOV     DPL,i+01H
                 R     MOV     DPH,i
                 E     CALL    ?C?CLDOPTR
                       MOV     R5,A
                 R     MOV     R7,i+01H
                 R     MOV     R6,i
                 E     CALL    _epromWriteOneByte
                                           ; SOURCE LINE # 198
                       MOV     R7,#01H
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
             ?C0084:
                 R     INC     i+01H
                 R     MOV     A,i+01H
                 R     JNZ     ?C0150
                 R     INC     i
             ?C0150:
                       CLR     C
                       SUBB    A,#028H
                 R     MOV     A,i
                       SUBB    A,#00H
                 R     xJLT    ?C0082
             ?C0083:
                                           ; SOURCE LINE # 201
                 R     MOV     R0,#LOW NVRAM1
                 R     MOV     R4,#HIGH NVRAM1
                       MOV     R5,#01H
                       MOV     R3,#01H
                 R     MOV     R2,#HIGH NVRAM0
                 R     MOV     R1,#LOW NVRAM0
                       MOV     R6,#01H
                       MOV     R7,#0E4H
                 E     JMP     ?C?COPY
             ; FUNCTION updataNvram (END)

C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 90  

             ; FUNCTION clearNvram (BEGIN)
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 206
                       MOV     C,EA
                       CLR     A
                       RLC     A
                 R     MOV     R0,#LOW oldEA
                       MOV     @R0,A
                                           ; SOURCE LINE # 207
                       CLR     EA
                                           ; SOURCE LINE # 208
                 R     CALL    _?wdtDisable
                                           ; SOURCE LINE # 209
                       CLR     A
                 R     MOV     R0,#LOW i
                       MOV     @R0,A
                       INC     R0
                       MOV     @R0,A
             ?C0087:
                                           ; SOURCE LINE # 210
                 R     CALL    getLedEprom
                       MOV     A,R7
                 R     xJZ     ?C0090
                                           ; SOURCE LINE # 211
                       MOV     R7,#01H
                                           ; SOURCE LINE # 212
                 R     xJMP    ?C0156
             ?C0090:
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
                       CLR     A
                       MOV     R7,A
             ?C0156:
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 215
             ?C0091:
                                           ; SOURCE LINE # 216
                 R     MOV     R0,#LOW i
                       MOV     A,@R0
                       MOV     R6,A
                       INC     R0
                       MOV     A,@R0
                       MOV     R7,A
                       CLR     A
                       MOV     R5,A
                 E     CALL    _epromWriteOneByte
                                           ; SOURCE LINE # 218
                 R     MOV     R0,#LOW i+01H
                       INC     @R0
                       MOV     A,@R0
                       DEC     R0
                 R     JNZ     ?C0151
                       INC     @R0
             ?C0151:
                       SETB    C
                 R     MOV     R0,#LOW i+01H
                       MOV     A,@R0
                       SUBB    A,#00H
                       DEC     R0
                       MOV     A,@R0
                       SUBB    A,#020H
                 R     xJLT    ?C0087
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 91  

             ?C0088:
                                           ; SOURCE LINE # 219
                 R     MOV     R0,#LOW oldEA
                       MOV     A,@R0
                       ADD     A,#0FFH
                       MOV     EA,C
                                           ; SOURCE LINE # 220
                       RET     
             ; FUNCTION clearNvram (END)

             ; FUNCTION wdtInit (BEGIN)
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
;---- Variable 'SFRPAGE_save' assigned to Register 'R7' ----
                       MOV     R7,SFRPAGE
                                           ; SOURCE LINE # 226
                       CLR     A
                       MOV     SFRPAGE,A
                                           ; SOURCE LINE # 227
                       ANL     PCA0MD,#0BFH
                                           ; SOURCE LINE # 228
                       MOV     PCA0MD,A
                                           ; SOURCE LINE # 229
                       MOV     PCA0CPL5,#0FFH
                                           ; SOURCE LINE # 230
                       MOV     SFRPAGE,R7
                                           ; SOURCE LINE # 231
                       RET     
             ; FUNCTION wdtInit (END)

             ; FUNCTION _?wdtEnable (BEGIN)
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
                       ORL     PCA0MD,#040H
                                           ; SOURCE LINE # 234
                       RET     
             ; FUNCTION _?wdtEnable (END)

             ; FUNCTION _?wdtDisable (BEGIN)
                                           ; SOURCE LINE # 235
                 E     DEC     ?C_IBP
                 E     DEC     ?C_IBP
                                           ; SOURCE LINE # 237
                 E     MOV     R0,?C_IBP
                       INC     R0
                       MOV     @R0,SFRPAGE
                                           ; SOURCE LINE # 238
                       MOV     C,EA
                       CLR     A
                       RLC     A
                 E     MOV     R0,?C_IBP
                       MOV     @R0,A
                                           ; SOURCE LINE # 239
                       CLR     EA
                                           ; SOURCE LINE # 240
                       CLR     A
                       MOV     SFRPAGE,A
                                           ; SOURCE LINE # 241
                       ANL     PCA0MD,#0BFH
                                           ; SOURCE LINE # 242
                 E     MOV     R0,?C_IBP
                       INC     R0
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 92  

                       MOV     A,@R0
                       MOV     SFRPAGE,A
                                           ; SOURCE LINE # 243
                 E     MOV     R0,?C_IBP
                       MOV     A,@R0
                       ADD     A,#0FFH
                       MOV     EA,C
                                           ; SOURCE LINE # 244
                 E     INC     ?C_IBP
                 E     INC     ?C_IBP
                       RET     
             ; FUNCTION _?wdtDisable (END)

             ; FUNCTION _?wdtFeed (BEGIN)
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
                       CLR     A
                       MOV     PCA0CPH5,A
                                           ; SOURCE LINE # 247
                       RET     
             ; FUNCTION _?wdtFeed (END)

             ; FUNCTION pcaInit (BEGIN)
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
                       RET     
             ; FUNCTION pcaInit (END)

             ; FUNCTION timer0Init (BEGIN)
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 252
                       CLR     A
                 R     MOV     R0,#LOW TimerCounter_1mS
                       MOV     @R0,A
                                           ; SOURCE LINE # 253
                       INC     R0
                       MOV     @R0,A
                                           ; SOURCE LINE # 254
                       INC     R0
                       MOV     @R0,A
                                           ; SOURCE LINE # 255
                 R     MOV     R0,#LOW temp
                       MOV     @R0,#0F0H
                       INC     R0
                       MOV     @R0,#060H
                                           ; SOURCE LINE # 256
                       DEC     R0
                       MOV     A,@R0
                       MOV     R6,A
                       INC     R0
                       MOV     A,@R0
                 R     MOV     R0,#LOW Timer0_L
                       MOV     @R0,A
                                           ; SOURCE LINE # 257
                       MOV     A,R6
                       INC     R0
                       MOV     @R0,A
                                           ; SOURCE LINE # 258
                       MOV     A,@R0
                       MOV     TH0,A
                                           ; SOURCE LINE # 259
                       DEC     R0
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 93  

                       MOV     A,@R0
                       MOV     TL0,A
                                           ; SOURCE LINE # 260
                       ANL     CKCON,#0F7H
                                           ; SOURCE LINE # 261
                       ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 262
                       ORL     TMOD,#01H
                                           ; SOURCE LINE # 263
                       SETB    ET0
                                           ; SOURCE LINE # 264
                       SETB    TR0
                                           ; SOURCE LINE # 265
                       RET     
             ; FUNCTION timer0Init (END)

             ; FUNCTION timer0Isr (BEGIN)
                       PUSH    ACC
                       PUSH    B
                       PUSH    DPH
                       PUSH    DPL
                       PUSH    PSW
                       MOV     PSW,#00H
                       PUSH    AR0
                       PUSH    AR1
                       PUSH    AR2
                       PUSH    AR3
                       PUSH    AR4
                       PUSH    AR5
                       PUSH    AR6
                       PUSH    AR7
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 269
                       CLR     TF0
                                           ; SOURCE LINE # 270
                       CLR     TR0
                                           ; SOURCE LINE # 271
                 R     MOV     R0,#LOW Timer0_H
                       MOV     A,@R0
                       MOV     TH0,A
                                           ; SOURCE LINE # 272
                       DEC     R0
                       MOV     A,@R0
                       MOV     TL0,A
                                           ; SOURCE LINE # 273
                       SETB    TR0
                                           ; SOURCE LINE # 274
                       MOV     R6,#0EH
                       MOV     R7,#0E2H
                 E     CALL    _?LD
                       MOV     A,R7
                       MOV     R6,#0EH
                       MOV     R7,#0E2H
                 R     xJZ     ?C0099
                                           ; SOURCE LINE # 275
                 E     CALL    _?RES
                                           ; SOURCE LINE # 276
                 R     xJMP    ?C0100
             ?C0099:
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
                 E     CALL    _?SET
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 94  

                                           ; SOURCE LINE # 279
             ?C0100:
                                           ; SOURCE LINE # 280
                 R     MOV     R0,#LOW i
                       MOV     @R0,#00H
                       INC     R0
                       MOV     @R0,#0A3H
             ?C0101:
                 R     MOV     R0,#LOW i
                       MOV     A,@R0
                       MOV     R6,A
                       INC     R0
                       MOV     A,@R0
                       MOV     R7,A
                       SETB    C
                       SUBB    A,#0B2H
                       MOV     A,R6
                       SUBB    A,#00H
                 R     xJGE    ?C0102
                                           ; SOURCE LINE # 281
                       MOV     A,R7
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R6
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       MOVX    A,@DPTR
                       MOV     R4,A
                       INC     DPTR
                       MOVX    A,@DPTR
                       CLR     C
                       SUBB    A,#0FFH
                       MOV     A,R4
                       XRL     A,#080H
                       SUBB    A,#0FFH
                 R     xJGE    ?C0103
                                           ; SOURCE LINE # 282
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOV     B,#01H
                 E     CALL    ?C?IILDX
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
             ?C0103:
                 R     MOV     R0,#LOW i+01H
                       INC     @R0
                       MOV     A,@R0
                       DEC     R0
                 R     JNZ     ?C0152
                       INC     @R0
             ?C0152:
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 95  

                 R     xJMP    ?C0101
             ?C0102:
                                           ; SOURCE LINE # 285
                 R     MOV     R0,#LOW TimerCounter_1mS
                       MOV     A,@R0
                       CLR     C
                       SUBB    A,#0AH
                       MOV     A,#080H
                       SUBB    A,#080H
                 R     xJLT    ?C0105
                                           ; SOURCE LINE # 286
                       MOV     R6,#0EH
                       MOV     R7,#0E3H
                 E     CALL    _?LD
                       MOV     A,R7
                       MOV     R6,#0EH
                       MOV     R7,#0E3H
                 R     xJZ     ?C0106
                                           ; SOURCE LINE # 287
                 E     CALL    _?RES
                                           ; SOURCE LINE # 288
                 R     xJMP    ?C0107
             ?C0106:
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
                 E     CALL    _?SET
                                           ; SOURCE LINE # 291
             ?C0107:
                                           ; SOURCE LINE # 292
                 R     MOV     R0,#LOW i
                       MOV     @R0,#00H
                       INC     R0
                       MOV     @R0,#0B3H
             ?C0108:
                 R     MOV     R0,#LOW i
                       MOV     A,@R0
                       MOV     R6,A
                       INC     R0
                       MOV     A,@R0
                       MOV     R7,A
                       SETB    C
                       SUBB    A,#0C2H
                       MOV     A,R6
                       SUBB    A,#00H
                 R     xJGE    ?C0109
                                           ; SOURCE LINE # 293
                       MOV     A,R7
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R6
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       MOVX    A,@DPTR
                       MOV     R4,A
                       INC     DPTR
                       MOVX    A,@DPTR
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 96  

                       CLR     C
                       SUBB    A,#0FFH
                       MOV     A,R4
                       XRL     A,#080H
                       SUBB    A,#0FFH
                 R     xJGE    ?C0110
                                           ; SOURCE LINE # 294
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOV     B,#01H
                 E     CALL    ?C?IILDX
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
             ?C0110:
                 R     MOV     R0,#LOW i+01H
                       INC     @R0
                       MOV     A,@R0
                       DEC     R0
                 R     JNZ     ?C0153
                       INC     @R0
             ?C0153:
                 R     xJMP    ?C0108
             ?C0109:
                                           ; SOURCE LINE # 297
                 R     MOV     R0,#LOW TimerCounter_10mS
                       INC     @R0
                                           ; SOURCE LINE # 298
                       DEC     R0
                       MOV     @R0,#00H
                                           ; SOURCE LINE # 299
             ?C0105:
                                           ; SOURCE LINE # 300
                 R     MOV     R0,#LOW TimerCounter_10mS
                       MOV     A,@R0
                       CLR     C
                       SUBB    A,#0AH
                       MOV     A,#080H
                       SUBB    A,#080H
                 R     xJLT    ?C0112
                                           ; SOURCE LINE # 301
                       MOV     R6,#0EH
                       MOV     R7,#0E4H
                 E     CALL    _?LD
                       MOV     A,R7
                       MOV     R6,#0EH
                       MOV     R7,#0E4H
                 R     xJZ     ?C0113
                                           ; SOURCE LINE # 302
                 E     CALL    _?RES
                                           ; SOURCE LINE # 303
                 R     xJMP    ?C0114
             ?C0113:
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
                 E     CALL    _?SET
                                           ; SOURCE LINE # 306
             ?C0114:
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 97  

                                           ; SOURCE LINE # 307
                 R     MOV     R0,#LOW i
                       MOV     @R0,#00H
                       INC     R0
                       MOV     @R0,#0C3H
             ?C0115:
                 R     MOV     R0,#LOW i
                       MOV     A,@R0
                       MOV     R6,A
                       INC     R0
                       MOV     A,@R0
                       MOV     R7,A
                       CLR     C
                       SUBB    A,#0D2H
                       MOV     A,R6
                       SUBB    A,#00H
                 R     xJGE    ?C0116
                                           ; SOURCE LINE # 308
                       MOV     A,R7
                       ADD     A,ACC
                       MOV     R7,A
                       MOV     A,R6
                       RLC     A
                       MOV     R6,A
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       MOVX    A,@DPTR
                       MOV     R4,A
                       INC     DPTR
                       MOVX    A,@DPTR
                       CLR     C
                       SUBB    A,#0FFH
                       MOV     A,R4
                       XRL     A,#080H
                       SUBB    A,#0FFH
                 R     xJGE    ?C0117
                                           ; SOURCE LINE # 309
                 R     MOV     A,#LOW NVRAM0
                       ADD     A,R7
                       MOV     DPL,A
                 R     MOV     A,#HIGH NVRAM0
                       ADDC    A,R6
                       MOV     DPH,A
                       CLR     A
                       MOV     B,#01H
                 E     CALL    ?C?IILDX
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
             ?C0117:
                 R     MOV     R0,#LOW i+01H
                       INC     @R0
                       MOV     A,@R0
                       DEC     R0
                 R     JNZ     ?C0154
                       INC     @R0
             ?C0154:
                 R     xJMP    ?C0115
             ?C0116:
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 98  

                                           ; SOURCE LINE # 312
                 R     MOV     R0,#LOW TimerCounter_100mS
                       INC     @R0
                                           ; SOURCE LINE # 313
                       DEC     R0
                       MOV     @R0,#00H
                                           ; SOURCE LINE # 314
                       MOV     R6,#0EH
                       MOV     R7,#0E4H
                 E     CALL    _?LD
                 R     CALL    _setLedRun
                                           ; SOURCE LINE # 315
             ?C0112:
                                           ; SOURCE LINE # 316
                 R     MOV     R0,#LOW TimerCounter_100mS
                       MOV     A,@R0
                       CLR     C
                       SUBB    A,#0AH
                       MOV     A,#080H
                       SUBB    A,#080H
                 R     xJLT    ?C0119
                                           ; SOURCE LINE # 317
                       MOV     R6,#0EH
                       MOV     R7,#0E5H
                 E     CALL    _?LD
                       MOV     A,R7
                       MOV     R6,#0EH
                       MOV     R7,#0E5H
                 R     xJZ     ?C0120
                                           ; SOURCE LINE # 318
                 E     CALL    _?RES
                                           ; SOURCE LINE # 319
                 R     xJMP    ?C0121
             ?C0120:
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
                 E     CALL    _?SET
                                           ; SOURCE LINE # 322
             ?C0121:
                                           ; SOURCE LINE # 323
                 R     MOV     R0,#LOW tmp
                 E     CALL    ?C?LSTKIDATA
                       DB      #00H
                       DB      #00H
                       DB      #00H
                       DB      #00H
                                           ; SOURCE LINE # 324
                 R     MOV     DPTR,#NVRAM0+01AEH
                       MOVX    A,@DPTR
                       MOV     R6,A
                       INC     DPTR
                       MOVX    A,@DPTR
                       MOV     R7,A
                       MOV     A,R6
                       RLC     A
                       SUBB    A,ACC
                       MOV     R5,A
                       MOV     R4,A
                       CLR     A
                       MOV     R3,A
                       MOV     R2,A
                       MOV     R1,#01H
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 99  

                       MOV     R0,A
                 E     CALL    ?C?LMUL
                       MOV     R0,AR4
                       MOV     R1,AR5
                       MOV     R2,AR6
                       MOV     R3,AR7
                 R     MOV     DPTR,#NVRAM0+01ACH
                       MOVX    A,@DPTR
                       MOV     R6,A
                       INC     DPTR
                       MOVX    A,@DPTR
                       MOV     R7,A
                       MOV     A,R6
                       RLC     A
                       SUBB    A,ACC
                       MOV     R5,A
                       MOV     R4,A
                       MOV     A,R3
                       ADD     A,R7
                       MOV     R7,A
                       MOV     A,R2
                       ADDC    A,R6
                       MOV     R6,A
                       MOV     A,R1
                       ADDC    A,R5
                       MOV     R5,A
                       MOV     A,R0
                       ADDC    A,R4
                       MOV     R4,A
                 R     MOV     R0,#LOW tmp
                 E     CALL    ?C?LSTIDATA
                                           ; SOURCE LINE # 325
                 R     MOV     R0,#LOW tmp
                 E     CALL    ?C?LLDIDATA
                       MOV     A,R7
                       ADD     A,#01H
                       MOV     R7,A
                       CLR     A
                       ADDC    A,R6
                       MOV     R6,A
                       CLR     A
                       ADDC    A,R5
                       MOV     R5,A
                       CLR     A
                       ADDC    A,R4
                       MOV     R4,A
                 R     MOV     R0,#LOW tmp
                 E     CALL    ?C?LSTIDATA
                                           ; SOURCE LINE # 326
                 R     MOV     R0,#LOW tmp
                 E     CALL    ?C?LLDIDATA
                       MOV     R0,#010H
                 E     CALL    ?C?ULSHR
                 R     MOV     DPTR,#NVRAM0+01AEH
                       MOV     A,R6
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOV     A,R7
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
                 R     MOV     R0,#LOW tmp
                 E     CALL    ?C?LLDIDATA
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 100 

                 R     MOV     DPTR,#NVRAM0+01ACH
                       MOV     A,R6
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOV     A,R7
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
                 R     MOV     R0,#LOW TimerCounter_100mS
                       MOV     @R0,#00H
                                           ; SOURCE LINE # 329
             ?C0119:
                                           ; SOURCE LINE # 331
                 E     CALL    chipAdcProcess
                                           ; SOURCE LINE # 333
                 R     MOV     R0,#LOW TimerCounter_1mS
                       INC     @R0
                                           ; SOURCE LINE # 334
                       POP     AR7
                       POP     AR6
                       POP     AR5
                       POP     AR4
                       POP     AR3
                       POP     AR2
                       POP     AR1
                       POP     AR0
                       POP     PSW
                       POP     DPL
                       POP     DPH
                       POP     B
                       POP     ACC
                       RETI    
             ; FUNCTION timer0Isr (END)

             ; FUNCTION inputInit (BEGIN)
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
                       MOV     R6,#00H
                       MOV     R7,#010H
                       MOV     R5,#00H
                       MOV     R3,#00H
                 R     MOV     R2,#HIGH inputFilter
                 R     MOV     R1,#LOW inputFilter
                 E     JMP     ?C?MEMSET
             ; FUNCTION inputInit (END)

             ; FUNCTION sPlcInit (BEGIN)
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 341
                       MOV     A,RSTSRC
                       ANL     A,#02H
                 R     xJNZ    ?C0124
                                           ; SOURCE LINE # 342
                       MOV     R7,RSTSRC
                       MOV     A,R7
                       XRL     A,#08H
                 R     xJNZ    ?C0124
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
                       MOV     R7,A
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 345
                 R     CALL    _setLedRun
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 101 

                                           ; SOURCE LINE # 346
                       INC     R7
                 R     CALL    _setLedDac
                                           ; SOURCE LINE # 347
                 R     CALL    _setLedEprom
             ?C0126:
                                           ; SOURCE LINE # 348
                 R     xJMP    ?C0126
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
             ?C0124:
                                           ; SOURCE LINE # 352
                       MOV     R7,#01H
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 353
                 R     CALL    _setLedRun
                                           ; SOURCE LINE # 354
                 R     CALL    _setLedDac
                                           ; SOURCE LINE # 355
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 356
                 R     CALL    wdtInit
                                           ; SOURCE LINE # 357
                 R     CALL    _?wdtDisable
                                           ; SOURCE LINE # 359
                       MOV     R7,#00H
                       MOV     R6,#0C2H
                       MOV     R5,#01H
                       MOV     R4,#00H
                 E     CALL    _initUart1
                                           ; SOURCE LINE # 362
                 R     CALL    loadNvram
                                           ; SOURCE LINE # 365
                 E     CALL    initChipAdc
                                           ; SOURCE LINE # 368
                 E     CALL    initChipDac
                                           ; SOURCE LINE # 371
                 E     MOV     ?_initModbus?BYTE+04H,#00H
                 E     MOV     ?_initModbus?BYTE+03H,#0C2H
                 E     MOV     ?_initModbus?BYTE+02H,#01H
                 E     MOV     ?_initModbus?BYTE+01H,#00H
                       MOV     R7,#01H
                 E     CALL    _initModbus
                                           ; SOURCE LINE # 373
                 R     CALL    timer0Init
                                           ; SOURCE LINE # 374
                       MOV     R6,#0EH
                       MOV     R7,#0E0H
                 E     CALL    _?SET
                                           ; SOURCE LINE # 375
                       MOV     R7,#01H
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 376
                       MOV     R6,#0EH
                       MOV     R7,#0E0H
                 E     CALL    _?SET
                                           ; SOURCE LINE # 377
                       MOV     R6,#0EH
                       MOV     R7,#0E1H
                 E     CALL    _?SET
                                           ; SOURCE LINE # 378
                 R     MOV     DPTR,#NVRAM0+013EH
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 102 

                       MOV     A,#0AH
                       MOVX    @DPTR,A
                       INC     DPTR
                       MOV     A,#01H
                       MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
                       RET     
             ; FUNCTION sPlcInit (END)

             ; FUNCTION sPlcProcessStart (BEGIN)
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 382
                 R     MOV     DPTR,#NVRAM0+01DAH
                       MOVX    A,@DPTR
                       XRL     A,#0A5H
                 R     JNZ     ?C0155
                       INC     DPTR
                       MOVX    A,@DPTR
                       XRL     A,#08EH
             ?C0155:
                 R     xJNZ    ?C0129
                                           ; SOURCE LINE # 383
                       CLR     EA
                                           ; SOURCE LINE # 384
                       MOV     R7,A
                 R     CALL    _setLedRun
                                           ; SOURCE LINE # 385
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 386
                 E     CALL    epromTest
                       MOV     A,R7
                       MOV     R7,#01H
                 R     xJZ     ?C0130
                                           ; SOURCE LINE # 387
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 388
                       DEC     R7
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 389
                       MOV     R7,#0AH
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
                 R     xJMP    ?C0157
             ?C0130:
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
                 R     CALL    _setLedEprom
                                           ; SOURCE LINE # 394
                       DEC     R7
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 395
                       MOV     R7,#032H
                 E     CALL    _?delayMs
                                           ; SOURCE LINE # 396
                       MOV     R7,#01H
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 397
                       MOV     R7,#032H
                 E     CALL    _?delayMs
                                           ; SOURCE LINE # 398
                       CLR     A
                       MOV     R7,A
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 103 

                 R     CALL    _setLedError
                                           ; SOURCE LINE # 399
                       MOV     R7,#032H
                 E     CALL    _?delayMs
                                           ; SOURCE LINE # 400
                       MOV     R7,#01H
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 401
                       MOV     R7,#032H
                 E     CALL    _?delayMs
                                           ; SOURCE LINE # 402
                       CLR     A
                       MOV     R7,A
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 403
                       MOV     R7,#032H
             ?C0157:
                 E     CALL    _?delayMs
                                           ; SOURCE LINE # 404
                       MOV     R7,#01H
                 R     CALL    _setLedError
                                           ; SOURCE LINE # 405
             ?C0131:
                                           ; SOURCE LINE # 406
                 R     CALL    clearNvram
                                           ; SOURCE LINE # 407
                 E     CALL    _?REBOOT
                                           ; SOURCE LINE # 408
             ?C0129:
                                           ; SOURCE LINE # 411
                 R     CALL    _?wdtFeed
                                           ; SOURCE LINE # 414
                 E     CALL    modbusPorcess
                                           ; SOURCE LINE # 417
                 E     CALL    inputRefresh
                                           ; SOURCE LINE # 420
                 R     JMP     _?wdtFeed
             ; FUNCTION sPlcProcessStart (END)

             ; FUNCTION sPlcProcessEnd (BEGIN)
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 425
                 R     CALL    _?wdtFeed
                                           ; SOURCE LINE # 428
                 E     CALL    outputRefresh
                                           ; SOURCE LINE # 431
                 E     CALL    refreshDac
                                           ; SOURCE LINE # 434
                 R     CALL    updataNvram
                                           ; SOURCE LINE # 437
                 R     CALL    _?wdtFeed
                                           ; SOURCE LINE # 439
                       MOV     R6,#0EH
                       MOV     R7,#0E1H
                 E     JMP     _?RES
             ; FUNCTION sPlcProcessEnd (END)

C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 104 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
fp32_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
fp64_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  FLOAT    -----  4
bool . . . . . . . . . . . . . . . . .  TYPEDEF  -----  BIT      -----  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
U8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
U16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
U32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
S8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
S16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
S32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
UU16 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 105 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU16 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
UU32 . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
UU32 . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  U32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  S32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  UU16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  S8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
SI_GENERIC_PTR . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SI_GENERIC_PTR . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  U8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  GPTR . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
SFR0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
SFRNEXT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
SFRLAST. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
CKCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
PSCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
CLKSEL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
TMR3CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
TMR5CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
TMR3RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
TMR5CAPL . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
TMR3RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
TMR5CAPH . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
TMR3L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
TMR5L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
TMR3H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
TMR5H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 106 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TMR5CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
CLKMUL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
SCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
SCON1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
SBUF0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
SBUF1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
CPT0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
CPT2CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
CPT0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
CPT2MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
CPT0MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
CPT2MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
CPT1CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
CPT1MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009EH  1
OSCIFIN. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009EH  1
CPT1MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009FH  1
OSCXCN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009FH  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
SPI0CFG. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
OSCICN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
SPI0CKR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
OSCICRS. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
SPI0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
P0MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
P2MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
SFRPAGE. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
SMOD0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
EMI0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
EMI0TC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
SBCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
SBRLL0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
SBRLH0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
P3MAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
P3MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
P3MASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
P4MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
P2MAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P2MASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
EMI0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
FLSCL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B6H  1
FLKEY. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
SMB0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
ADC0TK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
SMB0ADM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
ADC0MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
ADC0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
ADC0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
ADC0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
SMB0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
SMB0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
SMB0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
ADC0GTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 107 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ADC0GTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
ADC0LTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
ADC0LTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
XBR3 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
XBR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
TMR2CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TMR4CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
REG0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
LIN0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
TMR4CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
TMR2RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
TMR4CAPL . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
TMR2RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
TMR4CAPH . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
TMR2L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
TMR4L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
TMR2H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
TMR4H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
PCA0CPL5 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
PCA1CPL11. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
PCA0CPH5 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
PCA1CPH11. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
REF0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
LIN0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
LIN0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
P0SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D4H  1
P1SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
P2SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
P3SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
PCA0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
PCA1CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
PCA0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
PCA1MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
PCA0PWM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
PCA0CPM0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
PCA1CPM6 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
PCA1PWM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
PCA0CPM1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
PCA1CPM7 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
PCA0CPM2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
PCA1CPM8 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
PCA0CPM3 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
PCA1CPM9 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
PCA0CPM4 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
PCA1CPM10. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
PCA0CPM5 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
PCA1CPM11. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
XBR0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
XBR1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
CCH0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
IT01CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E4H  1
EIE1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E6H  1
EIE2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E7H  1
ADC0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
PCA0CPL1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 108 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PCA1CPL1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
PCA0CPH1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
PCA1CPH1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
PCA0CPL2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
PCA1CPL2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
PCA0CPH2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
PCA1CPH2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
PCA0CPL3 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
PCA1CPL3 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
PCA0CPH3 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
PCA1CPH3 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
RSTSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
P0MAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
P0MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
P0MASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
P1MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
P1MAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
P2MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
P1MASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
P3MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
PSBANK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
EIP1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
EIP2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
SPI0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
PCA0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
PCA1L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
SN0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
PCA0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
PCA1H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
SN1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
PCA0CPL0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
PCA1CPL6 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
SN2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
PCA0CPH0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
PCA1CPH6 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
SN3. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
PCA0CPL4 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
PCA1CPL10. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
PCA0CPH4 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
PCA1CPH10. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
VDM0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
CAN0CFG. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
CAN0STAT . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
CAN0ERRL . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
CAN0ERRH . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
CAN0BTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
CAN0BTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
CAN0IIDL . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
CAN0IIDH . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
CAN0TST. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009EH  1
CAN0BRPE . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
CAN0TR1L . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
CAN0TR1H . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
CAN0TR2L . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
CAN0TR2H . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
CAN0ND1L . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 109 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CAN0ND1H . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
CAN0ND2L . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
CAN0ND2H . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
CAN0IP1L . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
CAN0IP1H . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
CAN0IP2L . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
CAN0IP2H . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B3H  1
CAN0MV1L . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
CAN0MV1H . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
CAN0MV2L . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
CAN0MV2H . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
CAN0IF1CRL . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
CAN0IF1CRH . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
CAN0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
CAN0IF1CML . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
CAN0IF1CMH . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
CAN0IF1M1L . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
CAN0IF1M1H . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
CAN0IF1M2L . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
CAN0IF1M2H . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
CAN0IF1A1L . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
CAN0IF1A1H . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
CAN0IF1A2L . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
CAN0IF1A2H . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
CAN0IF2MCL . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
CAN0IF2MCH . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
CAN0IF1MCL . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
CAN0IF1MCH . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
CAN0IF1DA1L. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D4H  1
CAN0IF1DA1H. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
CAN0IF1DA2L. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
CAN0IF1DA2H. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
CAN0IF1DB1L. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
CAN0IF1DB1H. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
CAN0IF1DB2L. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
CAN0IF1DB2H. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
CAN0IF2CRL . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
CAN0IF2CRH . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
CAN0IF2CML . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
CAN0IF2CMH . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
CAN0IF2M1L . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
CAN0IF2M1H . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
CAN0IF2M2L . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
CAN0IF2M2H . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
CAN0IF2A1L . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
CAN0IF2A1H . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
CAN0IF2A2L . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
CAN0IF2A2H . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
CAN0IF2DA1L. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
CAN0IF2DA1H. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
CAN0IF2DA2L. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
CAN0IF2DA2H. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
CAN0IF2DB1L. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
CAN0IF2DB1H. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
CAN0IF2DB2L. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
CAN0IF2DB2H. . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
DP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0082H  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 110 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TMR3RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0092H  2
TMR5CAP. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0092H  2
TMR3 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0094H  2
TMR5 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0094H  2
SBRL0. . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00ACH  2
ADC0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BDH  2
ADC0GT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C3H  2
ADC0LT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C5H  2
TMR2RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CAH  2
TMR4CAP. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CAH  2
TMR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CCH  2
TMR4 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CCH  2
PCA0CP5. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CEH  2
PCA1CP11 . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CEH  2
PCA0CP1. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00E9H  2
PCA1CP7. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00E9H  2
PCA0CP2. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EBH  2
PCA1CP8. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EBH  2
PCA0CP3. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EDH  2
PCA1CP9. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EDH  2
PCA0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00F9H  2
PCA1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00F9H  2
PCA0CP0. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FBH  2
PCA1CP6. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FBH  2
PCA0CP4. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FDH  2
PCA1CP10 . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FDH  2
CAN0ERR. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0096H  2
CAN0BT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    009AH  2
CAN0IID. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    009CH  2
CAN0TR1. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00A2H  2
CAN0TR2. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00A4H  2
CAN0ND1. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00AAH  2
CAN0ND2. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00ACH  2
CAN0IP1. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00AEH  2
CAN0IP2. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00B2H  2
CAN0MV1. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BAH  2
CAN0MV2. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BCH  2
CAN0IF1CR. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BEH  2
CAN0IF1CM. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C2H  2
CAN0IF1M1. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C4H  2
CAN0IF1M2. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C6H  2
CAN0IF1A1. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CAH  2
CAN0IF1A2. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CCH  2
CAN0IF1MC. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00D2H  2
CAN0IF1DA1 . . . . . . . . . . . . . .  SFR      DATA   U_INT    00D4H  2
CAN0IF1DA2 . . . . . . . . . . . . . .  SFR      DATA   U_INT    00D6H  2
CAN0IF1DB1 . . . . . . . . . . . . . .  SFR      DATA   U_INT    00DAH  2
CAN0IF1DB2 . . . . . . . . . . . . . .  SFR      DATA   U_INT    00DCH  2
CAN0IF2CR. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00DEH  2
CAN0IF2CM. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00E2H  2
CAN0IF2M1. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EAH  2
CAN0IF2M2. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00ECH  2
CAN0IF2A1. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EEH  2
CAN0IF2A2. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00F2H  2
CAN0IF2MC. . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CEH  2
CAN0IF2DA1 . . . . . . . . . . . . . .  SFR      DATA   U_INT    00F6H  2
CAN0IF2DA2 . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FAH  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 111 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CAN0IF2DB1 . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FCH  2
CAN0IF2DB2 . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FEH  2
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
OVR0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
PERR0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
THRE0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
REN0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
TBX0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
RBX0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
RI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
S1MODE . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
MCE1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
REN1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
TB81 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
RB81 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TI1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
RI1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ESPI0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
ES0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
PSPI0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
PS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
MASTER . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
TXMODE . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
STA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
STO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
ACKRQ. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
ARBLOST. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
ACK. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
SI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
TF2H . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
TF2L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
TF2LEN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
TF2CEN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
T2SPLIT. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
T2RCLK . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
T2XCLK . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 112 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TF4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
EXF4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
EXE4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
TR4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
CT4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
CPRL4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
F1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
CF . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
CR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
CCF5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
CCF4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
CCF3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
CCF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
CCF1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
CCF0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
CF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
CR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
CCF11. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
CCF10. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
CCF9 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
CCF8 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
CCF7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
CCF6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
AD0EN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
BURSTEN. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
AD0INT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
AD0BUSY. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
AD0WINT. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
AD0LJST. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
AD0CM1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
AD0CM0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
SPIF . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
WCOL . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
MODF . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FDH  1
RXOVRN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
NSSMD1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
NSSMD0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
TXBMT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
SPIEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_?delayMs. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromWriteOneByte . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromRead . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_epromWrite. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
epromTest. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_initUart1 . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
adcTempDat_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  31
  dat. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  28
  out. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001CH  2
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 113 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  wIndex . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   001EH  1
initChipAdc. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
chipAdcProcess . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
initChipDac. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
refreshDac . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_initModbus. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
modbusPorcess. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_?REBOOT . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_?SET. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_?RES. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_?LD . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NVRAM0 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  484
NVRAM1 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    01E4H  484
getGlobalInterrupt . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_setLedRun . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedRun. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_setLedEprom . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedEprom. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_setLedDac . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedDac. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_setLedError . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  st . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
getLedError. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcInit . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcProcessStart . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
sPlcProcessEnd . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_?wdtFeed. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_?wdtEnable. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_?wdtDisable . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  flagEA . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
  SFRPAGE_save . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0001H  1
_?assertCoilAddress. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  adr. . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
_?assertRegisterAddress. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  adr. . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
clearDM. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearEM. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearR . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearT . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearTD. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearC . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
TimerCounter_1mS . . . . . . . . . . .  STATIC   IDATA  U_CHAR   0000H  1
TimerCounter_10mS. . . . . . . . . . .  STATIC   IDATA  U_CHAR   0001H  1
TimerCounter_100mS . . . . . . . . . .  STATIC   IDATA  U_CHAR   0002H  1
Timer0_L . . . . . . . . . . . . . . .  STATIC   IDATA  U_CHAR   0003H  1
Timer0_H . . . . . . . . . . . . . . .  STATIC   IDATA  U_CHAR   0004H  1
debugLed0. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
debugLed1. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
C51 COMPILER V9.59.0.0   SPLC                                                              01/22/2019 18:36:27 PAGE 114 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


debugLed2. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
debugLed3. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
inputFilter. . . . . . . . . . . . . .  STATIC   IDATA  ARRAY    0005H  16
clearMR. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearX . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearY . . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearSPREG . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
clearSPCOIL. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
loadNvram. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
saveNvram. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
updataNvram. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  sp0. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  sp1. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0006H  2
clearNvram . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  oldEA. . . . . . . . . . . . . . . .  AUTO     IDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0001H  2
wdtInit. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  SFRPAGE_save . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
pcaInit. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
timer0Init . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
timer0Isr. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
  tmp. . . . . . . . . . . . . . . . .  AUTO     IDATA  U_LONG   0002H  4
inputInit. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
inputRefresh . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
outputRefresh. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2470    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    968    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =     21      11
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
