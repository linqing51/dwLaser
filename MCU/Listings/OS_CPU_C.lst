C51 COMPILER V9.57.0.0   OS_CPU_C                                                          04/29/2018 00:16:07 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE OS_CPU_C
OBJECT MODULE PLACED IN .\Objects\OS_CPU_C.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uCOSII\OS_CPU_C.C LARGE OPTIMIZE(8,SPEED) REGFILE(.\Objects\dwLaser_F020
                    -.ORC) BROWSE INCDIR(.\Lib;.\uCOSII;.\App) DEBUG OBJECTEXTEND PRINT(.\Listings\OS_CPU_C.lst) OBJECT(.\Objects\OS_CPU_C.ob
                    -j)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                               uC/OS-II
   4          *                                               实时内核
   5          *
   6          *                        (c) Copyright 1992-1998, Jean J. Labrosse, Plantation, FL
   7          *                                               版权所有
   8          *
   9          *                                            MCU-51 专用代码
  10          *                                           KEIL C51大模式编译
  11          *
  12          * 文件名 : OS_CPU_C.C
  13          * 作者   : Jean J. Labrosse
  14          * 改编   : 杨屹 gdtyy@ri.gdt.com.cn 巨龙公司系统集成开发部 2002.09.27
  15          * 改编   : 刘晓明 LXM650@163.COM 2003.1.8
  16          *********************************************************************************************************
  17          */
  18          
  19          #define  OS_CPU_GLOBALS
  20          #include "AppConfig.h"
  21          
  22          /*
  23          *********************************************************************************************************
  24          *                                        初始化任务堆栈
  25          *
  26          * 描述       : 这个函数被OSTaskCreate()或OSTaskCreateExt()调用，以便初始化新创建任务的堆栈结构。本函数
  27          *              与处理器高度相关。
  28          *
  29          * 参数       : task          指向任务代码的指针
  30          *
  31          *              pdata         当任务第一次执行时将要传入任务的用户数据结构指针
  32          *
  33          *              ptos          栈顶指针。ptos指针被默认为用户堆栈入口指针。如果OS_STK_GROWTH被置1，那么，
  34          *                            ptos指向用户堆栈的最高有效地址。同样地，如果OS_STK_GROWTH清0，ptos将指向
  35          *                            用户堆栈的最低有效地址。
  36          *
  37          *              opt           指定可以改变OSTaskStkInit()行为的选项。(见uCOS_II.H for OS_TASK_OPT_???)。
  38          *
  39          * 返回值     : 我修改了原来的程序，使函数总是返回用户堆栈空间的最低有效地址。这样修改提高了TCB换入换出
  40          *              的效率。
  41          *
  42          * 注意       : 任务堆栈结构:
  43          *
  44          *                                    
  45          *                 
  46          *                                    
  47          *                                    
  48          *----------                          
  49          *|OSTCBCur|               
  50          *----------                          
  51          *    |                               
  52          *    |     -----------------------                                        ----------
  53          *    \---->|OSTCBCur->OSTCBStkPtr|                                 SP---->|        |
C51 COMPILER V9.57.0.0   OS_CPU_C                                                          04/29/2018 00:16:07 PAGE 2   

  54          *          -----------------------                                        ----------
  55          *                     |                                                   |        |
  56          *                     |              ---------- -                         ----------
  57          *                     |              |        | |                         |   .    |
  58          *                     |              ---------- |                         |   .    |
  59          *                     |              |        | |                         |   .    |
  60          *                     |              ---------- |                         ----------
  61          *                     |              |   .    |长度                       |        | +1
  62          *                     |              |   .    | |                         ----------
  63          *                     |              |   .    | |             OSStack---->|        | 0
  64          *                     |              ---------- |                         ----------
  65          *                     |              |        | |          OSStkStart---->| 不关心 | -1  低地址
  66          *                     |              ---------- -                         ----------
  67          *                     \------------->|  长度  | 低地址                   系统硬件堆栈
  68          *                                    ----------
  69          *                                     用户堆栈                       长度=SP-OSStkStart
  70          *********************************************************************************************************
  71          */
  72          
  73          void *OSTaskStkInit (void (*task)(void *pd), void *ppdata, void *ptos, INT16U opt) 
  74          {    
  75   1          OS_STK *stk;
  76   1      
  77   1          ppdata = ppdata;
  78   1          opt    = opt;                               //opt没被用到，保留此语句防止告警产生    
  79   1          stk    = (OS_STK *)ptos;                    //用户堆栈最低有效地址
  80   1          *stk++ = 15;                                //用户堆栈长度
  81   1          *stk++ = (INT16U)task & 0xFF;               //任务地址低8位
  82   1          *stk++ = (INT16U)task >> 8;                 //任务地址高8位    
  83   1          *stk++ = 0x00;                              //PSW
  84   1          *stk++ = 0x0A;                              //ACC
  85   1          *stk++ = 0x0B;                              //B
  86   1          *stk++ = 0x00;                              //DPL
  87   1          *stk++ = 0x00;                              //DPH
  88   1          *stk++ = 0x00;                              //R0
  89   1          *stk++ = 0x01;                              //R1
  90   1          *stk++ = 0x02;                              //R2
  91   1          *stk++ = 0x03;                              //R3
  92   1          *stk++ = 0x04;                              //R4
  93   1          *stk++ = 0x05;                              //R5
  94   1          *stk++ = 0x06;                              //R6
  95   1          *stk++ = 0x07;                              //R7
  96   1                                                      //不用保存SP，任务切换时根据用户堆栈长度计算得出。    
  97   1      // ***** 不再需要仿真堆栈指针 *****
  98   1      
  99   1      //    *stk++ = (INT16U) (ptos+MaxStkSize) >> 8;   ?C_XBP 仿真堆栈指针高8位
 100   1      //    *stk++ = (INT16U) (ptos+MaxStkSize) & 0xFF; ?C_XBP 仿真堆栈指针低8位
 101   1              
 102   1          return ((void *)ptos);
 103   1      }
 104          
 105          #if OS_CPU_HOOKS_EN
 106          /*
 107          *********************************************************************************************************
 108          *                                          任务创建钩挂函数
 109          *
 110          * 描述       : 任务创建时调用
 111          *
 112          * 参数       : ptcb是指向将被创建任务的任务控制块的指针。
 113          *
 114          * 注意       : 1) 调用期间中断被禁止
 115          *********************************************************************************************************
C51 COMPILER V9.57.0.0   OS_CPU_C                                                          04/29/2018 00:16:07 PAGE 3   

 116          */
 117          void OSTaskCreateHook (OS_TCB *ptcb) 
 118          {
 119   1          ptcb = ptcb;                       /* Prevent compiler warning                                     */
 120   1      }
 121          
 122          
 123          /*
 124          *********************************************************************************************************
 125          *                                          任务删除钩挂函数
 126          *
 127          * 描述       : 任务删除时调用
 128          *
 129          * 参数       : ptcb是指向将被删除任务的任务控制块的指针。
 130          *
 131          * 注意       : 1) 调用期间中断被禁止
 132          *********************************************************************************************************
 133          */
 134          /*
 135          void OSTaskDelHook (OS_TCB *ptcb) 
 136          {
 137              ptcb = ptcb;                       //* Prevent compiler warning                                     *
 138          }
 139           */
 140          /*
 141          *********************************************************************************************************
 142          *                                          任务切换钩挂函数
 143          *
 144          * 描述       : 执行任务切换时调用。这允许你在上下文切换期间执行其它操作。
 145          *
 146          * 参数       : 无
 147          *
 148          * 注意       : 1) 调用期间中断被禁止
 149          *              2) 假定全局指针'OSTCBHighRdy'已经指向了将要被换入的任务控制块(即:最高优先级任务)，并且
 150          *                 'OSTCBCur'指向了将被换出的任务(即:当前任务)。
 151          *********************************************************************************************************
 152          */
 153          void OSTaskSwHook (void) 
 154          {
 155   1      }
 156          
 157          /*
 158          *********************************************************************************************************
 159          *                                          统计任务钩挂函数
 160          *
 161          * 描述       : 这个函数每秒钟被uC/OS-II统计任务调用。这么做使你的应用程序可以增加统计任务的功能。
 162          *
 163          * 注意       : 无
 164          *********************************************************************************************************
 165          */
 166          void OSTaskStatHook (void) 
 167          {
 168   1      }
 169          
 170          /*
 171          *********************************************************************************************************
 172          *                                          定时钩挂函数
 173          *
 174          * 描述       : 本函数每一滴答被调用一次。
 175          *
 176          * 参数       : 无
 177          *
C51 COMPILER V9.57.0.0   OS_CPU_C                                                          04/29/2018 00:16:07 PAGE 4   

 178          * 注意       : 1) 在本调用期间中断可以或不可以使能。
 179          *********************************************************************************************************
 180          */
 181          void OSTimeTickHook (void) 
 182          {
 183   1      }
 184          #endif
 185          
 186          //初始化定时器0
 187          void InitOsTimer(void) 
 188          {//OsTimer->Timer0
 189   1              uint16_t temp;
 190   1              temp = (uint16_t)(65536 - (CONFIG_SYSCLK / 12 /OS_TICKS_PER_SEC));
 191   1              CKCON &= ~(1 << 3);//TIMER0 CLK = SYSCLK / 12
 192   1              TMOD = TMOD & 0xF0;
 193   1          TMOD |= 1 << 0;    //模式1(16位定时器)，仅受TR0控制
 194   1          TH0 = (uint8_t)((temp >> 8) & 0xFF);
 195   1          TL0 = (uint8_t)(temp & 0xFF);
 196   1          ET0 = 1;//允许T0中断
 197   1          TR0 = 1;   
 198   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    416    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
