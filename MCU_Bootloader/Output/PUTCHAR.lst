C51 COMPILER V9.59.0.0   PUTCHAR                                                           12/06/2018 16:48:28 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PUTCHAR
OBJECT MODULE PLACED IN .\Output\PUTCHAR.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Bootloader\PUTCHAR.C LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib;.\
                    -LibFlash;.\FlashEprom;.\Bootloader;.\Driver) DEFINE(C8051F340) VARBANKING(1) DEBUG PRINT(.\Output\PUTCHAR.lst) PREPRINT(
                    -.\Output\PUTCHAR.i) OBJECT(.\Output\PUTCHAR.obj)

line level    source

   1          /***********************************************************************/
   2          /*  This file is part of the C51 Compiler package                      */
   3          /*  Copyright KEIL ELEKTRONIK GmbH 1990 - 2002                         */
   4          /***********************************************************************/
   5          /*                                                                     */
   6          /*  PUTCHAR.C:  This routine is the general character output of C51.   */
   7          /*  You may add this file to a uVision2 project.                       */
   8          /*                                                                     */
   9          /*  To translate this file use C51 with the following invocation:      */
  10          /*     C51 PUTCHAR.C <memory model>                                    */
  11          /*                                                                     */
  12          /*  To link the modified PUTCHAR.OBJ file to your application use the  */
  13          /*  following Lx51 invocation:                                         */
  14          /*     Lx51 <your object file list>, PUTCHAR.OBJ <controls>            */
  15          /*                                                                     */
  16          /***********************************************************************/
  17          
  18          #include <reg51.h>
  19          
  20          #define XON  0x11
  21          #define XOFF 0x13
  22          
  23          
  24          /*
  25           * putchar (full version):  expands '\n' into CR LF and handles
  26           *                          XON/XOFF (Ctrl+S/Ctrl+Q) protocol
  27           */
  28          char putchar (char c)  {
  29   1      
  30   1        if (c == '\n')  {
  31   2          if (RI)  {
  32   3            if (SBUF == XOFF)  {
  33   4              do  {
  34   5                RI = 0;
  35   5                while (!RI);
  36   5              }
  37   4              while (SBUF != XON);
  38   4              RI = 0; 
  39   4            }
  40   3          }
  41   2          while (!TI);
  42   2          TI = 0;
  43   2          SBUF = 0x0d;                         /* output CR  */
  44   2        }
  45   1        if (RI)  {
  46   2          if (SBUF == XOFF)  {
  47   3            do  {
  48   4              RI = 0;
  49   4              while (!RI);
  50   4            }
  51   3            while (SBUF != XON);
  52   3            RI = 0; 
  53   3          }
C51 COMPILER V9.59.0.0   PUTCHAR                                                           12/06/2018 16:48:28 PAGE 2   

  54   2        }
  55   1        while (!TI);
  56   1        TI = 0;
  57   1        return (SBUF = c);
  58   1      }
  59          
  60          
  61          
  62          #if 0         // comment out versions below
              
              /*
               * putchar (basic version): expands '\n' into CR LF
               */
              char putchar (char c)  {
                if (c == '\n')  {
                  while (!TI);
                  TI = 0;
                  SBUF = 0x0d;                         /* output CR  */
                }
                while (!TI);
                TI = 0;
                return (SBUF = c);
              }
              
              
              /*
               * putchar (mini version): outputs charcter only
               */
              char putchar (char c)  {
                while (!TI);
                TI = 0;
                return (SBUF = c);
              }
              
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     69    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
