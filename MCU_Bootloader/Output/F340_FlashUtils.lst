C51 COMPILER V9.59.0.0   F340_FLASHUTILS                                                   12/12/2018 17:43:01 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE F340_FLASHUTILS
OBJECT MODULE PLACED IN .\Output\F340_FlashUtils.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LibFlash\F340_FlashUtils.c COMPACT OMF2 OPTIMIZE(9,SPEED) REGFILE(.\Outp
                    -ut\bootload.ORC) BROWSE INCDIR(.\Lib;.\LibFlash;.\FlashEprom;.\Bootloader;.\Driver) DEFINE(C8051F340) VARBANKING(1) DEBU
                    -G PRINT(.\Output\F340_FlashUtils.lst) PREPRINT(.\Output\F340_FlashUtils.i) OBJECT(.\Output\F340_FlashUtils.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          //  F340_FlashUtils.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // This program contains several useful utilities for writing and updating
  10          // FLASH memory.
  11          //
  12          // FID:            34X000026
  13          // Target:         C8051F34x
  14          // Tool chain:     Keil C51 8.00 / Keil EVAL C51
  15          // Command Line:   None
  16          //
  17          // Release 1.0
  18          //    -Initial Revision (GP)
  19          //    -30 JAN 2006
  20          //
  21          
  22          //-----------------------------------------------------------------------------
  23          // Includes
  24          //-----------------------------------------------------------------------------
  25          
  26          #include "F340_FlashPrimitives.h"
  27          #include "F340_FlashUtils.h"
  28          
  29          //-----------------------------------------------------------------------------
  30          // Structures, Unions, Enumerations, and Type Definitions
  31          //-----------------------------------------------------------------------------
  32          
  33          //-----------------------------------------------------------------------------
  34          // Global Constants
  35          //-----------------------------------------------------------------------------
  36          
  37          //-----------------------------------------------------------------------------
  38          // Function Prototypes
  39          //-----------------------------------------------------------------------------
  40          
  41          // FLASH read/write/erase routines
  42          void FLASH_Write (FLADDR dest, char *src, unsigned numbytes);
  43          char * FLASH_Read (char *dest, FLADDR src, unsigned numbytes);
  44          void FLASH_Clear (FLADDR addr, unsigned numbytes);
  45          
  46          // FLASH update/copy routines
  47          void FLASH_Update (FLADDR dest, char *src, unsigned numbytes);
  48          void FLASH_Copy (FLADDR dest, FLADDR src, unsigned numbytes);
  49          
  50          // FLASH test routines
  51          void FLASH_Fill (FLADDR addr, ULONG length, UCHAR fill);
  52          
  53          //-----------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   F340_FLASHUTILS                                                   12/12/2018 17:43:01 PAGE 2   

  54          // Global Variables
  55          //-----------------------------------------------------------------------------
  56          
  57          //-----------------------------------------------------------------------------
  58          // FLASH Routines
  59          //-----------------------------------------------------------------------------
  60          
  61          //-----------------------------------------------------------------------------
  62          // FLASH_Clear
  63          //-----------------------------------------------------------------------------
  64          //
  65          // Return Value : None
  66          // Parameters   : 
  67          //   1)  FLADDR dest - target address where to start clearing bytes
  68          //                     range is 0 to (FLASH_TEMP-1)
  69          //   2)  unsigned numbytes   - number of bytes to clear
  70          //                     range is 1 to <FLASH_PAGESIZE>
  71          //
  72          // This routine erases <numbytes> starting from the FLASH addressed by
  73          // <dest> by performing a read-modify-write operation using <FLASH_TEMP> as
  74          // a temporary holding area.  
  75          //
  76          //-----------------------------------------------------------------------------
  77          
  78          void FLASH_Clear (FLADDR dest, unsigned numbytes)
  79          {
  80   1         FLADDR dest_1_page_start;           // First address in 1st page
  81   1                                             // containing <dest>
  82   1         FLADDR dest_1_page_end;             // Last address in 1st page
  83   1                                             // containing <dest>
  84   1         FLADDR dest_2_page_start;           // First address in 2nd page
  85   1                                             // containing <dest>
  86   1         FLADDR dest_2_page_end;             // Last address in 2nd page
  87   1                                             // containing <dest>
  88   1         unsigned numbytes_remainder;        // When crossing page boundary,
  89   1                                             // number of <src> bytes on 2nd page
  90   1         unsigned FLASH_pagesize;            // Size of FLASH page to update
  91   1      
  92   1         FLADDR  wptr;                       // Write address
  93   1         FLADDR  rptr;                       // Read address
  94   1      
  95   1         unsigned length;
  96   1      
  97   1         FLASH_pagesize = FLASH_PAGESIZE;
  98   1      
  99   1         dest_1_page_start = dest & ~(FLASH_pagesize - 1);
 100   1         dest_1_page_end = dest_1_page_start + FLASH_pagesize - 1;
 101   1         dest_2_page_start = (dest + numbytes)  & ~(FLASH_pagesize - 1);
 102   1         dest_2_page_end = dest_2_page_start + FLASH_pagesize - 1;
 103   1      
 104   1         if (dest_1_page_end == dest_2_page_end) {
 105   2      
 106   2            // 1. Erase Scratch page
 107   2            FLASH_PageErase (FLASH_TEMP);
 108   2      
 109   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
 110   2      
 111   2            wptr = FLASH_TEMP;
 112   2            rptr = dest_1_page_start;
 113   2            length = dest - dest_1_page_start;
 114   2            FLASH_Copy (wptr, rptr, length);
 115   2      
C51 COMPILER V9.59.0.0   F340_FLASHUTILS                                                   12/12/2018 17:43:01 PAGE 3   

 116   2            // 3. Copy from (dest+numbytes) to dest_page_end to Scratch page
 117   2      
 118   2            wptr = FLASH_TEMP + dest - dest_1_page_start + numbytes;
 119   2            rptr = dest + numbytes;
 120   2            length = dest_1_page_end - dest - numbytes + 1;
 121   2            FLASH_Copy (wptr, rptr, length);
 122   2      
 123   2            // 4. Erase destination page
 124   2            FLASH_PageErase (dest_1_page_start);
 125   2      
 126   2            // 5. Copy Scratch page to destination page
 127   2            wptr = dest_1_page_start;
 128   2            rptr = FLASH_TEMP;
 129   2            length = FLASH_pagesize;
 130   2            FLASH_Copy (wptr, rptr, length);
 131   2      
 132   2         } else {                            // Value crosses page boundary
 133   2            // 1. Erase Scratch page
 134   2            FLASH_PageErase (FLASH_TEMP);
 135   2      
 136   2            // 2. Copy bytes from first byte of dest page to dest-1 
 137   2                //    to Scratch page
 138   2      
 139   2            wptr = FLASH_TEMP;
 140   2            rptr = dest_1_page_start;
 141   2            length = dest - dest_1_page_start;
 142   2            FLASH_Copy (wptr, rptr, length);
 143   2      
 144   2            // 3. Erase destination page 1
 145   2            FLASH_PageErase (dest_1_page_start);
 146   2      
 147   2            // 4. Copy Scratch page to destination page 1
 148   2            wptr = dest_1_page_start;
 149   2            rptr = FLASH_TEMP;
 150   2            length = FLASH_pagesize;
 151   2            FLASH_Copy (wptr, rptr, length);
 152   2      
 153   2            // now handle 2nd page
 154   2      
 155   2            // 5. Erase Scratch page
 156   2            FLASH_PageErase (FLASH_TEMP);
 157   2      
 158   2            // 6. Copy bytes from numbytes remaining to dest-2_page_end 
 159   2                //    to Scratch page
 160   2      
 161   2            numbytes_remainder = numbytes - (dest_1_page_end - dest + 1);
 162   2            wptr = FLASH_TEMP + numbytes_remainder;
 163   2            rptr = dest_2_page_start + numbytes_remainder;
 164   2            length = FLASH_pagesize - numbytes_remainder;
 165   2            FLASH_Copy (wptr, rptr, length);
 166   2      
 167   2            // 7. Erase destination page 2
 168   2            FLASH_PageErase (dest_2_page_start);
 169   2      
 170   2            // 8. Copy Scratch page to destination page 2
 171   2            wptr = dest_2_page_start;
 172   2            rptr = FLASH_TEMP;
 173   2            length = FLASH_pagesize;
 174   2            FLASH_Copy (wptr, rptr, length);
 175   2         }
 176   1      }
 177          
C51 COMPILER V9.59.0.0   F340_FLASHUTILS                                                   12/12/2018 17:43:01 PAGE 4   

 178          //-----------------------------------------------------------------------------
 179          // FLASH_Update
 180          //-----------------------------------------------------------------------------
 181          //
 182          // Return Value : None
 183          // Parameters   : 
 184          //   1)  FLADDR dest - target address where to start updating bytes
 185          //                     range is 0 to (FLASH_TEMP-1)
 186          //   2)  char *src   - pointer to address where source bytes are located
 187          //   3)  unsigned numbytes  - number of bytes to update
 188          //                          range is 1 to <FLASH_PAGESIZE>
 189          //
 190          // This routine replaces <numbytes> from <src> to the FLASH addressed by
 191          // <dest>.  This function calls FLASH_Clear() to handle the dirty work of
 192          // initializing all <dest> bytes to 0xff's prior to copying the bytes from
 193          // <src> to <dest>.
 194          //
 195          //-----------------------------------------------------------------------------
 196          
 197          void FLASH_Update (FLADDR dest, char *src, unsigned numbytes)
 198          {
 199   1         // 1. Erase <numbytes> starting from <dest>
 200   1         FLASH_Clear (dest, numbytes);
 201   1      
 202   1         // 2. Write <numbytes> from <src> to <dest>
 203   1         FLASH_Write (dest, src, numbytes);
 204   1      }
 205          
 206          //-----------------------------------------------------------------------------
 207          // FLASH_Write
 208          //-----------------------------------------------------------------------------
 209          //
 210          // Return Value : None
 211          // Parameters   : 
 212          //   1)  FLADDR dest - target address where to start writing bytes
 213          //                     range is 0 to (FLASH_TEMP-1)
 214          //   2)  char *src   - pointer to address where source bytes are located
 215          //   3)  unsigned numbytes   - number of bytes to write
 216          //                     range is limited by Flash size and starting location
 217          //
 218          // This routine copies <numbytes> from <src> to the linear FLASH address
 219          // <dest>.
 220          //
 221          //-----------------------------------------------------------------------------
 222          void FLASH_Write (FLADDR dest, char *src, unsigned numbytes)
 223          {
 224   1         FLADDR i;
 225   1      
 226   1         for (i = dest; i < dest+numbytes; i++) {
 227   2            FLASH_ByteWrite (i, *src++);
 228   2         }
 229   1      }
 230          //-----------------------------------------------------------------------------
 231          // FLASH_Read
 232          //-----------------------------------------------------------------------------
 233          //
 234          // Return Value :
 235          //   1)  char *     -  pointer to bytes read back
 236          // Parameters   : 
 237          //   1)  char *dest -  target address where to store bytes read from Flash
 238          //   2)  char *src   - pointer to address where source bytes are located
 239          //   3)  unsigned numbytes   - number of bytes to read
C51 COMPILER V9.59.0.0   F340_FLASHUTILS                                                   12/12/2018 17:43:01 PAGE 5   

 240          //                     range is limited by Flash size and starting location
 241          //
 242          // This routine copies <numbytes> from the linear FLASH address <src> to
 243          // <dest>.
 244          //
 245          //-----------------------------------------------------------------------------
 246          char * FLASH_Read (char *dest, FLADDR src, unsigned numbytes)
 247          {
 248   1         FLADDR i;
 249   1      
 250   1         for (i = 0; i < numbytes; i++) {
 251   2            *dest++ = FLASH_ByteRead (src+i);
 252   2         }
 253   1         return dest;
 254   1      }
 255          
 256          //-----------------------------------------------------------------------------
 257          // FLASH_Copy
 258          //-----------------------------------------------------------------------------
 259          //
 260          // Return Value : None
 261          // Parameters   : 
 262          //   1)  FLADDR dest -  target address where to copy the source bytes
 263          //   2)  FLADDR src   - target address where source bytes are located
 264          //   3)  unsigned numbytes   - number of bytes to read
 265          //                     range is limited by Flash size and starting location
 266          //
 267          // This routine copies <numbytes> from <src> to the linear FLASH address
 268          // <dest>.
 269          //
 270          //-----------------------------------------------------------------------------
 271          
 272          void FLASH_Copy (FLADDR dest, FLADDR src, unsigned numbytes)
 273          {
 274   1         FLADDR i;
 275   1      
 276   1         for (i = 0; i < numbytes; i++) {
 277   2      
 278   2            FLASH_ByteWrite ((FLADDR) dest+i, FLASH_ByteRead((FLADDR) src+i));
 279   2         }
 280   1      }
 281          
 282          
 283          //-----------------------------------------------------------------------------
 284          // FLASH_Fill
 285          //-----------------------------------------------------------------------------
 286          //
 287          // Return Value : None
 288          // Parameters   : 
 289          //   1)  FLADDR addr   - target address where to start filling
 290          //   2)  ULONG length  - number of bytes to fill
 291          //                       range is limited by Flash size and starting point
 292          //   3)  UCHAR fill    - char to fill 
 293          //                       range is 0x00 to 0xFF
 294          //
 295          // This routine fills the FLASH beginning at <addr> with <length> bytes.
 296          //
 297          //-----------------------------------------------------------------------------
 298          void FLASH_Fill (FLADDR addr, ULONG length, UCHAR fill)
 299          {
 300   1         FLADDR i;
 301   1      
C51 COMPILER V9.59.0.0   F340_FLASHUTILS                                                   12/12/2018 17:43:01 PAGE 6   

 302   1         for (i = 0; i < length; i++) {
 303   2            FLASH_ByteWrite (addr+i, fill);
 304   2         }
 305   1      }
 306          
 307          //-----------------------------------------------------------------------------
 308          // End Of File
 309          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    856    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      60
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
