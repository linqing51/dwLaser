C51 COMPILER V9.59.0.0   F580_FLASHUTILS                                                   12/05/2018 22:05:01 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE F580_FLASHUTILS
OBJECT MODULE PLACED IN .\Output\F580_FlashUtils.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LibFlash\F580_FlashUtils.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib;.\
                    -LibFlash;.\FlashEprom;.\Bootloader;.\Driver) DEFINE(C8051F580) VARBANKING(1) DEBUG PRINT(.\Output\F580_FlashUtils.lst) P
                    -REPRINT(.\Output\F580_FlashUtils.i) OBJECT(.\Output\F580_FlashUtils.obj)

line level    source

   1          /-----------------------------------------------------------------------------
*** ERROR C141 IN LINE 1 OF LibFlash\F580_FlashUtils.c: syntax error near '/', expected 'hdata'
   2          // F580_FlashUtils.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2008 Silicon Laboratories, Inc.
   5          //
   6          // This program contains several useful utilities for writing and updating
   7          // FLASH memory.
   8          //
   9          // Target:         C8051F580
  10          // Tool chain:     Raisonance / Keil / SDCC
  11          // Command Line:   None
  12          //
  13          // Release 1.1 / 11 MAR 2010 (GP)
  14          //    -Tested with Raisonance
  15          //
  16          // Release 1.0 / 23 OCT 2008 (GP)
  17          //    -Initial Revision
  18          //
  19          //-----------------------------------------------------------------------------
  20          // Includes
  21          //-----------------------------------------------------------------------------
  22          
  23          #include <compiler_defs.h>
  24          #include <c8051F580_defs.h>
  25          #include "F580_FlashPrimitives.h"
  26          #include "F580_FlashUtils.h"
  27          
  28          //-----------------------------------------------------------------------------
  29          // Structures, Unions, Enumerations, and Type Definitions
  30          //-----------------------------------------------------------------------------
  31          
  32          //-----------------------------------------------------------------------------
  33          // Global Constants
  34          //-----------------------------------------------------------------------------
  35          
  36          //-----------------------------------------------------------------------------
  37          // Function Prototypes
  38          //-----------------------------------------------------------------------------
  39          
  40          // FLASH read/write/erase routines
  41          void FLASH_Write (FLADDR dest, U8 *src, U16 numbytes, bit SFLE);
  42          U8 * FLASH_Read  (U8 *dest, FLADDR src, U16 numbytes, bit SFLE);
  43          void FLASH_Clear (FLADDR addr, U16 numbytes, bit SFLE);
  44          
  45          // FLASH update/copy routines
  46          void FLASH_Update (FLADDR dest, U8 *src, U16 numbytes, bit SFLE);
  47          void FLASH_Copy   (FLADDR dest, bit destSFLE, FLADDR src, bit srcSFLE,
  48                             U16 numbytes);
  49          
  50          // FLASH test routines
  51          void FLASH_Fill (FLADDR addr, U32 length, U8 fill, bit SFLE);
  52          
C51 COMPILER V9.59.0.0   F580_FLASHUTILS                                                   12/05/2018 22:05:01 PAGE 2   

  53          //-----------------------------------------------------------------------------
  54          // Global Variables
  55          //-----------------------------------------------------------------------------
  56          
  57          //-----------------------------------------------------------------------------
  58          // FLASH Routines
  59          //-----------------------------------------------------------------------------
  60          
  61          //-----------------------------------------------------------------------------
  62          // FLASH_Clear
  63          //-----------------------------------------------------------------------------
  64          //
  65          // This routine erases <numbytes> starting from the FLASH addressed by
  66          // <dest> by performing a read-modify-write operation using <FLASH_TEMP> as
  67          // a temporary holding area.  This function accepts <numbytes> up to
  68          // <FLASH_PAGESIZE>.
  69          //
  70          //-----------------------------------------------------------------------------
  71          void FLASH_Clear (FLADDR dest, U16 numbytes, bit SFLE)
  72          {
  73   1         FLADDR dest_1_page_start;           // First address in 1st page
  74   1                                             // containing <dest>
  75   1         FLADDR dest_1_page_end;             // Last address in 1st page
  76   1                                             // containing <dest>
  77   1         FLADDR dest_2_page_start;           // First address in 2nd page
  78   1                                             // containing <dest>
  79   1         FLADDR dest_2_page_end;             // Last address in 2nd page
  80   1                                             // containing <dest>
  81   1         U16 numbytes_remainder;             // When crossing page boundary,
  82   1                                             // number of <src> bytes on 2nd page
  83   1         U16 FLASH_pagesize;                 // Size of FLASH page to update
  84   1      
  85   1         FLADDR  wptr;                       // Write address
  86   1         FLADDR  rptr;                       // Read address
  87   1      
  88   1         U16 length;
  89   1      
  90   1         if (SFLE) {                         // Update Scratchpad
  91   2            FLASH_pagesize = FLASH_SCRATCHSIZE;
  92   2         } else {
  93   2            FLASH_pagesize = FLASH_PAGESIZE;
  94   2         }
  95   1      
  96   1         dest_1_page_start = dest & (0x10000 | ~(FLASH_pagesize - 1));
  97   1         dest_1_page_end = dest_1_page_start + FLASH_pagesize - 1;
  98   1         dest_2_page_start = (dest + numbytes)  & (0x10000 | ~(FLASH_pagesize - 1));
  99   1         dest_2_page_end = dest_2_page_start + FLASH_pagesize - 1;
 100   1      
 101   1         if (dest_1_page_end == dest_2_page_end) {
 102   2      
 103   2            // 1. Erase Scratch page
 104   2            FLASH_PageErase (FLASH_TEMP, 0);
 105   2      
 106   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
 107   2      
 108   2            wptr = FLASH_TEMP;
 109   2            rptr = dest_1_page_start;
 110   2            length = dest - dest_1_page_start;
 111   2            FLASH_Copy (wptr, 0, rptr, SFLE, length);
 112   2      
 113   2            // 3. Copy from (dest+numbytes) to dest_page_end to Scratch page
 114   2      
C51 COMPILER V9.59.0.0   F580_FLASHUTILS                                                   12/05/2018 22:05:01 PAGE 3   

 115   2            wptr = FLASH_TEMP + dest - dest_1_page_start + numbytes;
 116   2            rptr = dest + numbytes;
 117   2            length = dest_1_page_end - dest - numbytes + 1;
 118   2            FLASH_Copy (wptr, 0, rptr, SFLE, length);
 119   2      
 120   2            // 4. Erase destination page
 121   2            FLASH_PageErase (dest_1_page_start, SFLE);
 122   2      
 123   2            // 5. Copy Scratch page to destination page
 124   2            wptr = dest_1_page_start;
 125   2            rptr = FLASH_TEMP;
 126   2            length = FLASH_pagesize;
 127   2            FLASH_Copy (wptr, SFLE, rptr, 0, length);
 128   2      
 129   2         } else {                            // value crosses page boundary
 130   2            // 1. Erase Scratch page
 131   2            FLASH_PageErase (FLASH_TEMP, 0);
 132   2      
 133   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
 134   2      
 135   2            wptr = FLASH_TEMP;
 136   2            rptr = dest_1_page_start;
 137   2            length = dest - dest_1_page_start;
 138   2            FLASH_Copy (wptr, 0, rptr, SFLE, length);
 139   2      
 140   2            // 3. Erase destination page 1
 141   2            FLASH_PageErase (dest_1_page_start, SFLE);
 142   2      
 143   2            // 4. Copy Scratch page to destination page 1
 144   2            wptr = dest_1_page_start;
 145   2            rptr = FLASH_TEMP;
 146   2            length = FLASH_pagesize;
 147   2            FLASH_Copy (wptr, SFLE, rptr, 0, length);
 148   2      
 149   2            // now handle 2nd page
 150   2      
 151   2            // 5. Erase Scratch page
 152   2            FLASH_PageErase (FLASH_TEMP, 0);
 153   2      
 154   2            // 6. Copy bytes from numbytes remaining to dest-2_page_end to Scratch page
 155   2      
 156   2            numbytes_remainder = numbytes - (dest_1_page_end - dest + 1);
 157   2            wptr = FLASH_TEMP + numbytes_remainder;
 158   2            rptr = dest_2_page_start + numbytes_remainder;
 159   2            length = FLASH_pagesize - numbytes_remainder;
 160   2            FLASH_Copy (wptr, 0, rptr, SFLE, length);
 161   2      
 162   2            // 7. Erase destination page 2
 163   2            FLASH_PageErase (dest_2_page_start, SFLE);
 164   2      
 165   2            // 8. Copy Scratch page to destination page 2
 166   2            wptr = dest_2_page_start;
 167   2            rptr = FLASH_TEMP;
 168   2            length = FLASH_pagesize;
 169   2            FLASH_Copy (wptr, SFLE, rptr, 0, length);
 170   2         }
 171   1      }
 172          
 173          
 174          
 175          //-----------------------------------------------------------------------------
 176          // FLASH_Update
C51 COMPILER V9.59.0.0   F580_FLASHUTILS                                                   12/05/2018 22:05:01 PAGE 4   

 177          //-----------------------------------------------------------------------------
 178          //
 179          // This routine replaces <numbytes> from <src> to the FLASH addressed by
 180          // <dest>.  This function calls FLASH_Clear() to handle the dirty work of
 181          // initializing all <dest> bytes to 0xff's prior to copying the bytes from
 182          // <src> to <dest>. This function accepts <numbytes> up to <FLASH_PAGESIZE>.
 183          //
 184          //-----------------------------------------------------------------------------
 185          void FLASH_Update (FLADDR dest, U8 *src, U16 numbytes, bit SFLE)
 186          {
 187   1         // 1. Erase <numbytes> starting from <dest>
 188   1         FLASH_Clear (dest, numbytes, SFLE);
 189   1      
 190   1         // 2. Write <numbytes> from <src> to <dest>
 191   1         FLASH_Write (dest, src, numbytes, SFLE);
 192   1      }
 193          
 194          
 195          
 196          //-----------------------------------------------------------------------------
 197          // FLASH_Write
 198          //-----------------------------------------------------------------------------
 199          //
 200          // This routine copies <numbytes> from <src> to the linear FLASH address
 201          // <dest>.
 202          //
 203          //-----------------------------------------------------------------------------
 204          void FLASH_Write (FLADDR dest, U8 *src, U16 numbytes, bit SFLE)
 205          {
 206   1         U32 i;
 207   1      
 208   1         for (i = dest; i < dest+numbytes; i++) {
 209   2            FLASH_ByteWrite (i, *src++, SFLE);
 210   2         }
 211   1      }
 212          
 213          //-----------------------------------------------------------------------------
 214          // FLASH_Read
 215          //-----------------------------------------------------------------------------
 216          //
 217          // This routine copies <numbytes> from the linear FLASH address <src> to
 218          // <dest>.
 219          //
 220          //-----------------------------------------------------------------------------
 221          U8 * FLASH_Read (U8 *dest, FLADDR src, U16 numbytes, bit SFLE)
 222          {
 223   1         U32 i;
 224   1      
 225   1         for (i = 0; i < numbytes; i++) {
 226   2            *dest++ = FLASH_ByteRead (src+i, SFLE);
 227   2         }
 228   1         return dest;
 229   1      }
 230          
 231          //-----------------------------------------------------------------------------
 232          // FLASH_Copy
 233          //-----------------------------------------------------------------------------
 234          //
 235          // This routine copies <numbytes> from <src> to the linear FLASH address
 236          // <dest>.
 237          //
 238          //-----------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   F580_FLASHUTILS                                                   12/05/2018 22:05:01 PAGE 5   

 239          void FLASH_Copy (FLADDR dest, bit destSFLE, FLADDR src, bit srcSFLE,
 240                           U16 numbytes)
 241          {
 242   1         U32 i;
 243   1      
 244   1         for (i = 0; i < numbytes; i++) {
 245   2      
 246   2            FLASH_ByteWrite ((FLADDR) dest+i,
 247   2                             FLASH_ByteRead((FLADDR) src+i, srcSFLE),
 248   2                             destSFLE);
 249   2         }
 250   1      }
 251          
 252          
 253          //-----------------------------------------------------------------------------
 254          // FLASH_Fill
 255          //-----------------------------------------------------------------------------
 256          //
 257          // This routine fills the FLASH beginning at <addr> with <lenght> bytes.
 258          //
 259          //-----------------------------------------------------------------------------
 260          void FLASH_Fill (FLADDR addr, U32 length, U8 fill, bit SFLE)
 261          {
 262   1         U32 i;
 263   1      
 264   1         for (i = 0; i < length; i++) {
 265   2            FLASH_ByteWrite (addr+i, fill, SFLE);
 266   2         }
 267   1      }
 268          
 269          
 270          //-----------------------------------------------------------------------------
 271          // End Of File
 272          //-----------------------------------------------------------------------------

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
