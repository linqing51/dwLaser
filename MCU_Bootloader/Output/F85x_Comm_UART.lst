C51 COMPILER V9.59.0.0   F85X_COMM_UART                                                    12/06/2018 23:10:43 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE F85X_COMM_UART
OBJECT MODULE PLACED IN .\Output\F85x_Comm_UART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Bootloader\F85x_Comm_UART.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.
                    -\Lib;.\LibFlash;.\FlashEprom;.\Bootloader;.\Driver) DEFINE(C8051F340) VARBANKING(1) DEBUG PRINT(.\Output\F85x_Comm_UART.
                    -lst) PREPRINT(.\Output\F85x_Comm_UART.i) OBJECT(.\Output\F85x_Comm_UART.obj)

line level    source

   1          
   2          #define CMD_STX                                                         0x81
   3          #define CMD_END                                                         0x91
   4          #define CMD_GET_HW_VER_TX_SZ                            3
   5          #define CMD_GET_HW_VER_RX_SZ                            6
   6          #define CMD_SET_HW_VER_TX_SZ                            7
   7          #define CMD_SET_HW_VER_RX_SZ                            3
   8          
   9          uint8_t * CmdGetHwVer(void)
*** ERROR C129 IN LINE 9 OF Bootloader\F85x_Comm_UART.c: missing ';' before '*'
  10          {
  11                  uint8_t txbuf[CMD_GET_HW_VER_TX_SZ], rxbuf[CMD_GET_HW_VER_RX_SZ];
  12                  cmd[0] = CMD_STX;
  13                  cmd[1] = CMD_GET_ID;
  14                  cmd[2] = CMD_END
  15                  uart0Send(&cmd, 3);
  16                  uart0Receive(rx_buf, CMD_GET_HW_VER_RX_SZ);//STX+FUN+VER+END
  17                  return (rxbuf + 1);//·µ»ØBCDÂë
  18          }
  19          
  20          void CmdSetHwVer(uint16_t ver)
  21          {
  22                  uint8_t txbuf[CMD_SET_HW_VER_TX_SZ], rxbuf[CMD_SET_HW_VER_RX_SZ];
  23                  txbuf[0] = CMD_STX;
  24                  txbuf[1] = CMD_SET_HW_VER;
  25                  uint16ToAscii(&ver, txbuf[2]);
  26                  txbuf[6] = CMD_END;
  27                  uart0Receive(rxbuf, CMD_SET_HW_VER_RX_SZ);//STX+FUN+END
  28          }
  29          void CmdResetMcu(void)
  30          {
  31                  uint8_t txbuf[CMD_RESET_MCU_TX_SZ], rxbuf[CMD_RESET_MCU_RX_SZ];
  32                  txbuf[0] = CMD_STX;
  33                  txbuf[1] = CMD_SET_HW_VER;
  34                  
  35          }
  36          
  37          
  38          void cmdPoll(void)
  39          {
  40                  uint16_t i;
  41                  uint8_t CmdRxDone, CmdRxDoing;
  42                  while(1)
  43                  {
  44                          uart0Receive(&temp, 1)
  45                          if(temp == CMD_STX)
  46                          {
  47                                  CmdRxDoing = 1;
  48                                  rxbuf[i++] = temp;
  49                                  do{
  50                                          uart0Receive(&temp, 1);
  51                                          rxbuf[i++] = temp;
  52                                          if(temp == CMD_END)
C51 COMPILER V9.59.0.0   F85X_COMM_UART                                                    12/06/2018 23:10:43 PAGE 2   

  53                                          {
  54                                                  CmdRxDone = 1;
  55                                                  switch(rxbuf[1])
  56                                                  {
  57                                                          case CMD_SET_HW_VER:
  58                                                                  break;
  59                                                          case CMD_GET_HW_VER:
  60                                                                  break;
  61                                                          case CMD_RESET_MCU:
  62                                                                  break;
  63                                                          case CMD_GET_BOOTLOADER_VER:
  64                                                                  break;
  65                                                          case CMD_GET_OTA1_VER:
  66                                                                  break;
  67                                                          case CMD_GET_OTA2_VER:
  68                                                                  break;
  69                                                          case CMD_GET_OTA1_CRC32:
  70                                                                  break;
  71                                                          default:break;
  72                                                  }
  73                                                  break;
  74                                          }
  75                                          else if(i >= CMD_RX_BUFFER_SIZE)
  76                                          {
  77                                                  CmdRxDoing = 0;
  78                                                  break;
  79                                          }
  80                                  }while(1);
  81                          }
  82                  }
  83          }
  84          
  85          
  86          void uart0send(uint8_t *buf, uint16_t count)
  87          {
  88                  uint8_t *ptr = buf;
  89                  do{
  90                      SBUF0 = *ptr++;
  91                          while(TI0 == 0);
  92                          TI0 = 0;
  93                  }while(--count);
  94          }
  95          
  96          void uart0receive(uint8_t *buf, uint16_t count)
  97          {
  98                  uint8_t * ptr = buf;
  99                  do{
 100                          if(RI0 == 1)
 101                          {
 102                                  *ptr++ = SBUF0;
 103                                  RI0 = 0;
 104                                  count--;
 105                          }
 106                  }while(count);
 107          }
 108          

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
