C51 COMPILER V9.59.0.0   MD5                                                               12/05/2018 17:39:02 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MD5
OBJECT MODULE PLACED IN .\Output\md5.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Lib\md5.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib;.\LibFlash;.\Fla
                    -shEprom;.\Bootloader;.\Driver) DEFINE(C8051F340) DEBUG OBJECTEXTEND PRINT(.\Output\md5.lst) PREPRINT(.\Output\md5.i) OBJ
                    -ECT(.\Output\md5.obj)

line level    source

   1          /*
   2           * Simple MD5 implementation
   3           *
   4           * Compile with: gcc -o md5 md5.c
   5           */
   6          #include "md5.h"
   7           
   8          // Constants are the integer part of the sines of integers (in radians) * 2^32.
   9          code uint32_t k[64] = {
  10          0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee ,
  11          0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 ,
  12          0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be ,
  13          0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 ,
  14          0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa ,
  15          0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 ,
  16          0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed ,
  17          0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a ,
  18          0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c ,
  19          0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 ,
  20          0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 ,
  21          0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 ,
  22          0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 ,
  23          0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 ,
  24          0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 ,
  25          0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 };
  26           
  27          // r specifies the per-round shift amounts
  28          code uint32_t r[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
  29                                5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
  30                                4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
  31                                6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};
  32           
  33          // leftrotate function definition
  34          #define LEFTROTATE(x, c) (((x) << (c)) | ((x) >> (32 - (c))))
  35           
  36          void to_bytes(uint32_t val, uint8_t *bytes)
  37          {
  38   1          bytes[0] = (uint8_t) val;
  39   1          bytes[1] = (uint8_t) (val >> 8);
  40   1          bytes[2] = (uint8_t) (val >> 16);
  41   1          bytes[3] = (uint8_t) (val >> 24);
  42   1      }
  43           
  44          uint32_t to_int32(const uint8_t *bytes)
  45          {
  46   1          return (uint32_t) bytes[0]
  47   1              | ((uint32_t) bytes[1] << 8)
  48   1              | ((uint32_t) bytes[2] << 16)
  49   1              | ((uint32_t) bytes[3] << 24);
  50   1      }
  51           
  52          void md5(const uint8_t *initial_msg, size_t initial_len, uint8_t *digest) {
  53   1       
C51 COMPILER V9.59.0.0   MD5                                                               12/05/2018 17:39:02 PAGE 2   

  54   1          // These vars will contain the hash
  55   1          uint32_t h0, h1, h2, h3;
  56   1       
  57   1          // Message (to prepare)
  58   1          uint8_t *msg = NULL;
  59   1       
  60   1          size_t new_len, offset;
  61   1          uint32_t w[16];
  62   1          uint32_t a, b, c, d, i, f, g, temp;
  63   1       
  64   1          // Initialize variables - simple count in nibbles:
  65   1          h0 = 0x67452301;
  66   1          h1 = 0xefcdab89;
  67   1          h2 = 0x98badcfe;
  68   1          h3 = 0x10325476;
  69   1       
  70   1          //Pre-processing:
  71   1          //append "1" bit to message    
  72   1          //append "0" bits until message length in bits ≡ 448 (mod 512)
  73   1          //append length mod (2^64) to message
  74   1       
  75   1          for (new_len = initial_len + 1; new_len % (512/8) != 448/8; new_len++)
  76   1              ;
  77   1       
  78   1          msg = (uint8_t*)malloc(new_len + 8);
  79   1          memcpy(msg, initial_msg, initial_len);
  80   1          msg[initial_len] = 0x80; // append the "1" bit; most significant bit is "first"
  81   1          for (offset = initial_len + 1; offset < new_len; offset++)
  82   1              msg[offset] = 0; // append "0" bits
  83   1       
  84   1          // append the len in bits at the end of the buffer.
  85   1          to_bytes(initial_len*8, msg + new_len);
  86   1          // initial_len>>29 == initial_len*8>>32, but avoids overflow.
  87   1          to_bytes(initial_len>>29, msg + new_len + 4);
  88   1       
  89   1          // Process the message in successive 512-bit chunks:
  90   1          //for each 512-bit chunk of message:
  91   1          for(offset=0; offset<new_len; offset += (512/8)) {
  92   2       
  93   2              // break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15
  94   2              for (i = 0; i < 16; i++)
  95   2                  w[i] = to_int32(msg + offset + i*4);
  96   2       
  97   2              // Initialize hash value for this chunk:
  98   2              a = h0;
  99   2              b = h1;
 100   2              c = h2;
 101   2              d = h3;
 102   2       
 103   2              // Main loop:
 104   2              for(i = 0; i<64; i++) {
 105   3       
 106   3                  if (i < 16) {
 107   4                      f = (b & c) | ((~b) & d);
 108   4                      g = i;
 109   4                  } else if (i < 32) {
 110   4                      f = (d & b) | ((~d) & c);
 111   4                      g = (5*i + 1) % 16;
 112   4                  } else if (i < 48) {
 113   4                      f = b ^ c ^ d;
 114   4                      g = (3*i + 5) % 16;          
 115   4                  } else {
C51 COMPILER V9.59.0.0   MD5                                                               12/05/2018 17:39:02 PAGE 3   

 116   4                      f = c ^ (b | (~d));
 117   4                      g = (7*i) % 16;
 118   4                  }
 119   3       
 120   3                  temp = d;
 121   3                  d = c;
 122   3                  c = b;
 123   3                  b = b + LEFTROTATE((a + f + k[i] + w[g]), r[i]);
 124   3                  a = temp;
 125   3       
 126   3              }
 127   2       
 128   2              // Add this chunk's hash to result so far:
 129   2              h0 += a;
 130   2              h1 += b;
 131   2              h2 += c;
 132   2              h3 += d;
 133   2       
 134   2          }
 135   1       
 136   1          // cleanup
 137   1          free(msg);
 138   1       
 139   1          //var char digest[16] := h0 append h1 append h2 append h3 //(Output is in little-endian)
 140   1          to_bytes(h0, digest);
 141   1          to_bytes(h1, digest + 4);
 142   1          to_bytes(h2, digest + 8);
 143   1          to_bytes(h3, digest + 12);
 144   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2363    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----     134
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
